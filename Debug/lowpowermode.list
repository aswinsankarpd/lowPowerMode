
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800c2a8  0800c2a8  0000d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c658  0800c658  0000d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c660  0800c660  0000d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c664  0800c664  0000d664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000ec  24000000  0800c668  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  240000ec  0800c754  0000e0ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000890  0800c754  0000e890  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a279  00000000  00000000  0000e11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c0a  00000000  00000000  00028393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c0  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c9c  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362d0  00000000  00000000  0002dcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c8f7  00000000  00000000  00063fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149c52  00000000  00000000  000808c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ca515  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d48  00000000  00000000  001ca558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001cf2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000ec 	.word	0x240000ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c290 	.word	0x0800c290

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000f0 	.word	0x240000f0
 800030c:	0800c290 	.word	0x0800c290

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fa85 	bl	800abd8 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fa81 	bl	800abf0 <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fdd5 	bl	800b2a2 <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fdcf 	bl	800b2a2 <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000308 	.word	0x24000308
 8000710:	24000108 	.word	0x24000108

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a fa66 	bl	800ac10 <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a faed 	bl	800ad2a <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000108 	.word	0x24000108

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fd98 	bl	800b2b4 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fd8b 	bl	800b2b4 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fc98 	bl	800b1b4 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fbdf 	bl	8008054 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000054 	.word	0x24000054
 80008a4:	0800c2dc 	.word	0x0800c2dc
 80008a8:	24000108 	.word	0x24000108
 80008ac:	24000308 	.word	0x24000308
 80008b0:	24000330 	.word	0x24000330
 80008b4:	0800c2e0 	.word	0x0800c2e0
 80008b8:	0800c2f4 	.word	0x0800c2f4
 80008bc:	24000558 	.word	0x24000558

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 ff6e 	bl	800a7bc <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fc55 	bl	800b1b4 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fb9d 	bl	8008054 <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c2f8 	.word	0x0800c2f8
 8000928:	24000558 	.word	0x24000558

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fcab 	bl	800b2b4 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a fa26 	bl	800adb4 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fc98 	bl	800b2b4 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fc80 	bl	800b2b4 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a f9fb 	bl	800adb4 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fc6d 	bl	800b2b4 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 fe97 	bl	800a72c <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fbd5 	bl	800b1b4 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fb1d 	bl	8008054 <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c344 	.word	0x0800c344
 8000a28:	0800c32c 	.word	0x0800c32c
 8000a2c:	0800c330 	.word	0x0800c330
 8000a30:	0800c334 	.word	0x0800c334
 8000a34:	24000558 	.word	0x24000558

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fc25 	bl	800b2b4 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a f9a0 	bl	800adb4 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fc12 	bl	800b2b4 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fbfa 	bl	800b2b4 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a f975 	bl	800adb4 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fbe7 	bl	800b2b4 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 fe87 	bl	800a818 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fb4f 	bl	800b1b4 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fa97 	bl	8008054 <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c344 	.word	0x0800c344
 8000b34:	0800c32c 	.word	0x0800c32c
 8000b38:	0800c330 	.word	0x0800c330
 8000b3c:	0800c348 	.word	0x0800c348
 8000b40:	24000558 	.word	0x24000558

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <setCSleep+0x34>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f00a fb2d 	bl	800b1b4 <sniprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <setCSleep+0x38>)
 8000b66:	f007 fa75 	bl	8008054 <HAL_UART_Transmit>

	startLowPowerMode();
 8000b6a:	f009 fd7f 	bl	800a66c <startLowPowerMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800c358 	.word	0x0800c358
 8000b7c:	24000558 	.word	0x24000558

08000b80 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3308      	adds	r3, #8
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	491f      	ldr	r1, [pc, #124]	@ (8000c14 <setGreenLed+0x94>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fbba 	bl	8000310 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10d      	bne.n	8000bbe <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <setGreenLed+0x98>)
 8000ba8:	f003 ff54 	bl	8004a54 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <setGreenLed+0x9c>)
 8000bae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb2:	6838      	ldr	r0, [r7, #0]
 8000bb4:	f00a fafe 	bl	800b1b4 <sniprintf>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	81fb      	strh	r3, [r7, #14]
 8000bbc:	e01f      	b.n	8000bfe <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4916      	ldr	r1, [pc, #88]	@ (8000c20 <setGreenLed+0xa0>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fba2 	bl	8000310 <strcmp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10d      	bne.n	8000bee <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <setGreenLed+0x98>)
 8000bd8:	f003 ff3c 	bl	8004a54 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000bdc:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <setGreenLed+0xa4>)
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	6838      	ldr	r0, [r7, #0]
 8000be4:	f00a fae6 	bl	800b1b4 <sniprintf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81fb      	strh	r3, [r7, #14]
 8000bec:	e007      	b.n	8000bfe <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <setGreenLed+0xa8>)
 8000bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f00a fadd 	bl	800b1b4 <sniprintf>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	2364      	movs	r3, #100	@ 0x64
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <setGreenLed+0xac>)
 8000c06:	f007 fa25 	bl	8008054 <HAL_UART_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800c378 	.word	0x0800c378
 8000c18:	58020400 	.word	0x58020400
 8000c1c:	0800c37c 	.word	0x0800c37c
 8000c20:	0800c38c 	.word	0x0800c38c
 8000c24:	0800c390 	.word	0x0800c390
 8000c28:	0800c3a4 	.word	0x0800c3a4
 8000c2c:	24000558 	.word	0x24000558

08000c30 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c34:	f009 ffb2 	bl	800ab9c <debugUartInit>

	RTCInit();
 8000c38:	f009 fd5a 	bl	800a6f0 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <systemInit+0x24>)
 8000c42:	f003 ff07 	bl	8004a54 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c46:	2210      	movs	r2, #16
 8000c48:	4903      	ldr	r1, [pc, #12]	@ (8000c58 <systemInit+0x28>)
 8000c4a:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <systemInit+0x2c>)
 8000c4c:	f007 fa90 	bl	8008170 <HAL_UART_Transmit_IT>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58020400 	.word	0x58020400
 8000c58:	0800c3b0 	.word	0x0800c3b0
 8000c5c:	24000558 	.word	0x24000558

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	200b      	movs	r0, #11
 8000c8a:	f000 fece 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f000 fee5 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b90      	ldr	r3, [pc, #576]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc6:	4b8c      	ldr	r3, [pc, #560]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	4b88      	ldr	r3, [pc, #544]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	4a87      	ldr	r2, [pc, #540]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce4:	4b84      	ldr	r3, [pc, #528]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b81      	ldr	r3, [pc, #516]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b7d      	ldr	r3, [pc, #500]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b79      	ldr	r3, [pc, #484]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a78      	ldr	r2, [pc, #480]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b75      	ldr	r3, [pc, #468]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b72      	ldr	r3, [pc, #456]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a70      	ldr	r2, [pc, #448]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a69      	ldr	r2, [pc, #420]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b66      	ldr	r3, [pc, #408]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a61      	ldr	r2, [pc, #388]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d8e:	485b      	ldr	r0, [pc, #364]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000d90:	f003 fe60 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9a:	4859      	ldr	r0, [pc, #356]	@ (8000f00 <MX_GPIO_Init+0x260>)
 8000d9c:	f003 fe5a 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2102      	movs	r1, #2
 8000da4:	4857      	ldr	r0, [pc, #348]	@ (8000f04 <MX_GPIO_Init+0x264>)
 8000da6:	f003 fe55 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4851      	ldr	r0, [pc, #324]	@ (8000f08 <MX_GPIO_Init+0x268>)
 8000dc2:	f003 fc9f 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc6:	2332      	movs	r3, #50	@ 0x32
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4849      	ldr	r0, [pc, #292]	@ (8000f08 <MX_GPIO_Init+0x268>)
 8000de2:	f003 fc8f 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000de6:	2386      	movs	r3, #134	@ 0x86
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4842      	ldr	r0, [pc, #264]	@ (8000f0c <MX_GPIO_Init+0x26c>)
 8000e02:	f003 fc7f 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e06:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4837      	ldr	r0, [pc, #220]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000e20:	f003 fc70 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482e      	ldr	r0, [pc, #184]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000e42:	f003 fc5f 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_GPIO_Init+0x260>)
 8000e60:	f003 fc50 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <MX_GPIO_Init+0x270>)
 8000e7a:	f003 fc43 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e90:	230a      	movs	r3, #10
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <MX_GPIO_Init+0x26c>)
 8000e9c:	f003 fc32 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ea0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <MX_GPIO_Init+0x270>)
 8000ebe:	f003 fc21 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_GPIO_Init+0x264>)
 8000eda:	f003 fc13 	bl	8004704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2028      	movs	r0, #40	@ 0x28
 8000ee4:	f000 fda1 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee8:	2028      	movs	r0, #40	@ 0x28
 8000eea:	f000 fdb8 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	@ 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	58021000 	.word	0x58021000
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	58021800 	.word	0x58021800

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fc1a 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f810 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff febe 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f24:	f7ff fe9c 	bl	8000c60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f28:	f000 faf8 	bl	800151c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000f2c:	f000 f87e 	bl	800102c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000f30:	f7ff fe7e 	bl	8000c30 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000f34:	f7ff fbc4 	bl	80006c0 <debugCLITask>

	  lowPowerModeTask();
 8000f38:	f009 fb60 	bl	800a5fc <lowPowerModeTask>
	  debugCLITask();
 8000f3c:	bf00      	nop
 8000f3e:	e7f9      	b.n	8000f34 <main+0x20>

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09c      	sub	sp, #112	@ 0x70
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4a:	224c      	movs	r2, #76	@ 0x4c
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00a f9a7 	bl	800b2a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2220      	movs	r2, #32
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00a f9a1 	bl	800b2a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f60:	2002      	movs	r0, #2
 8000f62:	f003 fddf 	bl	8004b24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <SystemClock_Config+0xdc>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800101c <SystemClock_Config+0xdc>)
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <SystemClock_Config+0xdc>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f82:	bf00      	nop
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <SystemClock_Config+0xdc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f90:	d1f8      	bne.n	8000f84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f92:	2309      	movs	r3, #9
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000fac:	f240 1313 	movw	r3, #275	@ 0x113
 8000fb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fdea 	bl	8004ba8 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fda:	f000 f821 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	233f      	movs	r3, #63	@ 0x3f
 8000fe0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fea:	2308      	movs	r3, #8
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fee:	2340      	movs	r3, #64	@ 0x40
 8000ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff2:	2340      	movs	r3, #64	@ 0x40
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ffc:	2340      	movs	r3, #64	@ 0x40
 8000ffe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2103      	movs	r1, #3
 8001004:	4618      	mov	r0, r3
 8001006:	f004 f9a9 	bl	800535c <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001010:	f000 f806 	bl	8001020 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3770      	adds	r7, #112	@ 0x70
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024800 	.word	0x58024800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	@ 0x40
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2228      	movs	r2, #40	@ 0x28
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00a f928 	bl	800b2a2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001052:	4b3c      	ldr	r3, [pc, #240]	@ (8001144 <MX_RTC_Init+0x118>)
 8001054:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <MX_RTC_Init+0x11c>)
 8001056:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001058:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <MX_RTC_Init+0x118>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105e:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <MX_RTC_Init+0x118>)
 8001060:	227f      	movs	r2, #127	@ 0x7f
 8001062:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001064:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <MX_RTC_Init+0x118>)
 8001066:	22ff      	movs	r2, #255	@ 0xff
 8001068:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800106a:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <MX_RTC_Init+0x118>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001070:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <MX_RTC_Init+0x118>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <MX_RTC_Init+0x118>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107c:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <MX_RTC_Init+0x118>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001082:	4830      	ldr	r0, [pc, #192]	@ (8001144 <MX_RTC_Init+0x118>)
 8001084:	f006 fab8 	bl	80075f8 <HAL_RTC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800108e:	f7ff ffc7 	bl	8001020 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	4823      	ldr	r0, [pc, #140]	@ (8001144 <MX_RTC_Init+0x118>)
 80010b6:	f006 fb21 	bl	80076fc <HAL_RTC_SetTime>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010c0:	f7ff ffae 	bl	8001020 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	4817      	ldr	r0, [pc, #92]	@ (8001144 <MX_RTC_Init+0x118>)
 80010e6:	f006 fc03 	bl	80078f0 <HAL_RTC_SetDate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80010f0:	f7ff ff96 	bl	8001020 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800111e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_RTC_Init+0x118>)
 800112c:	f006 fcb6 	bl	8007a9c <HAL_RTC_SetAlarm_IT>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001136:	f7ff ff73 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3740      	adds	r7, #64	@ 0x40
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000530 	.word	0x24000530
 8001148:	58004000 	.word	0x58004000

0800114c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0b0      	sub	sp, #192	@ 0xc0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	22b8      	movs	r2, #184	@ 0xb8
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00a f8a0 	bl	800b2a2 <memset>
  if(rtcHandle->Instance==RTC)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_RTC_MspInit+0x6c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d121      	bne.n	80011b0 <HAL_RTC_MspInit+0x64>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800116c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001178:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fc75 	bl	8005a74 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001190:	f7ff ff46 	bl	8001020 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_RTC_MspInit+0x70>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_RTC_MspInit+0x70>)
 800119a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800119e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2029      	movs	r0, #41	@ 0x29
 80011a6:	f000 fc40 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011aa:	2029      	movs	r0, #41	@ 0x29
 80011ac:	f000 fc57 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	37c0      	adds	r7, #192	@ 0xc0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58004000 	.word	0x58004000
 80011bc:	58024400 	.word	0x58024400

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_MspInit+0x30>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011cc:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x30>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x30>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58024400 	.word	0x58024400

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <NMI_Handler+0x4>

080011fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <MemManage_Handler+0x4>

0800120c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <UsageFault_Handler+0x4>

0800121c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124a:	f000 faf3 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <DMA1_Stream0_IRQHandler+0x10>)
 800125a:	f001 ff41 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240005ec 	.word	0x240005ec

08001268 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <USART3_IRQHandler+0x10>)
 800126e:	f007 f85f 	bl	8008330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000558 	.word	0x24000558

0800127c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001280:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001284:	f003 fc19 	bl	8004aba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <RTC_Alarm_IRQHandler+0x10>)
 8001292:	f006 fd41 	bl	8007d18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000530 	.word	0x24000530

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_kill>:

int _kill(int pid, int sig)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ba:	f00a f8ad 	bl	800b418 <__errno>
 80012be:	4603      	mov	r3, r0
 80012c0:	2216      	movs	r2, #22
 80012c2:	601a      	str	r2, [r3, #0]
  return -1;
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_exit>:

void _exit (int status)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffe7 	bl	80012b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <_exit+0x12>

080012e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e00a      	b.n	800130e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f8:	f3af 8000 	nop.w
 80012fc:	4601      	mov	r1, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	b2ca      	uxtb	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbf0      	blt.n	80012f8 <_read+0x12>
  }

  return len;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e009      	b.n	8001346 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf1      	blt.n	8001332 <_write+0x12>
  }
  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_close>:

int _close(int file)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001380:	605a      	str	r2, [r3, #4]
  return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_isatty>:

int _isatty(int file)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f00a f812 	bl	800b418 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	24050000 	.word	0x24050000
 8001420:	00000400 	.word	0x00000400
 8001424:	24000554 	.word	0x24000554
 8001428:	24000890 	.word	0x24000890

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001430:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <SystemInit+0xd0>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a31      	ldr	r2, [pc, #196]	@ (80014fc <SystemInit+0xd0>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001440:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <SystemInit+0xd4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	2b06      	cmp	r3, #6
 800144a:	d807      	bhi.n	800145c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144c:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <SystemInit+0xd4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	4a2a      	ldr	r2, [pc, #168]	@ (8001500 <SystemInit+0xd4>)
 8001456:	f043 0307 	orr.w	r3, r3, #7
 800145a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <SystemInit+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a28      	ldr	r2, [pc, #160]	@ (8001504 <SystemInit+0xd8>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <SystemInit+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800146e:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <SystemInit+0xd8>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4924      	ldr	r1, [pc, #144]	@ (8001504 <SystemInit+0xd8>)
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <SystemInit+0xdc>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <SystemInit+0xd4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <SystemInit+0xd4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 030f 	bic.w	r3, r3, #15
 800148e:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <SystemInit+0xd4>)
 8001490:	f043 0307 	orr.w	r3, r3, #7
 8001494:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <SystemInit+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <SystemInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <SystemInit+0xd8>)
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <SystemInit+0xe0>)
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <SystemInit+0xd8>)
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <SystemInit+0xe4>)
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <SystemInit+0xd8>)
 80014b6:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <SystemInit+0xe8>)
 80014b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <SystemInit+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <SystemInit+0xd8>)
 80014c2:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <SystemInit+0xe8>)
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <SystemInit+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <SystemInit+0xd8>)
 80014ce:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <SystemInit+0xe8>)
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <SystemInit+0xd8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <SystemInit+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <SystemInit+0xd8>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <SystemInit+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <SystemInit+0xec>)
 80014ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	52002000 	.word	0x52002000
 8001504:	58024400 	.word	0x58024400
 8001508:	eaf6ed7f 	.word	0xeaf6ed7f
 800150c:	02020200 	.word	0x02020200
 8001510:	01ff0000 	.word	0x01ff0000
 8001514:	01010280 	.word	0x01010280
 8001518:	52004000 	.word	0x52004000

0800151c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001522:	4a23      	ldr	r2, [pc, #140]	@ (80015b0 <MX_USART3_UART_Init+0x94>)
 8001524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001526:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001564:	4811      	ldr	r0, [pc, #68]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001566:	f006 fd25 	bl	8007fb4 <HAL_UART_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001570:	f7ff fd56 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 8001578:	f008 ff55 	bl	800a426 <HAL_UARTEx_SetTxFifoThreshold>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001582:	f7ff fd4d 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 800158a:	f008 ff8a 	bl	800a4a2 <HAL_UARTEx_SetRxFifoThreshold>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001594:	f7ff fd44 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_USART3_UART_Init+0x90>)
 800159a:	f008 ff0b 	bl	800a3b4 <HAL_UARTEx_DisableFifoMode>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f7ff fd3c 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24000558 	.word	0x24000558
 80015b0:	40004800 	.word	0x40004800

080015b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0b8      	sub	sp, #224	@ 0xe0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	22b8      	movs	r2, #184	@ 0xb8
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f009 fe64 	bl	800b2a2 <memset>
  if(uartHandle->Instance==USART3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a42      	ldr	r2, [pc, #264]	@ (80016e8 <HAL_UART_MspInit+0x134>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d17d      	bne.n	80016e0 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e4:	f04f 0202 	mov.w	r2, #2
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fa3a 	bl	8005a74 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001606:	f7ff fd0b 	bl	8001020 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_UART_MspInit+0x138>)
 800160c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001610:	4a36      	ldr	r2, [pc, #216]	@ (80016ec <HAL_UART_MspInit+0x138>)
 8001612:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001616:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_UART_MspInit+0x138>)
 800161c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_UART_MspInit+0x138>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	4a2f      	ldr	r2, [pc, #188]	@ (80016ec <HAL_UART_MspInit+0x138>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <HAL_UART_MspInit+0x138>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001646:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800164a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001660:	2307      	movs	r3, #7
 8001662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800166a:	4619      	mov	r1, r3
 800166c:	4820      	ldr	r0, [pc, #128]	@ (80016f0 <HAL_UART_MspInit+0x13c>)
 800166e:	f003 f849 	bl	8004704 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 8001674:	4a20      	ldr	r2, [pc, #128]	@ (80016f8 <HAL_UART_MspInit+0x144>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 800167a:	222d      	movs	r2, #45	@ 0x2d
 800167c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 800168c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001690:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80016b2:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016b4:	f000 f9ee 	bl	8001a94 <HAL_DMA_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80016be:	f7ff fcaf 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <HAL_UART_MspInit+0x140>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2027      	movs	r0, #39	@ 0x27
 80016d6:	f000 f9a8 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016da:	2027      	movs	r0, #39	@ 0x27
 80016dc:	f000 f9bf 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016e0:	bf00      	nop
 80016e2:	37e0      	adds	r7, #224	@ 0xe0
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004800 	.word	0x40004800
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020c00 	.word	0x58020c00
 80016f4:	240005ec 	.word	0x240005ec
 80016f8:	40020010 	.word	0x40020010

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001700:	f7ff fe94 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f009 fe7b 	bl	800b424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fbf1 	bl	8000f14 <main>
  bx  lr
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001738:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800173c:	240000ec 	.word	0x240000ec
  ldr r2, =_sidata
 8001740:	0800c668 	.word	0x0800c668
  ldr r2, =_sbss
 8001744:	240000ec 	.word	0x240000ec
  ldr r4, =_ebss
 8001748:	24000890 	.word	0x24000890

0800174c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC3_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 f95c 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800175c:	f003 ffb4 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_Init+0x68>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	4913      	ldr	r1, [pc, #76]	@ (80017bc <HAL_Init+0x6c>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_Init+0x6c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <HAL_Init+0x70>)
 8001792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_Init+0x74>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f814 	bl	80017c8 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e002      	b.n	80017b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017aa:	f7ff fd09 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58024400 	.word	0x58024400
 80017bc:	0800c434 	.word	0x0800c434
 80017c0:	2400007c 	.word	0x2400007c
 80017c4:	24000078 	.word	0x24000078

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_InitTick+0x60>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e021      	b.n	8001820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_InitTick+0x64>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f941 	bl	8001a7a <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 f90b 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <HAL_InitTick+0x68>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	24000084 	.word	0x24000084
 800182c:	24000078 	.word	0x24000078
 8001830:	24000080 	.word	0x24000080

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	24000084 	.word	0x24000084
 8001858:	24000664 	.word	0x24000664

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	24000664 	.word	0x24000664

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x40>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	05fa0000 	.word	0x05fa0000

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	@ (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	@ (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff40 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff33 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa4 	bl	80019d0 <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fede 	bl	800185c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e312      	b.n	80020d2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a66      	ldr	r2, [pc, #408]	@ (8001c4c <HAL_DMA_Init+0x1b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a65      	ldr	r2, [pc, #404]	@ (8001c50 <HAL_DMA_Init+0x1bc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d045      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a63      	ldr	r2, [pc, #396]	@ (8001c54 <HAL_DMA_Init+0x1c0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a62      	ldr	r2, [pc, #392]	@ (8001c58 <HAL_DMA_Init+0x1c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d03b      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a60      	ldr	r2, [pc, #384]	@ (8001c5c <HAL_DMA_Init+0x1c8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c60 <HAL_DMA_Init+0x1cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	@ (8001c64 <HAL_DMA_Init+0x1d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02c      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c68 <HAL_DMA_Init+0x1d4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d027      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a5a      	ldr	r2, [pc, #360]	@ (8001c6c <HAL_DMA_Init+0x1d8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a59      	ldr	r2, [pc, #356]	@ (8001c70 <HAL_DMA_Init+0x1dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01d      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a57      	ldr	r2, [pc, #348]	@ (8001c74 <HAL_DMA_Init+0x1e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a56      	ldr	r2, [pc, #344]	@ (8001c78 <HAL_DMA_Init+0x1e4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a54      	ldr	r2, [pc, #336]	@ (8001c7c <HAL_DMA_Init+0x1e8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a53      	ldr	r2, [pc, #332]	@ (8001c80 <HAL_DMA_Init+0x1ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a51      	ldr	r2, [pc, #324]	@ (8001c84 <HAL_DMA_Init+0x1f0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Init+0xb8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a50      	ldr	r2, [pc, #320]	@ (8001c88 <HAL_DMA_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_DMA_Init+0xbc>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_DMA_Init+0xbe>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 813c 	beq.w	8001dd0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	@ (8001c4c <HAL_DMA_Init+0x1b8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04a      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a36      	ldr	r2, [pc, #216]	@ (8001c50 <HAL_DMA_Init+0x1bc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d045      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <HAL_DMA_Init+0x1c0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a33      	ldr	r2, [pc, #204]	@ (8001c58 <HAL_DMA_Init+0x1c4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d03b      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <HAL_DMA_Init+0x1c8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d036      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <HAL_DMA_Init+0x1cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d031      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <HAL_DMA_Init+0x1d0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02c      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_DMA_Init+0x1d4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_DMA_Init+0x1d8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c70 <HAL_DMA_Init+0x1dc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01d      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_DMA_Init+0x1e0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_DMA_Init+0x1e4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_DMA_Init+0x1e8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_DMA_Init+0x1ec>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Init+0x1f0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Init+0x174>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Init+0x1f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d108      	bne.n	8001c1a <HAL_DMA_Init+0x186>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_DMA_Init+0x196>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c2a:	e02f      	b.n	8001c8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2c:	f7ff fe16 	bl	800185c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d928      	bls.n	8001c8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e242      	b.n	80020d2 <HAL_DMA_Init+0x63e>
 8001c4c:	40020010 	.word	0x40020010
 8001c50:	40020028 	.word	0x40020028
 8001c54:	40020040 	.word	0x40020040
 8001c58:	40020058 	.word	0x40020058
 8001c5c:	40020070 	.word	0x40020070
 8001c60:	40020088 	.word	0x40020088
 8001c64:	400200a0 	.word	0x400200a0
 8001c68:	400200b8 	.word	0x400200b8
 8001c6c:	40020410 	.word	0x40020410
 8001c70:	40020428 	.word	0x40020428
 8001c74:	40020440 	.word	0x40020440
 8001c78:	40020458 	.word	0x40020458
 8001c7c:	40020470 	.word	0x40020470
 8001c80:	40020488 	.word	0x40020488
 8001c84:	400204a0 	.word	0x400204a0
 8001c88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1c8      	bne.n	8001c2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4b83      	ldr	r3, [pc, #524]	@ (8001eb4 <HAL_DMA_Init+0x420>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b28      	cmp	r3, #40	@ 0x28
 8001cf6:	d903      	bls.n	8001d00 <HAL_DMA_Init+0x26c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cfe:	d91f      	bls.n	8001d40 <HAL_DMA_Init+0x2ac>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d06:	d903      	bls.n	8001d10 <HAL_DMA_Init+0x27c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b42      	cmp	r3, #66	@ 0x42
 8001d0e:	d917      	bls.n	8001d40 <HAL_DMA_Init+0x2ac>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b46      	cmp	r3, #70	@ 0x46
 8001d16:	d903      	bls.n	8001d20 <HAL_DMA_Init+0x28c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b48      	cmp	r3, #72	@ 0x48
 8001d1e:	d90f      	bls.n	8001d40 <HAL_DMA_Init+0x2ac>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d26:	d903      	bls.n	8001d30 <HAL_DMA_Init+0x29c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b52      	cmp	r3, #82	@ 0x52
 8001d2e:	d907      	bls.n	8001d40 <HAL_DMA_Init+0x2ac>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b73      	cmp	r3, #115	@ 0x73
 8001d36:	d905      	bls.n	8001d44 <HAL_DMA_Init+0x2b0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b77      	cmp	r3, #119	@ 0x77
 8001d3e:	d801      	bhi.n	8001d44 <HAL_DMA_Init+0x2b0>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Init+0x2b2>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d50:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d117      	bne.n	8001dac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00e      	beq.n	8001dac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f002 fb2e 	bl	80043f0 <DMA_CheckFifoParam>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2240      	movs	r2, #64	@ 0x40
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e192      	b.n	80020d2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f002 fa69 	bl	800428c <DMA_CalcBaseAndBitshift>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	223f      	movs	r2, #63	@ 0x3f
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	e0c8      	b.n	8001f62 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a38      	ldr	r2, [pc, #224]	@ (8001eb8 <HAL_DMA_Init+0x424>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d022      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <HAL_DMA_Init+0x428>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d01d      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a35      	ldr	r2, [pc, #212]	@ (8001ec0 <HAL_DMA_Init+0x42c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a34      	ldr	r2, [pc, #208]	@ (8001ec4 <HAL_DMA_Init+0x430>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <HAL_DMA_Init+0x434>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <HAL_DMA_Init+0x438>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <HAL_DMA_Init+0x43c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_DMA_Init+0x38c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed4 <HAL_DMA_Init+0x440>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Init+0x390>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_DMA_Init+0x392>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8092 	beq.w	8001f50 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <HAL_DMA_Init+0x424>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d021      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <HAL_DMA_Init+0x428>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01c      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <HAL_DMA_Init+0x42c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d017      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_DMA_Init+0x430>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d012      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_DMA_Init+0x434>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ecc <HAL_DMA_Init+0x438>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d008      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <HAL_DMA_Init+0x43c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <HAL_DMA_Init+0x3e6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_DMA_Init+0x440>)
 8001e78:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_DMA_Init+0x444>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ea0:	d01c      	beq.n	8001edc <HAL_DMA_Init+0x448>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b80      	cmp	r3, #128	@ 0x80
 8001ea8:	d102      	bne.n	8001eb0 <HAL_DMA_Init+0x41c>
 8001eaa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001eae:	e016      	b.n	8001ede <HAL_DMA_Init+0x44a>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e014      	b.n	8001ede <HAL_DMA_Init+0x44a>
 8001eb4:	fe10803f 	.word	0xfe10803f
 8001eb8:	58025408 	.word	0x58025408
 8001ebc:	5802541c 	.word	0x5802541c
 8001ec0:	58025430 	.word	0x58025430
 8001ec4:	58025444 	.word	0x58025444
 8001ec8:	58025458 	.word	0x58025458
 8001ecc:	5802546c 	.word	0x5802546c
 8001ed0:	58025480 	.word	0x58025480
 8001ed4:	58025494 	.word	0x58025494
 8001ed8:	fffe000f 	.word	0xfffe000f
 8001edc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_DMA_Init+0x648>)
 8001f24:	4413      	add	r3, r2
 8001f26:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_DMA_Init+0x64c>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	009a      	lsls	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f002 f9a9 	bl	800428c <DMA_CalcBaseAndBitshift>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2201      	movs	r2, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e008      	b.n	8001f62 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0b7      	b.n	80020d2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a5f      	ldr	r2, [pc, #380]	@ (80020e4 <HAL_DMA_Init+0x650>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d072      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5d      	ldr	r2, [pc, #372]	@ (80020e8 <HAL_DMA_Init+0x654>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d06d      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80020ec <HAL_DMA_Init+0x658>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d068      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a5a      	ldr	r2, [pc, #360]	@ (80020f0 <HAL_DMA_Init+0x65c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d063      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a59      	ldr	r2, [pc, #356]	@ (80020f4 <HAL_DMA_Init+0x660>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a57      	ldr	r2, [pc, #348]	@ (80020f8 <HAL_DMA_Init+0x664>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d059      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a56      	ldr	r2, [pc, #344]	@ (80020fc <HAL_DMA_Init+0x668>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d054      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a54      	ldr	r2, [pc, #336]	@ (8002100 <HAL_DMA_Init+0x66c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d04f      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a53      	ldr	r2, [pc, #332]	@ (8002104 <HAL_DMA_Init+0x670>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d04a      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a51      	ldr	r2, [pc, #324]	@ (8002108 <HAL_DMA_Init+0x674>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d045      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a50      	ldr	r2, [pc, #320]	@ (800210c <HAL_DMA_Init+0x678>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d040      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002110 <HAL_DMA_Init+0x67c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d03b      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	@ (8002114 <HAL_DMA_Init+0x680>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8002118 <HAL_DMA_Init+0x684>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800211c <HAL_DMA_Init+0x688>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d02c      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	@ (8002120 <HAL_DMA_Init+0x68c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d027      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <HAL_DMA_Init+0x690>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a45      	ldr	r2, [pc, #276]	@ (8002128 <HAL_DMA_Init+0x694>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a44      	ldr	r2, [pc, #272]	@ (800212c <HAL_DMA_Init+0x698>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d018      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	@ (8002130 <HAL_DMA_Init+0x69c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a41      	ldr	r2, [pc, #260]	@ (8002134 <HAL_DMA_Init+0x6a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3f      	ldr	r2, [pc, #252]	@ (8002138 <HAL_DMA_Init+0x6a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a3e      	ldr	r2, [pc, #248]	@ (800213c <HAL_DMA_Init+0x6a8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Init+0x5be>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3c      	ldr	r2, [pc, #240]	@ (8002140 <HAL_DMA_Init+0x6ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Init+0x5c2>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_DMA_Init+0x5c4>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d032      	beq.n	80020c2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 fa43 	bl	80044e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b80      	cmp	r3, #128	@ 0x80
 8002068:	d102      	bne.n	8002070 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002084:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_DMA_Init+0x61c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d80c      	bhi.n	80020b0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f002 fac0 	bl	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e008      	b.n	80020c2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	a7fdabf8 	.word	0xa7fdabf8
 80020e0:	cccccccd 	.word	0xcccccccd
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
 8002124:	58025408 	.word	0x58025408
 8002128:	5802541c 	.word	0x5802541c
 800212c:	58025430 	.word	0x58025430
 8002130:	58025444 	.word	0x58025444
 8002134:	58025458 	.word	0x58025458
 8002138:	5802546c 	.word	0x5802546c
 800213c:	58025480 	.word	0x58025480
 8002140:	58025494 	.word	0x58025494

08002144 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e226      	b.n	80025ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_DMA_Start_IT+0x2a>
 800216a:	2302      	movs	r3, #2
 800216c:	e21f      	b.n	80025ae <HAL_DMA_Start_IT+0x46a>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 820a 	bne.w	8002598 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a68      	ldr	r2, [pc, #416]	@ (8002338 <HAL_DMA_Start_IT+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04a      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a66      	ldr	r2, [pc, #408]	@ (800233c <HAL_DMA_Start_IT+0x1f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d045      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a65      	ldr	r2, [pc, #404]	@ (8002340 <HAL_DMA_Start_IT+0x1fc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d040      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a63      	ldr	r2, [pc, #396]	@ (8002344 <HAL_DMA_Start_IT+0x200>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d03b      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a62      	ldr	r2, [pc, #392]	@ (8002348 <HAL_DMA_Start_IT+0x204>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d036      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a60      	ldr	r2, [pc, #384]	@ (800234c <HAL_DMA_Start_IT+0x208>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002350 <HAL_DMA_Start_IT+0x20c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d02c      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002354 <HAL_DMA_Start_IT+0x210>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d027      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002358 <HAL_DMA_Start_IT+0x214>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5a      	ldr	r2, [pc, #360]	@ (800235c <HAL_DMA_Start_IT+0x218>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a59      	ldr	r2, [pc, #356]	@ (8002360 <HAL_DMA_Start_IT+0x21c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a57      	ldr	r2, [pc, #348]	@ (8002364 <HAL_DMA_Start_IT+0x220>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <HAL_DMA_Start_IT+0x224>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a54      	ldr	r2, [pc, #336]	@ (800236c <HAL_DMA_Start_IT+0x228>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a53      	ldr	r2, [pc, #332]	@ (8002370 <HAL_DMA_Start_IT+0x22c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Start_IT+0xee>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a51      	ldr	r2, [pc, #324]	@ (8002374 <HAL_DMA_Start_IT+0x230>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <HAL_DMA_Start_IT+0x100>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_DMA_Start_IT+0x110>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f001 fe6a 	bl	8003f34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a34      	ldr	r2, [pc, #208]	@ (8002338 <HAL_DMA_Start_IT+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a33      	ldr	r2, [pc, #204]	@ (800233c <HAL_DMA_Start_IT+0x1f8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d045      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <HAL_DMA_Start_IT+0x1fc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d040      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a30      	ldr	r2, [pc, #192]	@ (8002344 <HAL_DMA_Start_IT+0x200>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d03b      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	@ (8002348 <HAL_DMA_Start_IT+0x204>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d036      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2d      	ldr	r2, [pc, #180]	@ (800234c <HAL_DMA_Start_IT+0x208>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d031      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002350 <HAL_DMA_Start_IT+0x20c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002354 <HAL_DMA_Start_IT+0x210>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d027      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <HAL_DMA_Start_IT+0x214>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	@ (800235c <HAL_DMA_Start_IT+0x218>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01d      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	@ (8002360 <HAL_DMA_Start_IT+0x21c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d018      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	@ (8002364 <HAL_DMA_Start_IT+0x220>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	@ (8002368 <HAL_DMA_Start_IT+0x224>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	@ (800236c <HAL_DMA_Start_IT+0x228>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002370 <HAL_DMA_Start_IT+0x22c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_DMA_Start_IT+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002374 <HAL_DMA_Start_IT+0x230>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Start_IT+0x1c0>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_DMA_Start_IT+0x1c2>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 021e 	bic.w	r2, r3, #30
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0216 	orr.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03e      	beq.n	80023a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0208 	orr.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e035      	b.n	80023a4 <HAL_DMA_Start_IT+0x260>
 8002338:	40020010 	.word	0x40020010
 800233c:	40020028 	.word	0x40020028
 8002340:	40020040 	.word	0x40020040
 8002344:	40020058 	.word	0x40020058
 8002348:	40020070 	.word	0x40020070
 800234c:	40020088 	.word	0x40020088
 8002350:	400200a0 	.word	0x400200a0
 8002354:	400200b8 	.word	0x400200b8
 8002358:	40020410 	.word	0x40020410
 800235c:	40020428 	.word	0x40020428
 8002360:	40020440 	.word	0x40020440
 8002364:	40020458 	.word	0x40020458
 8002368:	40020470 	.word	0x40020470
 800236c:	40020488 	.word	0x40020488
 8002370:	400204a0 	.word	0x400204a0
 8002374:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020e 	bic.w	r2, r3, #14
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 020a 	orr.w	r2, r2, #10
 800238a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a83      	ldr	r2, [pc, #524]	@ (80025b8 <HAL_DMA_Start_IT+0x474>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d072      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a82      	ldr	r2, [pc, #520]	@ (80025bc <HAL_DMA_Start_IT+0x478>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d06d      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a80      	ldr	r2, [pc, #512]	@ (80025c0 <HAL_DMA_Start_IT+0x47c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d068      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7f      	ldr	r2, [pc, #508]	@ (80025c4 <HAL_DMA_Start_IT+0x480>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d063      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7d      	ldr	r2, [pc, #500]	@ (80025c8 <HAL_DMA_Start_IT+0x484>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d05e      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7c      	ldr	r2, [pc, #496]	@ (80025cc <HAL_DMA_Start_IT+0x488>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d059      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7a      	ldr	r2, [pc, #488]	@ (80025d0 <HAL_DMA_Start_IT+0x48c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d054      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a79      	ldr	r2, [pc, #484]	@ (80025d4 <HAL_DMA_Start_IT+0x490>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04f      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a77      	ldr	r2, [pc, #476]	@ (80025d8 <HAL_DMA_Start_IT+0x494>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a76      	ldr	r2, [pc, #472]	@ (80025dc <HAL_DMA_Start_IT+0x498>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d045      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a74      	ldr	r2, [pc, #464]	@ (80025e0 <HAL_DMA_Start_IT+0x49c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a73      	ldr	r2, [pc, #460]	@ (80025e4 <HAL_DMA_Start_IT+0x4a0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d03b      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a71      	ldr	r2, [pc, #452]	@ (80025e8 <HAL_DMA_Start_IT+0x4a4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d036      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a70      	ldr	r2, [pc, #448]	@ (80025ec <HAL_DMA_Start_IT+0x4a8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d031      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_DMA_Start_IT+0x4ac>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6d      	ldr	r2, [pc, #436]	@ (80025f4 <HAL_DMA_Start_IT+0x4b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6b      	ldr	r2, [pc, #428]	@ (80025f8 <HAL_DMA_Start_IT+0x4b4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6a      	ldr	r2, [pc, #424]	@ (80025fc <HAL_DMA_Start_IT+0x4b8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01d      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a68      	ldr	r2, [pc, #416]	@ (8002600 <HAL_DMA_Start_IT+0x4bc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d018      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a67      	ldr	r2, [pc, #412]	@ (8002604 <HAL_DMA_Start_IT+0x4c0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_DMA_Start_IT+0x4c4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a64      	ldr	r2, [pc, #400]	@ (800260c <HAL_DMA_Start_IT+0x4c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a62      	ldr	r2, [pc, #392]	@ (8002610 <HAL_DMA_Start_IT+0x4cc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Start_IT+0x350>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a61      	ldr	r2, [pc, #388]	@ (8002614 <HAL_DMA_Start_IT+0x4d0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Start_IT+0x354>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_DMA_Start_IT+0x356>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01a      	beq.n	80024d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a37      	ldr	r2, [pc, #220]	@ (80025b8 <HAL_DMA_Start_IT+0x474>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04a      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a36      	ldr	r2, [pc, #216]	@ (80025bc <HAL_DMA_Start_IT+0x478>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d045      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a34      	ldr	r2, [pc, #208]	@ (80025c0 <HAL_DMA_Start_IT+0x47c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d040      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a33      	ldr	r2, [pc, #204]	@ (80025c4 <HAL_DMA_Start_IT+0x480>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03b      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a31      	ldr	r2, [pc, #196]	@ (80025c8 <HAL_DMA_Start_IT+0x484>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a30      	ldr	r2, [pc, #192]	@ (80025cc <HAL_DMA_Start_IT+0x488>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d031      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2e      	ldr	r2, [pc, #184]	@ (80025d0 <HAL_DMA_Start_IT+0x48c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02c      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	@ (80025d4 <HAL_DMA_Start_IT+0x490>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2b      	ldr	r2, [pc, #172]	@ (80025d8 <HAL_DMA_Start_IT+0x494>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d022      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2a      	ldr	r2, [pc, #168]	@ (80025dc <HAL_DMA_Start_IT+0x498>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	@ (80025e0 <HAL_DMA_Start_IT+0x49c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <HAL_DMA_Start_IT+0x4a0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <HAL_DMA_Start_IT+0x4a4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a24      	ldr	r2, [pc, #144]	@ (80025ec <HAL_DMA_Start_IT+0x4a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <HAL_DMA_Start_IT+0x4ac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Start_IT+0x430>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a21      	ldr	r2, [pc, #132]	@ (80025f4 <HAL_DMA_Start_IT+0x4b0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <HAL_DMA_Start_IT+0x442>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e012      	b.n	80025ac <HAL_DMA_Start_IT+0x468>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e009      	b.n	80025ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494

08002618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff f91c 	bl	800185c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2dc      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d008      	beq.n	800264e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	@ 0x80
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e2cd      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a76      	ldr	r2, [pc, #472]	@ (800282c <HAL_DMA_Abort+0x214>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04a      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a74      	ldr	r2, [pc, #464]	@ (8002830 <HAL_DMA_Abort+0x218>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d045      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a73      	ldr	r2, [pc, #460]	@ (8002834 <HAL_DMA_Abort+0x21c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d040      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a71      	ldr	r2, [pc, #452]	@ (8002838 <HAL_DMA_Abort+0x220>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d03b      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a70      	ldr	r2, [pc, #448]	@ (800283c <HAL_DMA_Abort+0x224>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d036      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6e      	ldr	r2, [pc, #440]	@ (8002840 <HAL_DMA_Abort+0x228>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6d      	ldr	r2, [pc, #436]	@ (8002844 <HAL_DMA_Abort+0x22c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d02c      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6b      	ldr	r2, [pc, #428]	@ (8002848 <HAL_DMA_Abort+0x230>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6a      	ldr	r2, [pc, #424]	@ (800284c <HAL_DMA_Abort+0x234>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	@ (8002850 <HAL_DMA_Abort+0x238>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_DMA_Abort+0x23c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_DMA_Abort+0x240>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a64      	ldr	r2, [pc, #400]	@ (800285c <HAL_DMA_Abort+0x244>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a62      	ldr	r2, [pc, #392]	@ (8002860 <HAL_DMA_Abort+0x248>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d009      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a61      	ldr	r2, [pc, #388]	@ (8002864 <HAL_DMA_Abort+0x24c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002868 <HAL_DMA_Abort+0x250>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Abort+0xda>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_DMA_Abort+0xdc>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 021e 	bic.w	r2, r2, #30
 8002706:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002716:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e00a      	b.n	8002736 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020e 	bic.w	r2, r2, #14
 800272e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3c      	ldr	r2, [pc, #240]	@ (800282c <HAL_DMA_Abort+0x214>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d072      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3a      	ldr	r2, [pc, #232]	@ (8002830 <HAL_DMA_Abort+0x218>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d06d      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a39      	ldr	r2, [pc, #228]	@ (8002834 <HAL_DMA_Abort+0x21c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d068      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a37      	ldr	r2, [pc, #220]	@ (8002838 <HAL_DMA_Abort+0x220>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d063      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a36      	ldr	r2, [pc, #216]	@ (800283c <HAL_DMA_Abort+0x224>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_DMA_Abort+0x228>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d059      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a33      	ldr	r2, [pc, #204]	@ (8002844 <HAL_DMA_Abort+0x22c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d054      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <HAL_DMA_Abort+0x230>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04f      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a30      	ldr	r2, [pc, #192]	@ (800284c <HAL_DMA_Abort+0x234>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2e      	ldr	r2, [pc, #184]	@ (8002850 <HAL_DMA_Abort+0x238>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2d      	ldr	r2, [pc, #180]	@ (8002854 <HAL_DMA_Abort+0x23c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_DMA_Abort+0x240>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <HAL_DMA_Abort+0x244>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a28      	ldr	r2, [pc, #160]	@ (8002860 <HAL_DMA_Abort+0x248>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a27      	ldr	r2, [pc, #156]	@ (8002864 <HAL_DMA_Abort+0x24c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a25      	ldr	r2, [pc, #148]	@ (8002868 <HAL_DMA_Abort+0x250>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a24      	ldr	r2, [pc, #144]	@ (800286c <HAL_DMA_Abort+0x254>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a22      	ldr	r2, [pc, #136]	@ (8002870 <HAL_DMA_Abort+0x258>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <HAL_DMA_Abort+0x25c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002878 <HAL_DMA_Abort+0x260>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <HAL_DMA_Abort+0x264>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1c      	ldr	r2, [pc, #112]	@ (8002880 <HAL_DMA_Abort+0x268>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <HAL_DMA_Abort+0x26c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_DMA_Abort+0x270>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d132      	bne.n	800288c <HAL_DMA_Abort+0x274>
 8002826:	2301      	movs	r3, #1
 8002828:	e031      	b.n	800288e <HAL_DMA_Abort+0x276>
 800282a:	bf00      	nop
 800282c:	40020010 	.word	0x40020010
 8002830:	40020028 	.word	0x40020028
 8002834:	40020040 	.word	0x40020040
 8002838:	40020058 	.word	0x40020058
 800283c:	40020070 	.word	0x40020070
 8002840:	40020088 	.word	0x40020088
 8002844:	400200a0 	.word	0x400200a0
 8002848:	400200b8 	.word	0x400200b8
 800284c:	40020410 	.word	0x40020410
 8002850:	40020428 	.word	0x40020428
 8002854:	40020440 	.word	0x40020440
 8002858:	40020458 	.word	0x40020458
 800285c:	40020470 	.word	0x40020470
 8002860:	40020488 	.word	0x40020488
 8002864:	400204a0 	.word	0x400204a0
 8002868:	400204b8 	.word	0x400204b8
 800286c:	58025408 	.word	0x58025408
 8002870:	5802541c 	.word	0x5802541c
 8002874:	58025430 	.word	0x58025430
 8002878:	58025444 	.word	0x58025444
 800287c:	58025458 	.word	0x58025458
 8002880:	5802546c 	.word	0x5802546c
 8002884:	58025480 	.word	0x58025480
 8002888:	58025494 	.word	0x58025494
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6d      	ldr	r2, [pc, #436]	@ (8002a5c <HAL_DMA_Abort+0x444>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04a      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a60 <HAL_DMA_Abort+0x448>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d045      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <HAL_DMA_Abort+0x44c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d040      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	@ (8002a68 <HAL_DMA_Abort+0x450>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03b      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a67      	ldr	r2, [pc, #412]	@ (8002a6c <HAL_DMA_Abort+0x454>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d036      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	@ (8002a70 <HAL_DMA_Abort+0x458>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a64      	ldr	r2, [pc, #400]	@ (8002a74 <HAL_DMA_Abort+0x45c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02c      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a62      	ldr	r2, [pc, #392]	@ (8002a78 <HAL_DMA_Abort+0x460>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a61      	ldr	r2, [pc, #388]	@ (8002a7c <HAL_DMA_Abort+0x464>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5f      	ldr	r2, [pc, #380]	@ (8002a80 <HAL_DMA_Abort+0x468>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01d      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a84 <HAL_DMA_Abort+0x46c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d018      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5c      	ldr	r2, [pc, #368]	@ (8002a88 <HAL_DMA_Abort+0x470>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_DMA_Abort+0x474>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a59      	ldr	r2, [pc, #356]	@ (8002a90 <HAL_DMA_Abort+0x478>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_DMA_Abort+0x47c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a56      	ldr	r2, [pc, #344]	@ (8002a98 <HAL_DMA_Abort+0x480>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <HAL_DMA_Abort+0x33c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e007      	b.n	8002964 <HAL_DMA_Abort+0x34c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002964:	e013      	b.n	800298e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7fe ff79 	bl	800185c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d90c      	bls.n	800298e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12d      	b.n	8002bea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e5      	bne.n	8002966 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a5c <HAL_DMA_Abort+0x444>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04a      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a60 <HAL_DMA_Abort+0x448>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <HAL_DMA_Abort+0x44c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d040      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a68 <HAL_DMA_Abort+0x450>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d03b      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_DMA_Abort+0x454>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d036      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <HAL_DMA_Abort+0x458>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a26      	ldr	r2, [pc, #152]	@ (8002a74 <HAL_DMA_Abort+0x45c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02c      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a24      	ldr	r2, [pc, #144]	@ (8002a78 <HAL_DMA_Abort+0x460>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_DMA_Abort+0x464>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <HAL_DMA_Abort+0x468>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <HAL_DMA_Abort+0x46c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <HAL_DMA_Abort+0x470>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <HAL_DMA_Abort+0x474>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	@ (8002a90 <HAL_DMA_Abort+0x478>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_DMA_Abort+0x47c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_DMA_Abort+0x480>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_DMA_Abort+0x426>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_DMA_Abort+0x428>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02b      	beq.n	8002a9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	223f      	movs	r2, #63	@ 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e02a      	b.n	8002ab2 <HAL_DMA_Abort+0x49a>
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <HAL_DMA_Abort+0x5dc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d072      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf8 <HAL_DMA_Abort+0x5e0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d06d      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4c      	ldr	r2, [pc, #304]	@ (8002bfc <HAL_DMA_Abort+0x5e4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d068      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_DMA_Abort+0x5e8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d063      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a49      	ldr	r2, [pc, #292]	@ (8002c04 <HAL_DMA_Abort+0x5ec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d05e      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a47      	ldr	r2, [pc, #284]	@ (8002c08 <HAL_DMA_Abort+0x5f0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d059      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <HAL_DMA_Abort+0x5f4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d054      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a44      	ldr	r2, [pc, #272]	@ (8002c10 <HAL_DMA_Abort+0x5f8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04f      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a43      	ldr	r2, [pc, #268]	@ (8002c14 <HAL_DMA_Abort+0x5fc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d04a      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a41      	ldr	r2, [pc, #260]	@ (8002c18 <HAL_DMA_Abort+0x600>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a40      	ldr	r2, [pc, #256]	@ (8002c1c <HAL_DMA_Abort+0x604>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d040      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3e      	ldr	r2, [pc, #248]	@ (8002c20 <HAL_DMA_Abort+0x608>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c24 <HAL_DMA_Abort+0x60c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3b      	ldr	r2, [pc, #236]	@ (8002c28 <HAL_DMA_Abort+0x610>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3a      	ldr	r2, [pc, #232]	@ (8002c2c <HAL_DMA_Abort+0x614>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	@ (8002c30 <HAL_DMA_Abort+0x618>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a37      	ldr	r2, [pc, #220]	@ (8002c34 <HAL_DMA_Abort+0x61c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	@ (8002c38 <HAL_DMA_Abort+0x620>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a34      	ldr	r2, [pc, #208]	@ (8002c3c <HAL_DMA_Abort+0x624>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	@ (8002c40 <HAL_DMA_Abort+0x628>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a31      	ldr	r2, [pc, #196]	@ (8002c44 <HAL_DMA_Abort+0x62c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <HAL_DMA_Abort+0x630>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <HAL_DMA_Abort+0x634>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c50 <HAL_DMA_Abort+0x638>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_DMA_Abort+0x58e>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_DMA_Abort+0x590>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002bb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	58025408 	.word	0x58025408
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025430 	.word	0x58025430
 8002c40:	58025444 	.word	0x58025444
 8002c44:	58025458 	.word	0x58025458
 8002c48:	5802546c 	.word	0x5802546c
 8002c4c:	58025480 	.word	0x58025480
 8002c50:	58025494 	.word	0x58025494

08002c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e237      	b.n	80030d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e22c      	b.n	80030d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5c      	ldr	r2, [pc, #368]	@ (8002df4 <HAL_DMA_Abort_IT+0x1a0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002df8 <HAL_DMA_Abort_IT+0x1a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a59      	ldr	r2, [pc, #356]	@ (8002dfc <HAL_DMA_Abort_IT+0x1a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_DMA_Abort_IT+0x1ac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_DMA_Abort_IT+0x1b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	@ (8002e08 <HAL_DMA_Abort_IT+0x1b4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a53      	ldr	r2, [pc, #332]	@ (8002e0c <HAL_DMA_Abort_IT+0x1b8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_DMA_Abort_IT+0x1bc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a50      	ldr	r2, [pc, #320]	@ (8002e14 <HAL_DMA_Abort_IT+0x1c0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4f      	ldr	r2, [pc, #316]	@ (8002e18 <HAL_DMA_Abort_IT+0x1c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_DMA_Abort_IT+0x1c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a4c      	ldr	r2, [pc, #304]	@ (8002e20 <HAL_DMA_Abort_IT+0x1cc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e24 <HAL_DMA_Abort_IT+0x1d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a49      	ldr	r2, [pc, #292]	@ (8002e28 <HAL_DMA_Abort_IT+0x1d4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a47      	ldr	r2, [pc, #284]	@ (8002e2c <HAL_DMA_Abort_IT+0x1d8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a46      	ldr	r2, [pc, #280]	@ (8002e30 <HAL_DMA_Abort_IT+0x1dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Abort_IT+0xcc>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_Abort_IT+0xce>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8086 	beq.w	8002e34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <HAL_DMA_Abort_IT+0x1a0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04a      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002df8 <HAL_DMA_Abort_IT+0x1a4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d045      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	@ (8002dfc <HAL_DMA_Abort_IT+0x1a8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d040      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2b      	ldr	r2, [pc, #172]	@ (8002e00 <HAL_DMA_Abort_IT+0x1ac>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d03b      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <HAL_DMA_Abort_IT+0x1b0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d036      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a28      	ldr	r2, [pc, #160]	@ (8002e08 <HAL_DMA_Abort_IT+0x1b4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d031      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <HAL_DMA_Abort_IT+0x1b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02c      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <HAL_DMA_Abort_IT+0x1bc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d027      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_DMA_Abort_IT+0x1c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <HAL_DMA_Abort_IT+0x1c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d01d      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <HAL_DMA_Abort_IT+0x1c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_DMA_Abort_IT+0x1cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <HAL_DMA_Abort_IT+0x1d0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <HAL_DMA_Abort_IT+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e2c <HAL_DMA_Abort_IT+0x1d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x17c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <HAL_DMA_Abort_IT+0x1dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <HAL_DMA_Abort_IT+0x18e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e178      	b.n	80030d4 <HAL_DMA_Abort_IT+0x480>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e16f      	b.n	80030d4 <HAL_DMA_Abort_IT+0x480>
 8002df4:	40020010 	.word	0x40020010
 8002df8:	40020028 	.word	0x40020028
 8002dfc:	40020040 	.word	0x40020040
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020070 	.word	0x40020070
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	400200a0 	.word	0x400200a0
 8002e10:	400200b8 	.word	0x400200b8
 8002e14:	40020410 	.word	0x40020410
 8002e18:	40020428 	.word	0x40020428
 8002e1c:	40020440 	.word	0x40020440
 8002e20:	40020458 	.word	0x40020458
 8002e24:	40020470 	.word	0x40020470
 8002e28:	40020488 	.word	0x40020488
 8002e2c:	400204a0 	.word	0x400204a0
 8002e30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020e 	bic.w	r2, r2, #14
 8002e42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6c      	ldr	r2, [pc, #432]	@ (8002ffc <HAL_DMA_Abort_IT+0x3a8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6b      	ldr	r2, [pc, #428]	@ (8003000 <HAL_DMA_Abort_IT+0x3ac>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a69      	ldr	r2, [pc, #420]	@ (8003004 <HAL_DMA_Abort_IT+0x3b0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a68      	ldr	r2, [pc, #416]	@ (8003008 <HAL_DMA_Abort_IT+0x3b4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a66      	ldr	r2, [pc, #408]	@ (800300c <HAL_DMA_Abort_IT+0x3b8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a65      	ldr	r2, [pc, #404]	@ (8003010 <HAL_DMA_Abort_IT+0x3bc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a63      	ldr	r2, [pc, #396]	@ (8003014 <HAL_DMA_Abort_IT+0x3c0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a62      	ldr	r2, [pc, #392]	@ (8003018 <HAL_DMA_Abort_IT+0x3c4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a60      	ldr	r2, [pc, #384]	@ (800301c <HAL_DMA_Abort_IT+0x3c8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8003020 <HAL_DMA_Abort_IT+0x3cc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5d      	ldr	r2, [pc, #372]	@ (8003024 <HAL_DMA_Abort_IT+0x3d0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003028 <HAL_DMA_Abort_IT+0x3d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800302c <HAL_DMA_Abort_IT+0x3d8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a59      	ldr	r2, [pc, #356]	@ (8003030 <HAL_DMA_Abort_IT+0x3dc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a57      	ldr	r2, [pc, #348]	@ (8003034 <HAL_DMA_Abort_IT+0x3e0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x290>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a56      	ldr	r2, [pc, #344]	@ (8003038 <HAL_DMA_Abort_IT+0x3e4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x2a2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_DMA_Abort_IT+0x2b2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002ffc <HAL_DMA_Abort_IT+0x3a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d072      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3a      	ldr	r2, [pc, #232]	@ (8003000 <HAL_DMA_Abort_IT+0x3ac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d06d      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a39      	ldr	r2, [pc, #228]	@ (8003004 <HAL_DMA_Abort_IT+0x3b0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d068      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a37      	ldr	r2, [pc, #220]	@ (8003008 <HAL_DMA_Abort_IT+0x3b4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d063      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	@ (800300c <HAL_DMA_Abort_IT+0x3b8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d05e      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <HAL_DMA_Abort_IT+0x3bc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d059      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a33      	ldr	r2, [pc, #204]	@ (8003014 <HAL_DMA_Abort_IT+0x3c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d054      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <HAL_DMA_Abort_IT+0x3c4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04f      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a30      	ldr	r2, [pc, #192]	@ (800301c <HAL_DMA_Abort_IT+0x3c8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2e      	ldr	r2, [pc, #184]	@ (8003020 <HAL_DMA_Abort_IT+0x3cc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <HAL_DMA_Abort_IT+0x3d0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2b      	ldr	r2, [pc, #172]	@ (8003028 <HAL_DMA_Abort_IT+0x3d4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	@ (800302c <HAL_DMA_Abort_IT+0x3d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <HAL_DMA_Abort_IT+0x3dc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_DMA_Abort_IT+0x3e0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	@ (8003038 <HAL_DMA_Abort_IT+0x3e4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_DMA_Abort_IT+0x3e8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_DMA_Abort_IT+0x3ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <HAL_DMA_Abort_IT+0x3f0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_DMA_Abort_IT+0x3f4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <HAL_DMA_Abort_IT+0x3f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <HAL_DMA_Abort_IT+0x3fc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HAL_DMA_Abort_IT+0x400>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x3a2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_DMA_Abort_IT+0x404>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d132      	bne.n	800305c <HAL_DMA_Abort_IT+0x408>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e031      	b.n	800305e <HAL_DMA_Abort_IT+0x40a>
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d028      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003070:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003090:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030ec:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_DMA_IRQHandler+0x1ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a67      	ldr	r2, [pc, #412]	@ (8003290 <HAL_DMA_IRQHandler+0x1b0>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5f      	ldr	r2, [pc, #380]	@ (8003294 <HAL_DMA_IRQHandler+0x1b4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5d      	ldr	r2, [pc, #372]	@ (8003298 <HAL_DMA_IRQHandler+0x1b8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5c      	ldr	r2, [pc, #368]	@ (800329c <HAL_DMA_IRQHandler+0x1bc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5a      	ldr	r2, [pc, #360]	@ (80032a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a59      	ldr	r2, [pc, #356]	@ (80032a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a57      	ldr	r2, [pc, #348]	@ (80032a8 <HAL_DMA_IRQHandler+0x1c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a56      	ldr	r2, [pc, #344]	@ (80032ac <HAL_DMA_IRQHandler+0x1cc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a54      	ldr	r2, [pc, #336]	@ (80032b0 <HAL_DMA_IRQHandler+0x1d0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a53      	ldr	r2, [pc, #332]	@ (80032b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a51      	ldr	r2, [pc, #324]	@ (80032b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a50      	ldr	r2, [pc, #320]	@ (80032bc <HAL_DMA_IRQHandler+0x1dc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4e      	ldr	r2, [pc, #312]	@ (80032c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a4d      	ldr	r2, [pc, #308]	@ (80032c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <HAL_DMA_IRQHandler+0x1e8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <HAL_DMA_IRQHandler+0x1ec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xd2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a48      	ldr	r2, [pc, #288]	@ (80032d0 <HAL_DMA_IRQHandler+0x1f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA_IRQHandler+0xd6>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 842b 	beq.w	8003a14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2208      	movs	r2, #8
 80031c8:	409a      	lsls	r2, r3
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a2 	beq.w	8003318 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003294 <HAL_DMA_IRQHandler+0x1b4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d04a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_DMA_IRQHandler+0x1b8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d045      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_DMA_IRQHandler+0x1bc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d040      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_DMA_IRQHandler+0x1c0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d03b      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d036      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_DMA_IRQHandler+0x1c8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d031      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	@ (80032ac <HAL_DMA_IRQHandler+0x1cc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02c      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	@ (80032b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d027      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_DMA_IRQHandler+0x1d4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d022      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	@ (80032b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d01d      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	@ (80032bc <HAL_DMA_IRQHandler+0x1dc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d018      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	@ (80032c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	@ (80032c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	@ (80032c8 <HAL_DMA_IRQHandler+0x1e8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_DMA_IRQHandler+0x1ec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_DMA_IRQHandler+0x194>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a18      	ldr	r2, [pc, #96]	@ (80032d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d12f      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x1f4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e02e      	b.n	80032e8 <HAL_DMA_IRQHandler+0x208>
 800328a:	bf00      	nop
 800328c:	24000078 	.word	0x24000078
 8003290:	1b4e81b5 	.word	0x1b4e81b5
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2208      	movs	r2, #8
 8003306:	409a      	lsls	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06e      	beq.n	800340c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a69      	ldr	r2, [pc, #420]	@ (80034d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	@ (80034dc <HAL_DMA_IRQHandler+0x3fc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a66      	ldr	r2, [pc, #408]	@ (80034e0 <HAL_DMA_IRQHandler+0x400>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a64      	ldr	r2, [pc, #400]	@ (80034e4 <HAL_DMA_IRQHandler+0x404>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a63      	ldr	r2, [pc, #396]	@ (80034e8 <HAL_DMA_IRQHandler+0x408>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a61      	ldr	r2, [pc, #388]	@ (80034ec <HAL_DMA_IRQHandler+0x40c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a60      	ldr	r2, [pc, #384]	@ (80034f0 <HAL_DMA_IRQHandler+0x410>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <HAL_DMA_IRQHandler+0x414>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5d      	ldr	r2, [pc, #372]	@ (80034f8 <HAL_DMA_IRQHandler+0x418>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5b      	ldr	r2, [pc, #364]	@ (80034fc <HAL_DMA_IRQHandler+0x41c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5a      	ldr	r2, [pc, #360]	@ (8003500 <HAL_DMA_IRQHandler+0x420>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_DMA_IRQHandler+0x424>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a57      	ldr	r2, [pc, #348]	@ (8003508 <HAL_DMA_IRQHandler+0x428>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a55      	ldr	r2, [pc, #340]	@ (800350c <HAL_DMA_IRQHandler+0x42c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a54      	ldr	r2, [pc, #336]	@ (8003510 <HAL_DMA_IRQHandler+0x430>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ee>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a52      	ldr	r2, [pc, #328]	@ (8003514 <HAL_DMA_IRQHandler+0x434>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10a      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x304>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e003      	b.n	80033ec <HAL_DMA_IRQHandler+0x30c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0202 	orr.w	r2, r3, #2
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 808f 	beq.w	8003540 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2a      	ldr	r2, [pc, #168]	@ (80034dc <HAL_DMA_IRQHandler+0x3fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a29      	ldr	r2, [pc, #164]	@ (80034e0 <HAL_DMA_IRQHandler+0x400>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <HAL_DMA_IRQHandler+0x404>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a26      	ldr	r2, [pc, #152]	@ (80034e8 <HAL_DMA_IRQHandler+0x408>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <HAL_DMA_IRQHandler+0x40c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <HAL_DMA_IRQHandler+0x410>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <HAL_DMA_IRQHandler+0x414>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a20      	ldr	r2, [pc, #128]	@ (80034f8 <HAL_DMA_IRQHandler+0x418>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1e      	ldr	r2, [pc, #120]	@ (80034fc <HAL_DMA_IRQHandler+0x41c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1d      	ldr	r2, [pc, #116]	@ (8003500 <HAL_DMA_IRQHandler+0x420>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_DMA_IRQHandler+0x424>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <HAL_DMA_IRQHandler+0x428>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_DMA_IRQHandler+0x42c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_DMA_IRQHandler+0x430>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x3e2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a15      	ldr	r2, [pc, #84]	@ (8003514 <HAL_DMA_IRQHandler+0x434>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d12a      	bne.n	8003518 <HAL_DMA_IRQHandler+0x438>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e023      	b.n	8003520 <HAL_DMA_IRQHandler+0x440>
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2210      	movs	r2, #16
 800354a:	409a      	lsls	r2, r3
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a6 	beq.w	80036a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a85      	ldr	r2, [pc, #532]	@ (8003770 <HAL_DMA_IRQHandler+0x690>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a83      	ldr	r2, [pc, #524]	@ (8003774 <HAL_DMA_IRQHandler+0x694>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a82      	ldr	r2, [pc, #520]	@ (8003778 <HAL_DMA_IRQHandler+0x698>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a80      	ldr	r2, [pc, #512]	@ (800377c <HAL_DMA_IRQHandler+0x69c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7f      	ldr	r2, [pc, #508]	@ (8003780 <HAL_DMA_IRQHandler+0x6a0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7d      	ldr	r2, [pc, #500]	@ (8003784 <HAL_DMA_IRQHandler+0x6a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <HAL_DMA_IRQHandler+0x6a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7a      	ldr	r2, [pc, #488]	@ (800378c <HAL_DMA_IRQHandler+0x6ac>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a79      	ldr	r2, [pc, #484]	@ (8003790 <HAL_DMA_IRQHandler+0x6b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a77      	ldr	r2, [pc, #476]	@ (8003794 <HAL_DMA_IRQHandler+0x6b4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a76      	ldr	r2, [pc, #472]	@ (8003798 <HAL_DMA_IRQHandler+0x6b8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a74      	ldr	r2, [pc, #464]	@ (800379c <HAL_DMA_IRQHandler+0x6bc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	@ (80037a0 <HAL_DMA_IRQHandler+0x6c0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a71      	ldr	r2, [pc, #452]	@ (80037a4 <HAL_DMA_IRQHandler+0x6c4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a70      	ldr	r2, [pc, #448]	@ (80037a8 <HAL_DMA_IRQHandler+0x6c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x516>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_DMA_IRQHandler+0x6cc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_DMA_IRQHandler+0x52c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e009      	b.n	8003620 <HAL_DMA_IRQHandler+0x540>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03e      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2210      	movs	r2, #16
 800362e:	409a      	lsls	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d024      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e01f      	b.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e016      	b.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2220      	movs	r2, #32
 80036ac:	409a      	lsls	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8110 	beq.w	80038d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <HAL_DMA_IRQHandler+0x690>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003774 <HAL_DMA_IRQHandler+0x694>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <HAL_DMA_IRQHandler+0x698>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d040      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a28      	ldr	r2, [pc, #160]	@ (800377c <HAL_DMA_IRQHandler+0x69c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d03b      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a26      	ldr	r2, [pc, #152]	@ (8003780 <HAL_DMA_IRQHandler+0x6a0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d036      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a25      	ldr	r2, [pc, #148]	@ (8003784 <HAL_DMA_IRQHandler+0x6a4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a23      	ldr	r2, [pc, #140]	@ (8003788 <HAL_DMA_IRQHandler+0x6a8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a22      	ldr	r2, [pc, #136]	@ (800378c <HAL_DMA_IRQHandler+0x6ac>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d027      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a20      	ldr	r2, [pc, #128]	@ (8003790 <HAL_DMA_IRQHandler+0x6b0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_DMA_IRQHandler+0x6b4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <HAL_DMA_IRQHandler+0x6b8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	@ (800379c <HAL_DMA_IRQHandler+0x6bc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <HAL_DMA_IRQHandler+0x6c8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x678>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_DMA_IRQHandler+0x6cc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d12b      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x6d0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e02a      	b.n	80037c4 <HAL_DMA_IRQHandler+0x6e4>
 800376e:	bf00      	nop
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8087 	beq.w	80038d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2220      	movs	r2, #32
 80037d4:	409a      	lsls	r2, r3
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d139      	bne.n	800385a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0216 	bic.w	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003804:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_DMA_IRQHandler+0x736>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	223f      	movs	r2, #63	@ 0x3f
 8003830:	409a      	lsls	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 834a 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
          }
          return;
 8003858:	e344      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e027      	b.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
 8003898:	e01e      	b.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0210 	bic.w	r2, r2, #16
 80038b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8306 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8088 	beq.w	8003a00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2204      	movs	r2, #4
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa08>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a79      	ldr	r2, [pc, #484]	@ (8003aec <HAL_DMA_IRQHandler+0xa0c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d045      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a77      	ldr	r2, [pc, #476]	@ (8003af0 <HAL_DMA_IRQHandler+0xa10>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d040      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a76      	ldr	r2, [pc, #472]	@ (8003af4 <HAL_DMA_IRQHandler+0xa14>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d03b      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a74      	ldr	r2, [pc, #464]	@ (8003af8 <HAL_DMA_IRQHandler+0xa18>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d036      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a73      	ldr	r2, [pc, #460]	@ (8003afc <HAL_DMA_IRQHandler+0xa1c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d031      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a71      	ldr	r2, [pc, #452]	@ (8003b00 <HAL_DMA_IRQHandler+0xa20>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02c      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a70      	ldr	r2, [pc, #448]	@ (8003b04 <HAL_DMA_IRQHandler+0xa24>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d027      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b08 <HAL_DMA_IRQHandler+0xa28>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d022      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6d      	ldr	r2, [pc, #436]	@ (8003b0c <HAL_DMA_IRQHandler+0xa2c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01d      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <HAL_DMA_IRQHandler+0xa30>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b14 <HAL_DMA_IRQHandler+0xa34>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a68      	ldr	r2, [pc, #416]	@ (8003b18 <HAL_DMA_IRQHandler+0xa38>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a67      	ldr	r2, [pc, #412]	@ (8003b1c <HAL_DMA_IRQHandler+0xa3c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_DMA_IRQHandler+0xa40>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_IRQHandler+0x8b8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a64      	ldr	r2, [pc, #400]	@ (8003b24 <HAL_DMA_IRQHandler+0xa44>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <HAL_DMA_IRQHandler+0x8ca>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e007      	b.n	80039ba <HAL_DMA_IRQHandler+0x8da>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d307      	bcc.n	80039d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f2      	bne.n	80039ba <HAL_DMA_IRQHandler+0x8da>
 80039d4:	e000      	b.n	80039d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80039ee:	e003      	b.n	80039f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8272 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e26c      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a43      	ldr	r2, [pc, #268]	@ (8003b28 <HAL_DMA_IRQHandler+0xa48>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a42      	ldr	r2, [pc, #264]	@ (8003b2c <HAL_DMA_IRQHandler+0xa4c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <HAL_DMA_IRQHandler+0xa50>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3f      	ldr	r2, [pc, #252]	@ (8003b34 <HAL_DMA_IRQHandler+0xa54>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3d      	ldr	r2, [pc, #244]	@ (8003b38 <HAL_DMA_IRQHandler+0xa58>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b3c <HAL_DMA_IRQHandler+0xa5c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3a      	ldr	r2, [pc, #232]	@ (8003b40 <HAL_DMA_IRQHandler+0xa60>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x984>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a39      	ldr	r2, [pc, #228]	@ (8003b44 <HAL_DMA_IRQHandler+0xa64>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x988>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_DMA_IRQHandler+0x98a>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 823f 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2204      	movs	r2, #4
 8003a82:	409a      	lsls	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80cd 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xb48>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80c7 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8210 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad0:	e20a      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8206 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae4:	e200      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
 8003ae6:	bf00      	nop
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	58025408 	.word	0x58025408
 8003b2c:	5802541c 	.word	0x5802541c
 8003b30:	58025430 	.word	0x58025430
 8003b34:	58025444 	.word	0x58025444
 8003b38:	58025458 	.word	0x58025458
 8003b3c:	5802546c 	.word	0x5802546c
 8003b40:	58025480 	.word	0x58025480
 8003b44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d160      	bne.n	8003c14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7f      	ldr	r2, [pc, #508]	@ (8003d54 <HAL_DMA_IRQHandler+0xc74>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7d      	ldr	r2, [pc, #500]	@ (8003d58 <HAL_DMA_IRQHandler+0xc78>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d5c <HAL_DMA_IRQHandler+0xc7c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a7a      	ldr	r2, [pc, #488]	@ (8003d60 <HAL_DMA_IRQHandler+0xc80>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a79      	ldr	r2, [pc, #484]	@ (8003d64 <HAL_DMA_IRQHandler+0xc84>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a77      	ldr	r2, [pc, #476]	@ (8003d68 <HAL_DMA_IRQHandler+0xc88>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a76      	ldr	r2, [pc, #472]	@ (8003d6c <HAL_DMA_IRQHandler+0xc8c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a74      	ldr	r2, [pc, #464]	@ (8003d70 <HAL_DMA_IRQHandler+0xc90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	@ (8003d74 <HAL_DMA_IRQHandler+0xc94>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a71      	ldr	r2, [pc, #452]	@ (8003d78 <HAL_DMA_IRQHandler+0xc98>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a70      	ldr	r2, [pc, #448]	@ (8003d7c <HAL_DMA_IRQHandler+0xc9c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d80 <HAL_DMA_IRQHandler+0xca0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6d      	ldr	r2, [pc, #436]	@ (8003d84 <HAL_DMA_IRQHandler+0xca4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_DMA_IRQHandler+0xca8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d8c <HAL_DMA_IRQHandler+0xcac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xb12>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a68      	ldr	r2, [pc, #416]	@ (8003d90 <HAL_DMA_IRQHandler+0xcb0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <HAL_DMA_IRQHandler+0xb24>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0208 	bic.w	r2, r2, #8
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_DMA_IRQHandler+0xb34>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8165 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c26:	e15f      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2202      	movs	r2, #2
 8003c32:	409a      	lsls	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80c5 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xce8>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80bf 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2202      	movs	r2, #2
 8003c54:	409a      	lsls	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813a 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c80:	e134      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8130 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c94:	e12a      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8089 	bne.w	8003db4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d54 <HAL_DMA_IRQHandler+0xc74>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a29      	ldr	r2, [pc, #164]	@ (8003d58 <HAL_DMA_IRQHandler+0xc78>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a28      	ldr	r2, [pc, #160]	@ (8003d5c <HAL_DMA_IRQHandler+0xc7c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a26      	ldr	r2, [pc, #152]	@ (8003d60 <HAL_DMA_IRQHandler+0xc80>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a25      	ldr	r2, [pc, #148]	@ (8003d64 <HAL_DMA_IRQHandler+0xc84>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_DMA_IRQHandler+0xc88>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	@ (8003d6c <HAL_DMA_IRQHandler+0xc8c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a20      	ldr	r2, [pc, #128]	@ (8003d70 <HAL_DMA_IRQHandler+0xc90>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <HAL_DMA_IRQHandler+0xc94>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1d      	ldr	r2, [pc, #116]	@ (8003d78 <HAL_DMA_IRQHandler+0xc98>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d7c <HAL_DMA_IRQHandler+0xc9c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1a      	ldr	r2, [pc, #104]	@ (8003d80 <HAL_DMA_IRQHandler+0xca0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a19      	ldr	r2, [pc, #100]	@ (8003d84 <HAL_DMA_IRQHandler+0xca4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <HAL_DMA_IRQHandler+0xca8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <HAL_DMA_IRQHandler+0xcac>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xc62>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a14      	ldr	r2, [pc, #80]	@ (8003d90 <HAL_DMA_IRQHandler+0xcb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d128      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xcb4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0214 	bic.w	r2, r2, #20
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e027      	b.n	8003da4 <HAL_DMA_IRQHandler+0xcc4>
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 020a 	bic.w	r2, r2, #10
 8003da2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8097 	beq.w	8003eec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc6:	e091      	b.n	8003eec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8088 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8082 	beq.w	8003eee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a41      	ldr	r2, [pc, #260]	@ (8003ef4 <HAL_DMA_IRQHandler+0xe14>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04a      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef8 <HAL_DMA_IRQHandler+0xe18>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3e      	ldr	r2, [pc, #248]	@ (8003efc <HAL_DMA_IRQHandler+0xe1c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d040      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f00 <HAL_DMA_IRQHandler+0xe20>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03b      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	@ (8003f04 <HAL_DMA_IRQHandler+0xe24>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d036      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a39      	ldr	r2, [pc, #228]	@ (8003f08 <HAL_DMA_IRQHandler+0xe28>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d031      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a38      	ldr	r2, [pc, #224]	@ (8003f0c <HAL_DMA_IRQHandler+0xe2c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d02c      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a36      	ldr	r2, [pc, #216]	@ (8003f10 <HAL_DMA_IRQHandler+0xe30>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d027      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a35      	ldr	r2, [pc, #212]	@ (8003f14 <HAL_DMA_IRQHandler+0xe34>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a33      	ldr	r2, [pc, #204]	@ (8003f18 <HAL_DMA_IRQHandler+0xe38>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a32      	ldr	r2, [pc, #200]	@ (8003f1c <HAL_DMA_IRQHandler+0xe3c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a30      	ldr	r2, [pc, #192]	@ (8003f20 <HAL_DMA_IRQHandler+0xe40>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	@ (8003f24 <HAL_DMA_IRQHandler+0xe44>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <HAL_DMA_IRQHandler+0xe48>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <HAL_DMA_IRQHandler+0xe4c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xdaa>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_DMA_IRQHandler+0xe50>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0xdbc>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 021c 	bic.w	r2, r2, #28
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e007      	b.n	8003eac <HAL_DMA_IRQHandler+0xdcc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020e 	bic.w	r2, r2, #14
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
 8003ee2:	e004      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ee4:	bf00      	nop
 8003ee6:	e002      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eee:	3728      	adds	r7, #40	@ 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8

08003f34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7f      	ldr	r2, [pc, #508]	@ (8004150 <DMA_SetConfig+0x21c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d072      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a7d      	ldr	r2, [pc, #500]	@ (8004154 <DMA_SetConfig+0x220>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d06d      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7c      	ldr	r2, [pc, #496]	@ (8004158 <DMA_SetConfig+0x224>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d068      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7a      	ldr	r2, [pc, #488]	@ (800415c <DMA_SetConfig+0x228>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d063      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a79      	ldr	r2, [pc, #484]	@ (8004160 <DMA_SetConfig+0x22c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d05e      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a77      	ldr	r2, [pc, #476]	@ (8004164 <DMA_SetConfig+0x230>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d059      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a76      	ldr	r2, [pc, #472]	@ (8004168 <DMA_SetConfig+0x234>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d054      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a74      	ldr	r2, [pc, #464]	@ (800416c <DMA_SetConfig+0x238>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04f      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a73      	ldr	r2, [pc, #460]	@ (8004170 <DMA_SetConfig+0x23c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d04a      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a71      	ldr	r2, [pc, #452]	@ (8004174 <DMA_SetConfig+0x240>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d045      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a70      	ldr	r2, [pc, #448]	@ (8004178 <DMA_SetConfig+0x244>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d040      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800417c <DMA_SetConfig+0x248>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d03b      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6d      	ldr	r2, [pc, #436]	@ (8004180 <DMA_SetConfig+0x24c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d036      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8004184 <DMA_SetConfig+0x250>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6a      	ldr	r2, [pc, #424]	@ (8004188 <DMA_SetConfig+0x254>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d02c      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	@ (800418c <DMA_SetConfig+0x258>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d027      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a67      	ldr	r2, [pc, #412]	@ (8004190 <DMA_SetConfig+0x25c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <DMA_SetConfig+0x10a>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	@ (8004194 <DMA_SetConfig+0x260>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a64      	ldr	r2, [pc, #400]	@ (8004198 <DMA_SetConfig+0x264>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <DMA_SetConfig+0x10a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a62      	ldr	r2, [pc, #392]	@ (800419c <DMA_SetConfig+0x268>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a61      	ldr	r2, [pc, #388]	@ (80041a0 <DMA_SetConfig+0x26c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5f      	ldr	r2, [pc, #380]	@ (80041a4 <DMA_SetConfig+0x270>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <DMA_SetConfig+0x10a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a5e      	ldr	r2, [pc, #376]	@ (80041a8 <DMA_SetConfig+0x274>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <DMA_SetConfig+0x10a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5c      	ldr	r2, [pc, #368]	@ (80041ac <DMA_SetConfig+0x278>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <DMA_SetConfig+0x10e>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <DMA_SetConfig+0x110>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004050:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004062:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a39      	ldr	r2, [pc, #228]	@ (8004150 <DMA_SetConfig+0x21c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04a      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a38      	ldr	r2, [pc, #224]	@ (8004154 <DMA_SetConfig+0x220>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d045      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a36      	ldr	r2, [pc, #216]	@ (8004158 <DMA_SetConfig+0x224>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d040      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a35      	ldr	r2, [pc, #212]	@ (800415c <DMA_SetConfig+0x228>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d03b      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <DMA_SetConfig+0x22c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d036      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a32      	ldr	r2, [pc, #200]	@ (8004164 <DMA_SetConfig+0x230>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d031      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a30      	ldr	r2, [pc, #192]	@ (8004168 <DMA_SetConfig+0x234>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02c      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2f      	ldr	r2, [pc, #188]	@ (800416c <DMA_SetConfig+0x238>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d027      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004170 <DMA_SetConfig+0x23c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <DMA_SetConfig+0x240>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01d      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <DMA_SetConfig+0x244>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a29      	ldr	r2, [pc, #164]	@ (800417c <DMA_SetConfig+0x248>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a27      	ldr	r2, [pc, #156]	@ (8004180 <DMA_SetConfig+0x24c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <DMA_SetConfig+0x250>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a24      	ldr	r2, [pc, #144]	@ (8004188 <DMA_SetConfig+0x254>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <DMA_SetConfig+0x1d0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a23      	ldr	r2, [pc, #140]	@ (800418c <DMA_SetConfig+0x258>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <DMA_SetConfig+0x1d4>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <DMA_SetConfig+0x1d6>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d059      	beq.n	80041c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	223f      	movs	r2, #63	@ 0x3f
 8004118:	409a      	lsls	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800412c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d138      	bne.n	80041b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800414e:	e086      	b.n	800425e <DMA_SetConfig+0x32a>
 8004150:	40020010 	.word	0x40020010
 8004154:	40020028 	.word	0x40020028
 8004158:	40020040 	.word	0x40020040
 800415c:	40020058 	.word	0x40020058
 8004160:	40020070 	.word	0x40020070
 8004164:	40020088 	.word	0x40020088
 8004168:	400200a0 	.word	0x400200a0
 800416c:	400200b8 	.word	0x400200b8
 8004170:	40020410 	.word	0x40020410
 8004174:	40020428 	.word	0x40020428
 8004178:	40020440 	.word	0x40020440
 800417c:	40020458 	.word	0x40020458
 8004180:	40020470 	.word	0x40020470
 8004184:	40020488 	.word	0x40020488
 8004188:	400204a0 	.word	0x400204a0
 800418c:	400204b8 	.word	0x400204b8
 8004190:	58025408 	.word	0x58025408
 8004194:	5802541c 	.word	0x5802541c
 8004198:	58025430 	.word	0x58025430
 800419c:	58025444 	.word	0x58025444
 80041a0:	58025458 	.word	0x58025458
 80041a4:	5802546c 	.word	0x5802546c
 80041a8:	58025480 	.word	0x58025480
 80041ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
}
 80041c0:	e04d      	b.n	800425e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a29      	ldr	r2, [pc, #164]	@ (800426c <DMA_SetConfig+0x338>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a27      	ldr	r2, [pc, #156]	@ (8004270 <DMA_SetConfig+0x33c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <DMA_SetConfig+0x340>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a24      	ldr	r2, [pc, #144]	@ (8004278 <DMA_SetConfig+0x344>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a23      	ldr	r2, [pc, #140]	@ (800427c <DMA_SetConfig+0x348>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <DMA_SetConfig+0x34c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <DMA_SetConfig+0x2de>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a20      	ldr	r2, [pc, #128]	@ (8004284 <DMA_SetConfig+0x350>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <DMA_SetConfig+0x2de>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <DMA_SetConfig+0x354>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <DMA_SetConfig+0x2e2>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <DMA_SetConfig+0x2e4>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d108      	bne.n	800424e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	60da      	str	r2, [r3, #12]
}
 800424c:	e007      	b.n	800425e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	58025408 	.word	0x58025408
 8004270:	5802541c 	.word	0x5802541c
 8004274:	58025430 	.word	0x58025430
 8004278:	58025444 	.word	0x58025444
 800427c:	58025458 	.word	0x58025458
 8004280:	5802546c 	.word	0x5802546c
 8004284:	58025480 	.word	0x58025480
 8004288:	58025494 	.word	0x58025494

0800428c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a42      	ldr	r2, [pc, #264]	@ (80043a4 <DMA_CalcBaseAndBitshift+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a41      	ldr	r2, [pc, #260]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3f      	ldr	r2, [pc, #252]	@ (80043ac <DMA_CalcBaseAndBitshift+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3e      	ldr	r2, [pc, #248]	@ (80043b0 <DMA_CalcBaseAndBitshift+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3c      	ldr	r2, [pc, #240]	@ (80043b4 <DMA_CalcBaseAndBitshift+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	@ (80043b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a39      	ldr	r2, [pc, #228]	@ (80043bc <DMA_CalcBaseAndBitshift+0x130>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <DMA_CalcBaseAndBitshift+0x134>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a36      	ldr	r2, [pc, #216]	@ (80043c4 <DMA_CalcBaseAndBitshift+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a35      	ldr	r2, [pc, #212]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a33      	ldr	r2, [pc, #204]	@ (80043cc <DMA_CalcBaseAndBitshift+0x140>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a32      	ldr	r2, [pc, #200]	@ (80043d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a30      	ldr	r2, [pc, #192]	@ (80043d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2f      	ldr	r2, [pc, #188]	@ (80043d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2d      	ldr	r2, [pc, #180]	@ (80043dc <DMA_CalcBaseAndBitshift+0x150>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	@ (80043e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <DMA_CalcBaseAndBitshift+0xac>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <DMA_CalcBaseAndBitshift+0xae>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3b10      	subs	r3, #16
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d908      	bls.n	8004378 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	4b1f      	ldr	r3, [pc, #124]	@ (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 800436e:	4013      	ands	r3, r2
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	659a      	str	r2, [r3, #88]	@ 0x58
 8004376:	e00d      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
 8004386:	e005      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40020010 	.word	0x40020010
 80043a8:	40020028 	.word	0x40020028
 80043ac:	40020040 	.word	0x40020040
 80043b0:	40020058 	.word	0x40020058
 80043b4:	40020070 	.word	0x40020070
 80043b8:	40020088 	.word	0x40020088
 80043bc:	400200a0 	.word	0x400200a0
 80043c0:	400200b8 	.word	0x400200b8
 80043c4:	40020410 	.word	0x40020410
 80043c8:	40020428 	.word	0x40020428
 80043cc:	40020440 	.word	0x40020440
 80043d0:	40020458 	.word	0x40020458
 80043d4:	40020470 	.word	0x40020470
 80043d8:	40020488 	.word	0x40020488
 80043dc:	400204a0 	.word	0x400204a0
 80043e0:	400204b8 	.word	0x400204b8
 80043e4:	aaaaaaab 	.word	0xaaaaaaab
 80043e8:	0800c444 	.word	0x0800c444
 80043ec:	fffffc00 	.word	0xfffffc00

080043f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d120      	bne.n	8004446 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b03      	cmp	r3, #3
 800440a:	d858      	bhi.n	80044be <DMA_CheckFifoParam+0xce>
 800440c:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <DMA_CheckFifoParam+0x24>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004425 	.word	0x08004425
 8004418:	08004437 	.word	0x08004437
 800441c:	08004425 	.word	0x08004425
 8004420:	080044bf 	.word	0x080044bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d048      	beq.n	80044c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004434:	e045      	b.n	80044c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800443e:	d142      	bne.n	80044c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004444:	e03f      	b.n	80044c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444e:	d123      	bne.n	8004498 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	2b03      	cmp	r3, #3
 8004456:	d838      	bhi.n	80044ca <DMA_CheckFifoParam+0xda>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <DMA_CheckFifoParam+0x70>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004471 	.word	0x08004471
 8004464:	08004477 	.word	0x08004477
 8004468:	08004471 	.word	0x08004471
 800446c:	08004489 	.word	0x08004489
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
        break;
 8004474:	e030      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d025      	beq.n	80044ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004486:	e022      	b.n	80044ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004490:	d11f      	bne.n	80044d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004496:	e01c      	b.n	80044d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <DMA_CheckFifoParam+0xb6>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d003      	beq.n	80044ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044a4:	e018      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
        break;
 80044aa:	e015      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
    break;
 80044bc:	e00b      	b.n	80044d6 <DMA_CheckFifoParam+0xe6>
        break;
 80044be:	bf00      	nop
 80044c0:	e00a      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c2:	bf00      	nop
 80044c4:	e008      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c6:	bf00      	nop
 80044c8:	e006      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
    break;
 80044d6:	bf00      	nop
    }
  }

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a38      	ldr	r2, [pc, #224]	@ (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a36      	ldr	r2, [pc, #216]	@ (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a35      	ldr	r2, [pc, #212]	@ (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a33      	ldr	r2, [pc, #204]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a30      	ldr	r2, [pc, #192]	@ (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	@ (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2d      	ldr	r2, [pc, #180]	@ (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01a      	beq.n	8004586 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3b08      	subs	r3, #8
 8004558:	4a28      	ldr	r2, [pc, #160]	@ (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a24      	ldr	r2, [pc, #144]	@ (8004604 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004574:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004584:	e024      	b.n	80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3b10      	subs	r3, #16
 800458e:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d806      	bhi.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d902      	bls.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3308      	adds	r3, #8
 80045ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430
 80045e8:	58025444 	.word	0x58025444
 80045ec:	58025458 	.word	0x58025458
 80045f0:	5802546c 	.word	0x5802546c
 80045f4:	58025480 	.word	0x58025480
 80045f8:	58025494 	.word	0x58025494
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	16009600 	.word	0x16009600
 8004604:	58025880 	.word	0x58025880
 8004608:	aaaaaaab 	.word	0xaaaaaaab
 800460c:	400204b8 	.word	0x400204b8
 8004610:	4002040f 	.word	0x4002040f
 8004614:	10008200 	.word	0x10008200
 8004618:	40020880 	.word	0x40020880

0800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04a      	beq.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d847      	bhi.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	@ (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a24      	ldr	r2, [pc, #144]	@ (80046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	@ (80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	@ (80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	@ (80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	@ (80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	@ (80046f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80046a6:	e009      	b.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	@ (8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494
 80046f4:	1600963f 	.word	0x1600963f
 80046f8:	58025940 	.word	0x58025940
 80046fc:	1000823f 	.word	0x1000823f
 8004700:	40020940 	.word	0x40020940

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	@ 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004712:	4b86      	ldr	r3, [pc, #536]	@ (800492c <HAL_GPIO_Init+0x228>)
 8004714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004716:	e18c      	b.n	8004a32 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 817e 	beq.w	8004a2c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d005      	beq.n	8004748 <HAL_GPIO_Init+0x44>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d130      	bne.n	80047aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477e:	2201      	movs	r2, #1
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0201 	and.w	r2, r3, #1
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d017      	beq.n	80047e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2203      	movs	r2, #3
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d123      	bne.n	800483a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	08da      	lsrs	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3208      	adds	r2, #8
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0203 	and.w	r2, r3, #3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80d8 	beq.w	8004a2c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487c:	4b2c      	ldr	r3, [pc, #176]	@ (8004930 <HAL_GPIO_Init+0x22c>)
 800487e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004882:	4a2b      	ldr	r2, [pc, #172]	@ (8004930 <HAL_GPIO_Init+0x22c>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_GPIO_Init+0x22c>)
 800488e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800489a:	4a26      	ldr	r2, [pc, #152]	@ (8004934 <HAL_GPIO_Init+0x230>)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <HAL_GPIO_Init+0x234>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04a      	beq.n	800495c <HAL_GPIO_Init+0x258>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	@ (800493c <HAL_GPIO_Init+0x238>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02b      	beq.n	8004926 <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004940 <HAL_GPIO_Init+0x23c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d025      	beq.n	8004922 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <HAL_GPIO_Init+0x240>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01f      	beq.n	800491e <HAL_GPIO_Init+0x21a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_GPIO_Init+0x244>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d019      	beq.n	800491a <HAL_GPIO_Init+0x216>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	@ (800494c <HAL_GPIO_Init+0x248>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_GPIO_Init+0x212>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <HAL_GPIO_Init+0x24c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00d      	beq.n	8004912 <HAL_GPIO_Init+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <HAL_GPIO_Init+0x250>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <HAL_GPIO_Init+0x20a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <HAL_GPIO_Init+0x254>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_GPIO_Init+0x206>
 8004906:	2309      	movs	r3, #9
 8004908:	e029      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800490a:	230a      	movs	r3, #10
 800490c:	e027      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800490e:	2307      	movs	r3, #7
 8004910:	e025      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004912:	2306      	movs	r3, #6
 8004914:	e023      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004916:	2305      	movs	r3, #5
 8004918:	e021      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800491a:	2304      	movs	r3, #4
 800491c:	e01f      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800491e:	2303      	movs	r3, #3
 8004920:	e01d      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004922:	2302      	movs	r3, #2
 8004924:	e01b      	b.n	800495e <HAL_GPIO_Init+0x25a>
 8004926:	2301      	movs	r3, #1
 8004928:	e019      	b.n	800495e <HAL_GPIO_Init+0x25a>
 800492a:	bf00      	nop
 800492c:	58000080 	.word	0x58000080
 8004930:	58024400 	.word	0x58024400
 8004934:	58000400 	.word	0x58000400
 8004938:	58020000 	.word	0x58020000
 800493c:	58020400 	.word	0x58020400
 8004940:	58020800 	.word	0x58020800
 8004944:	58020c00 	.word	0x58020c00
 8004948:	58021000 	.word	0x58021000
 800494c:	58021400 	.word	0x58021400
 8004950:	58021800 	.word	0x58021800
 8004954:	58021c00 	.word	0x58021c00
 8004958:	58022400 	.word	0x58022400
 800495c:	2300      	movs	r3, #0
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	f002 0203 	and.w	r2, r2, #3
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	4093      	lsls	r3, r2
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800496e:	4938      	ldr	r1, [pc, #224]	@ (8004a50 <HAL_GPIO_Init+0x34c>)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	3302      	adds	r3, #2
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f ae6b 	bne.w	8004718 <HAL_GPIO_Init+0x14>
  }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3724      	adds	r7, #36	@ 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	58000400 	.word	0x58000400

08004a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a64:	787b      	ldrb	r3, [r7, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a70:	e003      	b.n	8004a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	041a      	lsls	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a98:	887a      	ldrh	r2, [r7, #2]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	041a      	lsls	r2, r3, #16
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	619a      	str	r2, [r3, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 fd6b 	bl	800a5bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004afc:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	4a07      	ldr	r2, [pc, #28]	@ (8004b20 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004b0e:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004b10:	e000      	b.n	8004b14 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004b12:	bf20      	wfe
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b2c:	4b19      	ldr	r3, [pc, #100]	@ (8004b94 <HAL_PWREx_ConfigSupply+0x70>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d00a      	beq.n	8004b4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b38:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <HAL_PWREx_ConfigSupply+0x70>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e01f      	b.n	8004b8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e01d      	b.n	8004b8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b4e:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_PWREx_ConfigSupply+0x70>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 0207 	bic.w	r2, r3, #7
 8004b56:	490f      	ldr	r1, [pc, #60]	@ (8004b94 <HAL_PWREx_ConfigSupply+0x70>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b5e:	f7fc fe7d 	bl	800185c <HAL_GetTick>
 8004b62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b64:	e009      	b.n	8004b7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b66:	f7fc fe79 	bl	800185c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b74:	d901      	bls.n	8004b7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e007      	b.n	8004b8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	d1ee      	bne.n	8004b66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	58024800 	.word	0x58024800

08004b98 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
 8004b9c:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	@ 0x30
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e3c8      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8087 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc8:	4b88      	ldr	r3, [pc, #544]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bd2:	4b86      	ldr	r3, [pc, #536]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d007      	beq.n	8004bee <HAL_RCC_OscConfig+0x46>
 8004bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be0:	2b18      	cmp	r3, #24
 8004be2:	d110      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	4b7f      	ldr	r3, [pc, #508]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d06c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d168      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e3a2      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x76>
 8004c10:	4b76      	ldr	r3, [pc, #472]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a75      	ldr	r2, [pc, #468]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e02e      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x98>
 8004c26:	4b71      	ldr	r3, [pc, #452]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a70      	ldr	r2, [pc, #448]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b6e      	ldr	r3, [pc, #440]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6d      	ldr	r2, [pc, #436]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0xbc>
 8004c4a:	4b68      	ldr	r3, [pc, #416]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a67      	ldr	r2, [pc, #412]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b65      	ldr	r3, [pc, #404]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a64      	ldr	r2, [pc, #400]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c64:	4b61      	ldr	r3, [pc, #388]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a60      	ldr	r2, [pc, #384]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b5e      	ldr	r3, [pc, #376]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5d      	ldr	r2, [pc, #372]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fdea 	bl	800185c <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fc fde6 	bl	800185c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e356      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c9e:	4b53      	ldr	r3, [pc, #332]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe4>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc fdd6 	bl	800185c <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fc fdd2 	bl	800185c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	@ 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e342      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc6:	4b49      	ldr	r3, [pc, #292]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x10c>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 808c 	beq.w	8004dfc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce4:	4b41      	ldr	r3, [pc, #260]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cee:	4b3f      	ldr	r3, [pc, #252]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCC_OscConfig+0x162>
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	2b18      	cmp	r3, #24
 8004cfe:	d137      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1c8>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d132      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d0a:	4b38      	ldr	r3, [pc, #224]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_RCC_OscConfig+0x17a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e314      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d22:	4b32      	ldr	r3, [pc, #200]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0219 	bic.w	r2, r3, #25
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	492f      	ldr	r1, [pc, #188]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fc fd92 	bl	800185c <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fc fd8e 	bl	800185c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e2fe      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4e:	4b27      	ldr	r3, [pc, #156]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	4920      	ldr	r1, [pc, #128]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d6e:	e045      	b.n	8004dfc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d026      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d78:	4b1c      	ldr	r3, [pc, #112]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 0219 	bic.w	r2, r3, #25
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4919      	ldr	r1, [pc, #100]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fc fd67 	bl	800185c <HAL_GetTick>
 8004d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d92:	f7fc fd63 	bl	800185c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e2d3      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da4:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	490b      	ldr	r1, [pc, #44]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
 8004dc4:	e01a      	b.n	8004dfc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a08      	ldr	r2, [pc, #32]	@ (8004dec <HAL_RCC_OscConfig+0x244>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fc fd43 	bl	800185c <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fc fd3f 	bl	800185c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d903      	bls.n	8004df0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e2af      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
 8004dec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004df0:	4b96      	ldr	r3, [pc, #600]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ee      	bne.n	8004dda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d06a      	beq.n	8004ede <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e08:	4b90      	ldr	r3, [pc, #576]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e12:	4b8e      	ldr	r3, [pc, #568]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d007      	beq.n	8004e2e <HAL_RCC_OscConfig+0x286>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b18      	cmp	r3, #24
 8004e22:	d11b      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2b4>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d116      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e2e:	4b87      	ldr	r3, [pc, #540]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_RCC_OscConfig+0x29e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b80      	cmp	r3, #128	@ 0x80
 8004e40:	d001      	beq.n	8004e46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e282      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e46:	4b81      	ldr	r3, [pc, #516]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	497d      	ldr	r1, [pc, #500]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e5a:	e040      	b.n	8004ede <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d023      	beq.n	8004eac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e64:	4b79      	ldr	r3, [pc, #484]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a78      	ldr	r2, [pc, #480]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fc fcf4 	bl	800185c <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e78:	f7fc fcf0 	bl	800185c <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e260      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e8a:	4b70      	ldr	r3, [pc, #448]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e96:	4b6d      	ldr	r3, [pc, #436]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	4969      	ldr	r1, [pc, #420]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]
 8004eaa:	e018      	b.n	8004ede <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eac:	4b67      	ldr	r3, [pc, #412]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a66      	ldr	r2, [pc, #408]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc fcd0 	bl	800185c <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ec0:	f7fc fccc 	bl	800185c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e23c      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ed2:	4b5e      	ldr	r3, [pc, #376]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d036      	beq.n	8004f58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d019      	beq.n	8004f26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef2:	4b56      	ldr	r3, [pc, #344]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	4a55      	ldr	r2, [pc, #340]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fc fcad 	bl	800185c <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f06:	f7fc fca9 	bl	800185c <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e219      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f18:	4b4c      	ldr	r3, [pc, #304]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x35e>
 8004f24:	e018      	b.n	8004f58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f26:	4b49      	ldr	r3, [pc, #292]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2a:	4a48      	ldr	r2, [pc, #288]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f32:	f7fc fc93 	bl	800185c <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3a:	f7fc fc8f 	bl	800185c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1ff      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d036      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6c:	4b37      	ldr	r3, [pc, #220]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a36      	ldr	r2, [pc, #216]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f78:	f7fc fc70 	bl	800185c <HAL_GetTick>
 8004f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f80:	f7fc fc6c 	bl	800185c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1dc      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f92:	4b2e      	ldr	r3, [pc, #184]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x3d8>
 8004f9e:	e018      	b.n	8004fd2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fac:	f7fc fc56 	bl	800185c <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb4:	f7fc fc52 	bl	800185c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e1c2      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fc6:	4b21      	ldr	r3, [pc, #132]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8086 	beq.w	80050ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCC_OscConfig+0x4a8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <HAL_RCC_OscConfig+0x4a8>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fec:	f7fc fc36 	bl	800185c <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fc fc32 	bl	800185c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1a2      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005006:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <HAL_RCC_OscConfig+0x4a8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x480>
 800501a:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a0b      	ldr	r2, [pc, #44]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	e032      	b.n	800508e <HAL_RCC_OscConfig+0x4e6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d111      	bne.n	8005054 <HAL_RCC_OscConfig+0x4ac>
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005034:	4a05      	ldr	r2, [pc, #20]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8005036:	f023 0301 	bic.w	r3, r3, #1
 800503a:	6713      	str	r3, [r2, #112]	@ 0x70
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005040:	4a02      	ldr	r2, [pc, #8]	@ (800504c <HAL_RCC_OscConfig+0x4a4>)
 8005042:	f023 0304 	bic.w	r3, r3, #4
 8005046:	6713      	str	r3, [r2, #112]	@ 0x70
 8005048:	e021      	b.n	800508e <HAL_RCC_OscConfig+0x4e6>
 800504a:	bf00      	nop
 800504c:	58024400 	.word	0x58024400
 8005050:	58024800 	.word	0x58024800
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b05      	cmp	r3, #5
 800505a:	d10c      	bne.n	8005076 <HAL_RCC_OscConfig+0x4ce>
 800505c:	4b83      	ldr	r3, [pc, #524]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4a82      	ldr	r2, [pc, #520]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005062:	f043 0304 	orr.w	r3, r3, #4
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
 8005068:	4b80      	ldr	r3, [pc, #512]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	4a7f      	ldr	r2, [pc, #508]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	@ 0x70
 8005074:	e00b      	b.n	800508e <HAL_RCC_OscConfig+0x4e6>
 8005076:	4b7d      	ldr	r3, [pc, #500]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	4a7c      	ldr	r2, [pc, #496]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	6713      	str	r3, [r2, #112]	@ 0x70
 8005082:	4b7a      	ldr	r3, [pc, #488]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	4a79      	ldr	r2, [pc, #484]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d015      	beq.n	80050c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fc fbe1 	bl	800185c <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7fc fbdd 	bl	800185c <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e14b      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b4:	4b6d      	ldr	r3, [pc, #436]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ee      	beq.n	800509e <HAL_RCC_OscConfig+0x4f6>
 80050c0:	e014      	b.n	80050ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fc fbcb 	bl	800185c <HAL_GetTick>
 80050c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fc fbc7 	bl	800185c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e135      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e0:	4b62      	ldr	r3, [pc, #392]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 812a 	beq.w	800534a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050f6:	4b5d      	ldr	r3, [pc, #372]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050fe:	2b18      	cmp	r3, #24
 8005100:	f000 80ba 	beq.w	8005278 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	2b02      	cmp	r3, #2
 800510a:	f040 8095 	bne.w	8005238 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b57      	ldr	r3, [pc, #348]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a56      	ldr	r2, [pc, #344]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fc fb9f 	bl	800185c <HAL_GetTick>
 800511e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fc fb9b 	bl	800185c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e10b      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005134:	4b4d      	ldr	r3, [pc, #308]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f0      	bne.n	8005122 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005140:	4b4a      	ldr	r3, [pc, #296]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005144:	4b4a      	ldr	r3, [pc, #296]	@ (8005270 <HAL_RCC_OscConfig+0x6c8>)
 8005146:	4013      	ands	r3, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	430a      	orrs	r2, r1
 8005154:	4945      	ldr	r1, [pc, #276]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	628b      	str	r3, [r1, #40]	@ 0x28
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	3b01      	subs	r3, #1
 8005160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005168:	3b01      	subs	r3, #1
 800516a:	025b      	lsls	r3, r3, #9
 800516c:	b29b      	uxth	r3, r3
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	3b01      	subs	r3, #1
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	3b01      	subs	r3, #1
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800518a:	4938      	ldr	r1, [pc, #224]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005190:	4b36      	ldr	r3, [pc, #216]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	4a35      	ldr	r2, [pc, #212]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800519c:	4b33      	ldr	r3, [pc, #204]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800519e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a0:	4b34      	ldr	r3, [pc, #208]	@ (8005274 <HAL_RCC_OscConfig+0x6cc>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051a8:	00d2      	lsls	r2, r2, #3
 80051aa:	4930      	ldr	r1, [pc, #192]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051b0:	4b2e      	ldr	r3, [pc, #184]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	f023 020c 	bic.w	r2, r3, #12
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	492b      	ldr	r1, [pc, #172]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051c2:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	f023 0202 	bic.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	4927      	ldr	r1, [pc, #156]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4a24      	ldr	r2, [pc, #144]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051ec:	4b1f      	ldr	r3, [pc, #124]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051f8:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4a1b      	ldr	r2, [pc, #108]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005204:	4b19      	ldr	r3, [pc, #100]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a18      	ldr	r2, [pc, #96]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800520a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fc fb24 	bl	800185c <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc fb20 	bl	800185c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e090      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x670>
 8005236:	e088      	b.n	800534a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0b      	ldr	r2, [pc, #44]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fc fb0a 	bl	800185c <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc fb06 	bl	800185c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e076      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525e:	4b03      	ldr	r3, [pc, #12]	@ (800526c <HAL_RCC_OscConfig+0x6c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
 800526a:	e06e      	b.n	800534a <HAL_RCC_OscConfig+0x7a2>
 800526c:	58024400 	.word	0x58024400
 8005270:	fffffc0c 	.word	0xfffffc0c
 8005274:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800527e:	4b35      	ldr	r3, [pc, #212]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	2b01      	cmp	r3, #1
 800528a:	d031      	beq.n	80052f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0203 	and.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d12a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d122      	bne.n	80052f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0a5b      	lsrs	r3, r3, #9
 80052be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d111      	bne.n	80052f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d108      	bne.n	80052f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	0e1b      	lsrs	r3, r3, #24
 80052e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02b      	b.n	800534c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052f4:	4b17      	ldr	r3, [pc, #92]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	d01f      	beq.n	800534a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530e:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005316:	f7fc faa1 	bl	800185c <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800531c:	bf00      	nop
 800531e:	f7fc fa9d 	bl	800185c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	4293      	cmp	r3, r2
 8005328:	d0f9      	beq.n	800531e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 800532c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_RCC_OscConfig+0x7b0>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005336:	00d2      	lsls	r2, r2, #3
 8005338:	4906      	ldr	r1, [pc, #24]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 800533a:	4313      	orrs	r3, r2
 800533c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800533e:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a04      	ldr	r2, [pc, #16]	@ (8005354 <HAL_RCC_OscConfig+0x7ac>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3730      	adds	r7, #48	@ 0x30
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	58024400 	.word	0x58024400
 8005358:	ffff0007 	.word	0xffff0007

0800535c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e19c      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b8a      	ldr	r3, [pc, #552]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b87      	ldr	r3, [pc, #540]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	4985      	ldr	r1, [pc, #532]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b83      	ldr	r3, [pc, #524]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e184      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	4b7b      	ldr	r3, [pc, #492]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d908      	bls.n	80053ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053bc:	4b78      	ldr	r3, [pc, #480]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4975      	ldr	r1, [pc, #468]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	4b70      	ldr	r3, [pc, #448]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ea:	4b6d      	ldr	r3, [pc, #436]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	496a      	ldr	r1, [pc, #424]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	4b64      	ldr	r3, [pc, #400]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005418:	4b61      	ldr	r3, [pc, #388]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	495e      	ldr	r1, [pc, #376]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	4b59      	ldr	r3, [pc, #356]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005442:	429a      	cmp	r2, r3
 8005444:	d908      	bls.n	8005458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005446:	4b56      	ldr	r3, [pc, #344]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4953      	ldr	r1, [pc, #332]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005454:	4313      	orrs	r3, r2
 8005456:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	4b4d      	ldr	r3, [pc, #308]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	429a      	cmp	r2, r3
 8005472:	d908      	bls.n	8005486 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b4a      	ldr	r3, [pc, #296]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f023 020f 	bic.w	r2, r3, #15
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4947      	ldr	r1, [pc, #284]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005482:	4313      	orrs	r3, r2
 8005484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d055      	beq.n	800553e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005492:	4b43      	ldr	r3, [pc, #268]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4940      	ldr	r1, [pc, #256]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ac:	4b3c      	ldr	r3, [pc, #240]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d121      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0f6      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d107      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054c4:	4b36      	ldr	r3, [pc, #216]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d115      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0ea      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054dc:	4b30      	ldr	r3, [pc, #192]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0de      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ec:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0d6      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054fc:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f023 0207 	bic.w	r2, r3, #7
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4925      	ldr	r1, [pc, #148]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800550a:	4313      	orrs	r3, r2
 800550c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550e:	f7fc f9a5 	bl	800185c <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005514:	e00a      	b.n	800552c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005516:	f7fc f9a1 	bl	800185c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e0be      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552c:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	429a      	cmp	r2, r3
 800553c:	d1eb      	bne.n	8005516 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	429a      	cmp	r2, r3
 8005558:	d208      	bcs.n	800556c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800555a:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f023 020f 	bic.w	r2, r3, #15
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	490e      	ldr	r1, [pc, #56]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005568:	4313      	orrs	r3, r2
 800556a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d214      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	4906      	ldr	r1, [pc, #24]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b04      	ldr	r3, [pc, #16]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e086      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
 800559c:	52002000 	.word	0x52002000
 80055a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	4b3f      	ldr	r3, [pc, #252]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d208      	bcs.n	80055d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055c0:	4b3c      	ldr	r3, [pc, #240]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4939      	ldr	r1, [pc, #228]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d208      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ee:	4b31      	ldr	r3, [pc, #196]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	492e      	ldr	r1, [pc, #184]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005618:	429a      	cmp	r2, r3
 800561a:	d208      	bcs.n	800562e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	4922      	ldr	r1, [pc, #136]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800562a:	4313      	orrs	r3, r2
 800562c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005646:	429a      	cmp	r2, r3
 8005648:	d208      	bcs.n	800565c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4917      	ldr	r1, [pc, #92]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005658:	4313      	orrs	r3, r2
 800565a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800565c:	f000 f834 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005660:	4602      	mov	r2, r0
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	4912      	ldr	r1, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x35c>)
 800566e:	5ccb      	ldrb	r3, [r1, r3]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800567a:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <HAL_RCC_ClockConfig+0x35c>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	4a0a      	ldr	r2, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x360>)
 8005692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005694:	4a0a      	ldr	r2, [pc, #40]	@ (80056c0 <HAL_RCC_ClockConfig+0x364>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_ClockConfig+0x368>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fc f892 	bl	80017c8 <HAL_InitTick>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	0800c434 	.word	0x0800c434
 80056bc:	2400007c 	.word	0x2400007c
 80056c0:	24000078 	.word	0x24000078
 80056c4:	24000080 	.word	0x24000080

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ce:	4bb3      	ldr	r3, [pc, #716]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d6:	2b18      	cmp	r3, #24
 80056d8:	f200 8155 	bhi.w	8005986 <HAL_RCC_GetSysClockFreq+0x2be>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005749 	.word	0x08005749
 80056e8:	08005987 	.word	0x08005987
 80056ec:	08005987 	.word	0x08005987
 80056f0:	08005987 	.word	0x08005987
 80056f4:	08005987 	.word	0x08005987
 80056f8:	08005987 	.word	0x08005987
 80056fc:	08005987 	.word	0x08005987
 8005700:	08005987 	.word	0x08005987
 8005704:	0800576f 	.word	0x0800576f
 8005708:	08005987 	.word	0x08005987
 800570c:	08005987 	.word	0x08005987
 8005710:	08005987 	.word	0x08005987
 8005714:	08005987 	.word	0x08005987
 8005718:	08005987 	.word	0x08005987
 800571c:	08005987 	.word	0x08005987
 8005720:	08005987 	.word	0x08005987
 8005724:	08005775 	.word	0x08005775
 8005728:	08005987 	.word	0x08005987
 800572c:	08005987 	.word	0x08005987
 8005730:	08005987 	.word	0x08005987
 8005734:	08005987 	.word	0x08005987
 8005738:	08005987 	.word	0x08005987
 800573c:	08005987 	.word	0x08005987
 8005740:	08005987 	.word	0x08005987
 8005744:	0800577b 	.word	0x0800577b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005748:	4b94      	ldr	r3, [pc, #592]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005754:	4b91      	ldr	r3, [pc, #580]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	4a90      	ldr	r2, [pc, #576]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005766:	e111      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005768:	4b8d      	ldr	r3, [pc, #564]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800576a:	61bb      	str	r3, [r7, #24]
      break;
 800576c:	e10e      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800576e:	4b8d      	ldr	r3, [pc, #564]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005770:	61bb      	str	r3, [r7, #24]
      break;
 8005772:	e10b      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005774:	4b8c      	ldr	r3, [pc, #560]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005776:	61bb      	str	r3, [r7, #24]
      break;
 8005778:	e108      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800577a:	4b88      	ldr	r3, [pc, #544]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005784:	4b85      	ldr	r3, [pc, #532]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800578e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005790:	4b82      	ldr	r3, [pc, #520]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800579a:	4b80      	ldr	r3, [pc, #512]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	08db      	lsrs	r3, r3, #3
 80057a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80e1 	beq.w	8005980 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	f000 8083 	beq.w	80058cc <HAL_RCC_GetSysClockFreq+0x204>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f200 80a1 	bhi.w	8005910 <HAL_RCC_GetSysClockFreq+0x248>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x114>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d056      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057da:	e099      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057dc:	4b6f      	ldr	r3, [pc, #444]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d02d      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e8:	4b6c      	ldr	r3, [pc, #432]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	4a6b      	ldr	r2, [pc, #428]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b62      	ldr	r3, [pc, #392]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005842:	e087      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b51      	ldr	r3, [pc, #324]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005886:	e065      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ca:	e043      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590e:	e021      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005932:	ed97 6a02 	vldr	s12, [r7, #8]
 8005936:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800593a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005952:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	0a5b      	lsrs	r3, r3, #9
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	3301      	adds	r3, #1
 8005960:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800596c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 3a90 	vmov	r3, s15
 800597c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800597e:	e005      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
      break;
 8005984:	e002      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005986:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005988:	61bb      	str	r3, [r7, #24]
      break;
 800598a:	bf00      	nop
  }

  return sysclockfreq;
 800598c:	69bb      	ldr	r3, [r7, #24]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3724      	adds	r7, #36	@ 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	58024400 	.word	0x58024400
 80059a0:	03d09000 	.word	0x03d09000
 80059a4:	003d0900 	.word	0x003d0900
 80059a8:	007a1200 	.word	0x007a1200
 80059ac:	46000000 	.word	0x46000000
 80059b0:	4c742400 	.word	0x4c742400
 80059b4:	4a742400 	.word	0x4a742400
 80059b8:	4af42400 	.word	0x4af42400

080059bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059c2:	f7ff fe81 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	0a1b      	lsrs	r3, r3, #8
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490f      	ldr	r1, [pc, #60]	@ (8005a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059e0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80059ea:	5cd3      	ldrb	r3, [r2, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	4a07      	ldr	r2, [pc, #28]	@ (8005a14 <HAL_RCC_GetHCLKFreq+0x58>)
 80059f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059fa:	4a07      	ldr	r2, [pc, #28]	@ (8005a18 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a00:	4b04      	ldr	r3, [pc, #16]	@ (8005a14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	0800c434 	.word	0x0800c434
 8005a14:	2400007c 	.word	0x2400007c
 8005a18:	24000078 	.word	0x24000078

08005a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a20:	f7ff ffcc 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005a24:	4602      	mov	r2, r0
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	4904      	ldr	r1, [pc, #16]	@ (8005a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a32:	5ccb      	ldrb	r3, [r1, r3]
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	58024400 	.word	0x58024400
 8005a44:	0800c434 	.word	0x0800c434

08005a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a4c:	f7ff ffb6 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	0800c434 	.word	0x0800c434

08005a74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a78:	b0c6      	sub	sp, #280	@ 0x118
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a98:	2500      	movs	r5, #0
 8005a9a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a9e:	d049      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aaa:	d02f      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005aac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ab0:	d828      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ab6:	d01a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005abc:	d822      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ac6:	d007      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aca:	4bab      	ldr	r3, [pc, #684]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	4aaa      	ldr	r2, [pc, #680]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ad6:	e01a      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005adc:	3308      	adds	r3, #8
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fc25 	bl	8007330 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aec:	e00f      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af2:	3328      	adds	r3, #40	@ 0x28
 8005af4:	2102      	movs	r1, #2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 fccc 	bl	8007494 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b02:	e004      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b16:	4b98      	ldr	r3, [pc, #608]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b24:	4a94      	ldr	r2, [pc, #592]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b26:	430b      	orrs	r3, r1
 8005b28:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b40:	f04f 0900 	mov.w	r9, #0
 8005b44:	ea58 0309 	orrs.w	r3, r8, r9
 8005b48:	d047      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d82a      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b7f 	.word	0x08005b7f
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005bb3 	.word	0x08005bb3
 8005b6c:	08005bb3 	.word	0x08005bb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b81      	ldr	r3, [pc, #516]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	4a80      	ldr	r2, [pc, #512]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e01a      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	3308      	adds	r3, #8
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fbd2 	bl	8007330 <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b92:	e00f      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	3328      	adds	r3, #40	@ 0x28
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fc79 	bl	8007494 <RCCEx_PLL3_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e004      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb0:	e000      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc0:	f023 0107 	bic.w	r1, r3, #7
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	4a6b      	ldr	r2, [pc, #428]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005be6:	f04f 0b00 	mov.w	fp, #0
 8005bea:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bee:	d05b      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bf8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005bfc:	d03b      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005bfe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c02:	d834      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c08:	d037      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c0e:	d82e      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c14:	d033      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c1a:	d828      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c20:	d01a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c26:	d822      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c30:	d007      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c32:	e01c      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c34:	4b50      	ldr	r3, [pc, #320]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	4a4f      	ldr	r2, [pc, #316]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c40:	e01e      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	3308      	adds	r3, #8
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fb70 	bl	8007330 <RCCEx_PLL2_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c56:	e013      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	3328      	adds	r3, #40	@ 0x28
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 fc17 	bl	8007494 <RCCEx_PLL3_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c88:	4b3b      	ldr	r3, [pc, #236]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c98:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c9e:	e003      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d05d      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cd0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cd4:	d03b      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cd6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cda:	d834      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce0:	d037      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce6:	d82e      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ce8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cec:	d033      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005cee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cf2:	d828      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf8:	d01a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cfe:	d822      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d08:	d007      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d0a:	e01c      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d18:	e01e      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1e:	3308      	adds	r3, #8
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fb04 	bl	8007330 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d2e:	e013      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d34:	3328      	adds	r3, #40	@ 0x28
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fbab 	bl	8007494 <RCCEx_PLL3_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d44:	e008      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d4c:	e004      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d70:	4a01      	ldr	r2, [pc, #4]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d72:	430b      	orrs	r3, r1
 8005d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d76:	e005      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d03a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	2b30      	cmp	r3, #48	@ 0x30
 8005dac:	d01f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005dae:	2b30      	cmp	r3, #48	@ 0x30
 8005db0:	d819      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d00c      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d815      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d111      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc2:	4baa      	ldr	r3, [pc, #680]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	4aa9      	ldr	r2, [pc, #676]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dce:	e011      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 faa9 	bl	8007330 <RCCEx_PLL2_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005de4:	e006      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dec:	e002      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	4a98      	ldr	r2, [pc, #608]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e34:	460b      	mov	r3, r1
 8005e36:	4313      	orrs	r3, r2
 8005e38:	d051      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e44:	d035      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e4a:	d82e      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e50:	d031      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e56:	d828      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5c:	d01a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e62:	d822      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6c:	d007      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e6e:	e01c      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4b7e      	ldr	r3, [pc, #504]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a7d      	ldr	r2, [pc, #500]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	3308      	adds	r3, #8
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fa52 	bl	8007330 <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e92:	e011      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e98:	3328      	adds	r3, #40	@ 0x28
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 faf9 	bl	8007494 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ece:	4a67      	ldr	r2, [pc, #412]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ed4:	e003      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005eea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ef4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d053      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f08:	d033      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f0e:	d82c      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f14:	d02f      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f1a:	d826      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f20:	d02b      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f26:	d820      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2c:	d012      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f32:	d81a      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d022      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3c:	d115      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	3308      	adds	r3, #8
 8005f44:	2101      	movs	r1, #1
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f9f2 	bl	8007330 <RCCEx_PLL2_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f52:	e015      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	3328      	adds	r3, #40	@ 0x28
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fa99 	bl	8007494 <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f68:	e00a      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f72:	bf00      	nop
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f76:	bf00      	nop
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f88:	4b38      	ldr	r3, [pc, #224]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f96:	4a35      	ldr	r2, [pc, #212]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fbc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d058      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd2:	d033      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd8:	d82c      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d02f      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe4:	d826      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fea:	d02b      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff0:	d820      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff6:	d012      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffc:	d81a      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d022      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006006:	d115      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600c:	3308      	adds	r3, #8
 800600e:	2101      	movs	r1, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f98d 	bl	8007330 <RCCEx_PLL2_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800601c:	e015      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	3328      	adds	r3, #40	@ 0x28
 8006024:	2101      	movs	r1, #1
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fa34 	bl	8007494 <RCCEx_PLL3_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006032:	e00a      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800603a:	e006      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800603c:	bf00      	nop
 800603e:	e004      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10e      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006052:	4b06      	ldr	r3, [pc, #24]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006062:	4a02      	ldr	r2, [pc, #8]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006064:	430b      	orrs	r3, r1
 8006066:	6593      	str	r3, [r2, #88]	@ 0x58
 8006068:	e006      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006088:	2300      	movs	r3, #0
 800608a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800608e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d037      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a2:	d00e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a8:	d816      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d018      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b2:	d111      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4bc4      	ldr	r3, [pc, #784]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4ac3      	ldr	r2, [pc, #780]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060c0:	e00f      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	3308      	adds	r3, #8
 80060c8:	2101      	movs	r1, #1
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 f930 	bl	8007330 <RCCEx_PLL2_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d6:	e004      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060de:	e000      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ea:	4bb7      	ldr	r3, [pc, #732]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060f8:	4ab3      	ldr	r2, [pc, #716]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800611e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d039      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612e:	2b03      	cmp	r3, #3
 8006130:	d81c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006175 	.word	0x08006175
 800613c:	08006149 	.word	0x08006149
 8006140:	08006157 	.word	0x08006157
 8006144:	08006175 	.word	0x08006175
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006148:	4b9f      	ldr	r3, [pc, #636]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	4a9e      	ldr	r2, [pc, #632]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800614e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006154:	e00f      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615a:	3308      	adds	r3, #8
 800615c:	2102      	movs	r1, #2
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f8e6 	bl	8007330 <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800617e:	4b92      	ldr	r3, [pc, #584]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	f023 0103 	bic.w	r1, r3, #3
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618c:	4a8e      	ldr	r2, [pc, #568]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618e:	430b      	orrs	r3, r1
 8006190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006192:	e003      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f000 8099 	beq.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061be:	4b83      	ldr	r3, [pc, #524]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a82      	ldr	r2, [pc, #520]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ca:	f7fb fb47 	bl	800185c <HAL_GetTick>
 80061ce:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d2:	e00b      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fb fb42 	bl	800185c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	@ 0x64
 80061e2:	d903      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061ea:	e005      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ec:	4b77      	ldr	r3, [pc, #476]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ed      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d173      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006200:	4b71      	ldr	r3, [pc, #452]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006202:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800620c:	4053      	eors	r3, r2
 800620e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006216:	4b6c      	ldr	r3, [pc, #432]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006222:	4b69      	ldr	r3, [pc, #420]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006226:	4a68      	ldr	r2, [pc, #416]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622e:	4b66      	ldr	r3, [pc, #408]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006232:	4a65      	ldr	r2, [pc, #404]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006238:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800623a:	4a63      	ldr	r2, [pc, #396]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	d118      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fb fb04 	bl	800185c <HAL_GetTick>
 8006254:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006258:	e00d      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625a:	f7fb faff 	bl	800185c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	f241 3388 	movw	r3, #5000	@ 0x1388
 800626a:	429a      	cmp	r2, r3
 800626c:	d903      	bls.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006274:	e005      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006276:	4b54      	ldr	r3, [pc, #336]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0eb      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006286:	2b00      	cmp	r3, #0
 8006288:	d129      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800629a:	d10e      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800629c:	4b4a      	ldr	r3, [pc, #296]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062ac:	091a      	lsrs	r2, r3, #4
 80062ae:	4b48      	ldr	r3, [pc, #288]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	4a45      	ldr	r2, [pc, #276]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6113      	str	r3, [r2, #16]
 80062b8:	e005      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062ba:	4b43      	ldr	r3, [pc, #268]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	4a42      	ldr	r2, [pc, #264]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062c4:	6113      	str	r3, [r2, #16]
 80062c6:	4b40      	ldr	r3, [pc, #256]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d6:	4a3c      	ldr	r2, [pc, #240]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6713      	str	r3, [r2, #112]	@ 0x70
 80062dc:	e008      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 0301 	and.w	r3, r2, #1
 80062fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006306:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	f000 808f 	beq.w	8006430 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006318:	2b28      	cmp	r3, #40	@ 0x28
 800631a:	d871      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800631c:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006409 	.word	0x08006409
 8006328:	08006401 	.word	0x08006401
 800632c:	08006401 	.word	0x08006401
 8006330:	08006401 	.word	0x08006401
 8006334:	08006401 	.word	0x08006401
 8006338:	08006401 	.word	0x08006401
 800633c:	08006401 	.word	0x08006401
 8006340:	08006401 	.word	0x08006401
 8006344:	080063d5 	.word	0x080063d5
 8006348:	08006401 	.word	0x08006401
 800634c:	08006401 	.word	0x08006401
 8006350:	08006401 	.word	0x08006401
 8006354:	08006401 	.word	0x08006401
 8006358:	08006401 	.word	0x08006401
 800635c:	08006401 	.word	0x08006401
 8006360:	08006401 	.word	0x08006401
 8006364:	080063eb 	.word	0x080063eb
 8006368:	08006401 	.word	0x08006401
 800636c:	08006401 	.word	0x08006401
 8006370:	08006401 	.word	0x08006401
 8006374:	08006401 	.word	0x08006401
 8006378:	08006401 	.word	0x08006401
 800637c:	08006401 	.word	0x08006401
 8006380:	08006401 	.word	0x08006401
 8006384:	08006409 	.word	0x08006409
 8006388:	08006401 	.word	0x08006401
 800638c:	08006401 	.word	0x08006401
 8006390:	08006401 	.word	0x08006401
 8006394:	08006401 	.word	0x08006401
 8006398:	08006401 	.word	0x08006401
 800639c:	08006401 	.word	0x08006401
 80063a0:	08006401 	.word	0x08006401
 80063a4:	08006409 	.word	0x08006409
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006401 	.word	0x08006401
 80063b0:	08006401 	.word	0x08006401
 80063b4:	08006401 	.word	0x08006401
 80063b8:	08006401 	.word	0x08006401
 80063bc:	08006401 	.word	0x08006401
 80063c0:	08006401 	.word	0x08006401
 80063c4:	08006409 	.word	0x08006409
 80063c8:	58024400 	.word	0x58024400
 80063cc:	58024800 	.word	0x58024800
 80063d0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	3308      	adds	r3, #8
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 ffa7 	bl	8007330 <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063e8:	e00f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	3328      	adds	r3, #40	@ 0x28
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 f84e 	bl	8007494 <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006412:	4bbf      	ldr	r3, [pc, #764]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006416:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006420:	4abb      	ldr	r2, [pc, #748]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6553      	str	r3, [r2, #84]	@ 0x54
 8006426:	e003      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800642c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f002 0302 	and.w	r3, r2, #2
 800643c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006446:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d041      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006456:	2b05      	cmp	r3, #5
 8006458:	d824      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	080064ad 	.word	0x080064ad
 8006464:	08006479 	.word	0x08006479
 8006468:	0800648f 	.word	0x0800648f
 800646c:	080064ad 	.word	0x080064ad
 8006470:	080064ad 	.word	0x080064ad
 8006474:	080064ad 	.word	0x080064ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647c:	3308      	adds	r3, #8
 800647e:	2101      	movs	r1, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f000 ff55 	bl	8007330 <RCCEx_PLL2_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800648c:	e00f      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800648e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006492:	3328      	adds	r3, #40	@ 0x28
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fffc 	bl	8007494 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a2:	e004      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064aa:	e000      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064b6:	4b96      	ldr	r3, [pc, #600]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	f023 0107 	bic.w	r1, r3, #7
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c4:	4a92      	ldr	r2, [pc, #584]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064c6:	430b      	orrs	r3, r1
 80064c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ca:	e003      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f002 0304 	and.w	r3, r2, #4
 80064e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d044      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d825      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006500:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006555 	.word	0x08006555
 800650c:	08006521 	.word	0x08006521
 8006510:	08006537 	.word	0x08006537
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	3308      	adds	r3, #8
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f000 ff01 	bl	8007330 <RCCEx_PLL2_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006534:	e00f      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	3328      	adds	r3, #40	@ 0x28
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f000 ffa8 	bl	8007494 <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800654a:	e004      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006552:	e000      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800655e:	4b6c      	ldr	r3, [pc, #432]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	f023 0107 	bic.w	r1, r3, #7
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656e:	4a68      	ldr	r2, [pc, #416]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006570:	430b      	orrs	r3, r1
 8006572:	6593      	str	r3, [r2, #88]	@ 0x58
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800657a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f002 0320 	and.w	r3, r2, #32
 800658a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006594:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d055      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065aa:	d033      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b0:	d82c      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b6:	d02f      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d826      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c2:	d02b      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c8:	d820      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ce:	d012      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d4:	d81a      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d022      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065de:	d115      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e4:	3308      	adds	r3, #8
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fea1 	bl	8007330 <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065f4:	e015      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 ff48 	bl	8007494 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800660a:	e00a      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006612:	e006      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006614:	bf00      	nop
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662a:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800663a:	4a35      	ldr	r2, [pc, #212]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006660:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d058      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006672:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006676:	d033      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006678:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800667c:	d82c      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d02f      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006688:	d826      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800668a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668e:	d02b      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006690:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006694:	d820      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800669a:	d012      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800669c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a0:	d81a      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d022      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d115      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	3308      	adds	r3, #8
 80066b2:	2100      	movs	r1, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fe3b 	bl	8007330 <RCCEx_PLL2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066c0:	e015      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	3328      	adds	r3, #40	@ 0x28
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fee2 	bl	8007494 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d6:	e00a      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066de:	e006      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e0:	bf00      	nop
 80066e2:	e004      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10e      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006706:	4a02      	ldr	r2, [pc, #8]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006708:	430b      	orrs	r3, r1
 800670a:	6593      	str	r3, [r2, #88]	@ 0x58
 800670c:	e006      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006732:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d055      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006744:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006748:	d033      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800674a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800674e:	d82c      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006754:	d02f      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675a:	d826      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800675c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006760:	d02b      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006762:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006766:	d820      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676c:	d012      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800676e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006772:	d81a      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677c:	d115      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006782:	3308      	adds	r3, #8
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fdd2 	bl	8007330 <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006792:	e015      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	3328      	adds	r3, #40	@ 0x28
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fe79 	bl	8007494 <RCCEx_PLL3_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a8:	e00a      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067b2:	bf00      	nop
 80067b4:	e004      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067c8:	4ba0      	ldr	r3, [pc, #640]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d8:	4a9c      	ldr	r2, [pc, #624]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f002 0308 	and.w	r3, r2, #8
 80067f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d01e      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006814:	d10c      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681a:	3328      	adds	r3, #40	@ 0x28
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fe38 	bl	8007494 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006830:	4b86      	ldr	r3, [pc, #536]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006840:	4a82      	ldr	r2, [pc, #520]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006842:	430b      	orrs	r3, r1
 8006844:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f002 0310 	and.w	r3, r2, #16
 8006852:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800685c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006860:	460b      	mov	r3, r1
 8006862:	4313      	orrs	r3, r2
 8006864:	d01e      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d10c      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	3328      	adds	r3, #40	@ 0x28
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fe09 	bl	8007494 <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800688e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800689e:	4a6b      	ldr	r2, [pc, #428]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068b2:	2300      	movs	r3, #0
 80068b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068ba:	460b      	mov	r3, r1
 80068bc:	4313      	orrs	r3, r2
 80068be:	d03e      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068cc:	d022      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d2:	d81b      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068dc:	d00b      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068de:	e015      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	3308      	adds	r3, #8
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fd21 	bl	8007330 <RCCEx_PLL2_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068f4:	e00f      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fa:	3328      	adds	r3, #40	@ 0x28
 80068fc:	2102      	movs	r1, #2
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fdc8 	bl	8007494 <RCCEx_PLL3_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800690a:	e004      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006912:	e000      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800691e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006922:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800692e:	4a47      	ldr	r2, [pc, #284]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6593      	str	r3, [r2, #88]	@ 0x58
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800694a:	673b      	str	r3, [r7, #112]	@ 0x70
 800694c:	2300      	movs	r3, #0
 800694e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006950:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006954:	460b      	mov	r3, r1
 8006956:	4313      	orrs	r3, r2
 8006958:	d03b      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006966:	d01f      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006968:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800696c:	d818      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800696e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006978:	d007      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800697a:	e011      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697c:	4b33      	ldr	r3, [pc, #204]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	4a32      	ldr	r2, [pc, #200]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006988:	e00f      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	3328      	adds	r3, #40	@ 0x28
 8006990:	2101      	movs	r1, #1
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fd7e 	bl	8007494 <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800699e:	e004      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069a6:	e000      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069b2:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c2:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80069c8:	e003      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069e0:	2300      	movs	r3, #0
 80069e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d034      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fc:	d007      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80069fe:	e011      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	4a11      	ldr	r2, [pc, #68]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a0c:	e00e      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	3308      	adds	r3, #8
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fc8a 	bl	8007330 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a42:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a48:	e006      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a4a:	bf00      	nop
 8006a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a66:	2300      	movs	r3, #0
 8006a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d00c      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	3328      	adds	r3, #40	@ 0x28
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fd09 	bl	8007494 <RCCEx_PLL3_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d036      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab4:	d018      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aba:	d811      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac0:	d014      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac6:	d80b      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d011      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad0:	d106      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	4ab6      	ldr	r2, [pc, #728]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ade:	e008      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ae6:	e004      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e002      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006aec:	bf00      	nop
 8006aee:	e000      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006afa:	4bad      	ldr	r3, [pc, #692]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b08:	4aa9      	ldr	r2, [pc, #676]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b24:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b26:	2300      	movs	r3, #0
 8006b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b34:	4b9e      	ldr	r3, [pc, #632]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b42:	4a9b      	ldr	r2, [pc, #620]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b56:	2300      	movs	r3, #0
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b64:	4b92      	ldr	r3, [pc, #584]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b68:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b72:	4a8f      	ldr	r2, [pc, #572]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b86:	2300      	movs	r3, #0
 8006b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b94:	4b86      	ldr	r3, [pc, #536]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	4a85      	ldr	r2, [pc, #532]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b9e:	6113      	str	r3, [r2, #16]
 8006ba0:	4b83      	ldr	r3, [pc, #524]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba2:	6919      	ldr	r1, [r3, #16]
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bac:	4a80      	ldr	r2, [pc, #512]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bce:	4b78      	ldr	r3, [pc, #480]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bdc:	4a74      	ldr	r2, [pc, #464]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0e:	4a68      	ldr	r2, [pc, #416]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c26:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d011      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	3308      	adds	r3, #8
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fb79 	bl	8007330 <RCCEx_PLL2_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6239      	str	r1, [r7, #32]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d011      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	3308      	adds	r3, #8
 8006c76:	2101      	movs	r1, #1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb59 	bl	8007330 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	61b9      	str	r1, [r7, #24]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006caa:	460b      	mov	r3, r1
 8006cac:	4313      	orrs	r3, r2
 8006cae:	d011      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fb39 	bl	8007330 <RCCEx_PLL2_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	6139      	str	r1, [r7, #16]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cea:	460b      	mov	r3, r1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d011      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	3328      	adds	r3, #40	@ 0x28
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fbcb 	bl	8007494 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	d011      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	3328      	adds	r3, #40	@ 0x28
 8006d36:	2101      	movs	r1, #1
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fbab 	bl	8007494 <RCCEx_PLL3_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6039      	str	r1, [r7, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	d011      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d74:	3328      	adds	r3, #40	@ 0x28
 8006d76:	2102      	movs	r1, #2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fb8b 	bl	8007494 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006d94:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006da8:	46bd      	mov	sp, r7
 8006daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400

08006db4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006db8:	f7fe fe00 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	4904      	ldr	r1, [pc, #16]	@ (8006ddc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dca:	5ccb      	ldrb	r3, [r1, r3]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	0800c434 	.word	0x0800c434

08006de0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	@ 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006de8:	4ba1      	ldr	r3, [pc, #644]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006df2:	4b9f      	ldr	r3, [pc, #636]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	0b1b      	lsrs	r3, r3, #12
 8006df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e0a:	4b99      	ldr	r3, [pc, #612]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0e:	08db      	lsrs	r3, r3, #3
 8006e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8111 	beq.w	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	f000 8083 	beq.w	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f200 80a1 	bhi.w	8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d056      	beq.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e4a:	e099      	b.n	8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e4c:	4b88      	ldr	r3, [pc, #544]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02d      	beq.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e58:	4b85      	ldr	r3, [pc, #532]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	08db      	lsrs	r3, r3, #3
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	4a84      	ldr	r2, [pc, #528]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
 8006e68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b7b      	ldr	r3, [pc, #492]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eb2:	e087      	b.n	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef6:	e065      	b.n	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b59      	ldr	r3, [pc, #356]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3a:	e043      	b.n	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4e:	4b48      	ldr	r3, [pc, #288]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f7e:	e021      	b.n	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f92:	4b37      	ldr	r3, [pc, #220]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	0a5b      	lsrs	r3, r3, #9
 8006fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fea:	ee17 2a90 	vmov	r2, s15
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	0c1b      	lsrs	r3, r3, #16
 8006ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800700c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007018:	ee17 2a90 	vmov	r2, s15
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007020:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	0e1b      	lsrs	r3, r3, #24
 8007026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800703a:	edd7 6a07 	vldr	s13, [r7, #28]
 800703e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007046:	ee17 2a90 	vmov	r2, s15
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800704e:	e008      	b.n	8007062 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	609a      	str	r2, [r3, #8]
}
 8007062:	bf00      	nop
 8007064:	3724      	adds	r7, #36	@ 0x24
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	58024400 	.word	0x58024400
 8007074:	03d09000 	.word	0x03d09000
 8007078:	46000000 	.word	0x46000000
 800707c:	4c742400 	.word	0x4c742400
 8007080:	4a742400 	.word	0x4a742400
 8007084:	4af42400 	.word	0x4af42400

08007088 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007088:	b480      	push	{r7}
 800708a:	b089      	sub	sp, #36	@ 0x24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007090:	4ba1      	ldr	r3, [pc, #644]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800709a:	4b9f      	ldr	r3, [pc, #636]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	0d1b      	lsrs	r3, r3, #20
 80070a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070b2:	4b99      	ldr	r3, [pc, #612]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b6:	08db      	lsrs	r3, r3, #3
 80070b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8111 	beq.w	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	f000 8083 	beq.w	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f200 80a1 	bhi.w	8007228 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d056      	beq.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070f2:	e099      	b.n	8007228 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070f4:	4b88      	ldr	r3, [pc, #544]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02d      	beq.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007100:	4b85      	ldr	r3, [pc, #532]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	08db      	lsrs	r3, r3, #3
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	4a84      	ldr	r2, [pc, #528]	@ (800731c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
 8007110:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b7b      	ldr	r3, [pc, #492]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800715a:	e087      	b.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800716a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716e:	4b6a      	ldr	r3, [pc, #424]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007182:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800719e:	e065      	b.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b59      	ldr	r3, [pc, #356]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e2:	e043      	b.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	4b48      	ldr	r3, [pc, #288]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a03 	vldr	s12, [r7, #12]
 800720a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007226:	e021      	b.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007232:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723a:	4b37      	ldr	r3, [pc, #220]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	ed97 6a03 	vldr	s12, [r7, #12]
 800724e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800726c:	4b2a      	ldr	r3, [pc, #168]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	0a5b      	lsrs	r3, r3, #9
 8007272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007286:	edd7 6a07 	vldr	s13, [r7, #28]
 800728a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007292:	ee17 2a90 	vmov	r2, s15
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800729a:	4b1f      	ldr	r3, [pc, #124]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c0:	ee17 2a90 	vmov	r2, s15
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072c8:	4b13      	ldr	r3, [pc, #76]	@ (8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	0e1b      	lsrs	r3, r3, #24
 80072ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ee:	ee17 2a90 	vmov	r2, s15
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072f6:	e008      	b.n	800730a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	609a      	str	r2, [r3, #8]
}
 800730a:	bf00      	nop
 800730c:	3724      	adds	r7, #36	@ 0x24
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	58024400 	.word	0x58024400
 800731c:	03d09000 	.word	0x03d09000
 8007320:	46000000 	.word	0x46000000
 8007324:	4c742400 	.word	0x4c742400
 8007328:	4a742400 	.word	0x4a742400
 800732c:	4af42400 	.word	0x4af42400

08007330 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800733e:	4b53      	ldr	r3, [pc, #332]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d101      	bne.n	800734e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e099      	b.n	8007482 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800734e:	4b4f      	ldr	r3, [pc, #316]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a4e      	ldr	r2, [pc, #312]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007354:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735a:	f7fa fa7f 	bl	800185c <HAL_GetTick>
 800735e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007360:	e008      	b.n	8007374 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007362:	f7fa fa7b 	bl	800185c <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e086      	b.n	8007482 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007374:	4b45      	ldr	r3, [pc, #276]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007380:	4b42      	ldr	r3, [pc, #264]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	031b      	lsls	r3, r3, #12
 800738e:	493f      	ldr	r1, [pc, #252]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	628b      	str	r3, [r1, #40]	@ 0x28
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	025b      	lsls	r3, r3, #9
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	3b01      	subs	r3, #1
 80073be:	061b      	lsls	r3, r3, #24
 80073c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073c4:	4931      	ldr	r1, [pc, #196]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ca:	4b30      	ldr	r3, [pc, #192]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	492d      	ldr	r1, [pc, #180]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073dc:	4b2b      	ldr	r3, [pc, #172]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	f023 0220 	bic.w	r2, r3, #32
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	4928      	ldr	r1, [pc, #160]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073ee:	4b27      	ldr	r3, [pc, #156]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f2:	4a26      	ldr	r2, [pc, #152]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073f4:	f023 0310 	bic.w	r3, r3, #16
 80073f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073fa:	4b24      	ldr	r3, [pc, #144]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 80073fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073fe:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <RCCEx_PLL2_Config+0x160>)
 8007400:	4013      	ands	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	69d2      	ldr	r2, [r2, #28]
 8007406:	00d2      	lsls	r2, r2, #3
 8007408:	4920      	ldr	r1, [pc, #128]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800740e:	4b1f      	ldr	r3, [pc, #124]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4a1e      	ldr	r2, [pc, #120]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007414:	f043 0310 	orr.w	r3, r3, #16
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007420:	4b1a      	ldr	r3, [pc, #104]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a19      	ldr	r2, [pc, #100]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007426:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800742c:	e00f      	b.n	800744e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d106      	bne.n	8007442 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007434:	4b15      	ldr	r3, [pc, #84]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a14      	ldr	r2, [pc, #80]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800743e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007440:	e005      	b.n	800744e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007442:	4b12      	ldr	r3, [pc, #72]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a11      	ldr	r2, [pc, #68]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800744e:	4b0f      	ldr	r3, [pc, #60]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a0e      	ldr	r2, [pc, #56]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007454:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745a:	f7fa f9ff 	bl	800185c <HAL_GetTick>
 800745e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007460:	e008      	b.n	8007474 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007462:	f7fa f9fb 	bl	800185c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e006      	b.n	8007482 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007474:	4b05      	ldr	r3, [pc, #20]	@ (800748c <RCCEx_PLL2_Config+0x15c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
 8007490:	ffff0007 	.word	0xffff0007

08007494 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a2:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d101      	bne.n	80074b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e099      	b.n	80075e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074b2:	4b4f      	ldr	r3, [pc, #316]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a4e      	ldr	r2, [pc, #312]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074be:	f7fa f9cd 	bl	800185c <HAL_GetTick>
 80074c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c4:	e008      	b.n	80074d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074c6:	f7fa f9c9 	bl	800185c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e086      	b.n	80075e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d8:	4b45      	ldr	r3, [pc, #276]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f0      	bne.n	80074c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074e4:	4b42      	ldr	r3, [pc, #264]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	051b      	lsls	r3, r3, #20
 80074f2:	493f      	ldr	r1, [pc, #252]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	3b01      	subs	r3, #1
 8007508:	025b      	lsls	r3, r3, #9
 800750a:	b29b      	uxth	r3, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	3b01      	subs	r3, #1
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	3b01      	subs	r3, #1
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007528:	4931      	ldr	r1, [pc, #196]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800752e:	4b30      	ldr	r3, [pc, #192]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	492d      	ldr	r1, [pc, #180]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007540:	4b2b      	ldr	r3, [pc, #172]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	4928      	ldr	r1, [pc, #160]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007552:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800755e:	4b24      	ldr	r3, [pc, #144]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007562:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <RCCEx_PLL3_Config+0x160>)
 8007564:	4013      	ands	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	69d2      	ldr	r2, [r2, #28]
 800756a:	00d2      	lsls	r2, r2, #3
 800756c:	4920      	ldr	r1, [pc, #128]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800756e:	4313      	orrs	r3, r2
 8007570:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007572:	4b1f      	ldr	r3, [pc, #124]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a1e      	ldr	r2, [pc, #120]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800757c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007584:	4b1a      	ldr	r3, [pc, #104]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	4a19      	ldr	r2, [pc, #100]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800758a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800758e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007590:	e00f      	b.n	80075b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d106      	bne.n	80075a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007598:	4b15      	ldr	r3, [pc, #84]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a14      	ldr	r2, [pc, #80]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 800759e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a4:	e005      	b.n	80075b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075a6:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	4a11      	ldr	r2, [pc, #68]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075b2:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a0e      	ldr	r2, [pc, #56]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075be:	f7fa f94d 	bl	800185c <HAL_GetTick>
 80075c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c4:	e008      	b.n	80075d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075c6:	f7fa f949 	bl	800185c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e006      	b.n	80075e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <RCCEx_PLL3_Config+0x15c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	ffff0007 	.word	0xffff0007

080075f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d071      	beq.n	80076ee <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7f9 fd94 	bl	800114c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b10      	cmp	r3, #16
 8007638:	d050      	beq.n	80076dc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	22ca      	movs	r2, #202	@ 0xca
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2253      	movs	r2, #83	@ 0x53
 8007648:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fbce 	bl	8007dec <RTC_EnterInitMode>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d124      	bne.n	80076a4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6899      	ldr	r1, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b24      	ldr	r3, [pc, #144]	@ (80076f8 <HAL_RTC_Init+0x100>)
 8007666:	400b      	ands	r3, r1
 8007668:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6899      	ldr	r1, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	0419      	lsls	r1, r3, #16
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fbda 	bl	8007e54 <RTC_ExitInitMode>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d113      	bne.n	80076d2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0203 	bic.w	r2, r2, #3
 80076b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	22ff      	movs	r2, #255	@ 0xff
 80076d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80076da:	e001      	b.n	80076e0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	ff8fffbf 	.word	0xff8fffbf

080076fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_RTC_SetTime+0x1a>
 8007712:	2302      	movs	r3, #2
 8007714:	e089      	b.n	800782a <HAL_RTC_SetTime+0x12e>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	22ca      	movs	r2, #202	@ 0xca
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2253      	movs	r2, #83	@ 0x53
 8007734:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb58 	bl	8007dec <RTC_EnterInitMode>
 800773c:	4603      	mov	r3, r0
 800773e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007740:	7cfb      	ldrb	r3, [r7, #19]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d161      	bne.n	800780a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d126      	bne.n	800779a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fbb3 	bl	8007ed0 <RTC_ByteToBcd2>
 800776a:	4603      	mov	r3, r0
 800776c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fbac 	bl	8007ed0 <RTC_ByteToBcd2>
 8007778:	4603      	mov	r3, r0
 800777a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800777c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fba4 	bl	8007ed0 <RTC_ByteToBcd2>
 8007788:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800778a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	78db      	ldrb	r3, [r3, #3]
 8007792:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e018      	b.n	80077cc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077ba:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077c0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	4b18      	ldr	r3, [pc, #96]	@ (8007834 <HAL_RTC_SetTime+0x138>)
 80077d4:	400b      	ands	r3, r1
 80077d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6899      	ldr	r1, [r3, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb27 	bl	8007e54 <RTC_ExitInitMode>
 8007806:	4603      	mov	r3, r0
 8007808:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	22ff      	movs	r2, #255	@ 0xff
 8007810:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007812:	7cfb      	ldrb	r3, [r7, #19]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d103      	bne.n	8007820 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007828:	7cfb      	ldrb	r3, [r7, #19]
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}
 8007832:	bf00      	nop
 8007834:	007f7f7f 	.word	0x007f7f7f

08007838 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b22      	ldr	r3, [pc, #136]	@ (80078ec <HAL_RTC_GetTime+0xb4>)
 8007864:	4013      	ands	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007882:	b2da      	uxtb	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007890:	b2da      	uxtb	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	0d9b      	lsrs	r3, r3, #22
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d11a      	bne.n	80078e2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fb2d 	bl	8007f10 <RTC_Bcd2ToByte>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fb24 	bl	8007f10 <RTC_Bcd2ToByte>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	789b      	ldrb	r3, [r3, #2]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fb1b 	bl	8007f10 <RTC_Bcd2ToByte>
 80078da:	4603      	mov	r3, r0
 80078dc:	461a      	mov	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	007f7f7f 	.word	0x007f7f7f

080078f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_RTC_SetDate+0x1a>
 8007906:	2302      	movs	r3, #2
 8007908:	e073      	b.n	80079f2 <HAL_RTC_SetDate+0x102>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10e      	bne.n	800793e <HAL_RTC_SetDate+0x4e>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b00      	cmp	r3, #0
 800792a:	d008      	beq.n	800793e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	f023 0310 	bic.w	r3, r3, #16
 8007934:	b2db      	uxtb	r3, r3
 8007936:	330a      	adds	r3, #10
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11c      	bne.n	800797e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fac1 	bl	8007ed0 <RTC_ByteToBcd2>
 800794e:	4603      	mov	r3, r0
 8007950:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 faba 	bl	8007ed0 <RTC_ByteToBcd2>
 800795c:	4603      	mov	r3, r0
 800795e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007960:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	789b      	ldrb	r3, [r3, #2]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fab2 	bl	8007ed0 <RTC_ByteToBcd2>
 800796c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800796e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e00e      	b.n	800799c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	78db      	ldrb	r3, [r3, #3]
 8007982:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800798a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007990:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	22ca      	movs	r2, #202	@ 0xca
 80079a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2253      	movs	r2, #83	@ 0x53
 80079aa:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa1d 	bl	8007dec <RTC_EnterInitMode>
 80079b2:	4603      	mov	r3, r0
 80079b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	6979      	ldr	r1, [r7, #20]
 80079c2:	4b0e      	ldr	r3, [pc, #56]	@ (80079fc <HAL_RTC_SetDate+0x10c>)
 80079c4:	400b      	ands	r3, r1
 80079c6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fa43 	bl	8007e54 <RTC_ExitInitMode>
 80079ce:	4603      	mov	r3, r0
 80079d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	22ff      	movs	r2, #255	@ 0xff
 80079d8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80079da:	7cfb      	ldrb	r3, [r7, #19]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80079f0:	7cfb      	ldrb	r3, [r7, #19]


}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd90      	pop	{r4, r7, pc}
 80079fa:	bf00      	nop
 80079fc:	00ffff3f 	.word	0x00ffff3f

08007a00 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	4b21      	ldr	r3, [pc, #132]	@ (8007a98 <HAL_RTC_GetDate+0x98>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	0b5b      	lsrs	r3, r3, #13
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11a      	bne.n	8007a8c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fa58 	bl	8007f10 <RTC_Bcd2ToByte>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fa4f 	bl	8007f10 <RTC_Bcd2ToByte>
 8007a72:	4603      	mov	r3, r0
 8007a74:	461a      	mov	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	789b      	ldrb	r3, [r3, #2]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fa46 	bl	8007f10 <RTC_Bcd2ToByte>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	00ffff3f 	.word	0x00ffff3f

08007a9c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b089      	sub	sp, #36	@ 0x24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RTC_SetAlarm_IT+0x1a>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e129      	b.n	8007d0a <HAL_RTC_SetAlarm_IT+0x26e>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d137      	bne.n	8007b3c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2200      	movs	r2, #0
 8007ade:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f9f3 	bl	8007ed0 <RTC_ByteToBcd2>
 8007aea:	4603      	mov	r3, r0
 8007aec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f9ec 	bl	8007ed0 <RTC_ByteToBcd2>
 8007af8:	4603      	mov	r3, r0
 8007afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007afc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	789b      	ldrb	r3, [r3, #2]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f9e4 	bl	8007ed0 <RTC_ByteToBcd2>
 8007b08:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	78db      	ldrb	r3, [r3, #3]
 8007b12:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b14:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f9d6 	bl	8007ed0 <RTC_ByteToBcd2>
 8007b24:	4603      	mov	r3, r0
 8007b26:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e023      	b.n	8007b84 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b5c:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b72:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b80:	4313      	orrs	r3, r2
 8007b82:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	22ca      	movs	r2, #202	@ 0xca
 8007b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2253      	movs	r2, #83	@ 0x53
 8007b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba8:	d14a      	bne.n	8007c40 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bb8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007bca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007bcc:	f7f9 fe46 	bl	800185c <HAL_GetTick>
 8007bd0:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007bd2:	e015      	b.n	8007c00 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bd4:	f7f9 fe42 	bl	800185c <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007be2:	d90d      	bls.n	8007c00 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	22ff      	movs	r2, #255	@ 0xff
 8007bea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e084      	b.n	8007d0a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0e2      	beq.n	8007bd4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c2c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c3c:	609a      	str	r2, [r3, #8]
 8007c3e:	e049      	b.n	8007cd4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c4e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007c60:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c62:	f7f9 fdfb 	bl	800185c <HAL_GetTick>
 8007c66:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c68:	e015      	b.n	8007c96 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c6a:	f7f9 fdf7 	bl	800185c <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c78:	d90d      	bls.n	8007c96 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	22ff      	movs	r2, #255	@ 0xff
 8007c80:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e039      	b.n	8007d0a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0e2      	beq.n	8007c6a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69fa      	ldr	r2, [r7, #28]
 8007caa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cd2:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <HAL_RTC_SetAlarm_IT+0x278>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8007d14 <HAL_RTC_SetAlarm_IT+0x278>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cde:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cee:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	22ff      	movs	r2, #255	@ 0xff
 8007cf6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3724      	adds	r7, #36	@ 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	58000080 	.word	0x58000080

08007d18 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007d20:	4b1f      	ldr	r3, [pc, #124]	@ (8007da0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007d22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d26:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#else
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d012      	beq.n	8007d5c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00b      	beq.n	8007d5c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007d54:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fcb4 	bl	800a6c4 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d012      	beq.n	8007d90 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007d88:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f908 	bl	8007fa0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58000080 	.word	0x58000080

08007da4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0d      	ldr	r2, [pc, #52]	@ (8007de8 <HAL_RTC_WaitForSynchro+0x44>)
 8007db2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007db4:	f7f9 fd52 	bl	800185c <HAL_GetTick>
 8007db8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dba:	e009      	b.n	8007dd0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dbc:	f7f9 fd4e 	bl	800185c <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dca:	d901      	bls.n	8007dd0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e007      	b.n	8007de0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0ee      	beq.n	8007dbc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	0003ff5f 	.word	0x0003ff5f

08007dec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d120      	bne.n	8007e48 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e10:	f7f9 fd24 	bl	800185c <HAL_GetTick>
 8007e14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e16:	e00d      	b.n	8007e34 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e18:	f7f9 fd20 	bl	800185c <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e26:	d905      	bls.n	8007e34 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <RTC_EnterInitMode+0x5c>
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d1e7      	bne.n	8007e18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007e60:	4b1a      	ldr	r3, [pc, #104]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a19      	ldr	r2, [pc, #100]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007e6c:	4b17      	ldr	r3, [pc, #92]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10c      	bne.n	8007e92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff93 	bl	8007da4 <HAL_RTC_WaitForSynchro>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01e      	beq.n	8007ec2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2203      	movs	r2, #3
 8007e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	e017      	b.n	8007ec2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e92:	4b0e      	ldr	r3, [pc, #56]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	4a0d      	ldr	r2, [pc, #52]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007e98:	f023 0320 	bic.w	r3, r3, #32
 8007e9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff ff80 	bl	8007da4 <HAL_RTC_WaitForSynchro>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007eb6:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	4a04      	ldr	r2, [pc, #16]	@ (8007ecc <RTC_ExitInitMode+0x78>)
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
 8007ec0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58004000 	.word	0x58004000

08007ed0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007ee2:	e005      	b.n	8007ef0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3b0a      	subs	r3, #10
 8007eee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d8f6      	bhi.n	8007ee4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b2db      	uxtb	r3, r3
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	091b      	lsrs	r3, r3, #4
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	0092      	lsls	r2, r2, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4413      	add	r3, r2
 8007f36:	b2db      	uxtb	r3, r3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3350      	adds	r3, #80	@ 0x50
 8007f56:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4413      	add	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3350      	adds	r3, #80	@ 0x50
 8007f84:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e042      	b.n	800804c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7f9 faeb 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2224      	movs	r2, #36	@ 0x24
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fbdc 	bl	80097bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd6d 	bl	8008ae4 <UART_SetConfig>
 800800a:	4603      	mov	r3, r0
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e01b      	b.n	800804c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fc5b 	bl	8009900 <UART_CheckIdleState>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08a      	sub	sp, #40	@ 0x28
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806a:	2b20      	cmp	r3, #32
 800806c:	d17b      	bne.n	8008166 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <HAL_UART_Transmit+0x26>
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e074      	b.n	8008168 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2221      	movs	r2, #33	@ 0x21
 800808a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800808e:	f7f9 fbe5 	bl	800185c <HAL_GetTick>
 8008092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ac:	d108      	bne.n	80080c0 <HAL_UART_Transmit+0x6c>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	e003      	b.n	80080c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080c8:	e030      	b.n	800812c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2180      	movs	r1, #128	@ 0x80
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f001 fcbd 	bl	8009a54 <UART_WaitOnFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e03d      	b.n	8008168 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10b      	bne.n	800810a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008100:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	3302      	adds	r3, #2
 8008106:	61bb      	str	r3, [r7, #24]
 8008108:	e007      	b.n	800811a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	3301      	adds	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1c8      	bne.n	80080ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	2140      	movs	r1, #64	@ 0x40
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 fc86 	bl	8009a54 <UART_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e006      	b.n	8008168 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008166:	2302      	movs	r3, #2
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008170:	b480      	push	{r7}
 8008172:	b091      	sub	sp, #68	@ 0x44
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008184:	2b20      	cmp	r3, #32
 8008186:	d178      	bne.n	800827a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_UART_Transmit_IT+0x24>
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e071      	b.n	800827c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	88fa      	ldrh	r2, [r7, #6]
 80081a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2221      	movs	r2, #33	@ 0x21
 80081c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081cc:	d12a      	bne.n	8008224 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d6:	d107      	bne.n	80081e8 <HAL_UART_Transmit_IT+0x78>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a29      	ldr	r2, [pc, #164]	@ (8008288 <HAL_UART_Transmit_IT+0x118>)
 80081e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80081e6:	e002      	b.n	80081ee <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a28      	ldr	r2, [pc, #160]	@ (800828c <HAL_UART_Transmit_IT+0x11c>)
 80081ec:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800820e:	637a      	str	r2, [r7, #52]	@ 0x34
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e5      	bne.n	80081ee <HAL_UART_Transmit_IT+0x7e>
 8008222:	e028      	b.n	8008276 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800822c:	d107      	bne.n	800823e <HAL_UART_Transmit_IT+0xce>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <HAL_UART_Transmit_IT+0x120>)
 800823a:	679a      	str	r2, [r3, #120]	@ 0x78
 800823c:	e002      	b.n	8008244 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a14      	ldr	r2, [pc, #80]	@ (8008294 <HAL_UART_Transmit_IT+0x124>)
 8008242:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008262:	623b      	str	r3, [r7, #32]
 8008264:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	69f9      	ldr	r1, [r7, #28]
 8008268:	6a3a      	ldr	r2, [r7, #32]
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	e000      	b.n	800827c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800827a:	2302      	movs	r3, #2
  }
}
 800827c:	4618      	mov	r0, r3
 800827e:	3744      	adds	r7, #68	@ 0x44
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	0800a239 	.word	0x0800a239
 800828c:	0800a159 	.word	0x0800a159
 8008290:	0800a097 	.word	0x0800a097
 8008294:	08009fdf 	.word	0x08009fdf

08008298 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d137      	bne.n	8008320 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_UART_Receive_DMA+0x24>
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e030      	b.n	8008322 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a18      	ldr	r2, [pc, #96]	@ (800832c <HAL_UART_Receive_DMA+0x94>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d01f      	beq.n	8008310 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d018      	beq.n	8008310 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	613b      	str	r3, [r7, #16]
   return(result);
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	69f9      	ldr	r1, [r7, #28]
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	61bb      	str	r3, [r7, #24]
   return(result);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e6      	bne.n	80082de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	461a      	mov	r2, r3
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f001 fc0a 	bl	8009b30 <UART_Start_Receive_DMA>
 800831c:	4603      	mov	r3, r0
 800831e:	e000      	b.n	8008322 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	@ 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	58000c00 	.word	0x58000c00

08008330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b0ba      	sub	sp, #232	@ 0xe8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008356:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800835a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800835e:	4013      	ands	r3, r2
 8008360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11b      	bne.n	80083a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d015      	beq.n	80083a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8377 	beq.w	8008a88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
      }
      return;
 80083a2:	e371      	b.n	8008a88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8123 	beq.w	80085f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083b2:	4b8d      	ldr	r3, [pc, #564]	@ (80085e8 <HAL_UART_IRQHandler+0x2b8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d106      	bne.n	80083c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80083ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80083be:	4b8b      	ldr	r3, [pc, #556]	@ (80085ec <HAL_UART_IRQHandler+0x2bc>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 8116 	beq.w	80085f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d011      	beq.n	80083f8 <HAL_UART_IRQHandler+0xc8>
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ee:	f043 0201 	orr.w	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <HAL_UART_IRQHandler+0xf8>
 8008404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2202      	movs	r2, #2
 8008416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841e:	f043 0204 	orr.w	r2, r3, #4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d011      	beq.n	8008458 <HAL_UART_IRQHandler+0x128>
 8008434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2204      	movs	r2, #4
 8008446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844e:	f043 0202 	orr.w	r2, r3, #2
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d017      	beq.n	8008494 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008470:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008474:	4b5c      	ldr	r3, [pc, #368]	@ (80085e8 <HAL_UART_IRQHandler+0x2b8>)
 8008476:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2208      	movs	r2, #8
 8008482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f043 0208 	orr.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800849c:	2b00      	cmp	r3, #0
 800849e:	d012      	beq.n	80084c6 <HAL_UART_IRQHandler+0x196>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084bc:	f043 0220 	orr.w	r2, r3, #32
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 82dd 	beq.w	8008a8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d013      	beq.n	8008506 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d105      	bne.n	80084f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851a:	2b40      	cmp	r3, #64	@ 0x40
 800851c:	d005      	beq.n	800852a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800851e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008522:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008526:	2b00      	cmp	r3, #0
 8008528:	d054      	beq.n	80085d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fbe8 	bl	8009d00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853a:	2b40      	cmp	r3, #64	@ 0x40
 800853c:	d146      	bne.n	80085cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800855c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800856a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800856e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1d9      	bne.n	800853e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008590:	2b00      	cmp	r3, #0
 8008592:	d017      	beq.n	80085c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859a:	4a15      	ldr	r2, [pc, #84]	@ (80085f0 <HAL_UART_IRQHandler+0x2c0>)
 800859c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fa fb55 	bl	8002c54 <HAL_DMA_Abort_IT>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d019      	beq.n	80085e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80085be:	4610      	mov	r0, r2
 80085c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c2:	e00f      	b.n	80085e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa77 	bl	8008ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ca:	e00b      	b.n	80085e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fa73 	bl	8008ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d2:	e007      	b.n	80085e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fa6f 	bl	8008ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80085e2:	e253      	b.n	8008a8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	bf00      	nop
    return;
 80085e6:	e251      	b.n	8008a8c <HAL_UART_IRQHandler+0x75c>
 80085e8:	10000001 	.word	0x10000001
 80085ec:	04000120 	.word	0x04000120
 80085f0:	08009fb3 	.word	0x08009fb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f040 81e7 	bne.w	80089cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 81e0 	beq.w	80089cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 81d9 	beq.w	80089cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2210      	movs	r2, #16
 8008620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	f040 8151 	bne.w	80088d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a96      	ldr	r2, [pc, #600]	@ (8008894 <HAL_UART_IRQHandler+0x564>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d068      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a93      	ldr	r2, [pc, #588]	@ (8008898 <HAL_UART_IRQHandler+0x568>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d061      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a91      	ldr	r2, [pc, #580]	@ (800889c <HAL_UART_IRQHandler+0x56c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d05a      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a8e      	ldr	r2, [pc, #568]	@ (80088a0 <HAL_UART_IRQHandler+0x570>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d053      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a8c      	ldr	r2, [pc, #560]	@ (80088a4 <HAL_UART_IRQHandler+0x574>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d04c      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a89      	ldr	r2, [pc, #548]	@ (80088a8 <HAL_UART_IRQHandler+0x578>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d045      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a87      	ldr	r2, [pc, #540]	@ (80088ac <HAL_UART_IRQHandler+0x57c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d03e      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a84      	ldr	r2, [pc, #528]	@ (80088b0 <HAL_UART_IRQHandler+0x580>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d037      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a82      	ldr	r2, [pc, #520]	@ (80088b4 <HAL_UART_IRQHandler+0x584>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d030      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a7f      	ldr	r2, [pc, #508]	@ (80088b8 <HAL_UART_IRQHandler+0x588>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d029      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a7d      	ldr	r2, [pc, #500]	@ (80088bc <HAL_UART_IRQHandler+0x58c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d022      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a7a      	ldr	r2, [pc, #488]	@ (80088c0 <HAL_UART_IRQHandler+0x590>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01b      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a78      	ldr	r2, [pc, #480]	@ (80088c4 <HAL_UART_IRQHandler+0x594>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d014      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a75      	ldr	r2, [pc, #468]	@ (80088c8 <HAL_UART_IRQHandler+0x598>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00d      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a73      	ldr	r2, [pc, #460]	@ (80088cc <HAL_UART_IRQHandler+0x59c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d006      	beq.n	8008712 <HAL_UART_IRQHandler+0x3e2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a70      	ldr	r2, [pc, #448]	@ (80088d0 <HAL_UART_IRQHandler+0x5a0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d106      	bne.n	8008720 <HAL_UART_IRQHandler+0x3f0>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	b29b      	uxth	r3, r3
 800871e:	e005      	b.n	800872c <HAL_UART_IRQHandler+0x3fc>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	b29b      	uxth	r3, r3
 800872c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 81ab 	beq.w	8008a90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008744:	429a      	cmp	r2, r3
 8008746:	f080 81a3 	bcs.w	8008a90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008760:	f000 8087 	beq.w	8008872 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800877c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800878e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008792:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800879a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1da      	bne.n	8008764 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800880e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800881c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800883e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008840:	f023 0310 	bic.w	r3, r3, #16
 8008844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e4      	bne.n	8008830 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886c:	4618      	mov	r0, r3
 800886e:	f7f9 fed3 	bl	8002618 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008884:	b29b      	uxth	r3, r3
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	b29b      	uxth	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f91d 	bl	8008acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008892:	e0fd      	b.n	8008a90 <HAL_UART_IRQHandler+0x760>
 8008894:	40020010 	.word	0x40020010
 8008898:	40020028 	.word	0x40020028
 800889c:	40020040 	.word	0x40020040
 80088a0:	40020058 	.word	0x40020058
 80088a4:	40020070 	.word	0x40020070
 80088a8:	40020088 	.word	0x40020088
 80088ac:	400200a0 	.word	0x400200a0
 80088b0:	400200b8 	.word	0x400200b8
 80088b4:	40020410 	.word	0x40020410
 80088b8:	40020428 	.word	0x40020428
 80088bc:	40020440 	.word	0x40020440
 80088c0:	40020458 	.word	0x40020458
 80088c4:	40020470 	.word	0x40020470
 80088c8:	40020488 	.word	0x40020488
 80088cc:	400204a0 	.word	0x400204a0
 80088d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80cf 	beq.w	8008a94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80088f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80ca 	beq.w	8008a94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008922:	647b      	str	r3, [r7, #68]	@ 0x44
 8008924:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008928:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e4      	bne.n	8008900 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	623b      	str	r3, [r7, #32]
   return(result);
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	4b55      	ldr	r3, [pc, #340]	@ (8008aa0 <HAL_UART_IRQHandler+0x770>)
 800894a:	4013      	ands	r3, r2
 800894c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800895a:	633a      	str	r2, [r7, #48]	@ 0x30
 800895c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e3      	bne.n	8008936 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0310 	bic.w	r3, r3, #16
 8008996:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	617b      	str	r3, [r7, #20]
   return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e4      	bne.n	8008982 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f881 	bl	8008acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ca:	e063      	b.n	8008a94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <HAL_UART_IRQHandler+0x6c6>
 80089d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fcc2 	bl	800a378 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089f4:	e051      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d014      	beq.n	8008a2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d008      	beq.n	8008a2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d03a      	beq.n	8008a98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
    }
    return;
 8008a2a:	e035      	b.n	8008a98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <HAL_UART_IRQHandler+0x71c>
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 fc6c 	bl	800a322 <UART_EndTransmit_IT>
    return;
 8008a4a:	e026      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <HAL_UART_IRQHandler+0x73c>
 8008a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 fc9b 	bl	800a3a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a6a:	e016      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <HAL_UART_IRQHandler+0x76a>
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0c      	bge.n	8008a9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fc83 	bl	800a38c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a86:	e008      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008a88:	bf00      	nop
 8008a8a:	e006      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
    return;
 8008a8c:	bf00      	nop
 8008a8e:	e004      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008a90:	bf00      	nop
 8008a92:	e002      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
      return;
 8008a94:	bf00      	nop
 8008a96:	e000      	b.n	8008a9a <HAL_UART_IRQHandler+0x76a>
    return;
 8008a98:	bf00      	nop
  }
}
 8008a9a:	37e8      	adds	r7, #232	@ 0xe8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	effffffe 	.word	0xeffffffe

08008aa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ae8:	b092      	sub	sp, #72	@ 0x48
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	431a      	orrs	r2, r3
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4bbe      	ldr	r3, [pc, #760]	@ (8008e0c <UART_SetConfig+0x328>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4ab3      	ldr	r2, [pc, #716]	@ (8008e10 <UART_SetConfig+0x32c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	4baf      	ldr	r3, [pc, #700]	@ (8008e14 <UART_SetConfig+0x330>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	6812      	ldr	r2, [r2, #0]
 8008b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	f023 010f 	bic.w	r1, r3, #15
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4aa6      	ldr	r2, [pc, #664]	@ (8008e18 <UART_SetConfig+0x334>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d177      	bne.n	8008c74 <UART_SetConfig+0x190>
 8008b84:	4ba5      	ldr	r3, [pc, #660]	@ (8008e1c <UART_SetConfig+0x338>)
 8008b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b8c:	2b28      	cmp	r3, #40	@ 0x28
 8008b8e:	d86d      	bhi.n	8008c6c <UART_SetConfig+0x188>
 8008b90:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <UART_SetConfig+0xb4>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008c3d 	.word	0x08008c3d
 8008b9c:	08008c6d 	.word	0x08008c6d
 8008ba0:	08008c6d 	.word	0x08008c6d
 8008ba4:	08008c6d 	.word	0x08008c6d
 8008ba8:	08008c6d 	.word	0x08008c6d
 8008bac:	08008c6d 	.word	0x08008c6d
 8008bb0:	08008c6d 	.word	0x08008c6d
 8008bb4:	08008c6d 	.word	0x08008c6d
 8008bb8:	08008c45 	.word	0x08008c45
 8008bbc:	08008c6d 	.word	0x08008c6d
 8008bc0:	08008c6d 	.word	0x08008c6d
 8008bc4:	08008c6d 	.word	0x08008c6d
 8008bc8:	08008c6d 	.word	0x08008c6d
 8008bcc:	08008c6d 	.word	0x08008c6d
 8008bd0:	08008c6d 	.word	0x08008c6d
 8008bd4:	08008c6d 	.word	0x08008c6d
 8008bd8:	08008c4d 	.word	0x08008c4d
 8008bdc:	08008c6d 	.word	0x08008c6d
 8008be0:	08008c6d 	.word	0x08008c6d
 8008be4:	08008c6d 	.word	0x08008c6d
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008c6d 	.word	0x08008c6d
 8008bf0:	08008c6d 	.word	0x08008c6d
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008c55 	.word	0x08008c55
 8008bfc:	08008c6d 	.word	0x08008c6d
 8008c00:	08008c6d 	.word	0x08008c6d
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008c6d 	.word	0x08008c6d
 8008c0c:	08008c6d 	.word	0x08008c6d
 8008c10:	08008c6d 	.word	0x08008c6d
 8008c14:	08008c6d 	.word	0x08008c6d
 8008c18:	08008c5d 	.word	0x08008c5d
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	08008c6d 	.word	0x08008c6d
 8008c24:	08008c6d 	.word	0x08008c6d
 8008c28:	08008c6d 	.word	0x08008c6d
 8008c2c:	08008c6d 	.word	0x08008c6d
 8008c30:	08008c6d 	.word	0x08008c6d
 8008c34:	08008c6d 	.word	0x08008c6d
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e326      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c44:	2304      	movs	r3, #4
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e322      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c4c:	2308      	movs	r3, #8
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e31e      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c54:	2310      	movs	r3, #16
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e31a      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e316      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c64:	2340      	movs	r3, #64	@ 0x40
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e312      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e30e      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a69      	ldr	r2, [pc, #420]	@ (8008e20 <UART_SetConfig+0x33c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d130      	bne.n	8008ce0 <UART_SetConfig+0x1fc>
 8008c7e:	4b67      	ldr	r3, [pc, #412]	@ (8008e1c <UART_SetConfig+0x338>)
 8008c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d826      	bhi.n	8008cd8 <UART_SetConfig+0x1f4>
 8008c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c90 <UART_SetConfig+0x1ac>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008cb1 	.word	0x08008cb1
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e2f0      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e2ec      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e2e8      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e2e4      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e2e0      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cd0:	2340      	movs	r3, #64	@ 0x40
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e2dc      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008cd8:	2380      	movs	r3, #128	@ 0x80
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e2d8      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8008e24 <UART_SetConfig+0x340>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d130      	bne.n	8008d4c <UART_SetConfig+0x268>
 8008cea:	4b4c      	ldr	r3, [pc, #304]	@ (8008e1c <UART_SetConfig+0x338>)
 8008cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d826      	bhi.n	8008d44 <UART_SetConfig+0x260>
 8008cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <UART_SetConfig+0x218>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d1d 	.word	0x08008d1d
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e2ba      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e2b6      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e2b2      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e2ae      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d34:	2320      	movs	r3, #32
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e2aa      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d3c:	2340      	movs	r3, #64	@ 0x40
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e2a6      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d44:	2380      	movs	r3, #128	@ 0x80
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e2a2      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a35      	ldr	r2, [pc, #212]	@ (8008e28 <UART_SetConfig+0x344>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d130      	bne.n	8008db8 <UART_SetConfig+0x2d4>
 8008d56:	4b31      	ldr	r3, [pc, #196]	@ (8008e1c <UART_SetConfig+0x338>)
 8008d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d826      	bhi.n	8008db0 <UART_SetConfig+0x2cc>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0x284>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d91 	.word	0x08008d91
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e284      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e280      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e27c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e278      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e274      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e270      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008db0:	2380      	movs	r3, #128	@ 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e26c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8008e2c <UART_SetConfig+0x348>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d142      	bne.n	8008e48 <UART_SetConfig+0x364>
 8008dc2:	4b16      	ldr	r3, [pc, #88]	@ (8008e1c <UART_SetConfig+0x338>)
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d838      	bhi.n	8008e40 <UART_SetConfig+0x35c>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0x2f0>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008ded 	.word	0x08008ded
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	08008dfd 	.word	0x08008dfd
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e31 	.word	0x08008e31
 8008de8:	08008e39 	.word	0x08008e39
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e24e      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008df4:	2304      	movs	r3, #4
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e24a      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e246      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008e04:	2310      	movs	r3, #16
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e242      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008e0c:	cfff69f3 	.word	0xcfff69f3
 8008e10:	58000c00 	.word	0x58000c00
 8008e14:	11fff4ff 	.word	0x11fff4ff
 8008e18:	40011000 	.word	0x40011000
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	40004400 	.word	0x40004400
 8008e24:	40004800 	.word	0x40004800
 8008e28:	40004c00 	.word	0x40004c00
 8008e2c:	40005000 	.word	0x40005000
 8008e30:	2320      	movs	r3, #32
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e22c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008e38:	2340      	movs	r3, #64	@ 0x40
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e228      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008e40:	2380      	movs	r3, #128	@ 0x80
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e224      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4ab1      	ldr	r2, [pc, #708]	@ (8009114 <UART_SetConfig+0x630>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d176      	bne.n	8008f40 <UART_SetConfig+0x45c>
 8008e52:	4bb1      	ldr	r3, [pc, #708]	@ (8009118 <UART_SetConfig+0x634>)
 8008e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e5a:	2b28      	cmp	r3, #40	@ 0x28
 8008e5c:	d86c      	bhi.n	8008f38 <UART_SetConfig+0x454>
 8008e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <UART_SetConfig+0x380>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008f09 	.word	0x08008f09
 8008e68:	08008f39 	.word	0x08008f39
 8008e6c:	08008f39 	.word	0x08008f39
 8008e70:	08008f39 	.word	0x08008f39
 8008e74:	08008f39 	.word	0x08008f39
 8008e78:	08008f39 	.word	0x08008f39
 8008e7c:	08008f39 	.word	0x08008f39
 8008e80:	08008f39 	.word	0x08008f39
 8008e84:	08008f11 	.word	0x08008f11
 8008e88:	08008f39 	.word	0x08008f39
 8008e8c:	08008f39 	.word	0x08008f39
 8008e90:	08008f39 	.word	0x08008f39
 8008e94:	08008f39 	.word	0x08008f39
 8008e98:	08008f39 	.word	0x08008f39
 8008e9c:	08008f39 	.word	0x08008f39
 8008ea0:	08008f39 	.word	0x08008f39
 8008ea4:	08008f19 	.word	0x08008f19
 8008ea8:	08008f39 	.word	0x08008f39
 8008eac:	08008f39 	.word	0x08008f39
 8008eb0:	08008f39 	.word	0x08008f39
 8008eb4:	08008f39 	.word	0x08008f39
 8008eb8:	08008f39 	.word	0x08008f39
 8008ebc:	08008f39 	.word	0x08008f39
 8008ec0:	08008f39 	.word	0x08008f39
 8008ec4:	08008f21 	.word	0x08008f21
 8008ec8:	08008f39 	.word	0x08008f39
 8008ecc:	08008f39 	.word	0x08008f39
 8008ed0:	08008f39 	.word	0x08008f39
 8008ed4:	08008f39 	.word	0x08008f39
 8008ed8:	08008f39 	.word	0x08008f39
 8008edc:	08008f39 	.word	0x08008f39
 8008ee0:	08008f39 	.word	0x08008f39
 8008ee4:	08008f29 	.word	0x08008f29
 8008ee8:	08008f39 	.word	0x08008f39
 8008eec:	08008f39 	.word	0x08008f39
 8008ef0:	08008f39 	.word	0x08008f39
 8008ef4:	08008f39 	.word	0x08008f39
 8008ef8:	08008f39 	.word	0x08008f39
 8008efc:	08008f39 	.word	0x08008f39
 8008f00:	08008f39 	.word	0x08008f39
 8008f04:	08008f31 	.word	0x08008f31
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e1c0      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f10:	2304      	movs	r3, #4
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e1bc      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f18:	2308      	movs	r3, #8
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e1b8      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f20:	2310      	movs	r3, #16
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e1b4      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f28:	2320      	movs	r3, #32
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e1b0      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f30:	2340      	movs	r3, #64	@ 0x40
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e1ac      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f38:	2380      	movs	r3, #128	@ 0x80
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e1a8      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a75      	ldr	r2, [pc, #468]	@ (800911c <UART_SetConfig+0x638>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d130      	bne.n	8008fac <UART_SetConfig+0x4c8>
 8008f4a:	4b73      	ldr	r3, [pc, #460]	@ (8009118 <UART_SetConfig+0x634>)
 8008f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	2b05      	cmp	r3, #5
 8008f54:	d826      	bhi.n	8008fa4 <UART_SetConfig+0x4c0>
 8008f56:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <UART_SetConfig+0x478>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008f75 	.word	0x08008f75
 8008f60:	08008f7d 	.word	0x08008f7d
 8008f64:	08008f85 	.word	0x08008f85
 8008f68:	08008f8d 	.word	0x08008f8d
 8008f6c:	08008f95 	.word	0x08008f95
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e18a      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e186      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f84:	2308      	movs	r3, #8
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e182      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f8c:	2310      	movs	r3, #16
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e17e      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f94:	2320      	movs	r3, #32
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e17a      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008f9c:	2340      	movs	r3, #64	@ 0x40
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e176      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008fa4:	2380      	movs	r3, #128	@ 0x80
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e172      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a5b      	ldr	r2, [pc, #364]	@ (8009120 <UART_SetConfig+0x63c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d130      	bne.n	8009018 <UART_SetConfig+0x534>
 8008fb6:	4b58      	ldr	r3, [pc, #352]	@ (8009118 <UART_SetConfig+0x634>)
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	2b05      	cmp	r3, #5
 8008fc0:	d826      	bhi.n	8009010 <UART_SetConfig+0x52c>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <UART_SetConfig+0x4e4>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008fe9 	.word	0x08008fe9
 8008fd0:	08008ff1 	.word	0x08008ff1
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e154      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e150      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e14c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e148      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009000:	2320      	movs	r3, #32
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e144      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009008:	2340      	movs	r3, #64	@ 0x40
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e140      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e13c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a41      	ldr	r2, [pc, #260]	@ (8009124 <UART_SetConfig+0x640>)
 800901e:	4293      	cmp	r3, r2
 8009020:	f040 8082 	bne.w	8009128 <UART_SetConfig+0x644>
 8009024:	4b3c      	ldr	r3, [pc, #240]	@ (8009118 <UART_SetConfig+0x634>)
 8009026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800902c:	2b28      	cmp	r3, #40	@ 0x28
 800902e:	d86d      	bhi.n	800910c <UART_SetConfig+0x628>
 8009030:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <UART_SetConfig+0x554>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	080090dd 	.word	0x080090dd
 800903c:	0800910d 	.word	0x0800910d
 8009040:	0800910d 	.word	0x0800910d
 8009044:	0800910d 	.word	0x0800910d
 8009048:	0800910d 	.word	0x0800910d
 800904c:	0800910d 	.word	0x0800910d
 8009050:	0800910d 	.word	0x0800910d
 8009054:	0800910d 	.word	0x0800910d
 8009058:	080090e5 	.word	0x080090e5
 800905c:	0800910d 	.word	0x0800910d
 8009060:	0800910d 	.word	0x0800910d
 8009064:	0800910d 	.word	0x0800910d
 8009068:	0800910d 	.word	0x0800910d
 800906c:	0800910d 	.word	0x0800910d
 8009070:	0800910d 	.word	0x0800910d
 8009074:	0800910d 	.word	0x0800910d
 8009078:	080090ed 	.word	0x080090ed
 800907c:	0800910d 	.word	0x0800910d
 8009080:	0800910d 	.word	0x0800910d
 8009084:	0800910d 	.word	0x0800910d
 8009088:	0800910d 	.word	0x0800910d
 800908c:	0800910d 	.word	0x0800910d
 8009090:	0800910d 	.word	0x0800910d
 8009094:	0800910d 	.word	0x0800910d
 8009098:	080090f5 	.word	0x080090f5
 800909c:	0800910d 	.word	0x0800910d
 80090a0:	0800910d 	.word	0x0800910d
 80090a4:	0800910d 	.word	0x0800910d
 80090a8:	0800910d 	.word	0x0800910d
 80090ac:	0800910d 	.word	0x0800910d
 80090b0:	0800910d 	.word	0x0800910d
 80090b4:	0800910d 	.word	0x0800910d
 80090b8:	080090fd 	.word	0x080090fd
 80090bc:	0800910d 	.word	0x0800910d
 80090c0:	0800910d 	.word	0x0800910d
 80090c4:	0800910d 	.word	0x0800910d
 80090c8:	0800910d 	.word	0x0800910d
 80090cc:	0800910d 	.word	0x0800910d
 80090d0:	0800910d 	.word	0x0800910d
 80090d4:	0800910d 	.word	0x0800910d
 80090d8:	08009105 	.word	0x08009105
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e0d6      	b.n	8009292 <UART_SetConfig+0x7ae>
 80090e4:	2304      	movs	r3, #4
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ea:	e0d2      	b.n	8009292 <UART_SetConfig+0x7ae>
 80090ec:	2308      	movs	r3, #8
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f2:	e0ce      	b.n	8009292 <UART_SetConfig+0x7ae>
 80090f4:	2310      	movs	r3, #16
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fa:	e0ca      	b.n	8009292 <UART_SetConfig+0x7ae>
 80090fc:	2320      	movs	r3, #32
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009102:	e0c6      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009104:	2340      	movs	r3, #64	@ 0x40
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910a:	e0c2      	b.n	8009292 <UART_SetConfig+0x7ae>
 800910c:	2380      	movs	r3, #128	@ 0x80
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e0be      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009114:	40011400 	.word	0x40011400
 8009118:	58024400 	.word	0x58024400
 800911c:	40007800 	.word	0x40007800
 8009120:	40007c00 	.word	0x40007c00
 8009124:	40011800 	.word	0x40011800
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4aad      	ldr	r2, [pc, #692]	@ (80093e4 <UART_SetConfig+0x900>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d176      	bne.n	8009220 <UART_SetConfig+0x73c>
 8009132:	4bad      	ldr	r3, [pc, #692]	@ (80093e8 <UART_SetConfig+0x904>)
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800913a:	2b28      	cmp	r3, #40	@ 0x28
 800913c:	d86c      	bhi.n	8009218 <UART_SetConfig+0x734>
 800913e:	a201      	add	r2, pc, #4	@ (adr r2, 8009144 <UART_SetConfig+0x660>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	080091e9 	.word	0x080091e9
 8009148:	08009219 	.word	0x08009219
 800914c:	08009219 	.word	0x08009219
 8009150:	08009219 	.word	0x08009219
 8009154:	08009219 	.word	0x08009219
 8009158:	08009219 	.word	0x08009219
 800915c:	08009219 	.word	0x08009219
 8009160:	08009219 	.word	0x08009219
 8009164:	080091f1 	.word	0x080091f1
 8009168:	08009219 	.word	0x08009219
 800916c:	08009219 	.word	0x08009219
 8009170:	08009219 	.word	0x08009219
 8009174:	08009219 	.word	0x08009219
 8009178:	08009219 	.word	0x08009219
 800917c:	08009219 	.word	0x08009219
 8009180:	08009219 	.word	0x08009219
 8009184:	080091f9 	.word	0x080091f9
 8009188:	08009219 	.word	0x08009219
 800918c:	08009219 	.word	0x08009219
 8009190:	08009219 	.word	0x08009219
 8009194:	08009219 	.word	0x08009219
 8009198:	08009219 	.word	0x08009219
 800919c:	08009219 	.word	0x08009219
 80091a0:	08009219 	.word	0x08009219
 80091a4:	08009201 	.word	0x08009201
 80091a8:	08009219 	.word	0x08009219
 80091ac:	08009219 	.word	0x08009219
 80091b0:	08009219 	.word	0x08009219
 80091b4:	08009219 	.word	0x08009219
 80091b8:	08009219 	.word	0x08009219
 80091bc:	08009219 	.word	0x08009219
 80091c0:	08009219 	.word	0x08009219
 80091c4:	08009209 	.word	0x08009209
 80091c8:	08009219 	.word	0x08009219
 80091cc:	08009219 	.word	0x08009219
 80091d0:	08009219 	.word	0x08009219
 80091d4:	08009219 	.word	0x08009219
 80091d8:	08009219 	.word	0x08009219
 80091dc:	08009219 	.word	0x08009219
 80091e0:	08009219 	.word	0x08009219
 80091e4:	08009211 	.word	0x08009211
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e050      	b.n	8009292 <UART_SetConfig+0x7ae>
 80091f0:	2304      	movs	r3, #4
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e04c      	b.n	8009292 <UART_SetConfig+0x7ae>
 80091f8:	2308      	movs	r3, #8
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e048      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009200:	2310      	movs	r3, #16
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e044      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009208:	2320      	movs	r3, #32
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e040      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009210:	2340      	movs	r3, #64	@ 0x40
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e03c      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009218:	2380      	movs	r3, #128	@ 0x80
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e038      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a71      	ldr	r2, [pc, #452]	@ (80093ec <UART_SetConfig+0x908>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d130      	bne.n	800928c <UART_SetConfig+0x7a8>
 800922a:	4b6f      	ldr	r3, [pc, #444]	@ (80093e8 <UART_SetConfig+0x904>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	2b05      	cmp	r3, #5
 8009234:	d826      	bhi.n	8009284 <UART_SetConfig+0x7a0>
 8009236:	a201      	add	r2, pc, #4	@ (adr r2, 800923c <UART_SetConfig+0x758>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	08009255 	.word	0x08009255
 8009240:	0800925d 	.word	0x0800925d
 8009244:	08009265 	.word	0x08009265
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009275 	.word	0x08009275
 8009250:	0800927d 	.word	0x0800927d
 8009254:	2302      	movs	r3, #2
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e01a      	b.n	8009292 <UART_SetConfig+0x7ae>
 800925c:	2304      	movs	r3, #4
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e016      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009264:	2308      	movs	r3, #8
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926a:	e012      	b.n	8009292 <UART_SetConfig+0x7ae>
 800926c:	2310      	movs	r3, #16
 800926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009272:	e00e      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009274:	2320      	movs	r3, #32
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927a:	e00a      	b.n	8009292 <UART_SetConfig+0x7ae>
 800927c:	2340      	movs	r3, #64	@ 0x40
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e006      	b.n	8009292 <UART_SetConfig+0x7ae>
 8009284:	2380      	movs	r3, #128	@ 0x80
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e002      	b.n	8009292 <UART_SetConfig+0x7ae>
 800928c:	2380      	movs	r3, #128	@ 0x80
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a55      	ldr	r2, [pc, #340]	@ (80093ec <UART_SetConfig+0x908>)
 8009298:	4293      	cmp	r3, r2
 800929a:	f040 80f8 	bne.w	800948e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800929e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	dc46      	bgt.n	8009334 <UART_SetConfig+0x850>
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	db75      	blt.n	8009396 <UART_SetConfig+0x8b2>
 80092aa:	3b02      	subs	r3, #2
 80092ac:	2b1e      	cmp	r3, #30
 80092ae:	d872      	bhi.n	8009396 <UART_SetConfig+0x8b2>
 80092b0:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <UART_SetConfig+0x7d4>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	0800933b 	.word	0x0800933b
 80092bc:	08009397 	.word	0x08009397
 80092c0:	08009343 	.word	0x08009343
 80092c4:	08009397 	.word	0x08009397
 80092c8:	08009397 	.word	0x08009397
 80092cc:	08009397 	.word	0x08009397
 80092d0:	08009353 	.word	0x08009353
 80092d4:	08009397 	.word	0x08009397
 80092d8:	08009397 	.word	0x08009397
 80092dc:	08009397 	.word	0x08009397
 80092e0:	08009397 	.word	0x08009397
 80092e4:	08009397 	.word	0x08009397
 80092e8:	08009397 	.word	0x08009397
 80092ec:	08009397 	.word	0x08009397
 80092f0:	08009363 	.word	0x08009363
 80092f4:	08009397 	.word	0x08009397
 80092f8:	08009397 	.word	0x08009397
 80092fc:	08009397 	.word	0x08009397
 8009300:	08009397 	.word	0x08009397
 8009304:	08009397 	.word	0x08009397
 8009308:	08009397 	.word	0x08009397
 800930c:	08009397 	.word	0x08009397
 8009310:	08009397 	.word	0x08009397
 8009314:	08009397 	.word	0x08009397
 8009318:	08009397 	.word	0x08009397
 800931c:	08009397 	.word	0x08009397
 8009320:	08009397 	.word	0x08009397
 8009324:	08009397 	.word	0x08009397
 8009328:	08009397 	.word	0x08009397
 800932c:	08009397 	.word	0x08009397
 8009330:	08009389 	.word	0x08009389
 8009334:	2b40      	cmp	r3, #64	@ 0x40
 8009336:	d02a      	beq.n	800938e <UART_SetConfig+0x8aa>
 8009338:	e02d      	b.n	8009396 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800933a:	f7fd fd3b 	bl	8006db4 <HAL_RCCEx_GetD3PCLK1Freq>
 800933e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009340:	e02f      	b.n	80093a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd fd4a 	bl	8006de0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800934c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009350:	e027      	b.n	80093a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009352:	f107 0318 	add.w	r3, r7, #24
 8009356:	4618      	mov	r0, r3
 8009358:	f7fd fe96 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009360:	e01f      	b.n	80093a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009362:	4b21      	ldr	r3, [pc, #132]	@ (80093e8 <UART_SetConfig+0x904>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800936e:	4b1e      	ldr	r3, [pc, #120]	@ (80093e8 <UART_SetConfig+0x904>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	08db      	lsrs	r3, r3, #3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <UART_SetConfig+0x90c>)
 800937a:	fa22 f303 	lsr.w	r3, r2, r3
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009380:	e00f      	b.n	80093a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009382:	4b1b      	ldr	r3, [pc, #108]	@ (80093f0 <UART_SetConfig+0x90c>)
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009386:	e00c      	b.n	80093a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009388:	4b1a      	ldr	r3, [pc, #104]	@ (80093f4 <UART_SetConfig+0x910>)
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800938c:	e009      	b.n	80093a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800938e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e005      	b.n	80093a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 81ee 	beq.w	8009786 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ae:	4a12      	ldr	r2, [pc, #72]	@ (80093f8 <UART_SetConfig+0x914>)
 80093b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	4413      	add	r3, r2
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d305      	bcc.n	80093da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d910      	bls.n	80093fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093e0:	e1d1      	b.n	8009786 <UART_SetConfig+0xca2>
 80093e2:	bf00      	nop
 80093e4:	40011c00 	.word	0x40011c00
 80093e8:	58024400 	.word	0x58024400
 80093ec:	58000c00 	.word	0x58000c00
 80093f0:	03d09000 	.word	0x03d09000
 80093f4:	003d0900 	.word	0x003d0900
 80093f8:	0800c44c 	.word	0x0800c44c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093fe:	2200      	movs	r2, #0
 8009400:	60bb      	str	r3, [r7, #8]
 8009402:	60fa      	str	r2, [r7, #12]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009408:	4ac0      	ldr	r2, [pc, #768]	@ (800970c <UART_SetConfig+0xc28>)
 800940a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800940e:	b29b      	uxth	r3, r3
 8009410:	2200      	movs	r2, #0
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800941e:	f7f6 ffd7 	bl	80003d0 <__aeabi_uldivmod>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4610      	mov	r0, r2
 8009428:	4619      	mov	r1, r3
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	020b      	lsls	r3, r1, #8
 8009434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009438:	0202      	lsls	r2, r0, #8
 800943a:	6979      	ldr	r1, [r7, #20]
 800943c:	6849      	ldr	r1, [r1, #4]
 800943e:	0849      	lsrs	r1, r1, #1
 8009440:	2000      	movs	r0, #0
 8009442:	460c      	mov	r4, r1
 8009444:	4605      	mov	r5, r0
 8009446:	eb12 0804 	adds.w	r8, r2, r4
 800944a:	eb43 0905 	adc.w	r9, r3, r5
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	469a      	mov	sl, r3
 8009456:	4693      	mov	fp, r2
 8009458:	4652      	mov	r2, sl
 800945a:	465b      	mov	r3, fp
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f6 ffb6 	bl	80003d0 <__aeabi_uldivmod>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4613      	mov	r3, r2
 800946a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800946c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009472:	d308      	bcc.n	8009486 <UART_SetConfig+0x9a2>
 8009474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800947a:	d204      	bcs.n	8009486 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009482:	60da      	str	r2, [r3, #12]
 8009484:	e17f      	b.n	8009786 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800948c:	e17b      	b.n	8009786 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009496:	f040 80bd 	bne.w	8009614 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800949a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800949e:	2b20      	cmp	r3, #32
 80094a0:	dc48      	bgt.n	8009534 <UART_SetConfig+0xa50>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	db7b      	blt.n	800959e <UART_SetConfig+0xaba>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d879      	bhi.n	800959e <UART_SetConfig+0xaba>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <UART_SetConfig+0x9cc>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	08009543 	.word	0x08009543
 80094b8:	0800959f 	.word	0x0800959f
 80094bc:	0800959f 	.word	0x0800959f
 80094c0:	0800954b 	.word	0x0800954b
 80094c4:	0800959f 	.word	0x0800959f
 80094c8:	0800959f 	.word	0x0800959f
 80094cc:	0800959f 	.word	0x0800959f
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	0800959f 	.word	0x0800959f
 80094d8:	0800959f 	.word	0x0800959f
 80094dc:	0800959f 	.word	0x0800959f
 80094e0:	0800959f 	.word	0x0800959f
 80094e4:	0800959f 	.word	0x0800959f
 80094e8:	0800959f 	.word	0x0800959f
 80094ec:	0800959f 	.word	0x0800959f
 80094f0:	0800956b 	.word	0x0800956b
 80094f4:	0800959f 	.word	0x0800959f
 80094f8:	0800959f 	.word	0x0800959f
 80094fc:	0800959f 	.word	0x0800959f
 8009500:	0800959f 	.word	0x0800959f
 8009504:	0800959f 	.word	0x0800959f
 8009508:	0800959f 	.word	0x0800959f
 800950c:	0800959f 	.word	0x0800959f
 8009510:	0800959f 	.word	0x0800959f
 8009514:	0800959f 	.word	0x0800959f
 8009518:	0800959f 	.word	0x0800959f
 800951c:	0800959f 	.word	0x0800959f
 8009520:	0800959f 	.word	0x0800959f
 8009524:	0800959f 	.word	0x0800959f
 8009528:	0800959f 	.word	0x0800959f
 800952c:	0800959f 	.word	0x0800959f
 8009530:	08009591 	.word	0x08009591
 8009534:	2b40      	cmp	r3, #64	@ 0x40
 8009536:	d02e      	beq.n	8009596 <UART_SetConfig+0xab2>
 8009538:	e031      	b.n	800959e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fc fa6f 	bl	8005a1c <HAL_RCC_GetPCLK1Freq>
 800953e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009540:	e033      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009542:	f7fc fa81 	bl	8005a48 <HAL_RCC_GetPCLK2Freq>
 8009546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009548:	e02f      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd fc46 	bl	8006de0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009558:	e027      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955a:	f107 0318 	add.w	r3, r7, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd fd92 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009568:	e01f      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956a:	4b69      	ldr	r3, [pc, #420]	@ (8009710 <UART_SetConfig+0xc2c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009576:	4b66      	ldr	r3, [pc, #408]	@ (8009710 <UART_SetConfig+0xc2c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	08db      	lsrs	r3, r3, #3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	4a64      	ldr	r2, [pc, #400]	@ (8009714 <UART_SetConfig+0xc30>)
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009588:	e00f      	b.n	80095aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800958a:	4b62      	ldr	r3, [pc, #392]	@ (8009714 <UART_SetConfig+0xc30>)
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958e:	e00c      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009590:	4b61      	ldr	r3, [pc, #388]	@ (8009718 <UART_SetConfig+0xc34>)
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e009      	b.n	80095aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959c:	e005      	b.n	80095aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80ea 	beq.w	8009786 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b6:	4a55      	ldr	r2, [pc, #340]	@ (800970c <UART_SetConfig+0xc28>)
 80095b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095bc:	461a      	mov	r2, r3
 80095be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c4:	005a      	lsls	r2, r3, #1
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	441a      	add	r2, r3
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	2b0f      	cmp	r3, #15
 80095dc:	d916      	bls.n	800960c <UART_SetConfig+0xb28>
 80095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095e4:	d212      	bcs.n	800960c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f023 030f 	bic.w	r3, r3, #15
 80095ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	085b      	lsrs	r3, r3, #1
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095fe:	4313      	orrs	r3, r2
 8009600:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009608:	60da      	str	r2, [r3, #12]
 800960a:	e0bc      	b.n	8009786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009612:	e0b8      	b.n	8009786 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009614:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009618:	2b20      	cmp	r3, #32
 800961a:	dc4b      	bgt.n	80096b4 <UART_SetConfig+0xbd0>
 800961c:	2b00      	cmp	r3, #0
 800961e:	f2c0 8087 	blt.w	8009730 <UART_SetConfig+0xc4c>
 8009622:	2b20      	cmp	r3, #32
 8009624:	f200 8084 	bhi.w	8009730 <UART_SetConfig+0xc4c>
 8009628:	a201      	add	r2, pc, #4	@ (adr r2, 8009630 <UART_SetConfig+0xb4c>)
 800962a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962e:	bf00      	nop
 8009630:	080096bb 	.word	0x080096bb
 8009634:	080096c3 	.word	0x080096c3
 8009638:	08009731 	.word	0x08009731
 800963c:	08009731 	.word	0x08009731
 8009640:	080096cb 	.word	0x080096cb
 8009644:	08009731 	.word	0x08009731
 8009648:	08009731 	.word	0x08009731
 800964c:	08009731 	.word	0x08009731
 8009650:	080096db 	.word	0x080096db
 8009654:	08009731 	.word	0x08009731
 8009658:	08009731 	.word	0x08009731
 800965c:	08009731 	.word	0x08009731
 8009660:	08009731 	.word	0x08009731
 8009664:	08009731 	.word	0x08009731
 8009668:	08009731 	.word	0x08009731
 800966c:	08009731 	.word	0x08009731
 8009670:	080096eb 	.word	0x080096eb
 8009674:	08009731 	.word	0x08009731
 8009678:	08009731 	.word	0x08009731
 800967c:	08009731 	.word	0x08009731
 8009680:	08009731 	.word	0x08009731
 8009684:	08009731 	.word	0x08009731
 8009688:	08009731 	.word	0x08009731
 800968c:	08009731 	.word	0x08009731
 8009690:	08009731 	.word	0x08009731
 8009694:	08009731 	.word	0x08009731
 8009698:	08009731 	.word	0x08009731
 800969c:	08009731 	.word	0x08009731
 80096a0:	08009731 	.word	0x08009731
 80096a4:	08009731 	.word	0x08009731
 80096a8:	08009731 	.word	0x08009731
 80096ac:	08009731 	.word	0x08009731
 80096b0:	08009723 	.word	0x08009723
 80096b4:	2b40      	cmp	r3, #64	@ 0x40
 80096b6:	d037      	beq.n	8009728 <UART_SetConfig+0xc44>
 80096b8:	e03a      	b.n	8009730 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ba:	f7fc f9af 	bl	8005a1c <HAL_RCC_GetPCLK1Freq>
 80096be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096c0:	e03c      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096c2:	f7fc f9c1 	bl	8005a48 <HAL_RCC_GetPCLK2Freq>
 80096c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096c8:	e038      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fd fb86 	bl	8006de0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d8:	e030      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096da:	f107 0318 	add.w	r3, r7, #24
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fd fcd2 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e8:	e028      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096ea:	4b09      	ldr	r3, [pc, #36]	@ (8009710 <UART_SetConfig+0xc2c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d012      	beq.n	800971c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096f6:	4b06      	ldr	r3, [pc, #24]	@ (8009710 <UART_SetConfig+0xc2c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	08db      	lsrs	r3, r3, #3
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	4a04      	ldr	r2, [pc, #16]	@ (8009714 <UART_SetConfig+0xc30>)
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009708:	e018      	b.n	800973c <UART_SetConfig+0xc58>
 800970a:	bf00      	nop
 800970c:	0800c44c 	.word	0x0800c44c
 8009710:	58024400 	.word	0x58024400
 8009714:	03d09000 	.word	0x03d09000
 8009718:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800971c:	4b24      	ldr	r3, [pc, #144]	@ (80097b0 <UART_SetConfig+0xccc>)
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e00c      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009722:	4b24      	ldr	r3, [pc, #144]	@ (80097b4 <UART_SetConfig+0xcd0>)
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009726:	e009      	b.n	800973c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972e:	e005      	b.n	800973c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800973a:	bf00      	nop
    }

    if (pclk != 0U)
 800973c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d021      	beq.n	8009786 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009746:	4a1c      	ldr	r2, [pc, #112]	@ (80097b8 <UART_SetConfig+0xcd4>)
 8009748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800974c:	461a      	mov	r2, r3
 800974e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009750:	fbb3 f2f2 	udiv	r2, r3, r2
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	085b      	lsrs	r3, r3, #1
 800975a:	441a      	add	r2, r3
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	fbb2 f3f3 	udiv	r3, r2, r3
 8009764:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	2b0f      	cmp	r3, #15
 800976a:	d909      	bls.n	8009780 <UART_SetConfig+0xc9c>
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009772:	d205      	bcs.n	8009780 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	b29a      	uxth	r2, r3
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	e002      	b.n	8009786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2201      	movs	r2, #1
 800978a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2201      	movs	r2, #1
 8009792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2200      	movs	r2, #0
 800979a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3748      	adds	r7, #72	@ 0x48
 80097aa:	46bd      	mov	sp, r7
 80097ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097b0:	03d09000 	.word	0x03d09000
 80097b4:	003d0900 	.word	0x003d0900
 80097b8:	0800c44c 	.word	0x0800c44c

080097bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098ba:	d10a      	bne.n	80098d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b098      	sub	sp, #96	@ 0x60
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009910:	f7f7 ffa4 	bl	800185c <HAL_GetTick>
 8009914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d12f      	bne.n	8009984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800992c:	2200      	movs	r2, #0
 800992e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f88e 	bl	8009a54 <UART_WaitOnFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d022      	beq.n	8009984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009946:	e853 3f00 	ldrex	r3, [r3]
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800994c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009952:	653b      	str	r3, [r7, #80]	@ 0x50
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800995c:	647b      	str	r3, [r7, #68]	@ 0x44
 800995e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e6      	bne.n	800993e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e063      	b.n	8009a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b04      	cmp	r3, #4
 8009990:	d149      	bne.n	8009a26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800999a:	2200      	movs	r2, #0
 800999c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f857 	bl	8009a54 <UART_WaitOnFlagUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d03c      	beq.n	8009a26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	623b      	str	r3, [r7, #32]
   return(result);
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80099cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e6      	bne.n	80099ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099fe:	61fa      	str	r2, [r7, #28]
 8009a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	69b9      	ldr	r1, [r7, #24]
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e012      	b.n	8009a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3758      	adds	r7, #88	@ 0x58
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	4613      	mov	r3, r2
 8009a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a64:	e04f      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6c:	d04b      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a6e:	f7f7 fef5 	bl	800185c <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d302      	bcc.n	8009a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e04e      	b.n	8009b26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d037      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b80      	cmp	r3, #128	@ 0x80
 8009a9a:	d034      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d031      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	f003 0308 	and.w	r3, r3, #8
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d110      	bne.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2208      	movs	r2, #8
 8009ab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f921 	bl	8009d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e029      	b.n	8009b26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae0:	d111      	bne.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f907 	bl	8009d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e00f      	b.n	8009b26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69da      	ldr	r2, [r3, #28]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	bf0c      	ite	eq
 8009b16:	2301      	moveq	r3, #1
 8009b18:	2300      	movne	r3, #0
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d0a0      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b096      	sub	sp, #88	@ 0x58
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2222      	movs	r2, #34	@ 0x22
 8009b58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d02d      	beq.n	8009bc2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b6c:	4a40      	ldr	r2, [pc, #256]	@ (8009c70 <UART_Start_Receive_DMA+0x140>)
 8009b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b76:	4a3f      	ldr	r2, [pc, #252]	@ (8009c74 <UART_Start_Receive_DMA+0x144>)
 8009b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b80:	4a3d      	ldr	r2, [pc, #244]	@ (8009c78 <UART_Start_Receive_DMA+0x148>)
 8009b82:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3324      	adds	r3, #36	@ 0x24
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	f7f8 face 	bl	8002144 <HAL_DMA_Start_IT>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d009      	beq.n	8009bc2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2210      	movs	r2, #16
 8009bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e051      	b.n	8009c66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d018      	beq.n	8009bfc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e6      	bne.n	8009bca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3308      	adds	r3, #8
 8009c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	f043 0301 	orr.w	r3, r3, #1
 8009c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c24:	e841 2300 	strex	r3, r2, [r1]
 8009c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e5      	bne.n	8009bfc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c50:	623a      	str	r2, [r7, #32]
 8009c52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	69f9      	ldr	r1, [r7, #28]
 8009c56:	6a3a      	ldr	r2, [r7, #32]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e5      	bne.n	8009c30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3758      	adds	r7, #88	@ 0x58
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	08009dcd 	.word	0x08009dcd
 8009c74:	08009ef5 	.word	0x08009ef5
 8009c78:	08009f33 	.word	0x08009f33

08009c7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b08f      	sub	sp, #60	@ 0x3c
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ca4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e6      	bne.n	8009c84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cd6:	61ba      	str	r2, [r7, #24]
 8009cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6979      	ldr	r1, [r7, #20]
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009cf2:	bf00      	nop
 8009cf4:	373c      	adds	r7, #60	@ 0x3c
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
	...

08009d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b095      	sub	sp, #84	@ 0x54
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e6      	bne.n	8009d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009dc8 <UART_EndRxTransfer+0xc8>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e5      	bne.n	8009d3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d118      	bne.n	8009da8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f023 0310 	bic.w	r3, r3, #16
 8009d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6979      	ldr	r1, [r7, #20]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	613b      	str	r3, [r7, #16]
   return(result);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009dbc:	bf00      	nop
 8009dbe:	3754      	adds	r7, #84	@ 0x54
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	effffffe 	.word	0xeffffffe

08009dcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b09c      	sub	sp, #112	@ 0x70
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de2:	d071      	beq.n	8009ec8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e30:	f023 0301 	bic.w	r3, r3, #1
 8009e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e5      	bne.n	8009e1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	623b      	str	r3, [r7, #32]
   return(result);
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e5      	bne.n	8009e52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d118      	bne.n	8009ec8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0310 	bic.w	r3, r3, #16
 8009eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	69b9      	ldr	r1, [r7, #24]
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e6      	bne.n	8009e96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eca:	2200      	movs	r2, #0
 8009ecc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d107      	bne.n	8009ee6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009edc:	4619      	mov	r1, r3
 8009ede:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ee0:	f7fe fdf4 	bl	8008acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ee4:	e002      	b.n	8009eec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009ee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ee8:	f000 fe06 	bl	800aaf8 <HAL_UART_RxCpltCallback>
}
 8009eec:	bf00      	nop
 8009eee:	3770      	adds	r7, #112	@ 0x70
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d109      	bne.n	8009f24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7fe fdd5 	bl	8008acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f22:	e002      	b.n	8009f2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fe fdbd 	bl	8008aa4 <HAL_UART_RxHalfCpltCallback>
}
 8009f2a:	bf00      	nop
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b086      	sub	sp, #24
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f5a:	2b80      	cmp	r3, #128	@ 0x80
 8009f5c:	d109      	bne.n	8009f72 <UART_DMAError+0x40>
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b21      	cmp	r3, #33	@ 0x21
 8009f62:	d106      	bne.n	8009f72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009f6c:	6978      	ldr	r0, [r7, #20]
 8009f6e:	f7ff fe85 	bl	8009c7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f7c:	2b40      	cmp	r3, #64	@ 0x40
 8009f7e:	d109      	bne.n	8009f94 <UART_DMAError+0x62>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b22      	cmp	r3, #34	@ 0x22
 8009f84:	d106      	bne.n	8009f94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	f7ff feb6 	bl	8009d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f9a:	f043 0210 	orr.w	r2, r3, #16
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fa4:	6978      	ldr	r0, [r7, #20]
 8009fa6:	f7fe fd87 	bl	8008ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009faa:	bf00      	nop
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7fe fd71 	bl	8008ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b08f      	sub	sp, #60	@ 0x3c
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fec:	2b21      	cmp	r3, #33	@ 0x21
 8009fee:	d14c      	bne.n	800a08a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d132      	bne.n	800a062 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	61fb      	str	r3, [r7, #28]
   return(result);
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a01c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e6      	bne.n	8009ffc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a042:	633b      	str	r3, [r7, #48]	@ 0x30
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	61bb      	str	r3, [r7, #24]
 800a04e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6979      	ldr	r1, [r7, #20]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	613b      	str	r3, [r7, #16]
   return(result);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a060:	e013      	b.n	800a08a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a07e:	b29b      	uxth	r3, r3
 800a080:	3b01      	subs	r3, #1
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a08a:	bf00      	nop
 800a08c:	373c      	adds	r7, #60	@ 0x3c
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a096:	b480      	push	{r7}
 800a098:	b091      	sub	sp, #68	@ 0x44
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a4:	2b21      	cmp	r3, #33	@ 0x21
 800a0a6:	d151      	bne.n	800a14c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d132      	bne.n	800a11a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	e853 3f00 	ldrex	r3, [r3]
 800a0c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0da:	e841 2300 	strex	r3, r2, [r1]
 800a0de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e6      	bne.n	800a0b4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	69b9      	ldr	r1, [r7, #24]
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	617b      	str	r3, [r7, #20]
   return(result);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e6      	bne.n	800a0e6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a118:	e018      	b.n	800a14c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a12e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a134:	1c9a      	adds	r2, r3, #2
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a14c:	bf00      	nop
 800a14e:	3744      	adds	r7, #68	@ 0x44
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b091      	sub	sp, #68	@ 0x44
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a166:	2b21      	cmp	r3, #33	@ 0x21
 800a168:	d160      	bne.n	800a22c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a170:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a172:	e057      	b.n	800a224 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d133      	bne.n	800a1e8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	623b      	str	r3, [r7, #32]
   return(result);
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a196:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3308      	adds	r3, #8
 800a19e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e5      	bne.n	800a180 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	61fb      	str	r3, [r7, #28]
 800a1d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	69b9      	ldr	r1, [r7, #24]
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a1e6:	e021      	b.n	800a22c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d013      	beq.n	800a21e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a21e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a220:	3b01      	subs	r3, #1
 800a222:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a224:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1a4      	bne.n	800a174 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a22a:	e7ff      	b.n	800a22c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a22c:	bf00      	nop
 800a22e:	3744      	adds	r7, #68	@ 0x44
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a238:	b480      	push	{r7}
 800a23a:	b091      	sub	sp, #68	@ 0x44
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a246:	2b21      	cmp	r3, #33	@ 0x21
 800a248:	d165      	bne.n	800a316 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a250:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a252:	e05c      	b.n	800a30e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d133      	bne.n	800a2c8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3308      	adds	r3, #8
 800a266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e5      	bne.n	800a260 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	61bb      	str	r3, [r7, #24]
 800a2b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6979      	ldr	r1, [r7, #20]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a2c6:	e026      	b.n	800a316 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d018      	beq.n	800a308 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2ea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2f0:	1c9a      	adds	r2, r3, #2
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	3b01      	subs	r3, #1
 800a300:	b29a      	uxth	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a308:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a30a:	3b01      	subs	r3, #1
 800a30c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a30e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a310:	2b00      	cmp	r3, #0
 800a312:	d19f      	bne.n	800a254 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a314:	e7ff      	b.n	800a316 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a316:	bf00      	nop
 800a318:	3744      	adds	r7, #68	@ 0x44
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b088      	sub	sp, #32
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60bb      	str	r3, [r7, #8]
   return(result);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	613b      	str	r3, [r7, #16]
   return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fbd4 	bl	800ab18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a370:	bf00      	nop
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d101      	bne.n	800a3ca <HAL_UARTEx_DisableFifoMode+0x16>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e027      	b.n	800a41a <HAL_UARTEx_DisableFifoMode+0x66>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2224      	movs	r2, #36	@ 0x24
 800a3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a43a:	2302      	movs	r3, #2
 800a43c:	e02d      	b.n	800a49a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2224      	movs	r2, #36	@ 0x24
 800a44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0201 	bic.w	r2, r2, #1
 800a464:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f850 	bl	800a520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2220      	movs	r2, #32
 800a48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d101      	bne.n	800a4ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e02d      	b.n	800a516 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2224      	movs	r2, #36	@ 0x24
 800a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 0201 	bic.w	r2, r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f812 	bl	800a520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2220      	movs	r2, #32
 800a508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d108      	bne.n	800a542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a540:	e031      	b.n	800a5a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a542:	2310      	movs	r3, #16
 800a544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a546:	2310      	movs	r3, #16
 800a548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	0e5b      	lsrs	r3, r3, #25
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 0307 	and.w	r3, r3, #7
 800a558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	0f5b      	lsrs	r3, r3, #29
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 0307 	and.w	r3, r3, #7
 800a568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	7b3a      	ldrb	r2, [r7, #12]
 800a56e:	4911      	ldr	r1, [pc, #68]	@ (800a5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a570:	5c8a      	ldrb	r2, [r1, r2]
 800a572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a576:	7b3a      	ldrb	r2, [r7, #12]
 800a578:	490f      	ldr	r1, [pc, #60]	@ (800a5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a57a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a580:	b29a      	uxth	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	7b7a      	ldrb	r2, [r7, #13]
 800a58c:	4909      	ldr	r1, [pc, #36]	@ (800a5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a58e:	5c8a      	ldrb	r2, [r1, r2]
 800a590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a594:	7b7a      	ldrb	r2, [r7, #13]
 800a596:	4908      	ldr	r1, [pc, #32]	@ (800a5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a59a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	0800c464 	.word	0x0800c464
 800a5b8:	0800c46c 	.word	0x0800c46c

0800a5bc <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a5c6:	f000 f86d 	bl	800a6a4 <HAL_ResumeTick>

//	HAL_UART_MspInit(&huart3);

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a5ca:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <HAL_GPIO_EXTI_Callback+0x34>)
 800a5cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5d0:	4808      	ldr	r0, [pc, #32]	@ (800a5f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a5d2:	f000 fdef 	bl	800b1b4 <sniprintf>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a5da:	89fa      	ldrh	r2, [r7, #14]
 800a5dc:	2364      	movs	r3, #100	@ 0x64
 800a5de:	4905      	ldr	r1, [pc, #20]	@ (800a5f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a5e0:	4805      	ldr	r0, [pc, #20]	@ (800a5f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a5e2:	f7fd fd37 	bl	8008054 <HAL_UART_Transmit>

//	HAL_NVIC_SystemReset();
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800c3c4 	.word	0x0800c3c4
 800a5f4:	24000668 	.word	0x24000668
 800a5f8:	24000558 	.word	0x24000558

0800a5fc <lowPowerModeTask>:
#include "realtimeclock.h"

char res[100] = {0};

void lowPowerModeTask(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
	if(getRtcAlarmStatus() == true)
 800a602:	f000 fa5d 	bl	800aac0 <getRtcAlarmStatus>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d025      	beq.n	800a658 <lowPowerModeTask+0x5c>
	{
	    uint16_t length = snprintf(res, 512, "RTC Alarm Triggered \r\n");
 800a60c:	4a14      	ldr	r2, [pc, #80]	@ (800a660 <lowPowerModeTask+0x64>)
 800a60e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a612:	4814      	ldr	r0, [pc, #80]	@ (800a664 <lowPowerModeTask+0x68>)
 800a614:	f000 fdce 	bl	800b1b4 <sniprintf>
 800a618:	4603      	mov	r3, r0
 800a61a:	81fb      	strh	r3, [r7, #14]

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a61c:	89fa      	ldrh	r2, [r7, #14]
 800a61e:	2364      	movs	r3, #100	@ 0x64
 800a620:	4910      	ldr	r1, [pc, #64]	@ (800a664 <lowPowerModeTask+0x68>)
 800a622:	4811      	ldr	r0, [pc, #68]	@ (800a668 <lowPowerModeTask+0x6c>)
 800a624:	f7fd fd16 	bl	8008054 <HAL_UART_Transmit>

		sDateTimeConfig_t dt = {0};
 800a628:	1d3b      	adds	r3, r7, #4
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	f8c3 2003 	str.w	r2, [r3, #3]

		getRTCData(&dt);
 800a632:	1d3b      	adds	r3, r7, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f8c1 	bl	800a7bc <getRTCData>

		add_time(&dt, 0, 0, 5);
 800a63a:	1d38      	adds	r0, r7, #4
 800a63c:	2305      	movs	r3, #5
 800a63e:	2200      	movs	r2, #0
 800a640:	2100      	movs	r1, #0
 800a642:	f000 f983 	bl	800a94c <add_time>

		setRTCAlarm(&dt);
 800a646:	1d3b      	adds	r3, r7, #4
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f8e5 	bl	800a818 <setRTCAlarm>

		setRtcAlarmStatus(false);
 800a64e:	2000      	movs	r0, #0
 800a650:	f000 fa42 	bl	800aad8 <setRtcAlarmStatus>

		startLowPowerMode();
 800a654:	f000 f80a 	bl	800a66c <startLowPowerMode>
	}
}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	0800c3d8 	.word	0x0800c3d8
 800a664:	240006cc 	.word	0x240006cc
 800a668:	24000558 	.word	0x24000558

0800a66c <startLowPowerMode>:
void startLowPowerMode(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0

    HAL_SuspendTick();
 800a670:	f000 f808 	bl	800a684 <HAL_SuspendTick>

    HAL_PWREx_ClearPendingEvent();
 800a674:	f7fa fa90 	bl	8004b98 <HAL_PWREx_ClearPendingEvent>

    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800a678:	2101      	movs	r1, #1
 800a67a:	2000      	movs	r0, #0
 800a67c:	f7fa fa38 	bl	8004af0 <HAL_PWR_EnterSLEEPMode>
}
 800a680:	bf00      	nop
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <HAL_SuspendTick+0x1c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a04      	ldr	r2, [pc, #16]	@ (800a6a0 <HAL_SuspendTick+0x1c>)
 800a68e:	f023 0302 	bic.w	r3, r3, #2
 800a692:	6013      	str	r3, [r2, #0]
}
 800a694:	bf00      	nop
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	e000e010 	.word	0xe000e010

0800a6a4 <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a6a8:	4b05      	ldr	r3, [pc, #20]	@ (800a6c0 <HAL_ResumeTick+0x1c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a04      	ldr	r2, [pc, #16]	@ (800a6c0 <HAL_ResumeTick+0x1c>)
 800a6ae:	f043 0302 	orr.w	r3, r3, #2
 800a6b2:	6013      	str	r3, [r2, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	e000e010 	.word	0xe000e010

0800a6c4 <HAL_RTC_AlarmAEventCallback>:
static uint8_t days_in_month(uint8_t month, uint8_t year);

bool rtcAlarmTriggered = false;

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 800a6cc:	f7ff ffea 	bl	800a6a4 <HAL_ResumeTick>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	4805      	ldr	r0, [pc, #20]	@ (800a6e8 <HAL_RTC_AlarmAEventCallback+0x24>)
 800a6d4:	f7fa f9d7 	bl	8004a86 <HAL_GPIO_TogglePin>

	rtcAlarmTriggered = true;
 800a6d8:	4b04      	ldr	r3, [pc, #16]	@ (800a6ec <HAL_RTC_AlarmAEventCallback+0x28>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	701a      	strb	r2, [r3, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	58020400 	.word	0x58020400
 800a6ec:	24000730 	.word	0x24000730

0800a6f0 <RTCInit>:

void RTCInit(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	4809      	ldr	r0, [pc, #36]	@ (800a71c <RTCInit+0x2c>)
 800a6f8:	f7fd fc3c 	bl	8007f74 <HAL_RTCEx_BKUPRead>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a702:	4293      	cmp	r3, r2
 800a704:	d008      	beq.n	800a718 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a706:	4806      	ldr	r0, [pc, #24]	@ (800a720 <RTCInit+0x30>)
 800a708:	f000 f810 	bl	800a72c <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a70c:	2364      	movs	r3, #100	@ 0x64
 800a70e:	220d      	movs	r2, #13
 800a710:	4904      	ldr	r1, [pc, #16]	@ (800a724 <RTCInit+0x34>)
 800a712:	4805      	ldr	r0, [pc, #20]	@ (800a728 <RTCInit+0x38>)
 800a714:	f7fd fc9e 	bl	8008054 <HAL_UART_Transmit>
	}
}
 800a718:	bf00      	nop
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	24000530 	.word	0x24000530
 800a720:	24000088 	.word	0x24000088
 800a724:	0800c3f0 	.word	0x0800c3f0
 800a728:	24000558 	.word	0x24000558

0800a72c <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a734:	f107 030c 	add.w	r3, r7, #12
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	609a      	str	r2, [r3, #8]
 800a740:	60da      	str	r2, [r3, #12]
 800a742:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	789b      	ldrb	r3, [r3, #2]
 800a754:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a756:	2300      	movs	r3, #0
 800a758:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a75e:	2300      	movs	r3, #0
 800a760:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	78db      	ldrb	r3, [r3, #3]
 800a766:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	795b      	ldrb	r3, [r3, #5]
 800a76c:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	791b      	ldrb	r3, [r3, #4]
 800a772:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	799b      	ldrb	r3, [r3, #6]
 800a778:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	2200      	movs	r2, #0
 800a780:	4619      	mov	r1, r3
 800a782:	480d      	ldr	r0, [pc, #52]	@ (800a7b8 <setRTCData+0x8c>)
 800a784:	f7fc ffba 	bl	80076fc <HAL_RTC_SetTime>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10f      	bne.n	800a7ae <setRTCData+0x82>
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	2200      	movs	r2, #0
 800a794:	4619      	mov	r1, r3
 800a796:	4808      	ldr	r0, [pc, #32]	@ (800a7b8 <setRTCData+0x8c>)
 800a798:	f7fd f8aa 	bl	80078f0 <HAL_RTC_SetDate>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d105      	bne.n	800a7ae <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a7a2:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	4803      	ldr	r0, [pc, #12]	@ (800a7b8 <setRTCData+0x8c>)
 800a7aa:	f7fd fbcb 	bl	8007f44 <HAL_RTCEx_BKUPWrite>
	}
}
 800a7ae:	bf00      	nop
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	24000530 	.word	0x24000530

0800a7bc <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4811      	ldr	r0, [pc, #68]	@ (800a814 <getRTCData+0x58>)
 800a7ce:	f7fd f833 	bl	8007838 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a7d2:	f107 031c 	add.w	r3, r7, #28
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4619      	mov	r1, r3
 800a7da:	480e      	ldr	r0, [pc, #56]	@ (800a814 <getRTCData+0x58>)
 800a7dc:	f7fd f910 	bl	8007a00 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a7e0:	7fba      	ldrb	r2, [r7, #30]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a7e6:	7f3a      	ldrb	r2, [r7, #28]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a7ec:	7f7a      	ldrb	r2, [r7, #29]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a7f2:	7ffa      	ldrb	r2, [r7, #31]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a7f8:	7a3a      	ldrb	r2, [r7, #8]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a7fe:	7a7a      	ldrb	r2, [r7, #9]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a804:	7aba      	ldrb	r2, [r7, #10]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	709a      	strb	r2, [r3, #2]
}
 800a80a:	bf00      	nop
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	24000530 	.word	0x24000530

0800a818 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08c      	sub	sp, #48	@ 0x30
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	2228      	movs	r2, #40	@ 0x28
 800a826:	2100      	movs	r1, #0
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fd3a 	bl	800b2a2 <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	789b      	ldrb	r3, [r3, #2]
 800a83e:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a848:	2300      	movs	r3, #0
 800a84a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a850:	2300      	movs	r3, #0
 800a852:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800a854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	78db      	ldrb	r3, [r3, #3]
 800a85e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800a862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a866:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	2200      	movs	r2, #0
 800a86e:	4619      	mov	r1, r3
 800a870:	4805      	ldr	r0, [pc, #20]	@ (800a888 <setRTCAlarm+0x70>)
 800a872:	f7fd f913 	bl	8007a9c <HAL_RTC_SetAlarm_IT>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <setRTCAlarm+0x68>
	{
		Error_Handler();
 800a87c:	f7f6 fbd0 	bl	8001020 <Error_Handler>
	}
}
 800a880:	bf00      	nop
 800a882:	3730      	adds	r7, #48	@ 0x30
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	24000530 	.word	0x24000530

0800a88c <is_leap_year>:

static uint8_t is_leap_year(uint8_t year) {
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	71fb      	strb	r3, [r7, #7]
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <is_leap_year+0x2e>
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	4a11      	ldr	r2, [pc, #68]	@ (800a8ec <is_leap_year+0x60>)
 800a8a6:	fba2 1203 	umull	r1, r2, r2, r3
 800a8aa:	0952      	lsrs	r2, r2, #5
 800a8ac:	2164      	movs	r1, #100	@ 0x64
 800a8ae:	fb01 f202 	mul.w	r2, r1, r2
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <is_leap_year+0x4a>
 800a8ba:	79fa      	ldrb	r2, [r7, #7]
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ec <is_leap_year+0x60>)
 800a8be:	fb83 1302 	smull	r1, r3, r3, r2
 800a8c2:	11d9      	asrs	r1, r3, #7
 800a8c4:	17d3      	asrs	r3, r2, #31
 800a8c6:	1acb      	subs	r3, r1, r3
 800a8c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <is_leap_year+0x4e>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <is_leap_year+0x50>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	51eb851f 	.word	0x51eb851f

0800a8f0 <days_in_month>:

static uint8_t days_in_month(uint8_t month, uint8_t year) {
 800a8f0:	b5b0      	push	{r4, r5, r7, lr}
 800a8f2:	b08e      	sub	sp, #56	@ 0x38
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	71fb      	strb	r3, [r7, #7]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	71bb      	strb	r3, [r7, #6]
    int days[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 800a900:	4b11      	ldr	r3, [pc, #68]	@ (800a948 <days_in_month+0x58>)
 800a902:	f107 0408 	add.w	r4, r7, #8
 800a906:	461d      	mov	r5, r3
 800a908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a90a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a90c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (month == 2 && is_leap_year(year)) {
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d108      	bne.n	800a930 <days_in_month+0x40>
 800a91e:	79bb      	ldrb	r3, [r7, #6]
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff ffb3 	bl	800a88c <is_leap_year>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <days_in_month+0x40>
        return 29;
 800a92c:	231d      	movs	r3, #29
 800a92e:	e007      	b.n	800a940 <days_in_month+0x50>
    }
    return days[month - 1];
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	3b01      	subs	r3, #1
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	3338      	adds	r3, #56	@ 0x38
 800a938:	443b      	add	r3, r7
 800a93a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800a93e:	b2db      	uxtb	r3, r3
}
 800a940:	4618      	mov	r0, r3
 800a942:	3738      	adds	r7, #56	@ 0x38
 800a944:	46bd      	mov	sp, r7
 800a946:	bdb0      	pop	{r4, r5, r7, pc}
 800a948:	0800c404 	.word	0x0800c404

0800a94c <add_time>:

void add_time(sDateTimeConfig_t *dt, uint8_t add_hours, uint8_t add_minutes, uint8_t add_seconds) {
 800a94c:	b590      	push	{r4, r7, lr}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	70fb      	strb	r3, [r7, #3]
 800a95e:	460b      	mov	r3, r1
 800a960:	70bb      	strb	r3, [r7, #2]
 800a962:	4613      	mov	r3, r2
 800a964:	707b      	strb	r3, [r7, #1]
    dt->secs += add_seconds;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	789a      	ldrb	r2, [r3, #2]
 800a96a:	787b      	ldrb	r3, [r7, #1]
 800a96c:	4413      	add	r3, r2
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	709a      	strb	r2, [r3, #2]
    if (dt->secs >= 60) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	2b3b      	cmp	r3, #59	@ 0x3b
 800a97a:	d917      	bls.n	800a9ac <add_time+0x60>
        add_minutes += dt->secs / 60;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	789b      	ldrb	r3, [r3, #2]
 800a980:	4a4d      	ldr	r2, [pc, #308]	@ (800aab8 <add_time+0x16c>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	78bb      	ldrb	r3, [r7, #2]
 800a98c:	4413      	add	r3, r2
 800a98e:	70bb      	strb	r3, [r7, #2]
        dt->secs %= 60;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	789a      	ldrb	r2, [r3, #2]
 800a994:	4b48      	ldr	r3, [pc, #288]	@ (800aab8 <add_time+0x16c>)
 800a996:	fba3 1302 	umull	r1, r3, r3, r2
 800a99a:	0959      	lsrs	r1, r3, #5
 800a99c:	460b      	mov	r3, r1
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	1a5b      	subs	r3, r3, r1
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	709a      	strb	r2, [r3, #2]
    }

    dt->mins += add_minutes;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	785a      	ldrb	r2, [r3, #1]
 800a9b0:	78bb      	ldrb	r3, [r7, #2]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	705a      	strb	r2, [r3, #1]
    if (dt->mins >= 60) {
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	2b3b      	cmp	r3, #59	@ 0x3b
 800a9c0:	d917      	bls.n	800a9f2 <add_time+0xa6>
        add_hours += dt->mins / 60;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	4a3c      	ldr	r2, [pc, #240]	@ (800aab8 <add_time+0x16c>)
 800a9c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9cc:	095b      	lsrs	r3, r3, #5
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	70fb      	strb	r3, [r7, #3]
        dt->mins %= 60;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	785a      	ldrb	r2, [r3, #1]
 800a9da:	4b37      	ldr	r3, [pc, #220]	@ (800aab8 <add_time+0x16c>)
 800a9dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e0:	0959      	lsrs	r1, r3, #5
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	1a5b      	subs	r3, r3, r1
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	705a      	strb	r2, [r3, #1]
    }

    dt->hours += add_hours;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	781a      	ldrb	r2, [r3, #0]
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	701a      	strb	r2, [r3, #0]
    if (dt->hours >= 24) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b17      	cmp	r3, #23
 800aa06:	d91a      	bls.n	800aa3e <add_time+0xf2>
        dt->date += dt->hours / 24;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	791a      	ldrb	r2, [r3, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	492a      	ldr	r1, [pc, #168]	@ (800aabc <add_time+0x170>)
 800aa12:	fba1 1303 	umull	r1, r3, r1, r3
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	711a      	strb	r2, [r3, #4]
        dt->hours %= 24;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	781a      	ldrb	r2, [r3, #0]
 800aa26:	4b25      	ldr	r3, [pc, #148]	@ (800aabc <add_time+0x170>)
 800aa28:	fba3 1302 	umull	r1, r3, r3, r2
 800aa2c:	0919      	lsrs	r1, r3, #4
 800aa2e:	460b      	mov	r3, r1
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	440b      	add	r3, r1
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	701a      	strb	r2, [r3, #0]
    }

    uint8_t full_year = 2000 + dt->year;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	799b      	ldrb	r3, [r3, #6]
 800aa42:	3b30      	subs	r3, #48	@ 0x30
 800aa44:	73fb      	strb	r3, [r7, #15]
    while (dt->date > days_in_month(dt->month, full_year)) {
 800aa46:	e025      	b.n	800aa94 <add_time+0x148>
        dt->date -= days_in_month(dt->month, full_year);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	795b      	ldrb	r3, [r3, #5]
 800aa4c:	7bfa      	ldrb	r2, [r7, #15]
 800aa4e:	4611      	mov	r1, r2
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff ff4d 	bl	800a8f0 <days_in_month>
 800aa56:	4603      	mov	r3, r0
 800aa58:	461a      	mov	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	791b      	ldrb	r3, [r3, #4]
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	711a      	strb	r2, [r3, #4]
        dt->month++;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	795b      	ldrb	r3, [r3, #5]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	715a      	strb	r2, [r3, #5]
        if (dt->month > 12) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	795b      	ldrb	r3, [r3, #5]
 800aa76:	2b0c      	cmp	r3, #12
 800aa78:	d90c      	bls.n	800aa94 <add_time+0x148>
            dt->month = 1;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	715a      	strb	r2, [r3, #5]
            dt->year++;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	799b      	ldrb	r3, [r3, #6]
 800aa84:	3301      	adds	r3, #1
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	719a      	strb	r2, [r3, #6]
            full_year = 2000 + dt->year;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	799b      	ldrb	r3, [r3, #6]
 800aa90:	3b30      	subs	r3, #48	@ 0x30
 800aa92:	73fb      	strb	r3, [r7, #15]
    while (dt->date > days_in_month(dt->month, full_year)) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	791c      	ldrb	r4, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	795b      	ldrb	r3, [r3, #5]
 800aa9c:	7bfa      	ldrb	r2, [r7, #15]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff ff25 	bl	800a8f0 <days_in_month>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	d8cd      	bhi.n	800aa48 <add_time+0xfc>
        }
    }
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd90      	pop	{r4, r7, pc}
 800aab6:	bf00      	nop
 800aab8:	88888889 	.word	0x88888889
 800aabc:	aaaaaaab 	.word	0xaaaaaaab

0800aac0 <getRtcAlarmStatus>:

bool getRtcAlarmStatus(void)
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
	return rtcAlarmTriggered;
 800aac4:	4b03      	ldr	r3, [pc, #12]	@ (800aad4 <getRtcAlarmStatus+0x14>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	24000730 	.word	0x24000730

0800aad8 <setRtcAlarmStatus>:

void setRtcAlarmStatus(bool flag)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
	rtcAlarmTriggered = flag;
 800aae2:	4a04      	ldr	r2, [pc, #16]	@ (800aaf4 <setRtcAlarmStatus+0x1c>)
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	7013      	strb	r3, [r2, #0]
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	24000730 	.word	0x24000730

0800aaf8 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800ab00:	4b04      	ldr	r3, [pc, #16]	@ (800ab14 <HAL_UART_RxCpltCallback+0x1c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	60fb      	str	r3, [r7, #12]

	fptr();
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4798      	blx	r3
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	24000734 	.word	0x24000734

0800ab18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]

}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800ab34:	4a04      	ldr	r2, [pc, #16]	@ (800ab48 <uartInit+0x1c>)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6013      	str	r3, [r2, #0]
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	24000734 	.word	0x24000734

0800ab4c <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800ab54:	2201      	movs	r2, #1
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4803      	ldr	r0, [pc, #12]	@ (800ab68 <receptionItrOn+0x1c>)
 800ab5a:	f7fd fb9d 	bl	8008298 <HAL_UART_Receive_DMA>
}
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	24000558 	.word	0x24000558

0800ab6c <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800ab70:	4b07      	ldr	r3, [pc, #28]	@ (800ab90 <debugRxCallback+0x24>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b0d      	cmp	r3, #13
 800ab76:	d102      	bne.n	800ab7e <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800ab78:	4b06      	ldr	r3, [pc, #24]	@ (800ab94 <debugRxCallback+0x28>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800ab7e:	4b06      	ldr	r3, [pc, #24]	@ (800ab98 <debugRxCallback+0x2c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4903      	ldr	r1, [pc, #12]	@ (800ab90 <debugRxCallback+0x24>)
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 f888 	bl	800ac9a <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800ab8a:	bf00      	nop
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	24000738 	.word	0x24000738
 800ab94:	24000740 	.word	0x24000740
 800ab98:	2400073c 	.word	0x2400073c

0800ab9c <debugUartInit>:
{

}

void debugUartInit(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800aba2:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <debugUartInit+0x30>)
 800aba4:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800aba6:	4b0a      	ldr	r3, [pc, #40]	@ (800abd0 <debugUartInit+0x34>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2201      	movs	r2, #1
 800abac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 f839 	bl	800ac28 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff ffb8 	bl	800ab2c <uartInit>

	receptionItrOn(&data);
 800abbc:	4805      	ldr	r0, [pc, #20]	@ (800abd4 <debugUartInit+0x38>)
 800abbe:	f7ff ffc5 	bl	800ab4c <receptionItrOn>
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	0800ab6d 	.word	0x0800ab6d
 800abd0:	2400073c 	.word	0x2400073c
 800abd4:	24000738 	.word	0x24000738

0800abd8 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800abdc:	4b03      	ldr	r3, [pc, #12]	@ (800abec <getCmdReceivedFlag+0x14>)
 800abde:	781b      	ldrb	r3, [r3, #0]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	24000740 	.word	0x24000740

0800abf0 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	4603      	mov	r3, r0
 800abf8:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800abfa:	4a04      	ldr	r2, [pc, #16]	@ (800ac0c <setCmdReceivedFlag+0x1c>)
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	7013      	strb	r3, [r2, #0]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	24000740 	.word	0x24000740

0800ac10 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
	return rxBuffer;
 800ac14:	4b03      	ldr	r3, [pc, #12]	@ (800ac24 <getRxBuffer+0x14>)
 800ac16:	681b      	ldr	r3, [r3, #0]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	2400073c 	.word	0x2400073c

0800ac28 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
 800ac34:	4613      	mov	r3, r2
 800ac36:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	883a      	ldrh	r2, [r7, #0]
 800ac4c:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	887a      	ldrh	r2, [r7, #2]
 800ac52:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800ac54:	887b      	ldrh	r3, [r7, #2]
 800ac56:	883a      	ldrh	r2, [r7, #0]
 800ac58:	fb02 f303 	mul.w	r3, r2, r3
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f8ad 	bl	800adbc <malloc>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68d8      	ldr	r0, [r3, #12]
 800ac7c:	887b      	ldrh	r3, [r7, #2]
 800ac7e:	883a      	ldrh	r2, [r7, #0]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	2100      	movs	r1, #0
 800ac88:	f000 fb0b 	bl	800b2a2 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800aca4:	2303      	movs	r3, #3
 800aca6:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	889b      	ldrh	r3, [r3, #4]
 800acb4:	89ba      	ldrh	r2, [r7, #12]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d301      	bcc.n	800acbe <circularBufferEnqueue+0x24>
    {
        next = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	885b      	ldrh	r3, [r3, #2]
 800acc2:	89ba      	ldrh	r2, [r7, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d02b      	beq.n	800ad20 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	8812      	ldrh	r2, [r2, #0]
 800acd0:	4611      	mov	r1, r2
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	88d2      	ldrh	r2, [r2, #6]
 800acd6:	fb01 f202 	mul.w	r2, r1, r2
 800acda:	1898      	adds	r0, r3, r2
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	88db      	ldrh	r3, [r3, #6]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	f000 fbc5 	bl	800b472 <memcpy>
 800ace8:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d017      	beq.n	800ad20 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	89ba      	ldrh	r2, [r7, #12]
 800acf4:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800acf6:	2302      	movs	r3, #2
 800acf8:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	889b      	ldrh	r3, [r3, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	8852      	ldrh	r2, [r2, #2]
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	8892      	ldrh	r2, [r2, #4]
 800ad10:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad14:	fb01 f202 	mul.w	r2, r1, r2
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800ad34:	2305      	movs	r3, #5
 800ad36:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	885a      	ldrh	r2, [r3, #2]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d032      	beq.n	800adaa <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	885b      	ldrh	r3, [r3, #2]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	889b      	ldrh	r3, [r3, #4]
 800ad50:	89ba      	ldrh	r2, [r7, #12]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d301      	bcc.n	800ad5a <circularBufferDequeue+0x30>
        {
            next = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	8852      	ldrh	r2, [r2, #2]
 800ad62:	4611      	mov	r1, r2
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	88d2      	ldrh	r2, [r2, #6]
 800ad68:	fb01 f202 	mul.w	r2, r1, r2
 800ad6c:	1899      	adds	r1, r3, r2
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	88db      	ldrh	r3, [r3, #6]
 800ad72:	461a      	mov	r2, r3
 800ad74:	6838      	ldr	r0, [r7, #0]
 800ad76:	f000 fb7c 	bl	800b472 <memcpy>

        cBuff->tail = next;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	89ba      	ldrh	r2, [r7, #12]
 800ad7e:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	889b      	ldrh	r3, [r3, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	8852      	ldrh	r2, [r2, #2]
 800ad90:	1a9b      	subs	r3, r3, r2
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	8892      	ldrh	r2, [r2, #4]
 800ad96:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad9a:	fb01 f202 	mul.w	r2, r1, r2
 800ad9e:	1a9b      	subs	r3, r3, r2
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ada6:	2304      	movs	r3, #4
 800ada8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <atoi>:
 800adb4:	220a      	movs	r2, #10
 800adb6:	2100      	movs	r1, #0
 800adb8:	f000 b930 	b.w	800b01c <strtol>

0800adbc <malloc>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	@ (800adc8 <malloc+0xc>)
 800adbe:	4601      	mov	r1, r0
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	f000 b825 	b.w	800ae10 <_malloc_r>
 800adc6:	bf00      	nop
 800adc8:	2400009c 	.word	0x2400009c

0800adcc <sbrk_aligned>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	4e0f      	ldr	r6, [pc, #60]	@ (800ae0c <sbrk_aligned+0x40>)
 800add0:	460c      	mov	r4, r1
 800add2:	6831      	ldr	r1, [r6, #0]
 800add4:	4605      	mov	r5, r0
 800add6:	b911      	cbnz	r1, 800adde <sbrk_aligned+0x12>
 800add8:	f000 fafc 	bl	800b3d4 <_sbrk_r>
 800addc:	6030      	str	r0, [r6, #0]
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f000 faf7 	bl	800b3d4 <_sbrk_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d103      	bne.n	800adf2 <sbrk_aligned+0x26>
 800adea:	f04f 34ff 	mov.w	r4, #4294967295
 800adee:	4620      	mov	r0, r4
 800adf0:	bd70      	pop	{r4, r5, r6, pc}
 800adf2:	1cc4      	adds	r4, r0, #3
 800adf4:	f024 0403 	bic.w	r4, r4, #3
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d0f8      	beq.n	800adee <sbrk_aligned+0x22>
 800adfc:	1a21      	subs	r1, r4, r0
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 fae8 	bl	800b3d4 <_sbrk_r>
 800ae04:	3001      	adds	r0, #1
 800ae06:	d1f2      	bne.n	800adee <sbrk_aligned+0x22>
 800ae08:	e7ef      	b.n	800adea <sbrk_aligned+0x1e>
 800ae0a:	bf00      	nop
 800ae0c:	24000744 	.word	0x24000744

0800ae10 <_malloc_r>:
 800ae10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae14:	1ccd      	adds	r5, r1, #3
 800ae16:	f025 0503 	bic.w	r5, r5, #3
 800ae1a:	3508      	adds	r5, #8
 800ae1c:	2d0c      	cmp	r5, #12
 800ae1e:	bf38      	it	cc
 800ae20:	250c      	movcc	r5, #12
 800ae22:	2d00      	cmp	r5, #0
 800ae24:	4606      	mov	r6, r0
 800ae26:	db01      	blt.n	800ae2c <_malloc_r+0x1c>
 800ae28:	42a9      	cmp	r1, r5
 800ae2a:	d904      	bls.n	800ae36 <_malloc_r+0x26>
 800ae2c:	230c      	movs	r3, #12
 800ae2e:	6033      	str	r3, [r6, #0]
 800ae30:	2000      	movs	r0, #0
 800ae32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af0c <_malloc_r+0xfc>
 800ae3a:	f000 f869 	bl	800af10 <__malloc_lock>
 800ae3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae42:	461c      	mov	r4, r3
 800ae44:	bb44      	cbnz	r4, 800ae98 <_malloc_r+0x88>
 800ae46:	4629      	mov	r1, r5
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f7ff ffbf 	bl	800adcc <sbrk_aligned>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	4604      	mov	r4, r0
 800ae52:	d158      	bne.n	800af06 <_malloc_r+0xf6>
 800ae54:	f8d8 4000 	ldr.w	r4, [r8]
 800ae58:	4627      	mov	r7, r4
 800ae5a:	2f00      	cmp	r7, #0
 800ae5c:	d143      	bne.n	800aee6 <_malloc_r+0xd6>
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	d04b      	beq.n	800aefa <_malloc_r+0xea>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	4639      	mov	r1, r7
 800ae66:	4630      	mov	r0, r6
 800ae68:	eb04 0903 	add.w	r9, r4, r3
 800ae6c:	f000 fab2 	bl	800b3d4 <_sbrk_r>
 800ae70:	4581      	cmp	r9, r0
 800ae72:	d142      	bne.n	800aefa <_malloc_r+0xea>
 800ae74:	6821      	ldr	r1, [r4, #0]
 800ae76:	1a6d      	subs	r5, r5, r1
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff ffa6 	bl	800adcc <sbrk_aligned>
 800ae80:	3001      	adds	r0, #1
 800ae82:	d03a      	beq.n	800aefa <_malloc_r+0xea>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	442b      	add	r3, r5
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	bb62      	cbnz	r2, 800aeec <_malloc_r+0xdc>
 800ae92:	f8c8 7000 	str.w	r7, [r8]
 800ae96:	e00f      	b.n	800aeb8 <_malloc_r+0xa8>
 800ae98:	6822      	ldr	r2, [r4, #0]
 800ae9a:	1b52      	subs	r2, r2, r5
 800ae9c:	d420      	bmi.n	800aee0 <_malloc_r+0xd0>
 800ae9e:	2a0b      	cmp	r2, #11
 800aea0:	d917      	bls.n	800aed2 <_malloc_r+0xc2>
 800aea2:	1961      	adds	r1, r4, r5
 800aea4:	42a3      	cmp	r3, r4
 800aea6:	6025      	str	r5, [r4, #0]
 800aea8:	bf18      	it	ne
 800aeaa:	6059      	strne	r1, [r3, #4]
 800aeac:	6863      	ldr	r3, [r4, #4]
 800aeae:	bf08      	it	eq
 800aeb0:	f8c8 1000 	streq.w	r1, [r8]
 800aeb4:	5162      	str	r2, [r4, r5]
 800aeb6:	604b      	str	r3, [r1, #4]
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f000 f82f 	bl	800af1c <__malloc_unlock>
 800aebe:	f104 000b 	add.w	r0, r4, #11
 800aec2:	1d23      	adds	r3, r4, #4
 800aec4:	f020 0007 	bic.w	r0, r0, #7
 800aec8:	1ac2      	subs	r2, r0, r3
 800aeca:	bf1c      	itt	ne
 800aecc:	1a1b      	subne	r3, r3, r0
 800aece:	50a3      	strne	r3, [r4, r2]
 800aed0:	e7af      	b.n	800ae32 <_malloc_r+0x22>
 800aed2:	6862      	ldr	r2, [r4, #4]
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	bf0c      	ite	eq
 800aed8:	f8c8 2000 	streq.w	r2, [r8]
 800aedc:	605a      	strne	r2, [r3, #4]
 800aede:	e7eb      	b.n	800aeb8 <_malloc_r+0xa8>
 800aee0:	4623      	mov	r3, r4
 800aee2:	6864      	ldr	r4, [r4, #4]
 800aee4:	e7ae      	b.n	800ae44 <_malloc_r+0x34>
 800aee6:	463c      	mov	r4, r7
 800aee8:	687f      	ldr	r7, [r7, #4]
 800aeea:	e7b6      	b.n	800ae5a <_malloc_r+0x4a>
 800aeec:	461a      	mov	r2, r3
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	42a3      	cmp	r3, r4
 800aef2:	d1fb      	bne.n	800aeec <_malloc_r+0xdc>
 800aef4:	2300      	movs	r3, #0
 800aef6:	6053      	str	r3, [r2, #4]
 800aef8:	e7de      	b.n	800aeb8 <_malloc_r+0xa8>
 800aefa:	230c      	movs	r3, #12
 800aefc:	6033      	str	r3, [r6, #0]
 800aefe:	4630      	mov	r0, r6
 800af00:	f000 f80c 	bl	800af1c <__malloc_unlock>
 800af04:	e794      	b.n	800ae30 <_malloc_r+0x20>
 800af06:	6005      	str	r5, [r0, #0]
 800af08:	e7d6      	b.n	800aeb8 <_malloc_r+0xa8>
 800af0a:	bf00      	nop
 800af0c:	24000748 	.word	0x24000748

0800af10 <__malloc_lock>:
 800af10:	4801      	ldr	r0, [pc, #4]	@ (800af18 <__malloc_lock+0x8>)
 800af12:	f000 baac 	b.w	800b46e <__retarget_lock_acquire_recursive>
 800af16:	bf00      	nop
 800af18:	2400088c 	.word	0x2400088c

0800af1c <__malloc_unlock>:
 800af1c:	4801      	ldr	r0, [pc, #4]	@ (800af24 <__malloc_unlock+0x8>)
 800af1e:	f000 baa7 	b.w	800b470 <__retarget_lock_release_recursive>
 800af22:	bf00      	nop
 800af24:	2400088c 	.word	0x2400088c

0800af28 <_strtol_l.constprop.0>:
 800af28:	2b24      	cmp	r3, #36	@ 0x24
 800af2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af2e:	4686      	mov	lr, r0
 800af30:	4690      	mov	r8, r2
 800af32:	d801      	bhi.n	800af38 <_strtol_l.constprop.0+0x10>
 800af34:	2b01      	cmp	r3, #1
 800af36:	d106      	bne.n	800af46 <_strtol_l.constprop.0+0x1e>
 800af38:	f000 fa6e 	bl	800b418 <__errno>
 800af3c:	2316      	movs	r3, #22
 800af3e:	6003      	str	r3, [r0, #0]
 800af40:	2000      	movs	r0, #0
 800af42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af46:	4834      	ldr	r0, [pc, #208]	@ (800b018 <_strtol_l.constprop.0+0xf0>)
 800af48:	460d      	mov	r5, r1
 800af4a:	462a      	mov	r2, r5
 800af4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af50:	5d06      	ldrb	r6, [r0, r4]
 800af52:	f016 0608 	ands.w	r6, r6, #8
 800af56:	d1f8      	bne.n	800af4a <_strtol_l.constprop.0+0x22>
 800af58:	2c2d      	cmp	r4, #45	@ 0x2d
 800af5a:	d12d      	bne.n	800afb8 <_strtol_l.constprop.0+0x90>
 800af5c:	782c      	ldrb	r4, [r5, #0]
 800af5e:	2601      	movs	r6, #1
 800af60:	1c95      	adds	r5, r2, #2
 800af62:	f033 0210 	bics.w	r2, r3, #16
 800af66:	d109      	bne.n	800af7c <_strtol_l.constprop.0+0x54>
 800af68:	2c30      	cmp	r4, #48	@ 0x30
 800af6a:	d12a      	bne.n	800afc2 <_strtol_l.constprop.0+0x9a>
 800af6c:	782a      	ldrb	r2, [r5, #0]
 800af6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af72:	2a58      	cmp	r2, #88	@ 0x58
 800af74:	d125      	bne.n	800afc2 <_strtol_l.constprop.0+0x9a>
 800af76:	786c      	ldrb	r4, [r5, #1]
 800af78:	2310      	movs	r3, #16
 800af7a:	3502      	adds	r5, #2
 800af7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af80:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af84:	2200      	movs	r2, #0
 800af86:	fbbc f9f3 	udiv	r9, ip, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	fb03 ca19 	mls	sl, r3, r9, ip
 800af90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af94:	2f09      	cmp	r7, #9
 800af96:	d81b      	bhi.n	800afd0 <_strtol_l.constprop.0+0xa8>
 800af98:	463c      	mov	r4, r7
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	dd27      	ble.n	800afee <_strtol_l.constprop.0+0xc6>
 800af9e:	1c57      	adds	r7, r2, #1
 800afa0:	d007      	beq.n	800afb2 <_strtol_l.constprop.0+0x8a>
 800afa2:	4581      	cmp	r9, r0
 800afa4:	d320      	bcc.n	800afe8 <_strtol_l.constprop.0+0xc0>
 800afa6:	d101      	bne.n	800afac <_strtol_l.constprop.0+0x84>
 800afa8:	45a2      	cmp	sl, r4
 800afaa:	db1d      	blt.n	800afe8 <_strtol_l.constprop.0+0xc0>
 800afac:	fb00 4003 	mla	r0, r0, r3, r4
 800afb0:	2201      	movs	r2, #1
 800afb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afb6:	e7eb      	b.n	800af90 <_strtol_l.constprop.0+0x68>
 800afb8:	2c2b      	cmp	r4, #43	@ 0x2b
 800afba:	bf04      	itt	eq
 800afbc:	782c      	ldrbeq	r4, [r5, #0]
 800afbe:	1c95      	addeq	r5, r2, #2
 800afc0:	e7cf      	b.n	800af62 <_strtol_l.constprop.0+0x3a>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1da      	bne.n	800af7c <_strtol_l.constprop.0+0x54>
 800afc6:	2c30      	cmp	r4, #48	@ 0x30
 800afc8:	bf0c      	ite	eq
 800afca:	2308      	moveq	r3, #8
 800afcc:	230a      	movne	r3, #10
 800afce:	e7d5      	b.n	800af7c <_strtol_l.constprop.0+0x54>
 800afd0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afd4:	2f19      	cmp	r7, #25
 800afd6:	d801      	bhi.n	800afdc <_strtol_l.constprop.0+0xb4>
 800afd8:	3c37      	subs	r4, #55	@ 0x37
 800afda:	e7de      	b.n	800af9a <_strtol_l.constprop.0+0x72>
 800afdc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afe0:	2f19      	cmp	r7, #25
 800afe2:	d804      	bhi.n	800afee <_strtol_l.constprop.0+0xc6>
 800afe4:	3c57      	subs	r4, #87	@ 0x57
 800afe6:	e7d8      	b.n	800af9a <_strtol_l.constprop.0+0x72>
 800afe8:	f04f 32ff 	mov.w	r2, #4294967295
 800afec:	e7e1      	b.n	800afb2 <_strtol_l.constprop.0+0x8a>
 800afee:	1c53      	adds	r3, r2, #1
 800aff0:	d108      	bne.n	800b004 <_strtol_l.constprop.0+0xdc>
 800aff2:	2322      	movs	r3, #34	@ 0x22
 800aff4:	f8ce 3000 	str.w	r3, [lr]
 800aff8:	4660      	mov	r0, ip
 800affa:	f1b8 0f00 	cmp.w	r8, #0
 800affe:	d0a0      	beq.n	800af42 <_strtol_l.constprop.0+0x1a>
 800b000:	1e69      	subs	r1, r5, #1
 800b002:	e006      	b.n	800b012 <_strtol_l.constprop.0+0xea>
 800b004:	b106      	cbz	r6, 800b008 <_strtol_l.constprop.0+0xe0>
 800b006:	4240      	negs	r0, r0
 800b008:	f1b8 0f00 	cmp.w	r8, #0
 800b00c:	d099      	beq.n	800af42 <_strtol_l.constprop.0+0x1a>
 800b00e:	2a00      	cmp	r2, #0
 800b010:	d1f6      	bne.n	800b000 <_strtol_l.constprop.0+0xd8>
 800b012:	f8c8 1000 	str.w	r1, [r8]
 800b016:	e794      	b.n	800af42 <_strtol_l.constprop.0+0x1a>
 800b018:	0800c475 	.word	0x0800c475

0800b01c <strtol>:
 800b01c:	4613      	mov	r3, r2
 800b01e:	460a      	mov	r2, r1
 800b020:	4601      	mov	r1, r0
 800b022:	4802      	ldr	r0, [pc, #8]	@ (800b02c <strtol+0x10>)
 800b024:	6800      	ldr	r0, [r0, #0]
 800b026:	f7ff bf7f 	b.w	800af28 <_strtol_l.constprop.0>
 800b02a:	bf00      	nop
 800b02c:	2400009c 	.word	0x2400009c

0800b030 <std>:
 800b030:	2300      	movs	r3, #0
 800b032:	b510      	push	{r4, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	e9c0 3300 	strd	r3, r3, [r0]
 800b03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b03e:	6083      	str	r3, [r0, #8]
 800b040:	8181      	strh	r1, [r0, #12]
 800b042:	6643      	str	r3, [r0, #100]	@ 0x64
 800b044:	81c2      	strh	r2, [r0, #14]
 800b046:	6183      	str	r3, [r0, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	2208      	movs	r2, #8
 800b04c:	305c      	adds	r0, #92	@ 0x5c
 800b04e:	f000 f928 	bl	800b2a2 <memset>
 800b052:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <std+0x58>)
 800b054:	6263      	str	r3, [r4, #36]	@ 0x24
 800b056:	4b0d      	ldr	r3, [pc, #52]	@ (800b08c <std+0x5c>)
 800b058:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b05a:	4b0d      	ldr	r3, [pc, #52]	@ (800b090 <std+0x60>)
 800b05c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b05e:	4b0d      	ldr	r3, [pc, #52]	@ (800b094 <std+0x64>)
 800b060:	6323      	str	r3, [r4, #48]	@ 0x30
 800b062:	4b0d      	ldr	r3, [pc, #52]	@ (800b098 <std+0x68>)
 800b064:	6224      	str	r4, [r4, #32]
 800b066:	429c      	cmp	r4, r3
 800b068:	d006      	beq.n	800b078 <std+0x48>
 800b06a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b06e:	4294      	cmp	r4, r2
 800b070:	d002      	beq.n	800b078 <std+0x48>
 800b072:	33d0      	adds	r3, #208	@ 0xd0
 800b074:	429c      	cmp	r4, r3
 800b076:	d105      	bne.n	800b084 <std+0x54>
 800b078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b080:	f000 b9f4 	b.w	800b46c <__retarget_lock_init_recursive>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	bf00      	nop
 800b088:	0800b21d 	.word	0x0800b21d
 800b08c:	0800b23f 	.word	0x0800b23f
 800b090:	0800b277 	.word	0x0800b277
 800b094:	0800b29b 	.word	0x0800b29b
 800b098:	2400074c 	.word	0x2400074c

0800b09c <stdio_exit_handler>:
 800b09c:	4a02      	ldr	r2, [pc, #8]	@ (800b0a8 <stdio_exit_handler+0xc>)
 800b09e:	4903      	ldr	r1, [pc, #12]	@ (800b0ac <stdio_exit_handler+0x10>)
 800b0a0:	4803      	ldr	r0, [pc, #12]	@ (800b0b0 <stdio_exit_handler+0x14>)
 800b0a2:	f000 b869 	b.w	800b178 <_fwalk_sglue>
 800b0a6:	bf00      	nop
 800b0a8:	24000090 	.word	0x24000090
 800b0ac:	0800bc35 	.word	0x0800bc35
 800b0b0:	240000a0 	.word	0x240000a0

0800b0b4 <cleanup_stdio>:
 800b0b4:	6841      	ldr	r1, [r0, #4]
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e8 <cleanup_stdio+0x34>)
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	4604      	mov	r4, r0
 800b0be:	d001      	beq.n	800b0c4 <cleanup_stdio+0x10>
 800b0c0:	f000 fdb8 	bl	800bc34 <_fflush_r>
 800b0c4:	68a1      	ldr	r1, [r4, #8]
 800b0c6:	4b09      	ldr	r3, [pc, #36]	@ (800b0ec <cleanup_stdio+0x38>)
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <cleanup_stdio+0x1e>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fdb1 	bl	800bc34 <_fflush_r>
 800b0d2:	68e1      	ldr	r1, [r4, #12]
 800b0d4:	4b06      	ldr	r3, [pc, #24]	@ (800b0f0 <cleanup_stdio+0x3c>)
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d004      	beq.n	800b0e4 <cleanup_stdio+0x30>
 800b0da:	4620      	mov	r0, r4
 800b0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e0:	f000 bda8 	b.w	800bc34 <_fflush_r>
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	bf00      	nop
 800b0e8:	2400074c 	.word	0x2400074c
 800b0ec:	240007b4 	.word	0x240007b4
 800b0f0:	2400081c 	.word	0x2400081c

0800b0f4 <global_stdio_init.part.0>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <global_stdio_init.part.0+0x30>)
 800b0f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b128 <global_stdio_init.part.0+0x34>)
 800b0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b12c <global_stdio_init.part.0+0x38>)
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	4620      	mov	r0, r4
 800b100:	2200      	movs	r2, #0
 800b102:	2104      	movs	r1, #4
 800b104:	f7ff ff94 	bl	800b030 <std>
 800b108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b10c:	2201      	movs	r2, #1
 800b10e:	2109      	movs	r1, #9
 800b110:	f7ff ff8e 	bl	800b030 <std>
 800b114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b118:	2202      	movs	r2, #2
 800b11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b11e:	2112      	movs	r1, #18
 800b120:	f7ff bf86 	b.w	800b030 <std>
 800b124:	24000884 	.word	0x24000884
 800b128:	2400074c 	.word	0x2400074c
 800b12c:	0800b09d 	.word	0x0800b09d

0800b130 <__sfp_lock_acquire>:
 800b130:	4801      	ldr	r0, [pc, #4]	@ (800b138 <__sfp_lock_acquire+0x8>)
 800b132:	f000 b99c 	b.w	800b46e <__retarget_lock_acquire_recursive>
 800b136:	bf00      	nop
 800b138:	2400088d 	.word	0x2400088d

0800b13c <__sfp_lock_release>:
 800b13c:	4801      	ldr	r0, [pc, #4]	@ (800b144 <__sfp_lock_release+0x8>)
 800b13e:	f000 b997 	b.w	800b470 <__retarget_lock_release_recursive>
 800b142:	bf00      	nop
 800b144:	2400088d 	.word	0x2400088d

0800b148 <__sinit>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4604      	mov	r4, r0
 800b14c:	f7ff fff0 	bl	800b130 <__sfp_lock_acquire>
 800b150:	6a23      	ldr	r3, [r4, #32]
 800b152:	b11b      	cbz	r3, 800b15c <__sinit+0x14>
 800b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b158:	f7ff bff0 	b.w	800b13c <__sfp_lock_release>
 800b15c:	4b04      	ldr	r3, [pc, #16]	@ (800b170 <__sinit+0x28>)
 800b15e:	6223      	str	r3, [r4, #32]
 800b160:	4b04      	ldr	r3, [pc, #16]	@ (800b174 <__sinit+0x2c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1f5      	bne.n	800b154 <__sinit+0xc>
 800b168:	f7ff ffc4 	bl	800b0f4 <global_stdio_init.part.0>
 800b16c:	e7f2      	b.n	800b154 <__sinit+0xc>
 800b16e:	bf00      	nop
 800b170:	0800b0b5 	.word	0x0800b0b5
 800b174:	24000884 	.word	0x24000884

0800b178 <_fwalk_sglue>:
 800b178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b17c:	4607      	mov	r7, r0
 800b17e:	4688      	mov	r8, r1
 800b180:	4614      	mov	r4, r2
 800b182:	2600      	movs	r6, #0
 800b184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b188:	f1b9 0901 	subs.w	r9, r9, #1
 800b18c:	d505      	bpl.n	800b19a <_fwalk_sglue+0x22>
 800b18e:	6824      	ldr	r4, [r4, #0]
 800b190:	2c00      	cmp	r4, #0
 800b192:	d1f7      	bne.n	800b184 <_fwalk_sglue+0xc>
 800b194:	4630      	mov	r0, r6
 800b196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d907      	bls.n	800b1b0 <_fwalk_sglue+0x38>
 800b1a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	d003      	beq.n	800b1b0 <_fwalk_sglue+0x38>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	47c0      	blx	r8
 800b1ae:	4306      	orrs	r6, r0
 800b1b0:	3568      	adds	r5, #104	@ 0x68
 800b1b2:	e7e9      	b.n	800b188 <_fwalk_sglue+0x10>

0800b1b4 <sniprintf>:
 800b1b4:	b40c      	push	{r2, r3}
 800b1b6:	b530      	push	{r4, r5, lr}
 800b1b8:	4b17      	ldr	r3, [pc, #92]	@ (800b218 <sniprintf+0x64>)
 800b1ba:	1e0c      	subs	r4, r1, #0
 800b1bc:	681d      	ldr	r5, [r3, #0]
 800b1be:	b09d      	sub	sp, #116	@ 0x74
 800b1c0:	da08      	bge.n	800b1d4 <sniprintf+0x20>
 800b1c2:	238b      	movs	r3, #139	@ 0x8b
 800b1c4:	602b      	str	r3, [r5, #0]
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ca:	b01d      	add	sp, #116	@ 0x74
 800b1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d0:	b002      	add	sp, #8
 800b1d2:	4770      	bx	lr
 800b1d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1dc:	bf14      	ite	ne
 800b1de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1e2:	4623      	moveq	r3, r4
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1ec:	9002      	str	r0, [sp, #8]
 800b1ee:	9006      	str	r0, [sp, #24]
 800b1f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b1f6:	ab21      	add	r3, sp, #132	@ 0x84
 800b1f8:	a902      	add	r1, sp, #8
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	f000 fa0b 	bl	800b618 <_svfiprintf_r>
 800b202:	1c43      	adds	r3, r0, #1
 800b204:	bfbc      	itt	lt
 800b206:	238b      	movlt	r3, #139	@ 0x8b
 800b208:	602b      	strlt	r3, [r5, #0]
 800b20a:	2c00      	cmp	r4, #0
 800b20c:	d0dd      	beq.n	800b1ca <sniprintf+0x16>
 800b20e:	9b02      	ldr	r3, [sp, #8]
 800b210:	2200      	movs	r2, #0
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e7d9      	b.n	800b1ca <sniprintf+0x16>
 800b216:	bf00      	nop
 800b218:	2400009c 	.word	0x2400009c

0800b21c <__sread>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	460c      	mov	r4, r1
 800b220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b224:	f000 f8c4 	bl	800b3b0 <_read_r>
 800b228:	2800      	cmp	r0, #0
 800b22a:	bfab      	itete	ge
 800b22c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b22e:	89a3      	ldrhlt	r3, [r4, #12]
 800b230:	181b      	addge	r3, r3, r0
 800b232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b236:	bfac      	ite	ge
 800b238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b23a:	81a3      	strhlt	r3, [r4, #12]
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <__swrite>:
 800b23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b242:	461f      	mov	r7, r3
 800b244:	898b      	ldrh	r3, [r1, #12]
 800b246:	05db      	lsls	r3, r3, #23
 800b248:	4605      	mov	r5, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	4616      	mov	r6, r2
 800b24e:	d505      	bpl.n	800b25c <__swrite+0x1e>
 800b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b254:	2302      	movs	r3, #2
 800b256:	2200      	movs	r2, #0
 800b258:	f000 f898 	bl	800b38c <_lseek_r>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	4632      	mov	r2, r6
 800b26a:	463b      	mov	r3, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b272:	f000 b8bf 	b.w	800b3f4 <_write_r>

0800b276 <__sseek>:
 800b276:	b510      	push	{r4, lr}
 800b278:	460c      	mov	r4, r1
 800b27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27e:	f000 f885 	bl	800b38c <_lseek_r>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	bf15      	itete	ne
 800b288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b28a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b28e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b292:	81a3      	strheq	r3, [r4, #12]
 800b294:	bf18      	it	ne
 800b296:	81a3      	strhne	r3, [r4, #12]
 800b298:	bd10      	pop	{r4, pc}

0800b29a <__sclose>:
 800b29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b29e:	f000 b865 	b.w	800b36c <_close_r>

0800b2a2 <memset>:
 800b2a2:	4402      	add	r2, r0
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d100      	bne.n	800b2ac <memset+0xa>
 800b2aa:	4770      	bx	lr
 800b2ac:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b0:	e7f9      	b.n	800b2a6 <memset+0x4>
	...

0800b2b4 <strtok>:
 800b2b4:	4b16      	ldr	r3, [pc, #88]	@ (800b310 <strtok+0x5c>)
 800b2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ba:	681f      	ldr	r7, [r3, #0]
 800b2bc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b2be:	4605      	mov	r5, r0
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	b9ec      	cbnz	r4, 800b300 <strtok+0x4c>
 800b2c4:	2050      	movs	r0, #80	@ 0x50
 800b2c6:	f7ff fd79 	bl	800adbc <malloc>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	6478      	str	r0, [r7, #68]	@ 0x44
 800b2ce:	b920      	cbnz	r0, 800b2da <strtok+0x26>
 800b2d0:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <strtok+0x60>)
 800b2d2:	4811      	ldr	r0, [pc, #68]	@ (800b318 <strtok+0x64>)
 800b2d4:	215b      	movs	r1, #91	@ 0x5b
 800b2d6:	f000 f8db 	bl	800b490 <__assert_func>
 800b2da:	e9c0 4400 	strd	r4, r4, [r0]
 800b2de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b2e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b2e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b2ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b2ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b2f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b2f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b2fa:	6184      	str	r4, [r0, #24]
 800b2fc:	7704      	strb	r4, [r0, #28]
 800b2fe:	6244      	str	r4, [r0, #36]	@ 0x24
 800b300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	2301      	movs	r3, #1
 800b308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	f000 b806 	b.w	800b31c <__strtok_r>
 800b310:	2400009c 	.word	0x2400009c
 800b314:	0800c575 	.word	0x0800c575
 800b318:	0800c58c 	.word	0x0800c58c

0800b31c <__strtok_r>:
 800b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b31e:	4604      	mov	r4, r0
 800b320:	b908      	cbnz	r0, 800b326 <__strtok_r+0xa>
 800b322:	6814      	ldr	r4, [r2, #0]
 800b324:	b144      	cbz	r4, 800b338 <__strtok_r+0x1c>
 800b326:	4620      	mov	r0, r4
 800b328:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b32c:	460f      	mov	r7, r1
 800b32e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b332:	b91e      	cbnz	r6, 800b33c <__strtok_r+0x20>
 800b334:	b965      	cbnz	r5, 800b350 <__strtok_r+0x34>
 800b336:	6015      	str	r5, [r2, #0]
 800b338:	2000      	movs	r0, #0
 800b33a:	e005      	b.n	800b348 <__strtok_r+0x2c>
 800b33c:	42b5      	cmp	r5, r6
 800b33e:	d1f6      	bne.n	800b32e <__strtok_r+0x12>
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1f0      	bne.n	800b326 <__strtok_r+0xa>
 800b344:	6014      	str	r4, [r2, #0]
 800b346:	7003      	strb	r3, [r0, #0]
 800b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34a:	461c      	mov	r4, r3
 800b34c:	e00c      	b.n	800b368 <__strtok_r+0x4c>
 800b34e:	b915      	cbnz	r5, 800b356 <__strtok_r+0x3a>
 800b350:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b354:	460e      	mov	r6, r1
 800b356:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b35a:	42ab      	cmp	r3, r5
 800b35c:	d1f7      	bne.n	800b34e <__strtok_r+0x32>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0f3      	beq.n	800b34a <__strtok_r+0x2e>
 800b362:	2300      	movs	r3, #0
 800b364:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b368:	6014      	str	r4, [r2, #0]
 800b36a:	e7ed      	b.n	800b348 <__strtok_r+0x2c>

0800b36c <_close_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d06      	ldr	r5, [pc, #24]	@ (800b388 <_close_r+0x1c>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	f7f5 ffee 	bl	8001358 <_close>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_close_r+0x1a>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_close_r+0x1a>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	24000888 	.word	0x24000888

0800b38c <_lseek_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4d07      	ldr	r5, [pc, #28]	@ (800b3ac <_lseek_r+0x20>)
 800b390:	4604      	mov	r4, r0
 800b392:	4608      	mov	r0, r1
 800b394:	4611      	mov	r1, r2
 800b396:	2200      	movs	r2, #0
 800b398:	602a      	str	r2, [r5, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f7f6 f803 	bl	80013a6 <_lseek>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d102      	bne.n	800b3aa <_lseek_r+0x1e>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	b103      	cbz	r3, 800b3aa <_lseek_r+0x1e>
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	bd38      	pop	{r3, r4, r5, pc}
 800b3ac:	24000888 	.word	0x24000888

0800b3b0 <_read_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d07      	ldr	r5, [pc, #28]	@ (800b3d0 <_read_r+0x20>)
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	602a      	str	r2, [r5, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f7f5 ff91 	bl	80012e6 <_read>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_read_r+0x1e>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_read_r+0x1e>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	24000888 	.word	0x24000888

0800b3d4 <_sbrk_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_sbrk_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f5 ffee 	bl	80013c0 <_sbrk>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_sbrk_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_sbrk_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	24000888 	.word	0x24000888

0800b3f4 <_write_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4d07      	ldr	r5, [pc, #28]	@ (800b414 <_write_r+0x20>)
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	4608      	mov	r0, r1
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	602a      	str	r2, [r5, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f7f5 ff8c 	bl	8001320 <_write>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_write_r+0x1e>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_write_r+0x1e>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	24000888 	.word	0x24000888

0800b418 <__errno>:
 800b418:	4b01      	ldr	r3, [pc, #4]	@ (800b420 <__errno+0x8>)
 800b41a:	6818      	ldr	r0, [r3, #0]
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	2400009c 	.word	0x2400009c

0800b424 <__libc_init_array>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	4d0d      	ldr	r5, [pc, #52]	@ (800b45c <__libc_init_array+0x38>)
 800b428:	4c0d      	ldr	r4, [pc, #52]	@ (800b460 <__libc_init_array+0x3c>)
 800b42a:	1b64      	subs	r4, r4, r5
 800b42c:	10a4      	asrs	r4, r4, #2
 800b42e:	2600      	movs	r6, #0
 800b430:	42a6      	cmp	r6, r4
 800b432:	d109      	bne.n	800b448 <__libc_init_array+0x24>
 800b434:	4d0b      	ldr	r5, [pc, #44]	@ (800b464 <__libc_init_array+0x40>)
 800b436:	4c0c      	ldr	r4, [pc, #48]	@ (800b468 <__libc_init_array+0x44>)
 800b438:	f000 ff2a 	bl	800c290 <_init>
 800b43c:	1b64      	subs	r4, r4, r5
 800b43e:	10a4      	asrs	r4, r4, #2
 800b440:	2600      	movs	r6, #0
 800b442:	42a6      	cmp	r6, r4
 800b444:	d105      	bne.n	800b452 <__libc_init_array+0x2e>
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44c:	4798      	blx	r3
 800b44e:	3601      	adds	r6, #1
 800b450:	e7ee      	b.n	800b430 <__libc_init_array+0xc>
 800b452:	f855 3b04 	ldr.w	r3, [r5], #4
 800b456:	4798      	blx	r3
 800b458:	3601      	adds	r6, #1
 800b45a:	e7f2      	b.n	800b442 <__libc_init_array+0x1e>
 800b45c:	0800c660 	.word	0x0800c660
 800b460:	0800c660 	.word	0x0800c660
 800b464:	0800c660 	.word	0x0800c660
 800b468:	0800c664 	.word	0x0800c664

0800b46c <__retarget_lock_init_recursive>:
 800b46c:	4770      	bx	lr

0800b46e <__retarget_lock_acquire_recursive>:
 800b46e:	4770      	bx	lr

0800b470 <__retarget_lock_release_recursive>:
 800b470:	4770      	bx	lr

0800b472 <memcpy>:
 800b472:	440a      	add	r2, r1
 800b474:	4291      	cmp	r1, r2
 800b476:	f100 33ff 	add.w	r3, r0, #4294967295
 800b47a:	d100      	bne.n	800b47e <memcpy+0xc>
 800b47c:	4770      	bx	lr
 800b47e:	b510      	push	{r4, lr}
 800b480:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b484:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b488:	4291      	cmp	r1, r2
 800b48a:	d1f9      	bne.n	800b480 <memcpy+0xe>
 800b48c:	bd10      	pop	{r4, pc}
	...

0800b490 <__assert_func>:
 800b490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b492:	4614      	mov	r4, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4b09      	ldr	r3, [pc, #36]	@ (800b4bc <__assert_func+0x2c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4605      	mov	r5, r0
 800b49c:	68d8      	ldr	r0, [r3, #12]
 800b49e:	b954      	cbnz	r4, 800b4b6 <__assert_func+0x26>
 800b4a0:	4b07      	ldr	r3, [pc, #28]	@ (800b4c0 <__assert_func+0x30>)
 800b4a2:	461c      	mov	r4, r3
 800b4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a8:	9100      	str	r1, [sp, #0]
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	4905      	ldr	r1, [pc, #20]	@ (800b4c4 <__assert_func+0x34>)
 800b4ae:	f000 fbe9 	bl	800bc84 <fiprintf>
 800b4b2:	f000 fc13 	bl	800bcdc <abort>
 800b4b6:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__assert_func+0x38>)
 800b4b8:	e7f4      	b.n	800b4a4 <__assert_func+0x14>
 800b4ba:	bf00      	nop
 800b4bc:	2400009c 	.word	0x2400009c
 800b4c0:	0800c621 	.word	0x0800c621
 800b4c4:	0800c5f3 	.word	0x0800c5f3
 800b4c8:	0800c5e6 	.word	0x0800c5e6

0800b4cc <_free_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	2900      	cmp	r1, #0
 800b4d2:	d041      	beq.n	800b558 <_free_r+0x8c>
 800b4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d8:	1f0c      	subs	r4, r1, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfb8      	it	lt
 800b4de:	18e4      	addlt	r4, r4, r3
 800b4e0:	f7ff fd16 	bl	800af10 <__malloc_lock>
 800b4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b55c <_free_r+0x90>)
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	b933      	cbnz	r3, 800b4f8 <_free_r+0x2c>
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	6014      	str	r4, [r2, #0]
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f4:	f7ff bd12 	b.w	800af1c <__malloc_unlock>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d908      	bls.n	800b50e <_free_r+0x42>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	1821      	adds	r1, r4, r0
 800b500:	428b      	cmp	r3, r1
 800b502:	bf01      	itttt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	1809      	addeq	r1, r1, r0
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	e7ed      	b.n	800b4ea <_free_r+0x1e>
 800b50e:	461a      	mov	r2, r3
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	b10b      	cbz	r3, 800b518 <_free_r+0x4c>
 800b514:	42a3      	cmp	r3, r4
 800b516:	d9fa      	bls.n	800b50e <_free_r+0x42>
 800b518:	6811      	ldr	r1, [r2, #0]
 800b51a:	1850      	adds	r0, r2, r1
 800b51c:	42a0      	cmp	r0, r4
 800b51e:	d10b      	bne.n	800b538 <_free_r+0x6c>
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	4401      	add	r1, r0
 800b524:	1850      	adds	r0, r2, r1
 800b526:	4283      	cmp	r3, r0
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	d1e0      	bne.n	800b4ee <_free_r+0x22>
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	6053      	str	r3, [r2, #4]
 800b532:	4408      	add	r0, r1
 800b534:	6010      	str	r0, [r2, #0]
 800b536:	e7da      	b.n	800b4ee <_free_r+0x22>
 800b538:	d902      	bls.n	800b540 <_free_r+0x74>
 800b53a:	230c      	movs	r3, #12
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	e7d6      	b.n	800b4ee <_free_r+0x22>
 800b540:	6820      	ldr	r0, [r4, #0]
 800b542:	1821      	adds	r1, r4, r0
 800b544:	428b      	cmp	r3, r1
 800b546:	bf04      	itt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	6063      	str	r3, [r4, #4]
 800b54e:	bf04      	itt	eq
 800b550:	1809      	addeq	r1, r1, r0
 800b552:	6021      	streq	r1, [r4, #0]
 800b554:	6054      	str	r4, [r2, #4]
 800b556:	e7ca      	b.n	800b4ee <_free_r+0x22>
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	24000748 	.word	0x24000748

0800b560 <__ssputs_r>:
 800b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	688e      	ldr	r6, [r1, #8]
 800b566:	461f      	mov	r7, r3
 800b568:	42be      	cmp	r6, r7
 800b56a:	680b      	ldr	r3, [r1, #0]
 800b56c:	4682      	mov	sl, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4690      	mov	r8, r2
 800b572:	d82d      	bhi.n	800b5d0 <__ssputs_r+0x70>
 800b574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b57c:	d026      	beq.n	800b5cc <__ssputs_r+0x6c>
 800b57e:	6965      	ldr	r5, [r4, #20]
 800b580:	6909      	ldr	r1, [r1, #16]
 800b582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b586:	eba3 0901 	sub.w	r9, r3, r1
 800b58a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b58e:	1c7b      	adds	r3, r7, #1
 800b590:	444b      	add	r3, r9
 800b592:	106d      	asrs	r5, r5, #1
 800b594:	429d      	cmp	r5, r3
 800b596:	bf38      	it	cc
 800b598:	461d      	movcc	r5, r3
 800b59a:	0553      	lsls	r3, r2, #21
 800b59c:	d527      	bpl.n	800b5ee <__ssputs_r+0x8e>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7ff fc36 	bl	800ae10 <_malloc_r>
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	b360      	cbz	r0, 800b602 <__ssputs_r+0xa2>
 800b5a8:	6921      	ldr	r1, [r4, #16]
 800b5aa:	464a      	mov	r2, r9
 800b5ac:	f7ff ff61 	bl	800b472 <memcpy>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	6126      	str	r6, [r4, #16]
 800b5be:	6165      	str	r5, [r4, #20]
 800b5c0:	444e      	add	r6, r9
 800b5c2:	eba5 0509 	sub.w	r5, r5, r9
 800b5c6:	6026      	str	r6, [r4, #0]
 800b5c8:	60a5      	str	r5, [r4, #8]
 800b5ca:	463e      	mov	r6, r7
 800b5cc:	42be      	cmp	r6, r7
 800b5ce:	d900      	bls.n	800b5d2 <__ssputs_r+0x72>
 800b5d0:	463e      	mov	r6, r7
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	4641      	mov	r1, r8
 800b5d8:	f000 fb66 	bl	800bca8 <memmove>
 800b5dc:	68a3      	ldr	r3, [r4, #8]
 800b5de:	1b9b      	subs	r3, r3, r6
 800b5e0:	60a3      	str	r3, [r4, #8]
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	4433      	add	r3, r6
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	f000 fb7b 	bl	800bcea <_realloc_r>
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d1e0      	bne.n	800b5bc <__ssputs_r+0x5c>
 800b5fa:	6921      	ldr	r1, [r4, #16]
 800b5fc:	4650      	mov	r0, sl
 800b5fe:	f7ff ff65 	bl	800b4cc <_free_r>
 800b602:	230c      	movs	r3, #12
 800b604:	f8ca 3000 	str.w	r3, [sl]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	e7e9      	b.n	800b5ea <__ssputs_r+0x8a>
	...

0800b618 <_svfiprintf_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4698      	mov	r8, r3
 800b61e:	898b      	ldrh	r3, [r1, #12]
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	b09d      	sub	sp, #116	@ 0x74
 800b624:	4607      	mov	r7, r0
 800b626:	460d      	mov	r5, r1
 800b628:	4614      	mov	r4, r2
 800b62a:	d510      	bpl.n	800b64e <_svfiprintf_r+0x36>
 800b62c:	690b      	ldr	r3, [r1, #16]
 800b62e:	b973      	cbnz	r3, 800b64e <_svfiprintf_r+0x36>
 800b630:	2140      	movs	r1, #64	@ 0x40
 800b632:	f7ff fbed 	bl	800ae10 <_malloc_r>
 800b636:	6028      	str	r0, [r5, #0]
 800b638:	6128      	str	r0, [r5, #16]
 800b63a:	b930      	cbnz	r0, 800b64a <_svfiprintf_r+0x32>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	b01d      	add	sp, #116	@ 0x74
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	2340      	movs	r3, #64	@ 0x40
 800b64c:	616b      	str	r3, [r5, #20]
 800b64e:	2300      	movs	r3, #0
 800b650:	9309      	str	r3, [sp, #36]	@ 0x24
 800b652:	2320      	movs	r3, #32
 800b654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b658:	f8cd 800c 	str.w	r8, [sp, #12]
 800b65c:	2330      	movs	r3, #48	@ 0x30
 800b65e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7fc <_svfiprintf_r+0x1e4>
 800b662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b666:	f04f 0901 	mov.w	r9, #1
 800b66a:	4623      	mov	r3, r4
 800b66c:	469a      	mov	sl, r3
 800b66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b672:	b10a      	cbz	r2, 800b678 <_svfiprintf_r+0x60>
 800b674:	2a25      	cmp	r2, #37	@ 0x25
 800b676:	d1f9      	bne.n	800b66c <_svfiprintf_r+0x54>
 800b678:	ebba 0b04 	subs.w	fp, sl, r4
 800b67c:	d00b      	beq.n	800b696 <_svfiprintf_r+0x7e>
 800b67e:	465b      	mov	r3, fp
 800b680:	4622      	mov	r2, r4
 800b682:	4629      	mov	r1, r5
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ff6b 	bl	800b560 <__ssputs_r>
 800b68a:	3001      	adds	r0, #1
 800b68c:	f000 80a7 	beq.w	800b7de <_svfiprintf_r+0x1c6>
 800b690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b692:	445a      	add	r2, fp
 800b694:	9209      	str	r2, [sp, #36]	@ 0x24
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 809f 	beq.w	800b7de <_svfiprintf_r+0x1c6>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6aa:	f10a 0a01 	add.w	sl, sl, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6b8:	4654      	mov	r4, sl
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c0:	484e      	ldr	r0, [pc, #312]	@ (800b7fc <_svfiprintf_r+0x1e4>)
 800b6c2:	f7f4 fe35 	bl	8000330 <memchr>
 800b6c6:	9a04      	ldr	r2, [sp, #16]
 800b6c8:	b9d8      	cbnz	r0, 800b702 <_svfiprintf_r+0xea>
 800b6ca:	06d0      	lsls	r0, r2, #27
 800b6cc:	bf44      	itt	mi
 800b6ce:	2320      	movmi	r3, #32
 800b6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d4:	0711      	lsls	r1, r2, #28
 800b6d6:	bf44      	itt	mi
 800b6d8:	232b      	movmi	r3, #43	@ 0x2b
 800b6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6e4:	d015      	beq.n	800b712 <_svfiprintf_r+0xfa>
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f6:	3b30      	subs	r3, #48	@ 0x30
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d94b      	bls.n	800b794 <_svfiprintf_r+0x17c>
 800b6fc:	b1b0      	cbz	r0, 800b72c <_svfiprintf_r+0x114>
 800b6fe:	9207      	str	r2, [sp, #28]
 800b700:	e014      	b.n	800b72c <_svfiprintf_r+0x114>
 800b702:	eba0 0308 	sub.w	r3, r0, r8
 800b706:	fa09 f303 	lsl.w	r3, r9, r3
 800b70a:	4313      	orrs	r3, r2
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	46a2      	mov	sl, r4
 800b710:	e7d2      	b.n	800b6b8 <_svfiprintf_r+0xa0>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	1d19      	adds	r1, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9103      	str	r1, [sp, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfbb      	ittet	lt
 800b71e:	425b      	neglt	r3, r3
 800b720:	f042 0202 	orrlt.w	r2, r2, #2
 800b724:	9307      	strge	r3, [sp, #28]
 800b726:	9307      	strlt	r3, [sp, #28]
 800b728:	bfb8      	it	lt
 800b72a:	9204      	strlt	r2, [sp, #16]
 800b72c:	7823      	ldrb	r3, [r4, #0]
 800b72e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b730:	d10a      	bne.n	800b748 <_svfiprintf_r+0x130>
 800b732:	7863      	ldrb	r3, [r4, #1]
 800b734:	2b2a      	cmp	r3, #42	@ 0x2a
 800b736:	d132      	bne.n	800b79e <_svfiprintf_r+0x186>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	9203      	str	r2, [sp, #12]
 800b740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b744:	3402      	adds	r4, #2
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b80c <_svfiprintf_r+0x1f4>
 800b74c:	7821      	ldrb	r1, [r4, #0]
 800b74e:	2203      	movs	r2, #3
 800b750:	4650      	mov	r0, sl
 800b752:	f7f4 fded 	bl	8000330 <memchr>
 800b756:	b138      	cbz	r0, 800b768 <_svfiprintf_r+0x150>
 800b758:	9b04      	ldr	r3, [sp, #16]
 800b75a:	eba0 000a 	sub.w	r0, r0, sl
 800b75e:	2240      	movs	r2, #64	@ 0x40
 800b760:	4082      	lsls	r2, r0
 800b762:	4313      	orrs	r3, r2
 800b764:	3401      	adds	r4, #1
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	4824      	ldr	r0, [pc, #144]	@ (800b800 <_svfiprintf_r+0x1e8>)
 800b76e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b772:	2206      	movs	r2, #6
 800b774:	f7f4 fddc 	bl	8000330 <memchr>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d036      	beq.n	800b7ea <_svfiprintf_r+0x1d2>
 800b77c:	4b21      	ldr	r3, [pc, #132]	@ (800b804 <_svfiprintf_r+0x1ec>)
 800b77e:	bb1b      	cbnz	r3, 800b7c8 <_svfiprintf_r+0x1b0>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3307      	adds	r3, #7
 800b784:	f023 0307 	bic.w	r3, r3, #7
 800b788:	3308      	adds	r3, #8
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b78e:	4433      	add	r3, r6
 800b790:	9309      	str	r3, [sp, #36]	@ 0x24
 800b792:	e76a      	b.n	800b66a <_svfiprintf_r+0x52>
 800b794:	fb0c 3202 	mla	r2, ip, r2, r3
 800b798:	460c      	mov	r4, r1
 800b79a:	2001      	movs	r0, #1
 800b79c:	e7a8      	b.n	800b6f0 <_svfiprintf_r+0xd8>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f04f 0c0a 	mov.w	ip, #10
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b0:	3a30      	subs	r2, #48	@ 0x30
 800b7b2:	2a09      	cmp	r2, #9
 800b7b4:	d903      	bls.n	800b7be <_svfiprintf_r+0x1a6>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0c6      	beq.n	800b748 <_svfiprintf_r+0x130>
 800b7ba:	9105      	str	r1, [sp, #20]
 800b7bc:	e7c4      	b.n	800b748 <_svfiprintf_r+0x130>
 800b7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e7f0      	b.n	800b7aa <_svfiprintf_r+0x192>
 800b7c8:	ab03      	add	r3, sp, #12
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b808 <_svfiprintf_r+0x1f0>)
 800b7d0:	a904      	add	r1, sp, #16
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	1c42      	adds	r2, r0, #1
 800b7da:	4606      	mov	r6, r0
 800b7dc:	d1d6      	bne.n	800b78c <_svfiprintf_r+0x174>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	065b      	lsls	r3, r3, #25
 800b7e2:	f53f af2d 	bmi.w	800b640 <_svfiprintf_r+0x28>
 800b7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7e8:	e72c      	b.n	800b644 <_svfiprintf_r+0x2c>
 800b7ea:	ab03      	add	r3, sp, #12
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <_svfiprintf_r+0x1f0>)
 800b7f2:	a904      	add	r1, sp, #16
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f000 f879 	bl	800b8ec <_printf_i>
 800b7fa:	e7ed      	b.n	800b7d8 <_svfiprintf_r+0x1c0>
 800b7fc:	0800c622 	.word	0x0800c622
 800b800:	0800c62c 	.word	0x0800c62c
 800b804:	00000000 	.word	0x00000000
 800b808:	0800b561 	.word	0x0800b561
 800b80c:	0800c628 	.word	0x0800c628

0800b810 <_printf_common>:
 800b810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b814:	4616      	mov	r6, r2
 800b816:	4698      	mov	r8, r3
 800b818:	688a      	ldr	r2, [r1, #8]
 800b81a:	690b      	ldr	r3, [r1, #16]
 800b81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b820:	4293      	cmp	r3, r2
 800b822:	bfb8      	it	lt
 800b824:	4613      	movlt	r3, r2
 800b826:	6033      	str	r3, [r6, #0]
 800b828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b82c:	4607      	mov	r7, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	b10a      	cbz	r2, 800b836 <_printf_common+0x26>
 800b832:	3301      	adds	r3, #1
 800b834:	6033      	str	r3, [r6, #0]
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	0699      	lsls	r1, r3, #26
 800b83a:	bf42      	ittt	mi
 800b83c:	6833      	ldrmi	r3, [r6, #0]
 800b83e:	3302      	addmi	r3, #2
 800b840:	6033      	strmi	r3, [r6, #0]
 800b842:	6825      	ldr	r5, [r4, #0]
 800b844:	f015 0506 	ands.w	r5, r5, #6
 800b848:	d106      	bne.n	800b858 <_printf_common+0x48>
 800b84a:	f104 0a19 	add.w	sl, r4, #25
 800b84e:	68e3      	ldr	r3, [r4, #12]
 800b850:	6832      	ldr	r2, [r6, #0]
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	42ab      	cmp	r3, r5
 800b856:	dc26      	bgt.n	800b8a6 <_printf_common+0x96>
 800b858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	3b00      	subs	r3, #0
 800b860:	bf18      	it	ne
 800b862:	2301      	movne	r3, #1
 800b864:	0692      	lsls	r2, r2, #26
 800b866:	d42b      	bmi.n	800b8c0 <_printf_common+0xb0>
 800b868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b86c:	4641      	mov	r1, r8
 800b86e:	4638      	mov	r0, r7
 800b870:	47c8      	blx	r9
 800b872:	3001      	adds	r0, #1
 800b874:	d01e      	beq.n	800b8b4 <_printf_common+0xa4>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	6922      	ldr	r2, [r4, #16]
 800b87a:	f003 0306 	and.w	r3, r3, #6
 800b87e:	2b04      	cmp	r3, #4
 800b880:	bf02      	ittt	eq
 800b882:	68e5      	ldreq	r5, [r4, #12]
 800b884:	6833      	ldreq	r3, [r6, #0]
 800b886:	1aed      	subeq	r5, r5, r3
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	bf0c      	ite	eq
 800b88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b890:	2500      	movne	r5, #0
 800b892:	4293      	cmp	r3, r2
 800b894:	bfc4      	itt	gt
 800b896:	1a9b      	subgt	r3, r3, r2
 800b898:	18ed      	addgt	r5, r5, r3
 800b89a:	2600      	movs	r6, #0
 800b89c:	341a      	adds	r4, #26
 800b89e:	42b5      	cmp	r5, r6
 800b8a0:	d11a      	bne.n	800b8d8 <_printf_common+0xc8>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e008      	b.n	800b8b8 <_printf_common+0xa8>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	4641      	mov	r1, r8
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	47c8      	blx	r9
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d103      	bne.n	800b8bc <_printf_common+0xac>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8bc:	3501      	adds	r5, #1
 800b8be:	e7c6      	b.n	800b84e <_printf_common+0x3e>
 800b8c0:	18e1      	adds	r1, r4, r3
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	2030      	movs	r0, #48	@ 0x30
 800b8c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ca:	4422      	add	r2, r4
 800b8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8d4:	3302      	adds	r3, #2
 800b8d6:	e7c7      	b.n	800b868 <_printf_common+0x58>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4641      	mov	r1, r8
 800b8de:	4638      	mov	r0, r7
 800b8e0:	47c8      	blx	r9
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	d0e6      	beq.n	800b8b4 <_printf_common+0xa4>
 800b8e6:	3601      	adds	r6, #1
 800b8e8:	e7d9      	b.n	800b89e <_printf_common+0x8e>
	...

0800b8ec <_printf_i>:
 800b8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	7e0f      	ldrb	r7, [r1, #24]
 800b8f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8f4:	2f78      	cmp	r7, #120	@ 0x78
 800b8f6:	4691      	mov	r9, r2
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	469a      	mov	sl, r3
 800b8fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b902:	d807      	bhi.n	800b914 <_printf_i+0x28>
 800b904:	2f62      	cmp	r7, #98	@ 0x62
 800b906:	d80a      	bhi.n	800b91e <_printf_i+0x32>
 800b908:	2f00      	cmp	r7, #0
 800b90a:	f000 80d2 	beq.w	800bab2 <_printf_i+0x1c6>
 800b90e:	2f58      	cmp	r7, #88	@ 0x58
 800b910:	f000 80b9 	beq.w	800ba86 <_printf_i+0x19a>
 800b914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b91c:	e03a      	b.n	800b994 <_printf_i+0xa8>
 800b91e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b922:	2b15      	cmp	r3, #21
 800b924:	d8f6      	bhi.n	800b914 <_printf_i+0x28>
 800b926:	a101      	add	r1, pc, #4	@ (adr r1, 800b92c <_printf_i+0x40>)
 800b928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b92c:	0800b985 	.word	0x0800b985
 800b930:	0800b999 	.word	0x0800b999
 800b934:	0800b915 	.word	0x0800b915
 800b938:	0800b915 	.word	0x0800b915
 800b93c:	0800b915 	.word	0x0800b915
 800b940:	0800b915 	.word	0x0800b915
 800b944:	0800b999 	.word	0x0800b999
 800b948:	0800b915 	.word	0x0800b915
 800b94c:	0800b915 	.word	0x0800b915
 800b950:	0800b915 	.word	0x0800b915
 800b954:	0800b915 	.word	0x0800b915
 800b958:	0800ba99 	.word	0x0800ba99
 800b95c:	0800b9c3 	.word	0x0800b9c3
 800b960:	0800ba53 	.word	0x0800ba53
 800b964:	0800b915 	.word	0x0800b915
 800b968:	0800b915 	.word	0x0800b915
 800b96c:	0800babb 	.word	0x0800babb
 800b970:	0800b915 	.word	0x0800b915
 800b974:	0800b9c3 	.word	0x0800b9c3
 800b978:	0800b915 	.word	0x0800b915
 800b97c:	0800b915 	.word	0x0800b915
 800b980:	0800ba5b 	.word	0x0800ba5b
 800b984:	6833      	ldr	r3, [r6, #0]
 800b986:	1d1a      	adds	r2, r3, #4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6032      	str	r2, [r6, #0]
 800b98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b994:	2301      	movs	r3, #1
 800b996:	e09d      	b.n	800bad4 <_printf_i+0x1e8>
 800b998:	6833      	ldr	r3, [r6, #0]
 800b99a:	6820      	ldr	r0, [r4, #0]
 800b99c:	1d19      	adds	r1, r3, #4
 800b99e:	6031      	str	r1, [r6, #0]
 800b9a0:	0606      	lsls	r6, r0, #24
 800b9a2:	d501      	bpl.n	800b9a8 <_printf_i+0xbc>
 800b9a4:	681d      	ldr	r5, [r3, #0]
 800b9a6:	e003      	b.n	800b9b0 <_printf_i+0xc4>
 800b9a8:	0645      	lsls	r5, r0, #25
 800b9aa:	d5fb      	bpl.n	800b9a4 <_printf_i+0xb8>
 800b9ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	da03      	bge.n	800b9bc <_printf_i+0xd0>
 800b9b4:	232d      	movs	r3, #45	@ 0x2d
 800b9b6:	426d      	negs	r5, r5
 800b9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9bc:	4859      	ldr	r0, [pc, #356]	@ (800bb24 <_printf_i+0x238>)
 800b9be:	230a      	movs	r3, #10
 800b9c0:	e011      	b.n	800b9e6 <_printf_i+0xfa>
 800b9c2:	6821      	ldr	r1, [r4, #0]
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	0608      	lsls	r0, r1, #24
 800b9c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9cc:	d402      	bmi.n	800b9d4 <_printf_i+0xe8>
 800b9ce:	0649      	lsls	r1, r1, #25
 800b9d0:	bf48      	it	mi
 800b9d2:	b2ad      	uxthmi	r5, r5
 800b9d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9d6:	4853      	ldr	r0, [pc, #332]	@ (800bb24 <_printf_i+0x238>)
 800b9d8:	6033      	str	r3, [r6, #0]
 800b9da:	bf14      	ite	ne
 800b9dc:	230a      	movne	r3, #10
 800b9de:	2308      	moveq	r3, #8
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9e6:	6866      	ldr	r6, [r4, #4]
 800b9e8:	60a6      	str	r6, [r4, #8]
 800b9ea:	2e00      	cmp	r6, #0
 800b9ec:	bfa2      	ittt	ge
 800b9ee:	6821      	ldrge	r1, [r4, #0]
 800b9f0:	f021 0104 	bicge.w	r1, r1, #4
 800b9f4:	6021      	strge	r1, [r4, #0]
 800b9f6:	b90d      	cbnz	r5, 800b9fc <_printf_i+0x110>
 800b9f8:	2e00      	cmp	r6, #0
 800b9fa:	d04b      	beq.n	800ba94 <_printf_i+0x1a8>
 800b9fc:	4616      	mov	r6, r2
 800b9fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba02:	fb03 5711 	mls	r7, r3, r1, r5
 800ba06:	5dc7      	ldrb	r7, [r0, r7]
 800ba08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba0c:	462f      	mov	r7, r5
 800ba0e:	42bb      	cmp	r3, r7
 800ba10:	460d      	mov	r5, r1
 800ba12:	d9f4      	bls.n	800b9fe <_printf_i+0x112>
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d10b      	bne.n	800ba30 <_printf_i+0x144>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	07df      	lsls	r7, r3, #31
 800ba1c:	d508      	bpl.n	800ba30 <_printf_i+0x144>
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	6861      	ldr	r1, [r4, #4]
 800ba22:	4299      	cmp	r1, r3
 800ba24:	bfde      	ittt	le
 800ba26:	2330      	movle	r3, #48	@ 0x30
 800ba28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba30:	1b92      	subs	r2, r2, r6
 800ba32:	6122      	str	r2, [r4, #16]
 800ba34:	f8cd a000 	str.w	sl, [sp]
 800ba38:	464b      	mov	r3, r9
 800ba3a:	aa03      	add	r2, sp, #12
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4640      	mov	r0, r8
 800ba40:	f7ff fee6 	bl	800b810 <_printf_common>
 800ba44:	3001      	adds	r0, #1
 800ba46:	d14a      	bne.n	800bade <_printf_i+0x1f2>
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	b004      	add	sp, #16
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	f043 0320 	orr.w	r3, r3, #32
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	4833      	ldr	r0, [pc, #204]	@ (800bb28 <_printf_i+0x23c>)
 800ba5c:	2778      	movs	r7, #120	@ 0x78
 800ba5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	6831      	ldr	r1, [r6, #0]
 800ba66:	061f      	lsls	r7, r3, #24
 800ba68:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba6c:	d402      	bmi.n	800ba74 <_printf_i+0x188>
 800ba6e:	065f      	lsls	r7, r3, #25
 800ba70:	bf48      	it	mi
 800ba72:	b2ad      	uxthmi	r5, r5
 800ba74:	6031      	str	r1, [r6, #0]
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	bf44      	itt	mi
 800ba7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba7e:	6023      	strmi	r3, [r4, #0]
 800ba80:	b11d      	cbz	r5, 800ba8a <_printf_i+0x19e>
 800ba82:	2310      	movs	r3, #16
 800ba84:	e7ac      	b.n	800b9e0 <_printf_i+0xf4>
 800ba86:	4827      	ldr	r0, [pc, #156]	@ (800bb24 <_printf_i+0x238>)
 800ba88:	e7e9      	b.n	800ba5e <_printf_i+0x172>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f023 0320 	bic.w	r3, r3, #32
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	e7f6      	b.n	800ba82 <_printf_i+0x196>
 800ba94:	4616      	mov	r6, r2
 800ba96:	e7bd      	b.n	800ba14 <_printf_i+0x128>
 800ba98:	6833      	ldr	r3, [r6, #0]
 800ba9a:	6825      	ldr	r5, [r4, #0]
 800ba9c:	6961      	ldr	r1, [r4, #20]
 800ba9e:	1d18      	adds	r0, r3, #4
 800baa0:	6030      	str	r0, [r6, #0]
 800baa2:	062e      	lsls	r6, r5, #24
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	d501      	bpl.n	800baac <_printf_i+0x1c0>
 800baa8:	6019      	str	r1, [r3, #0]
 800baaa:	e002      	b.n	800bab2 <_printf_i+0x1c6>
 800baac:	0668      	lsls	r0, r5, #25
 800baae:	d5fb      	bpl.n	800baa8 <_printf_i+0x1bc>
 800bab0:	8019      	strh	r1, [r3, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	6123      	str	r3, [r4, #16]
 800bab6:	4616      	mov	r6, r2
 800bab8:	e7bc      	b.n	800ba34 <_printf_i+0x148>
 800baba:	6833      	ldr	r3, [r6, #0]
 800babc:	1d1a      	adds	r2, r3, #4
 800babe:	6032      	str	r2, [r6, #0]
 800bac0:	681e      	ldr	r6, [r3, #0]
 800bac2:	6862      	ldr	r2, [r4, #4]
 800bac4:	2100      	movs	r1, #0
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7f4 fc32 	bl	8000330 <memchr>
 800bacc:	b108      	cbz	r0, 800bad2 <_printf_i+0x1e6>
 800bace:	1b80      	subs	r0, r0, r6
 800bad0:	6060      	str	r0, [r4, #4]
 800bad2:	6863      	ldr	r3, [r4, #4]
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	2300      	movs	r3, #0
 800bad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800badc:	e7aa      	b.n	800ba34 <_printf_i+0x148>
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	4632      	mov	r2, r6
 800bae2:	4649      	mov	r1, r9
 800bae4:	4640      	mov	r0, r8
 800bae6:	47d0      	blx	sl
 800bae8:	3001      	adds	r0, #1
 800baea:	d0ad      	beq.n	800ba48 <_printf_i+0x15c>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	079b      	lsls	r3, r3, #30
 800baf0:	d413      	bmi.n	800bb1a <_printf_i+0x22e>
 800baf2:	68e0      	ldr	r0, [r4, #12]
 800baf4:	9b03      	ldr	r3, [sp, #12]
 800baf6:	4298      	cmp	r0, r3
 800baf8:	bfb8      	it	lt
 800bafa:	4618      	movlt	r0, r3
 800bafc:	e7a6      	b.n	800ba4c <_printf_i+0x160>
 800bafe:	2301      	movs	r3, #1
 800bb00:	4632      	mov	r2, r6
 800bb02:	4649      	mov	r1, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	47d0      	blx	sl
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d09d      	beq.n	800ba48 <_printf_i+0x15c>
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	68e3      	ldr	r3, [r4, #12]
 800bb10:	9903      	ldr	r1, [sp, #12]
 800bb12:	1a5b      	subs	r3, r3, r1
 800bb14:	42ab      	cmp	r3, r5
 800bb16:	dcf2      	bgt.n	800bafe <_printf_i+0x212>
 800bb18:	e7eb      	b.n	800baf2 <_printf_i+0x206>
 800bb1a:	2500      	movs	r5, #0
 800bb1c:	f104 0619 	add.w	r6, r4, #25
 800bb20:	e7f5      	b.n	800bb0e <_printf_i+0x222>
 800bb22:	bf00      	nop
 800bb24:	0800c633 	.word	0x0800c633
 800bb28:	0800c644 	.word	0x0800c644

0800bb2c <__sflush_r>:
 800bb2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	0716      	lsls	r6, r2, #28
 800bb36:	4605      	mov	r5, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d454      	bmi.n	800bbe6 <__sflush_r+0xba>
 800bb3c:	684b      	ldr	r3, [r1, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dc02      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dd48      	ble.n	800bbda <__sflush_r+0xae>
 800bb48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d045      	beq.n	800bbda <__sflush_r+0xae>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb54:	682f      	ldr	r7, [r5, #0]
 800bb56:	6a21      	ldr	r1, [r4, #32]
 800bb58:	602b      	str	r3, [r5, #0]
 800bb5a:	d030      	beq.n	800bbbe <__sflush_r+0x92>
 800bb5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	0759      	lsls	r1, r3, #29
 800bb62:	d505      	bpl.n	800bb70 <__sflush_r+0x44>
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb6a:	b10b      	cbz	r3, 800bb70 <__sflush_r+0x44>
 800bb6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	2300      	movs	r3, #0
 800bb72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb74:	6a21      	ldr	r1, [r4, #32]
 800bb76:	4628      	mov	r0, r5
 800bb78:	47b0      	blx	r6
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	d106      	bne.n	800bb8e <__sflush_r+0x62>
 800bb80:	6829      	ldr	r1, [r5, #0]
 800bb82:	291d      	cmp	r1, #29
 800bb84:	d82b      	bhi.n	800bbde <__sflush_r+0xb2>
 800bb86:	4a2a      	ldr	r2, [pc, #168]	@ (800bc30 <__sflush_r+0x104>)
 800bb88:	410a      	asrs	r2, r1
 800bb8a:	07d6      	lsls	r6, r2, #31
 800bb8c:	d427      	bmi.n	800bbde <__sflush_r+0xb2>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	6062      	str	r2, [r4, #4]
 800bb92:	04d9      	lsls	r1, r3, #19
 800bb94:	6922      	ldr	r2, [r4, #16]
 800bb96:	6022      	str	r2, [r4, #0]
 800bb98:	d504      	bpl.n	800bba4 <__sflush_r+0x78>
 800bb9a:	1c42      	adds	r2, r0, #1
 800bb9c:	d101      	bne.n	800bba2 <__sflush_r+0x76>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b903      	cbnz	r3, 800bba4 <__sflush_r+0x78>
 800bba2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bba6:	602f      	str	r7, [r5, #0]
 800bba8:	b1b9      	cbz	r1, 800bbda <__sflush_r+0xae>
 800bbaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbae:	4299      	cmp	r1, r3
 800bbb0:	d002      	beq.n	800bbb8 <__sflush_r+0x8c>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7ff fc8a 	bl	800b4cc <_free_r>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbbc:	e00d      	b.n	800bbda <__sflush_r+0xae>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b0      	blx	r6
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	1c50      	adds	r0, r2, #1
 800bbc8:	d1c9      	bne.n	800bb5e <__sflush_r+0x32>
 800bbca:	682b      	ldr	r3, [r5, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c6      	beq.n	800bb5e <__sflush_r+0x32>
 800bbd0:	2b1d      	cmp	r3, #29
 800bbd2:	d001      	beq.n	800bbd8 <__sflush_r+0xac>
 800bbd4:	2b16      	cmp	r3, #22
 800bbd6:	d11e      	bne.n	800bc16 <__sflush_r+0xea>
 800bbd8:	602f      	str	r7, [r5, #0]
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e022      	b.n	800bc24 <__sflush_r+0xf8>
 800bbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	e01b      	b.n	800bc1e <__sflush_r+0xf2>
 800bbe6:	690f      	ldr	r7, [r1, #16]
 800bbe8:	2f00      	cmp	r7, #0
 800bbea:	d0f6      	beq.n	800bbda <__sflush_r+0xae>
 800bbec:	0793      	lsls	r3, r2, #30
 800bbee:	680e      	ldr	r6, [r1, #0]
 800bbf0:	bf08      	it	eq
 800bbf2:	694b      	ldreq	r3, [r1, #20]
 800bbf4:	600f      	str	r7, [r1, #0]
 800bbf6:	bf18      	it	ne
 800bbf8:	2300      	movne	r3, #0
 800bbfa:	eba6 0807 	sub.w	r8, r6, r7
 800bbfe:	608b      	str	r3, [r1, #8]
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	dde9      	ble.n	800bbda <__sflush_r+0xae>
 800bc06:	6a21      	ldr	r1, [r4, #32]
 800bc08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc0a:	4643      	mov	r3, r8
 800bc0c:	463a      	mov	r2, r7
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b0      	blx	r6
 800bc12:	2800      	cmp	r0, #0
 800bc14:	dc08      	bgt.n	800bc28 <__sflush_r+0xfc>
 800bc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	f04f 30ff 	mov.w	r0, #4294967295
 800bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc28:	4407      	add	r7, r0
 800bc2a:	eba8 0800 	sub.w	r8, r8, r0
 800bc2e:	e7e7      	b.n	800bc00 <__sflush_r+0xd4>
 800bc30:	dfbffffe 	.word	0xdfbffffe

0800bc34 <_fflush_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	4605      	mov	r5, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	b913      	cbnz	r3, 800bc44 <_fflush_r+0x10>
 800bc3e:	2500      	movs	r5, #0
 800bc40:	4628      	mov	r0, r5
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	b118      	cbz	r0, 800bc4e <_fflush_r+0x1a>
 800bc46:	6a03      	ldr	r3, [r0, #32]
 800bc48:	b90b      	cbnz	r3, 800bc4e <_fflush_r+0x1a>
 800bc4a:	f7ff fa7d 	bl	800b148 <__sinit>
 800bc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0f3      	beq.n	800bc3e <_fflush_r+0xa>
 800bc56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc58:	07d0      	lsls	r0, r2, #31
 800bc5a:	d404      	bmi.n	800bc66 <_fflush_r+0x32>
 800bc5c:	0599      	lsls	r1, r3, #22
 800bc5e:	d402      	bmi.n	800bc66 <_fflush_r+0x32>
 800bc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc62:	f7ff fc04 	bl	800b46e <__retarget_lock_acquire_recursive>
 800bc66:	4628      	mov	r0, r5
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f7ff ff5f 	bl	800bb2c <__sflush_r>
 800bc6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc70:	07da      	lsls	r2, r3, #31
 800bc72:	4605      	mov	r5, r0
 800bc74:	d4e4      	bmi.n	800bc40 <_fflush_r+0xc>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	059b      	lsls	r3, r3, #22
 800bc7a:	d4e1      	bmi.n	800bc40 <_fflush_r+0xc>
 800bc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc7e:	f7ff fbf7 	bl	800b470 <__retarget_lock_release_recursive>
 800bc82:	e7dd      	b.n	800bc40 <_fflush_r+0xc>

0800bc84 <fiprintf>:
 800bc84:	b40e      	push	{r1, r2, r3}
 800bc86:	b503      	push	{r0, r1, lr}
 800bc88:	4601      	mov	r1, r0
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	4805      	ldr	r0, [pc, #20]	@ (800bca4 <fiprintf+0x20>)
 800bc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc92:	6800      	ldr	r0, [r0, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	f000 f87f 	bl	800bd98 <_vfiprintf_r>
 800bc9a:	b002      	add	sp, #8
 800bc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca0:	b003      	add	sp, #12
 800bca2:	4770      	bx	lr
 800bca4:	2400009c 	.word	0x2400009c

0800bca8 <memmove>:
 800bca8:	4288      	cmp	r0, r1
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	eb01 0402 	add.w	r4, r1, r2
 800bcb0:	d902      	bls.n	800bcb8 <memmove+0x10>
 800bcb2:	4284      	cmp	r4, r0
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	d807      	bhi.n	800bcc8 <memmove+0x20>
 800bcb8:	1e43      	subs	r3, r0, #1
 800bcba:	42a1      	cmp	r1, r4
 800bcbc:	d008      	beq.n	800bcd0 <memmove+0x28>
 800bcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcc6:	e7f8      	b.n	800bcba <memmove+0x12>
 800bcc8:	4402      	add	r2, r0
 800bcca:	4601      	mov	r1, r0
 800bccc:	428a      	cmp	r2, r1
 800bcce:	d100      	bne.n	800bcd2 <memmove+0x2a>
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcda:	e7f7      	b.n	800bccc <memmove+0x24>

0800bcdc <abort>:
 800bcdc:	b508      	push	{r3, lr}
 800bcde:	2006      	movs	r0, #6
 800bce0:	f000 fa2e 	bl	800c140 <raise>
 800bce4:	2001      	movs	r0, #1
 800bce6:	f7f5 faf3 	bl	80012d0 <_exit>

0800bcea <_realloc_r>:
 800bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	b921      	cbnz	r1, 800bd00 <_realloc_r+0x16>
 800bcf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	f7ff b888 	b.w	800ae10 <_malloc_r>
 800bd00:	b92a      	cbnz	r2, 800bd0e <_realloc_r+0x24>
 800bd02:	f7ff fbe3 	bl	800b4cc <_free_r>
 800bd06:	2400      	movs	r4, #0
 800bd08:	4620      	mov	r0, r4
 800bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0e:	f000 fa33 	bl	800c178 <_malloc_usable_size_r>
 800bd12:	4285      	cmp	r5, r0
 800bd14:	4606      	mov	r6, r0
 800bd16:	d802      	bhi.n	800bd1e <_realloc_r+0x34>
 800bd18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd1c:	d8f4      	bhi.n	800bd08 <_realloc_r+0x1e>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4640      	mov	r0, r8
 800bd22:	f7ff f875 	bl	800ae10 <_malloc_r>
 800bd26:	4607      	mov	r7, r0
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0ec      	beq.n	800bd06 <_realloc_r+0x1c>
 800bd2c:	42b5      	cmp	r5, r6
 800bd2e:	462a      	mov	r2, r5
 800bd30:	4621      	mov	r1, r4
 800bd32:	bf28      	it	cs
 800bd34:	4632      	movcs	r2, r6
 800bd36:	f7ff fb9c 	bl	800b472 <memcpy>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	f7ff fbc5 	bl	800b4cc <_free_r>
 800bd42:	463c      	mov	r4, r7
 800bd44:	e7e0      	b.n	800bd08 <_realloc_r+0x1e>

0800bd46 <__sfputc_r>:
 800bd46:	6893      	ldr	r3, [r2, #8]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	b410      	push	{r4}
 800bd4e:	6093      	str	r3, [r2, #8]
 800bd50:	da08      	bge.n	800bd64 <__sfputc_r+0x1e>
 800bd52:	6994      	ldr	r4, [r2, #24]
 800bd54:	42a3      	cmp	r3, r4
 800bd56:	db01      	blt.n	800bd5c <__sfputc_r+0x16>
 800bd58:	290a      	cmp	r1, #10
 800bd5a:	d103      	bne.n	800bd64 <__sfputc_r+0x1e>
 800bd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd60:	f000 b932 	b.w	800bfc8 <__swbuf_r>
 800bd64:	6813      	ldr	r3, [r2, #0]
 800bd66:	1c58      	adds	r0, r3, #1
 800bd68:	6010      	str	r0, [r2, #0]
 800bd6a:	7019      	strb	r1, [r3, #0]
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <__sfputs_r>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	4614      	mov	r4, r2
 800bd7c:	18d5      	adds	r5, r2, r3
 800bd7e:	42ac      	cmp	r4, r5
 800bd80:	d101      	bne.n	800bd86 <__sfputs_r+0x12>
 800bd82:	2000      	movs	r0, #0
 800bd84:	e007      	b.n	800bd96 <__sfputs_r+0x22>
 800bd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8a:	463a      	mov	r2, r7
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ffda 	bl	800bd46 <__sfputc_r>
 800bd92:	1c43      	adds	r3, r0, #1
 800bd94:	d1f3      	bne.n	800bd7e <__sfputs_r+0xa>
 800bd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd98 <_vfiprintf_r>:
 800bd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9c:	460d      	mov	r5, r1
 800bd9e:	b09d      	sub	sp, #116	@ 0x74
 800bda0:	4614      	mov	r4, r2
 800bda2:	4698      	mov	r8, r3
 800bda4:	4606      	mov	r6, r0
 800bda6:	b118      	cbz	r0, 800bdb0 <_vfiprintf_r+0x18>
 800bda8:	6a03      	ldr	r3, [r0, #32]
 800bdaa:	b90b      	cbnz	r3, 800bdb0 <_vfiprintf_r+0x18>
 800bdac:	f7ff f9cc 	bl	800b148 <__sinit>
 800bdb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdb2:	07d9      	lsls	r1, r3, #31
 800bdb4:	d405      	bmi.n	800bdc2 <_vfiprintf_r+0x2a>
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	059a      	lsls	r2, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_vfiprintf_r+0x2a>
 800bdbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdbe:	f7ff fb56 	bl	800b46e <__retarget_lock_acquire_recursive>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	071b      	lsls	r3, r3, #28
 800bdc6:	d501      	bpl.n	800bdcc <_vfiprintf_r+0x34>
 800bdc8:	692b      	ldr	r3, [r5, #16]
 800bdca:	b99b      	cbnz	r3, 800bdf4 <_vfiprintf_r+0x5c>
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f000 f938 	bl	800c044 <__swsetup_r>
 800bdd4:	b170      	cbz	r0, 800bdf4 <_vfiprintf_r+0x5c>
 800bdd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdd8:	07dc      	lsls	r4, r3, #31
 800bdda:	d504      	bpl.n	800bde6 <_vfiprintf_r+0x4e>
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	b01d      	add	sp, #116	@ 0x74
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	0598      	lsls	r0, r3, #22
 800bdea:	d4f7      	bmi.n	800bddc <_vfiprintf_r+0x44>
 800bdec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdee:	f7ff fb3f 	bl	800b470 <__retarget_lock_release_recursive>
 800bdf2:	e7f3      	b.n	800bddc <_vfiprintf_r+0x44>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800be02:	2330      	movs	r3, #48	@ 0x30
 800be04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfb4 <_vfiprintf_r+0x21c>
 800be08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be0c:	f04f 0901 	mov.w	r9, #1
 800be10:	4623      	mov	r3, r4
 800be12:	469a      	mov	sl, r3
 800be14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be18:	b10a      	cbz	r2, 800be1e <_vfiprintf_r+0x86>
 800be1a:	2a25      	cmp	r2, #37	@ 0x25
 800be1c:	d1f9      	bne.n	800be12 <_vfiprintf_r+0x7a>
 800be1e:	ebba 0b04 	subs.w	fp, sl, r4
 800be22:	d00b      	beq.n	800be3c <_vfiprintf_r+0xa4>
 800be24:	465b      	mov	r3, fp
 800be26:	4622      	mov	r2, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ffa2 	bl	800bd74 <__sfputs_r>
 800be30:	3001      	adds	r0, #1
 800be32:	f000 80a7 	beq.w	800bf84 <_vfiprintf_r+0x1ec>
 800be36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be38:	445a      	add	r2, fp
 800be3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be3c:	f89a 3000 	ldrb.w	r3, [sl]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 809f 	beq.w	800bf84 <_vfiprintf_r+0x1ec>
 800be46:	2300      	movs	r3, #0
 800be48:	f04f 32ff 	mov.w	r2, #4294967295
 800be4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be50:	f10a 0a01 	add.w	sl, sl, #1
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	9307      	str	r3, [sp, #28]
 800be58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be5e:	4654      	mov	r4, sl
 800be60:	2205      	movs	r2, #5
 800be62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be66:	4853      	ldr	r0, [pc, #332]	@ (800bfb4 <_vfiprintf_r+0x21c>)
 800be68:	f7f4 fa62 	bl	8000330 <memchr>
 800be6c:	9a04      	ldr	r2, [sp, #16]
 800be6e:	b9d8      	cbnz	r0, 800bea8 <_vfiprintf_r+0x110>
 800be70:	06d1      	lsls	r1, r2, #27
 800be72:	bf44      	itt	mi
 800be74:	2320      	movmi	r3, #32
 800be76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be7a:	0713      	lsls	r3, r2, #28
 800be7c:	bf44      	itt	mi
 800be7e:	232b      	movmi	r3, #43	@ 0x2b
 800be80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b2a      	cmp	r3, #42	@ 0x2a
 800be8a:	d015      	beq.n	800beb8 <_vfiprintf_r+0x120>
 800be8c:	9a07      	ldr	r2, [sp, #28]
 800be8e:	4654      	mov	r4, sl
 800be90:	2000      	movs	r0, #0
 800be92:	f04f 0c0a 	mov.w	ip, #10
 800be96:	4621      	mov	r1, r4
 800be98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9c:	3b30      	subs	r3, #48	@ 0x30
 800be9e:	2b09      	cmp	r3, #9
 800bea0:	d94b      	bls.n	800bf3a <_vfiprintf_r+0x1a2>
 800bea2:	b1b0      	cbz	r0, 800bed2 <_vfiprintf_r+0x13a>
 800bea4:	9207      	str	r2, [sp, #28]
 800bea6:	e014      	b.n	800bed2 <_vfiprintf_r+0x13a>
 800bea8:	eba0 0308 	sub.w	r3, r0, r8
 800beac:	fa09 f303 	lsl.w	r3, r9, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	46a2      	mov	sl, r4
 800beb6:	e7d2      	b.n	800be5e <_vfiprintf_r+0xc6>
 800beb8:	9b03      	ldr	r3, [sp, #12]
 800beba:	1d19      	adds	r1, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	9103      	str	r1, [sp, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	bfbb      	ittet	lt
 800bec4:	425b      	neglt	r3, r3
 800bec6:	f042 0202 	orrlt.w	r2, r2, #2
 800beca:	9307      	strge	r3, [sp, #28]
 800becc:	9307      	strlt	r3, [sp, #28]
 800bece:	bfb8      	it	lt
 800bed0:	9204      	strlt	r2, [sp, #16]
 800bed2:	7823      	ldrb	r3, [r4, #0]
 800bed4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bed6:	d10a      	bne.n	800beee <_vfiprintf_r+0x156>
 800bed8:	7863      	ldrb	r3, [r4, #1]
 800beda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bedc:	d132      	bne.n	800bf44 <_vfiprintf_r+0x1ac>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	1d1a      	adds	r2, r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	9203      	str	r2, [sp, #12]
 800bee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800beea:	3402      	adds	r4, #2
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfc4 <_vfiprintf_r+0x22c>
 800bef2:	7821      	ldrb	r1, [r4, #0]
 800bef4:	2203      	movs	r2, #3
 800bef6:	4650      	mov	r0, sl
 800bef8:	f7f4 fa1a 	bl	8000330 <memchr>
 800befc:	b138      	cbz	r0, 800bf0e <_vfiprintf_r+0x176>
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	eba0 000a 	sub.w	r0, r0, sl
 800bf04:	2240      	movs	r2, #64	@ 0x40
 800bf06:	4082      	lsls	r2, r0
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	3401      	adds	r4, #1
 800bf0c:	9304      	str	r3, [sp, #16]
 800bf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf12:	4829      	ldr	r0, [pc, #164]	@ (800bfb8 <_vfiprintf_r+0x220>)
 800bf14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf18:	2206      	movs	r2, #6
 800bf1a:	f7f4 fa09 	bl	8000330 <memchr>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d03f      	beq.n	800bfa2 <_vfiprintf_r+0x20a>
 800bf22:	4b26      	ldr	r3, [pc, #152]	@ (800bfbc <_vfiprintf_r+0x224>)
 800bf24:	bb1b      	cbnz	r3, 800bf6e <_vfiprintf_r+0x1d6>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	3307      	adds	r3, #7
 800bf2a:	f023 0307 	bic.w	r3, r3, #7
 800bf2e:	3308      	adds	r3, #8
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf34:	443b      	add	r3, r7
 800bf36:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf38:	e76a      	b.n	800be10 <_vfiprintf_r+0x78>
 800bf3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf3e:	460c      	mov	r4, r1
 800bf40:	2001      	movs	r0, #1
 800bf42:	e7a8      	b.n	800be96 <_vfiprintf_r+0xfe>
 800bf44:	2300      	movs	r3, #0
 800bf46:	3401      	adds	r4, #1
 800bf48:	9305      	str	r3, [sp, #20]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	f04f 0c0a 	mov.w	ip, #10
 800bf50:	4620      	mov	r0, r4
 800bf52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf56:	3a30      	subs	r2, #48	@ 0x30
 800bf58:	2a09      	cmp	r2, #9
 800bf5a:	d903      	bls.n	800bf64 <_vfiprintf_r+0x1cc>
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d0c6      	beq.n	800beee <_vfiprintf_r+0x156>
 800bf60:	9105      	str	r1, [sp, #20]
 800bf62:	e7c4      	b.n	800beee <_vfiprintf_r+0x156>
 800bf64:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf68:	4604      	mov	r4, r0
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e7f0      	b.n	800bf50 <_vfiprintf_r+0x1b8>
 800bf6e:	ab03      	add	r3, sp, #12
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	462a      	mov	r2, r5
 800bf74:	4b12      	ldr	r3, [pc, #72]	@ (800bfc0 <_vfiprintf_r+0x228>)
 800bf76:	a904      	add	r1, sp, #16
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f3af 8000 	nop.w
 800bf7e:	4607      	mov	r7, r0
 800bf80:	1c78      	adds	r0, r7, #1
 800bf82:	d1d6      	bne.n	800bf32 <_vfiprintf_r+0x19a>
 800bf84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf86:	07d9      	lsls	r1, r3, #31
 800bf88:	d405      	bmi.n	800bf96 <_vfiprintf_r+0x1fe>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	059a      	lsls	r2, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_vfiprintf_r+0x1fe>
 800bf90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf92:	f7ff fa6d 	bl	800b470 <__retarget_lock_release_recursive>
 800bf96:	89ab      	ldrh	r3, [r5, #12]
 800bf98:	065b      	lsls	r3, r3, #25
 800bf9a:	f53f af1f 	bmi.w	800bddc <_vfiprintf_r+0x44>
 800bf9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfa0:	e71e      	b.n	800bde0 <_vfiprintf_r+0x48>
 800bfa2:	ab03      	add	r3, sp, #12
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	462a      	mov	r2, r5
 800bfa8:	4b05      	ldr	r3, [pc, #20]	@ (800bfc0 <_vfiprintf_r+0x228>)
 800bfaa:	a904      	add	r1, sp, #16
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff fc9d 	bl	800b8ec <_printf_i>
 800bfb2:	e7e4      	b.n	800bf7e <_vfiprintf_r+0x1e6>
 800bfb4:	0800c622 	.word	0x0800c622
 800bfb8:	0800c62c 	.word	0x0800c62c
 800bfbc:	00000000 	.word	0x00000000
 800bfc0:	0800bd75 	.word	0x0800bd75
 800bfc4:	0800c628 	.word	0x0800c628

0800bfc8 <__swbuf_r>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	460e      	mov	r6, r1
 800bfcc:	4614      	mov	r4, r2
 800bfce:	4605      	mov	r5, r0
 800bfd0:	b118      	cbz	r0, 800bfda <__swbuf_r+0x12>
 800bfd2:	6a03      	ldr	r3, [r0, #32]
 800bfd4:	b90b      	cbnz	r3, 800bfda <__swbuf_r+0x12>
 800bfd6:	f7ff f8b7 	bl	800b148 <__sinit>
 800bfda:	69a3      	ldr	r3, [r4, #24]
 800bfdc:	60a3      	str	r3, [r4, #8]
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	071a      	lsls	r2, r3, #28
 800bfe2:	d501      	bpl.n	800bfe8 <__swbuf_r+0x20>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	b943      	cbnz	r3, 800bffa <__swbuf_r+0x32>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f82a 	bl	800c044 <__swsetup_r>
 800bff0:	b118      	cbz	r0, 800bffa <__swbuf_r+0x32>
 800bff2:	f04f 37ff 	mov.w	r7, #4294967295
 800bff6:	4638      	mov	r0, r7
 800bff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	1a98      	subs	r0, r3, r2
 800c000:	6963      	ldr	r3, [r4, #20]
 800c002:	b2f6      	uxtb	r6, r6
 800c004:	4283      	cmp	r3, r0
 800c006:	4637      	mov	r7, r6
 800c008:	dc05      	bgt.n	800c016 <__swbuf_r+0x4e>
 800c00a:	4621      	mov	r1, r4
 800c00c:	4628      	mov	r0, r5
 800c00e:	f7ff fe11 	bl	800bc34 <_fflush_r>
 800c012:	2800      	cmp	r0, #0
 800c014:	d1ed      	bne.n	800bff2 <__swbuf_r+0x2a>
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	3b01      	subs	r3, #1
 800c01a:	60a3      	str	r3, [r4, #8]
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	1c5a      	adds	r2, r3, #1
 800c020:	6022      	str	r2, [r4, #0]
 800c022:	701e      	strb	r6, [r3, #0]
 800c024:	6962      	ldr	r2, [r4, #20]
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	429a      	cmp	r2, r3
 800c02a:	d004      	beq.n	800c036 <__swbuf_r+0x6e>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	07db      	lsls	r3, r3, #31
 800c030:	d5e1      	bpl.n	800bff6 <__swbuf_r+0x2e>
 800c032:	2e0a      	cmp	r6, #10
 800c034:	d1df      	bne.n	800bff6 <__swbuf_r+0x2e>
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f7ff fdfb 	bl	800bc34 <_fflush_r>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d0d9      	beq.n	800bff6 <__swbuf_r+0x2e>
 800c042:	e7d6      	b.n	800bff2 <__swbuf_r+0x2a>

0800c044 <__swsetup_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4b29      	ldr	r3, [pc, #164]	@ (800c0ec <__swsetup_r+0xa8>)
 800c048:	4605      	mov	r5, r0
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	460c      	mov	r4, r1
 800c04e:	b118      	cbz	r0, 800c058 <__swsetup_r+0x14>
 800c050:	6a03      	ldr	r3, [r0, #32]
 800c052:	b90b      	cbnz	r3, 800c058 <__swsetup_r+0x14>
 800c054:	f7ff f878 	bl	800b148 <__sinit>
 800c058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c05c:	0719      	lsls	r1, r3, #28
 800c05e:	d422      	bmi.n	800c0a6 <__swsetup_r+0x62>
 800c060:	06da      	lsls	r2, r3, #27
 800c062:	d407      	bmi.n	800c074 <__swsetup_r+0x30>
 800c064:	2209      	movs	r2, #9
 800c066:	602a      	str	r2, [r5, #0]
 800c068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	f04f 30ff 	mov.w	r0, #4294967295
 800c072:	e033      	b.n	800c0dc <__swsetup_r+0x98>
 800c074:	0758      	lsls	r0, r3, #29
 800c076:	d512      	bpl.n	800c09e <__swsetup_r+0x5a>
 800c078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c07a:	b141      	cbz	r1, 800c08e <__swsetup_r+0x4a>
 800c07c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c080:	4299      	cmp	r1, r3
 800c082:	d002      	beq.n	800c08a <__swsetup_r+0x46>
 800c084:	4628      	mov	r0, r5
 800c086:	f7ff fa21 	bl	800b4cc <_free_r>
 800c08a:	2300      	movs	r3, #0
 800c08c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	2300      	movs	r3, #0
 800c098:	6063      	str	r3, [r4, #4]
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	f043 0308 	orr.w	r3, r3, #8
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	b94b      	cbnz	r3, 800c0be <__swsetup_r+0x7a>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0b4:	d003      	beq.n	800c0be <__swsetup_r+0x7a>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f000 f88b 	bl	800c1d4 <__smakebuf_r>
 800c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c2:	f013 0201 	ands.w	r2, r3, #1
 800c0c6:	d00a      	beq.n	800c0de <__swsetup_r+0x9a>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	60a2      	str	r2, [r4, #8]
 800c0cc:	6962      	ldr	r2, [r4, #20]
 800c0ce:	4252      	negs	r2, r2
 800c0d0:	61a2      	str	r2, [r4, #24]
 800c0d2:	6922      	ldr	r2, [r4, #16]
 800c0d4:	b942      	cbnz	r2, 800c0e8 <__swsetup_r+0xa4>
 800c0d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0da:	d1c5      	bne.n	800c068 <__swsetup_r+0x24>
 800c0dc:	bd38      	pop	{r3, r4, r5, pc}
 800c0de:	0799      	lsls	r1, r3, #30
 800c0e0:	bf58      	it	pl
 800c0e2:	6962      	ldrpl	r2, [r4, #20]
 800c0e4:	60a2      	str	r2, [r4, #8]
 800c0e6:	e7f4      	b.n	800c0d2 <__swsetup_r+0x8e>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7f7      	b.n	800c0dc <__swsetup_r+0x98>
 800c0ec:	2400009c 	.word	0x2400009c

0800c0f0 <_raise_r>:
 800c0f0:	291f      	cmp	r1, #31
 800c0f2:	b538      	push	{r3, r4, r5, lr}
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	d904      	bls.n	800c104 <_raise_r+0x14>
 800c0fa:	2316      	movs	r3, #22
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c106:	b112      	cbz	r2, 800c10e <_raise_r+0x1e>
 800c108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c10c:	b94b      	cbnz	r3, 800c122 <_raise_r+0x32>
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 f830 	bl	800c174 <_getpid_r>
 800c114:	4622      	mov	r2, r4
 800c116:	4601      	mov	r1, r0
 800c118:	4628      	mov	r0, r5
 800c11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c11e:	f000 b817 	b.w	800c150 <_kill_r>
 800c122:	2b01      	cmp	r3, #1
 800c124:	d00a      	beq.n	800c13c <_raise_r+0x4c>
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	d103      	bne.n	800c132 <_raise_r+0x42>
 800c12a:	2316      	movs	r3, #22
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	2001      	movs	r0, #1
 800c130:	e7e7      	b.n	800c102 <_raise_r+0x12>
 800c132:	2100      	movs	r1, #0
 800c134:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c138:	4620      	mov	r0, r4
 800c13a:	4798      	blx	r3
 800c13c:	2000      	movs	r0, #0
 800c13e:	e7e0      	b.n	800c102 <_raise_r+0x12>

0800c140 <raise>:
 800c140:	4b02      	ldr	r3, [pc, #8]	@ (800c14c <raise+0xc>)
 800c142:	4601      	mov	r1, r0
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	f7ff bfd3 	b.w	800c0f0 <_raise_r>
 800c14a:	bf00      	nop
 800c14c:	2400009c 	.word	0x2400009c

0800c150 <_kill_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d07      	ldr	r5, [pc, #28]	@ (800c170 <_kill_r+0x20>)
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	4608      	mov	r0, r1
 800c15a:	4611      	mov	r1, r2
 800c15c:	602b      	str	r3, [r5, #0]
 800c15e:	f7f5 f8a7 	bl	80012b0 <_kill>
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	d102      	bne.n	800c16c <_kill_r+0x1c>
 800c166:	682b      	ldr	r3, [r5, #0]
 800c168:	b103      	cbz	r3, 800c16c <_kill_r+0x1c>
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	bd38      	pop	{r3, r4, r5, pc}
 800c16e:	bf00      	nop
 800c170:	24000888 	.word	0x24000888

0800c174 <_getpid_r>:
 800c174:	f7f5 b894 	b.w	80012a0 <_getpid>

0800c178 <_malloc_usable_size_r>:
 800c178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17c:	1f18      	subs	r0, r3, #4
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bfbc      	itt	lt
 800c182:	580b      	ldrlt	r3, [r1, r0]
 800c184:	18c0      	addlt	r0, r0, r3
 800c186:	4770      	bx	lr

0800c188 <__swhatbuf_r>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	460c      	mov	r4, r1
 800c18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c190:	2900      	cmp	r1, #0
 800c192:	b096      	sub	sp, #88	@ 0x58
 800c194:	4615      	mov	r5, r2
 800c196:	461e      	mov	r6, r3
 800c198:	da0d      	bge.n	800c1b6 <__swhatbuf_r+0x2e>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1a0:	f04f 0100 	mov.w	r1, #0
 800c1a4:	bf14      	ite	ne
 800c1a6:	2340      	movne	r3, #64	@ 0x40
 800c1a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	6031      	str	r1, [r6, #0]
 800c1b0:	602b      	str	r3, [r5, #0]
 800c1b2:	b016      	add	sp, #88	@ 0x58
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}
 800c1b6:	466a      	mov	r2, sp
 800c1b8:	f000 f848 	bl	800c24c <_fstat_r>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	dbec      	blt.n	800c19a <__swhatbuf_r+0x12>
 800c1c0:	9901      	ldr	r1, [sp, #4]
 800c1c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1ca:	4259      	negs	r1, r3
 800c1cc:	4159      	adcs	r1, r3
 800c1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1d2:	e7eb      	b.n	800c1ac <__swhatbuf_r+0x24>

0800c1d4 <__smakebuf_r>:
 800c1d4:	898b      	ldrh	r3, [r1, #12]
 800c1d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1d8:	079d      	lsls	r5, r3, #30
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460c      	mov	r4, r1
 800c1de:	d507      	bpl.n	800c1f0 <__smakebuf_r+0x1c>
 800c1e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	6123      	str	r3, [r4, #16]
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	6163      	str	r3, [r4, #20]
 800c1ec:	b003      	add	sp, #12
 800c1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f0:	ab01      	add	r3, sp, #4
 800c1f2:	466a      	mov	r2, sp
 800c1f4:	f7ff ffc8 	bl	800c188 <__swhatbuf_r>
 800c1f8:	9f00      	ldr	r7, [sp, #0]
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	4630      	mov	r0, r6
 800c200:	f7fe fe06 	bl	800ae10 <_malloc_r>
 800c204:	b948      	cbnz	r0, 800c21a <__smakebuf_r+0x46>
 800c206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c20a:	059a      	lsls	r2, r3, #22
 800c20c:	d4ee      	bmi.n	800c1ec <__smakebuf_r+0x18>
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	f043 0302 	orr.w	r3, r3, #2
 800c216:	81a3      	strh	r3, [r4, #12]
 800c218:	e7e2      	b.n	800c1e0 <__smakebuf_r+0xc>
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	6020      	str	r0, [r4, #0]
 800c21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	9b01      	ldr	r3, [sp, #4]
 800c226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c22a:	b15b      	cbz	r3, 800c244 <__smakebuf_r+0x70>
 800c22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c230:	4630      	mov	r0, r6
 800c232:	f000 f81d 	bl	800c270 <_isatty_r>
 800c236:	b128      	cbz	r0, 800c244 <__smakebuf_r+0x70>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f023 0303 	bic.w	r3, r3, #3
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	431d      	orrs	r5, r3
 800c248:	81a5      	strh	r5, [r4, #12]
 800c24a:	e7cf      	b.n	800c1ec <__smakebuf_r+0x18>

0800c24c <_fstat_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	@ (800c26c <_fstat_r+0x20>)
 800c250:	2300      	movs	r3, #0
 800c252:	4604      	mov	r4, r0
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	f7f5 f889 	bl	8001370 <_fstat>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d102      	bne.n	800c268 <_fstat_r+0x1c>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	b103      	cbz	r3, 800c268 <_fstat_r+0x1c>
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	bf00      	nop
 800c26c:	24000888 	.word	0x24000888

0800c270 <_isatty_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d06      	ldr	r5, [pc, #24]	@ (800c28c <_isatty_r+0x1c>)
 800c274:	2300      	movs	r3, #0
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	602b      	str	r3, [r5, #0]
 800c27c:	f7f5 f888 	bl	8001390 <_isatty>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_isatty_r+0x1a>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	b103      	cbz	r3, 800c28a <_isatty_r+0x1a>
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	24000888 	.word	0x24000888

0800c290 <_init>:
 800c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c292:	bf00      	nop
 800c294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c296:	bc08      	pop	{r3}
 800c298:	469e      	mov	lr, r3
 800c29a:	4770      	bx	lr

0800c29c <_fini>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr

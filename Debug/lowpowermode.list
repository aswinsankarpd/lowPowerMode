
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf7c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800c24c  0800c24c  0000d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c550  0800c550  0000d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c554  0800c554  0000d554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d4  24000000  0800c558  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000073c  240000d4  0800c62c  0000e0d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000810  0800c62c  0000e810  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001934c  00000000  00000000  0000e102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039d2  00000000  00000000  0002744e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  0002ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c57  00000000  00000000  0002be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000361f9  00000000  00000000  0002cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c3b3  00000000  00000000  00062cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149b82  00000000  00000000  0007f08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c8c0d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb4  00000000  00000000  001c8c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001cd804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d4 	.word	0x240000d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c234 	.word	0x0800c234

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d8 	.word	0x240000d8
 800030c:	0800c234 	.word	0x0800c234

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fa57 	bl	800ab7c <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fa53 	bl	800ab94 <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fda7 	bl	800b246 <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fda1 	bl	800b246 <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	240002f0 	.word	0x240002f0
 8000710:	240000f0 	.word	0x240000f0

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a fa38 	bl	800abb4 <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a fabf 	bl	800acce <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	240000f0 	.word	0x240000f0

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fd6a 	bl	800b258 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fd5d 	bl	800b258 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fc6a 	bl	800b158 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fd5d 	bl	8008350 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	2400003c 	.word	0x2400003c
 80008a4:	0800c268 	.word	0x0800c268
 80008a8:	240000f0 	.word	0x240000f0
 80008ac:	240002f0 	.word	0x240002f0
 80008b0:	24000318 	.word	0x24000318
 80008b4:	0800c26c 	.word	0x0800c26c
 80008b8:	0800c280 	.word	0x0800c280
 80008bc:	24000540 	.word	0x24000540

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a f8b0 	bl	800aa40 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	4619      	mov	r1, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	460b      	mov	r3, r1
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <getDateTime+0x54>)
 80008f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f00a fc2f 	bl	800b158 <sniprintf>
 80008fa:	4603      	mov	r3, r0
 80008fc:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80008fe:	8afa      	ldrh	r2, [r7, #22]
 8000900:	2364      	movs	r3, #100	@ 0x64
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <getDateTime+0x58>)
 8000906:	f007 fd23 	bl	8008350 <HAL_UART_Transmit>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800c284 	.word	0x0800c284
 8000918:	24000540 	.word	0x24000540

0800091c <setTime>:

static void setTime(char ** args, char *response)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000926:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <setTime+0xa0>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	823b      	strh	r3, [r7, #16]
 800092c:	2300      	movs	r3, #0
 800092e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f8c3 2003 	str.w	r2, [r3, #3]

    char *token = strtok(args[2], ",");
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3308      	adds	r3, #8
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	491e      	ldr	r1, [pc, #120]	@ (80009c0 <setTime+0xa4>)
 8000948:	4618      	mov	r0, r3
 800094a:	f00a fc85 	bl	800b258 <strtok>
 800094e:	61b8      	str	r0, [r7, #24]


    while (token != NULL && tokenIdx < 3)
 8000950:	e011      	b.n	8000976 <setTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000952:	69b8      	ldr	r0, [r7, #24]
 8000954:	f00a fa00 	bl	800ad58 <atoi>
 8000958:	4602      	mov	r2, r0
 800095a:	7ffb      	ldrb	r3, [r7, #31]
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	3320      	adds	r3, #32
 8000960:	443b      	add	r3, r7
 8000962:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	3301      	adds	r3, #1
 800096a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ",");
 800096c:	4914      	ldr	r1, [pc, #80]	@ (80009c0 <setTime+0xa4>)
 800096e:	2000      	movs	r0, #0
 8000970:	f00a fc72 	bl	800b258 <strtok>
 8000974:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <setTime+0x66>
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d9e7      	bls.n	8000952 <setTime+0x36>
    }

    dateTime.hours = dateTimeArray[0];
 8000982:	7c3b      	ldrb	r3, [r7, #16]
 8000984:	723b      	strb	r3, [r7, #8]
    dateTime.mins = dateTimeArray[1];
 8000986:	7c7b      	ldrb	r3, [r7, #17]
 8000988:	727b      	strb	r3, [r7, #9]
    dateTime.secs = dateTimeArray[2];
 800098a:	7cbb      	ldrb	r3, [r7, #18]
 800098c:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4618      	mov	r0, r3
 8000994:	f00a f802 	bl	800a99c <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <setTime+0xa8>)
 800099a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f00a fbda 	bl	800b158 <sniprintf>
 80009a4:	4603      	mov	r3, r0
 80009a6:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80009a8:	8afa      	ldrh	r2, [r7, #22]
 80009aa:	2364      	movs	r3, #100	@ 0x64
 80009ac:	6839      	ldr	r1, [r7, #0]
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <setTime+0xac>)
 80009b0:	f007 fcce 	bl	8008350 <HAL_UART_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0800c2b0 	.word	0x0800c2b0
 80009c0:	0800c29c 	.word	0x0800c29c
 80009c4:	0800c2a0 	.word	0x0800c2a0
 80009c8:	24000540 	.word	0x24000540

080009cc <setSleep>:

static void setSleep(char ** args, char *response)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered low power mode\r\n");
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <setSleep+0x34>)
 80009d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f00a fbbb 	bl	800b158 <sniprintf>
 80009e2:	4603      	mov	r3, r0
 80009e4:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80009e6:	89fa      	ldrh	r2, [r7, #14]
 80009e8:	2364      	movs	r3, #100	@ 0x64
 80009ea:	6839      	ldr	r1, [r7, #0]
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <setSleep+0x38>)
 80009ee:	f007 fcaf 	bl	8008350 <HAL_UART_Transmit>

	startLowPowerMode();
 80009f2:	f009 ff85 	bl	800a900 <startLowPowerMode>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800c2b4 	.word	0x0800c2b4
 8000a04:	24000540 	.word	0x24000540

08000a08 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	debugUartInit();
 8000a0c:	f00a f898 	bl	800ab40 <debugUartInit>

	RTCInit();
 8000a10:	f009 ffa6 	bl	800a960 <RTCInit>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000a14:	2210      	movs	r2, #16
 8000a16:	4903      	ldr	r1, [pc, #12]	@ (8000a24 <systemInit+0x1c>)
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <systemInit+0x20>)
 8000a1a:	f007 fd27 	bl	800846c <HAL_UART_Transmit_IT>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c2d4 	.word	0x0800c2d4
 8000a28:	24000540 	.word	0x24000540

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	200b      	movs	r0, #11
 8000a56:	f000 ff1e 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a5a:	200b      	movs	r0, #11
 8000a5c:	f000 ff35 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58024400 	.word	0x58024400

08000a6c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b90      	ldr	r3, [pc, #576]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a8e      	ldr	r2, [pc, #568]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b88      	ldr	r3, [pc, #544]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a87      	ldr	r2, [pc, #540]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b84      	ldr	r3, [pc, #528]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b81      	ldr	r3, [pc, #516]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b7d      	ldr	r3, [pc, #500]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b79      	ldr	r3, [pc, #484]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a78      	ldr	r2, [pc, #480]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b75      	ldr	r3, [pc, #468]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b72      	ldr	r3, [pc, #456]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a70      	ldr	r2, [pc, #448]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b6a      	ldr	r3, [pc, #424]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a69      	ldr	r2, [pc, #420]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b66      	ldr	r3, [pc, #408]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b63      	ldr	r3, [pc, #396]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a61      	ldr	r2, [pc, #388]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b5a:	485b      	ldr	r0, [pc, #364]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000b5c:	f004 f97a 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b66:	4859      	ldr	r0, [pc, #356]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000b68:	f004 f974 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4857      	ldr	r0, [pc, #348]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000b72:	f004 f96f 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4851      	ldr	r0, [pc, #324]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000b8e:	f003 feb7 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b92:	2332      	movs	r3, #50	@ 0x32
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4849      	ldr	r0, [pc, #292]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000bae:	f003 fea7 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb2:	2386      	movs	r3, #134	@ 0x86
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4842      	ldr	r0, [pc, #264]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000bce:	f003 fe97 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bd2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4837      	ldr	r0, [pc, #220]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000bec:	f003 fe88 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	482e      	ldr	r0, [pc, #184]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000c0e:	f003 fe77 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4828      	ldr	r0, [pc, #160]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000c2c:	f003 fe68 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000c46:	f003 fe5b 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000c68:	f003 fe4a 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000c8a:	f003 fe39 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000ca6:	f003 fe2b 	bl	8004900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2028      	movs	r0, #40	@ 0x28
 8000cb0:	f000 fdf1 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb4:	2028      	movs	r0, #40	@ 0x28
 8000cb6:	f000 fe08 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	@ 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58020c00 	.word	0x58020c00
 8000cd0:	58021000 	.word	0x58021000
 8000cd4:	58020800 	.word	0x58020800
 8000cd8:	58020000 	.word	0x58020000
 8000cdc:	58021800 	.word	0x58021800

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fc30 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f80e 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f7ff febe 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf0:	f7ff fe9c 	bl	8000a2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cf4:	f000 fae4 	bl	80012c0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000cf8:	f000 f87c 	bl	8000df4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000cfc:	f7ff fe84 	bl	8000a08 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000d00:	f7ff fcde 	bl	80006c0 <debugCLITask>
 8000d04:	e7fc      	b.n	8000d00 <main+0x20>
	...

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09c      	sub	sp, #112	@ 0x70
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	224c      	movs	r2, #76	@ 0x4c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00a fa95 	bl	800b246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00a fa8f 	bl	800b246 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f004 f8e1 	bl	8004ef0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d4a:	bf00      	nop
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d58:	d1f8      	bne.n	8000d4c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d74:	f240 1313 	movw	r3, #275	@ 0x113
 8000d78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d86:	2304      	movs	r3, #4
 8000d88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 f8e4 	bl	8004f64 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000da2:	f000 f821 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	233f      	movs	r3, #63	@ 0x3f
 8000da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db2:	2308      	movs	r3, #8
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dba:	2340      	movs	r3, #64	@ 0x40
 8000dbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dc4:	2340      	movs	r3, #64	@ 0x40
 8000dc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2103      	movs	r1, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fca3 	bl	8005718 <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dd8:	f000 f806 	bl	8000de8 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3770      	adds	r7, #112	@ 0x70
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58024800 	.word	0x58024800

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2228      	movs	r2, #40	@ 0x28
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00a fa16 	bl	800b246 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f10 <MX_RTC_Init+0x11c>)
 8000e1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e26:	4b39      	ldr	r3, [pc, #228]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e28:	227f      	movs	r2, #127	@ 0x7f
 8000e2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e2e:	22ff      	movs	r2, #255	@ 0xff
 8000e30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e32:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e38:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e3e:	4b33      	ldr	r3, [pc, #204]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e44:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e4a:	4830      	ldr	r0, [pc, #192]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e4c:	f006 fdb2 	bl	80079b4 <HAL_RTC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e56:	f7ff ffc7 	bl	8000de8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4823      	ldr	r0, [pc, #140]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e7e:	f006 fe1b 	bl	8007ab8 <HAL_RTC_SetTime>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000e88:	f7ff ffae 	bl	8000de8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ea4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000eae:	f006 fefd 	bl	8007cac <HAL_RTC_SetDate>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000eb8:	f7ff ff96 	bl	8000de8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000ef4:	f006 ffb0 	bl	8007e58 <HAL_RTC_SetAlarm>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000efe:	f7ff ff73 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000518 	.word	0x24000518
 8000f10:	58004000 	.word	0x58004000

08000f14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b0      	sub	sp, #192	@ 0xc0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	22b8      	movs	r2, #184	@ 0xb8
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00a f98e 	bl	800b246 <memset>
  if(rtcHandle->Instance==RTC)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_RTC_MspInit+0x5c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d119      	bne.n	8000f68 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 ff6f 	bl	8005e30 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000f58:	f7ff ff46 	bl	8000de8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_RTC_MspInit+0x60>)
 8000f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_RTC_MspInit+0x60>)
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f66:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	37c0      	adds	r7, #192	@ 0xc0
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58004000 	.word	0x58004000
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58024400 	.word	0x58024400

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 fb13 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <DMA1_Stream0_IRQHandler+0x10>)
 8001012:	f002 f963 	bl	80032dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	240005d4 	.word	0x240005d4

08001020 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART3_IRQHandler+0x10>)
 8001026:	f007 fb01 	bl	800862c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000540 	.word	0x24000540

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001038:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800103c:	f003 ff23 	bl	8004e86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_kill>:

int _kill(int pid, int sig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105e:	f00a f9ad 	bl	800b3bc <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
  return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_exit>:

void _exit (int status)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe7 	bl	8001054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <_exit+0x12>

0800108a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00a      	b.n	80010b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109c:	f3af 8000 	nop.w
 80010a0:	4601      	mov	r1, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	60ba      	str	r2, [r7, #8]
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf0      	blt.n	800109c <_read+0x12>
  }

  return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e009      	b.n	80010ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf1      	blt.n	80010d6 <_write+0x12>
  }
  return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_close>:

int _close(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001124:	605a      	str	r2, [r3, #4]
  return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_isatty>:

int _isatty(int file)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f00a f912 	bl	800b3bc <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24050000 	.word	0x24050000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	2400053c 	.word	0x2400053c
 80011cc:	24000810 	.word	0x24000810

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <SystemInit+0xd0>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a31      	ldr	r2, [pc, #196]	@ (80012a0 <SystemInit+0xd0>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <SystemInit+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d807      	bhi.n	8001200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f0:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <SystemInit+0xd4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <SystemInit+0xd4>)
 80011fa:	f043 0307 	orr.w	r3, r3, #7
 80011fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <SystemInit+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <SystemInit+0xd8>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <SystemInit+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemInit+0xd8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4924      	ldr	r1, [pc, #144]	@ (80012a8 <SystemInit+0xd8>)
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SystemInit+0xdc>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <SystemInit+0xd4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <SystemInit+0xd4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <SystemInit+0xd4>)
 8001234:	f043 0307 	orr.w	r3, r3, #7
 8001238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <SystemInit+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <SystemInit+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <SystemInit+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <SystemInit+0xd8>)
 800124e:	4a18      	ldr	r2, [pc, #96]	@ (80012b0 <SystemInit+0xe0>)
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <SystemInit+0xd8>)
 8001254:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <SystemInit+0xe4>)
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <SystemInit+0xd8>)
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <SystemInit+0xe8>)
 800125c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <SystemInit+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <SystemInit+0xd8>)
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <SystemInit+0xe8>)
 8001268:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SystemInit+0xd8>)
 800126c:	2200      	movs	r2, #0
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <SystemInit+0xd8>)
 8001272:	4a11      	ldr	r2, [pc, #68]	@ (80012b8 <SystemInit+0xe8>)
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SystemInit+0xd8>)
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <SystemInit+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <SystemInit+0xd8>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <SystemInit+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <SystemInit+0xec>)
 8001290:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001294:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	52002000 	.word	0x52002000
 80012a8:	58024400 	.word	0x58024400
 80012ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80012b0:	02020200 	.word	0x02020200
 80012b4:	01ff0000 	.word	0x01ff0000
 80012b8:	01010280 	.word	0x01010280
 80012bc:	52004000 	.word	0x52004000

080012c0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <MX_USART3_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800130a:	f006 ffd1 	bl	80082b0 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f7ff fd68 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800131c:	f009 fa01 	bl	800a722 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f7ff fd5f 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800132e:	f009 fa36 	bl	800a79e <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f7ff fd56 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800133e:	f009 f9b7 	bl	800a6b0 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f7ff fd4e 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000540 	.word	0x24000540
 8001354:	40004800 	.word	0x40004800

08001358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0b8      	sub	sp, #224	@ 0xe0
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	22b8      	movs	r2, #184	@ 0xb8
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f009 ff64 	bl	800b246 <memset>
  if(uartHandle->Instance==USART3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a42      	ldr	r2, [pc, #264]	@ (800148c <HAL_UART_MspInit+0x134>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d17d      	bne.n	8001484 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001388:	f04f 0202 	mov.w	r2, #2
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fd46 	bl	8005e30 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013aa:	f7ff fd1d 	bl	8000de8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b4:	4a36      	ldr	r2, [pc, #216]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013be:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001404:	2307      	movs	r3, #7
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800140e:	4619      	mov	r1, r3
 8001410:	4820      	ldr	r0, [pc, #128]	@ (8001494 <HAL_UART_MspInit+0x13c>)
 8001412:	f003 fa75 	bl	8004900 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001418:	4a20      	ldr	r2, [pc, #128]	@ (800149c <HAL_UART_MspInit+0x144>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800141e:	222d      	movs	r2, #45	@ 0x2d
 8001420:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001448:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001456:	4810      	ldr	r0, [pc, #64]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001458:	f000 fa64 	bl	8001924 <HAL_DMA_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001462:	f7ff fcc1 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800146a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2027      	movs	r0, #39	@ 0x27
 800147a:	f000 fa0c 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800147e:	2027      	movs	r0, #39	@ 0x27
 8001480:	f000 fa23 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37e0      	adds	r7, #224	@ 0xe0
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004800 	.word	0x40004800
 8001490:	58024400 	.word	0x58024400
 8001494:	58020c00 	.word	0x58020c00
 8001498:	240005d4 	.word	0x240005d4
 800149c:	40020010 	.word	0x40020010

080014a0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <HAL_UART_MspDeInit+0x48>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d115      	bne.n	80014de <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <HAL_UART_MspDeInit+0x4c>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b8:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <HAL_UART_MspDeInit+0x4c>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_VCP_RX_Pin|STLK_VCP_TX_Pin);
 80014c2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80014c6:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <HAL_UART_MspDeInit+0x50>)
 80014c8:	f003 fbc2 	bl	8004c50 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fd7e 	bl	8001fd4 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80014d8:	2027      	movs	r0, #39	@ 0x27
 80014da:	f000 fa04 	bl	80018e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40004800 	.word	0x40004800
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020c00 	.word	0x58020c00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800152c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff fe6a 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	@ (8001534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	@ (8001540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f009 ff51 	bl	800b3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fbdb 	bl	8000ce0 <main>
  bx  lr
 800152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001530:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001534:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 8001538:	0800c558 	.word	0x0800c558
  ldr r2, =_sbss
 800153c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001540:	24000810 	.word	0x24000810

08001544 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC3_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f996 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001554:	f004 fa96 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_Init+0x68>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	4913      	ldr	r1, [pc, #76]	@ (80015b4 <HAL_Init+0x6c>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_Init+0x68>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <HAL_Init+0x6c>)
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_Init+0x70>)
 800158a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800158c:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_Init+0x74>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f814 	bl	80015c0 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e002      	b.n	80015a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015a2:	f7ff fce9 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58024400 	.word	0x58024400
 80015b4:	0800c324 	.word	0x0800c324
 80015b8:	24000064 	.word	0x24000064
 80015bc:	24000060 	.word	0x24000060

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_InitTick+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e021      	b.n	8001618 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_InitTick+0x64>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_InitTick+0x60>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f98d 	bl	800190a <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f945 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x68>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2400006c 	.word	0x2400006c
 8001624:	24000060 	.word	0x24000060
 8001628:	24000068 	.word	0x24000068

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2400006c 	.word	0x2400006c
 8001650:	2400064c 	.word	0x2400064c

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2400064c 	.word	0x2400064c

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	05fa0000 	.word	0x05fa0000

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	@ (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db12      	blt.n	8001744 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	490a      	ldr	r1, [pc, #40]	@ (8001750 <__NVIC_DisableIRQ+0x44>)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	3320      	adds	r3, #32
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001738:	f3bf 8f4f 	dsb	sy
}
 800173c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800173e:	f3bf 8f6f 	isb	sy
}
 8001742:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001814:	f3bf 8f4f 	dsb	sy
}
 8001818:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <__NVIC_SystemReset+0x24>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001822:	4904      	ldr	r1, [pc, #16]	@ (8001834 <__NVIC_SystemReset+0x24>)
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <__NVIC_SystemReset+0x28>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800182a:	f3bf 8f4f 	dsb	sy
}
 800182e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <__NVIC_SystemReset+0x20>
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	05fa0004 	.word	0x05fa0004

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff78 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff feef 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff06 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff7a 	bl	80017a8 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff49 	bl	8001754 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fef9 	bl	80016d0 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff09 	bl	800170c <__NVIC_DisableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001906:	f7ff ff83 	bl	8001810 <__NVIC_SystemReset>

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff92 	bl	800183c <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fe92 	bl	8001654 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e312      	b.n	8001f62 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a66      	ldr	r2, [pc, #408]	@ (8001adc <HAL_DMA_Init+0x1b8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d04a      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_DMA_Init+0x1bc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d045      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a63      	ldr	r2, [pc, #396]	@ (8001ae4 <HAL_DMA_Init+0x1c0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d040      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a62      	ldr	r2, [pc, #392]	@ (8001ae8 <HAL_DMA_Init+0x1c4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d03b      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a60      	ldr	r2, [pc, #384]	@ (8001aec <HAL_DMA_Init+0x1c8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d036      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a5f      	ldr	r2, [pc, #380]	@ (8001af0 <HAL_DMA_Init+0x1cc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d031      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5d      	ldr	r2, [pc, #372]	@ (8001af4 <HAL_DMA_Init+0x1d0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02c      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5c      	ldr	r2, [pc, #368]	@ (8001af8 <HAL_DMA_Init+0x1d4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d027      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a5a      	ldr	r2, [pc, #360]	@ (8001afc <HAL_DMA_Init+0x1d8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d022      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a59      	ldr	r2, [pc, #356]	@ (8001b00 <HAL_DMA_Init+0x1dc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d01d      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a57      	ldr	r2, [pc, #348]	@ (8001b04 <HAL_DMA_Init+0x1e0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d018      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a56      	ldr	r2, [pc, #344]	@ (8001b08 <HAL_DMA_Init+0x1e4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a54      	ldr	r2, [pc, #336]	@ (8001b0c <HAL_DMA_Init+0x1e8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a53      	ldr	r2, [pc, #332]	@ (8001b10 <HAL_DMA_Init+0x1ec>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a51      	ldr	r2, [pc, #324]	@ (8001b14 <HAL_DMA_Init+0x1f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_Init+0xb8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a50      	ldr	r2, [pc, #320]	@ (8001b18 <HAL_DMA_Init+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Init+0xbc>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_DMA_Init+0xbe>
 80019e0:	2300      	movs	r3, #0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 813c 	beq.w	8001c60 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a37      	ldr	r2, [pc, #220]	@ (8001adc <HAL_DMA_Init+0x1b8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04a      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a36      	ldr	r2, [pc, #216]	@ (8001ae0 <HAL_DMA_Init+0x1bc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d045      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a34      	ldr	r2, [pc, #208]	@ (8001ae4 <HAL_DMA_Init+0x1c0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d040      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ae8 <HAL_DMA_Init+0x1c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d03b      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a31      	ldr	r2, [pc, #196]	@ (8001aec <HAL_DMA_Init+0x1c8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a30      	ldr	r2, [pc, #192]	@ (8001af0 <HAL_DMA_Init+0x1cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2e      	ldr	r2, [pc, #184]	@ (8001af4 <HAL_DMA_Init+0x1d0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02c      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2d      	ldr	r2, [pc, #180]	@ (8001af8 <HAL_DMA_Init+0x1d4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <HAL_DMA_Init+0x1d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	@ (8001b00 <HAL_DMA_Init+0x1dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01d      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <HAL_DMA_Init+0x1e0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	@ (8001b08 <HAL_DMA_Init+0x1e4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	@ (8001b0c <HAL_DMA_Init+0x1e8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a24      	ldr	r2, [pc, #144]	@ (8001b10 <HAL_DMA_Init+0x1ec>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <HAL_DMA_Init+0x1f0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Init+0x174>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a21      	ldr	r2, [pc, #132]	@ (8001b18 <HAL_DMA_Init+0x1f4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d108      	bne.n	8001aaa <HAL_DMA_Init+0x186>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_DMA_Init+0x196>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aba:	e02f      	b.n	8001b1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001abc:	f7ff fdca 	bl	8001654 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d928      	bls.n	8001b1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e242      	b.n	8001f62 <HAL_DMA_Init+0x63e>
 8001adc:	40020010 	.word	0x40020010
 8001ae0:	40020028 	.word	0x40020028
 8001ae4:	40020040 	.word	0x40020040
 8001ae8:	40020058 	.word	0x40020058
 8001aec:	40020070 	.word	0x40020070
 8001af0:	40020088 	.word	0x40020088
 8001af4:	400200a0 	.word	0x400200a0
 8001af8:	400200b8 	.word	0x400200b8
 8001afc:	40020410 	.word	0x40020410
 8001b00:	40020428 	.word	0x40020428
 8001b04:	40020440 	.word	0x40020440
 8001b08:	40020458 	.word	0x40020458
 8001b0c:	40020470 	.word	0x40020470
 8001b10:	40020488 	.word	0x40020488
 8001b14:	400204a0 	.word	0x400204a0
 8001b18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1c8      	bne.n	8001abc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4b83      	ldr	r3, [pc, #524]	@ (8001d44 <HAL_DMA_Init+0x420>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d107      	bne.n	8001b80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b28      	cmp	r3, #40	@ 0x28
 8001b86:	d903      	bls.n	8001b90 <HAL_DMA_Init+0x26c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b8e:	d91f      	bls.n	8001bd0 <HAL_DMA_Init+0x2ac>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b96:	d903      	bls.n	8001ba0 <HAL_DMA_Init+0x27c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b42      	cmp	r3, #66	@ 0x42
 8001b9e:	d917      	bls.n	8001bd0 <HAL_DMA_Init+0x2ac>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b46      	cmp	r3, #70	@ 0x46
 8001ba6:	d903      	bls.n	8001bb0 <HAL_DMA_Init+0x28c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b48      	cmp	r3, #72	@ 0x48
 8001bae:	d90f      	bls.n	8001bd0 <HAL_DMA_Init+0x2ac>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001bb6:	d903      	bls.n	8001bc0 <HAL_DMA_Init+0x29c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b52      	cmp	r3, #82	@ 0x52
 8001bbe:	d907      	bls.n	8001bd0 <HAL_DMA_Init+0x2ac>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b73      	cmp	r3, #115	@ 0x73
 8001bc6:	d905      	bls.n	8001bd4 <HAL_DMA_Init+0x2b0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b77      	cmp	r3, #119	@ 0x77
 8001bce:	d801      	bhi.n	8001bd4 <HAL_DMA_Init+0x2b0>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_DMA_Init+0x2b2>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001be0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f023 0307 	bic.w	r3, r3, #7
 8001bf8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d117      	bne.n	8001c3c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f002 fce4 	bl	80045ec <DMA_CheckFifoParam>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2240      	movs	r2, #64	@ 0x40
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e192      	b.n	8001f62 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f002 fc1f 	bl	8004488 <DMA_CalcBaseAndBitshift>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	223f      	movs	r2, #63	@ 0x3f
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	e0c8      	b.n	8001df2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a38      	ldr	r2, [pc, #224]	@ (8001d48 <HAL_DMA_Init+0x424>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d022      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a37      	ldr	r2, [pc, #220]	@ (8001d4c <HAL_DMA_Init+0x428>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01d      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a35      	ldr	r2, [pc, #212]	@ (8001d50 <HAL_DMA_Init+0x42c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d018      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <HAL_DMA_Init+0x430>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a32      	ldr	r2, [pc, #200]	@ (8001d58 <HAL_DMA_Init+0x434>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <HAL_DMA_Init+0x438>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_DMA_Init+0x43c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_DMA_Init+0x38c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <HAL_DMA_Init+0x440>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_DMA_Init+0x390>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_DMA_Init+0x392>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8092 	beq.w	8001de0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_DMA_Init+0x424>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d021      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a20      	ldr	r2, [pc, #128]	@ (8001d4c <HAL_DMA_Init+0x428>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01c      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_DMA_Init+0x42c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d017      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_DMA_Init+0x430>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d012      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_DMA_Init+0x434>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_DMA_Init+0x438>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_DMA_Init+0x43c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA_Init+0x3e6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_DMA_Init+0x440>)
 8001d08:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_DMA_Init+0x444>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b40      	cmp	r3, #64	@ 0x40
 8001d30:	d01c      	beq.n	8001d6c <HAL_DMA_Init+0x448>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b80      	cmp	r3, #128	@ 0x80
 8001d38:	d102      	bne.n	8001d40 <HAL_DMA_Init+0x41c>
 8001d3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d3e:	e016      	b.n	8001d6e <HAL_DMA_Init+0x44a>
 8001d40:	2300      	movs	r3, #0
 8001d42:	e014      	b.n	8001d6e <HAL_DMA_Init+0x44a>
 8001d44:	fe10803f 	.word	0xfe10803f
 8001d48:	58025408 	.word	0x58025408
 8001d4c:	5802541c 	.word	0x5802541c
 8001d50:	58025430 	.word	0x58025430
 8001d54:	58025444 	.word	0x58025444
 8001d58:	58025458 	.word	0x58025458
 8001d5c:	5802546c 	.word	0x5802546c
 8001d60:	58025480 	.word	0x58025480
 8001d64:	58025494 	.word	0x58025494
 8001d68:	fffe000f 	.word	0xfffe000f
 8001d6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68d2      	ldr	r2, [r2, #12]
 8001d72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f6c <HAL_DMA_Init+0x648>)
 8001db4:	4413      	add	r3, r2
 8001db6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f70 <HAL_DMA_Init+0x64c>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f002 fb5f 	bl	8004488 <DMA_CalcBaseAndBitshift>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e008      	b.n	8001df2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2203      	movs	r2, #3
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0b7      	b.n	8001f62 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f74 <HAL_DMA_Init+0x650>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d072      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	@ (8001f78 <HAL_DMA_Init+0x654>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d06d      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f7c <HAL_DMA_Init+0x658>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d068      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5a      	ldr	r2, [pc, #360]	@ (8001f80 <HAL_DMA_Init+0x65c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d063      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a59      	ldr	r2, [pc, #356]	@ (8001f84 <HAL_DMA_Init+0x660>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a57      	ldr	r2, [pc, #348]	@ (8001f88 <HAL_DMA_Init+0x664>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d059      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a56      	ldr	r2, [pc, #344]	@ (8001f8c <HAL_DMA_Init+0x668>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d054      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	@ (8001f90 <HAL_DMA_Init+0x66c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d04f      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a53      	ldr	r2, [pc, #332]	@ (8001f94 <HAL_DMA_Init+0x670>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a51      	ldr	r2, [pc, #324]	@ (8001f98 <HAL_DMA_Init+0x674>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <HAL_DMA_Init+0x678>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa0 <HAL_DMA_Init+0x67c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa4 <HAL_DMA_Init+0x680>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa8 <HAL_DMA_Init+0x684>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4a      	ldr	r2, [pc, #296]	@ (8001fac <HAL_DMA_Init+0x688>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a48      	ldr	r2, [pc, #288]	@ (8001fb0 <HAL_DMA_Init+0x68c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a47      	ldr	r2, [pc, #284]	@ (8001fb4 <HAL_DMA_Init+0x690>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	@ (8001fb8 <HAL_DMA_Init+0x694>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a44      	ldr	r2, [pc, #272]	@ (8001fbc <HAL_DMA_Init+0x698>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a42      	ldr	r2, [pc, #264]	@ (8001fc0 <HAL_DMA_Init+0x69c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a41      	ldr	r2, [pc, #260]	@ (8001fc4 <HAL_DMA_Init+0x6a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc8 <HAL_DMA_Init+0x6a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fcc <HAL_DMA_Init+0x6a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Init+0x5be>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fd0 <HAL_DMA_Init+0x6ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_Init+0x5c2>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_DMA_Init+0x5c4>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d032      	beq.n	8001f52 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f002 fbf9 	bl	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b80      	cmp	r3, #128	@ 0x80
 8001ef8:	d102      	bne.n	8001f00 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d010      	beq.n	8001f40 <HAL_DMA_Init+0x61c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d80c      	bhi.n	8001f40 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f002 fc76 	bl	8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e008      	b.n	8001f52 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	a7fdabf8 	.word	0xa7fdabf8
 8001f70:	cccccccd 	.word	0xcccccccd
 8001f74:	40020010 	.word	0x40020010
 8001f78:	40020028 	.word	0x40020028
 8001f7c:	40020040 	.word	0x40020040
 8001f80:	40020058 	.word	0x40020058
 8001f84:	40020070 	.word	0x40020070
 8001f88:	40020088 	.word	0x40020088
 8001f8c:	400200a0 	.word	0x400200a0
 8001f90:	400200b8 	.word	0x400200b8
 8001f94:	40020410 	.word	0x40020410
 8001f98:	40020428 	.word	0x40020428
 8001f9c:	40020440 	.word	0x40020440
 8001fa0:	40020458 	.word	0x40020458
 8001fa4:	40020470 	.word	0x40020470
 8001fa8:	40020488 	.word	0x40020488
 8001fac:	400204a0 	.word	0x400204a0
 8001fb0:	400204b8 	.word	0x400204b8
 8001fb4:	58025408 	.word	0x58025408
 8001fb8:	5802541c 	.word	0x5802541c
 8001fbc:	58025430 	.word	0x58025430
 8001fc0:	58025444 	.word	0x58025444
 8001fc4:	58025458 	.word	0x58025458
 8001fc8:	5802546c 	.word	0x5802546c
 8001fcc:	58025480 	.word	0x58025480
 8001fd0:	58025494 	.word	0x58025494

08001fd4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1a8      	b.n	8002338 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a82      	ldr	r2, [pc, #520]	@ (80021f4 <HAL_DMA_DeInit+0x220>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04a      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a80      	ldr	r2, [pc, #512]	@ (80021f8 <HAL_DMA_DeInit+0x224>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d045      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80021fc <HAL_DMA_DeInit+0x228>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7d      	ldr	r2, [pc, #500]	@ (8002200 <HAL_DMA_DeInit+0x22c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03b      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7c      	ldr	r2, [pc, #496]	@ (8002204 <HAL_DMA_DeInit+0x230>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d036      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7a      	ldr	r2, [pc, #488]	@ (8002208 <HAL_DMA_DeInit+0x234>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a79      	ldr	r2, [pc, #484]	@ (800220c <HAL_DMA_DeInit+0x238>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a77      	ldr	r2, [pc, #476]	@ (8002210 <HAL_DMA_DeInit+0x23c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d027      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a76      	ldr	r2, [pc, #472]	@ (8002214 <HAL_DMA_DeInit+0x240>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a74      	ldr	r2, [pc, #464]	@ (8002218 <HAL_DMA_DeInit+0x244>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a73      	ldr	r2, [pc, #460]	@ (800221c <HAL_DMA_DeInit+0x248>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d018      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a71      	ldr	r2, [pc, #452]	@ (8002220 <HAL_DMA_DeInit+0x24c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a70      	ldr	r2, [pc, #448]	@ (8002224 <HAL_DMA_DeInit+0x250>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	@ (8002228 <HAL_DMA_DeInit+0x254>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6d      	ldr	r2, [pc, #436]	@ (800222c <HAL_DMA_DeInit+0x258>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_DeInit+0xb2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6b      	ldr	r2, [pc, #428]	@ (8002230 <HAL_DMA_DeInit+0x25c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <HAL_DMA_DeInit+0xc4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e007      	b.n	80020a8 <HAL_DMA_DeInit+0xd4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a51      	ldr	r2, [pc, #324]	@ (80021f4 <HAL_DMA_DeInit+0x220>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d04a      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a50      	ldr	r2, [pc, #320]	@ (80021f8 <HAL_DMA_DeInit+0x224>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d045      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_DMA_DeInit+0x228>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d040      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_DMA_DeInit+0x22c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d03b      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <HAL_DMA_DeInit+0x230>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d036      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_DMA_DeInit+0x234>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d031      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a48      	ldr	r2, [pc, #288]	@ (800220c <HAL_DMA_DeInit+0x238>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d02c      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_DMA_DeInit+0x23c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d027      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <HAL_DMA_DeInit+0x240>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d022      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a44      	ldr	r2, [pc, #272]	@ (8002218 <HAL_DMA_DeInit+0x244>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d01d      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a42      	ldr	r2, [pc, #264]	@ (800221c <HAL_DMA_DeInit+0x248>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d018      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <HAL_DMA_DeInit+0x24c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <HAL_DMA_DeInit+0x250>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00e      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_DMA_DeInit+0x254>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <HAL_DMA_DeInit+0x258>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_DMA_DeInit+0x174>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a3b      	ldr	r2, [pc, #236]	@ (8002230 <HAL_DMA_DeInit+0x25c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_DMA_DeInit+0x178>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_DMA_DeInit+0x17a>
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d025      	beq.n	800219e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2221      	movs	r2, #33	@ 0x21
 8002180:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f002 f980 	bl	8004488 <DMA_CalcBaseAndBitshift>
 8002188:	4603      	mov	r3, r0
 800218a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	223f      	movs	r2, #63	@ 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e081      	b.n	80022a2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a24      	ldr	r2, [pc, #144]	@ (8002234 <HAL_DMA_DeInit+0x260>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_DMA_DeInit+0x264>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <HAL_DMA_DeInit+0x268>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_DMA_DeInit+0x26c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_DMA_DeInit+0x270>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_DMA_DeInit+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <HAL_DMA_DeInit+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_DeInit+0x21a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_DMA_DeInit+0x27c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d132      	bne.n	8002254 <HAL_DMA_DeInit+0x280>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e031      	b.n	8002256 <HAL_DMA_DeInit+0x282>
 80021f2:	bf00      	nop
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	5802541c 	.word	0x5802541c
 800223c:	58025430 	.word	0x58025430
 8002240:	58025444 	.word	0x58025444
 8002244:	58025458 	.word	0x58025458
 8002248:	5802546c 	.word	0x5802546c
 800224c:	58025480 	.word	0x58025480
 8002250:	58025494 	.word	0x58025494
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d021      	beq.n	800229e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f002 f900 	bl	8004488 <DMA_CalcBaseAndBitshift>
 8002288:	4603      	mov	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2201      	movs	r2, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	e001      	b.n	80022a2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e04a      	b.n	8002338 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f002 fa1e 	bl	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022c0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00f      	beq.n	80022ea <HAL_DMA_DeInit+0x316>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d80b      	bhi.n	80022ea <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f002 faa0 	bl	8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022e8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e226      	b.n	80027aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_DMA_Start_IT+0x2a>
 8002366:	2302      	movs	r3, #2
 8002368:	e21f      	b.n	80027aa <HAL_DMA_Start_IT+0x46a>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 820a 	bne.w	8002794 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a68      	ldr	r2, [pc, #416]	@ (8002534 <HAL_DMA_Start_IT+0x1f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04a      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a66      	ldr	r2, [pc, #408]	@ (8002538 <HAL_DMA_Start_IT+0x1f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d045      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_DMA_Start_IT+0x1fc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d040      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a63      	ldr	r2, [pc, #396]	@ (8002540 <HAL_DMA_Start_IT+0x200>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03b      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <HAL_DMA_Start_IT+0x204>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d036      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <HAL_DMA_Start_IT+0x208>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5f      	ldr	r2, [pc, #380]	@ (800254c <HAL_DMA_Start_IT+0x20c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d02c      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002550 <HAL_DMA_Start_IT+0x210>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d027      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002554 <HAL_DMA_Start_IT+0x214>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002558 <HAL_DMA_Start_IT+0x218>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a59      	ldr	r2, [pc, #356]	@ (800255c <HAL_DMA_Start_IT+0x21c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_DMA_Start_IT+0x220>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <HAL_DMA_Start_IT+0x224>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	@ (8002568 <HAL_DMA_Start_IT+0x228>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a53      	ldr	r2, [pc, #332]	@ (800256c <HAL_DMA_Start_IT+0x22c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Start_IT+0xee>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <HAL_DMA_Start_IT+0x230>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <HAL_DMA_Start_IT+0x100>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_DMA_Start_IT+0x110>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f001 fe6a 	bl	8004130 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a34      	ldr	r2, [pc, #208]	@ (8002534 <HAL_DMA_Start_IT+0x1f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04a      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a33      	ldr	r2, [pc, #204]	@ (8002538 <HAL_DMA_Start_IT+0x1f8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d045      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a31      	ldr	r2, [pc, #196]	@ (800253c <HAL_DMA_Start_IT+0x1fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d040      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a30      	ldr	r2, [pc, #192]	@ (8002540 <HAL_DMA_Start_IT+0x200>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03b      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2e      	ldr	r2, [pc, #184]	@ (8002544 <HAL_DMA_Start_IT+0x204>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d036      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2d      	ldr	r2, [pc, #180]	@ (8002548 <HAL_DMA_Start_IT+0x208>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d031      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <HAL_DMA_Start_IT+0x20c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02c      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002550 <HAL_DMA_Start_IT+0x210>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d027      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_DMA_Start_IT+0x214>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a27      	ldr	r2, [pc, #156]	@ (8002558 <HAL_DMA_Start_IT+0x218>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	@ (800255c <HAL_DMA_Start_IT+0x21c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <HAL_DMA_Start_IT+0x220>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	@ (8002564 <HAL_DMA_Start_IT+0x224>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_DMA_Start_IT+0x228>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <HAL_DMA_Start_IT+0x22c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_DMA_Start_IT+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002570 <HAL_DMA_Start_IT+0x230>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Start_IT+0x1c0>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_DMA_Start_IT+0x1c2>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 021e 	bic.w	r2, r3, #30
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0216 	orr.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03e      	beq.n	80025a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0208 	orr.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e035      	b.n	80025a0 <HAL_DMA_Start_IT+0x260>
 8002534:	40020010 	.word	0x40020010
 8002538:	40020028 	.word	0x40020028
 800253c:	40020040 	.word	0x40020040
 8002540:	40020058 	.word	0x40020058
 8002544:	40020070 	.word	0x40020070
 8002548:	40020088 	.word	0x40020088
 800254c:	400200a0 	.word	0x400200a0
 8002550:	400200b8 	.word	0x400200b8
 8002554:	40020410 	.word	0x40020410
 8002558:	40020428 	.word	0x40020428
 800255c:	40020440 	.word	0x40020440
 8002560:	40020458 	.word	0x40020458
 8002564:	40020470 	.word	0x40020470
 8002568:	40020488 	.word	0x40020488
 800256c:	400204a0 	.word	0x400204a0
 8002570:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 020e 	bic.w	r2, r3, #14
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 020a 	orr.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0204 	orr.w	r2, r2, #4
 800259e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a83      	ldr	r2, [pc, #524]	@ (80027b4 <HAL_DMA_Start_IT+0x474>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d072      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a82      	ldr	r2, [pc, #520]	@ (80027b8 <HAL_DMA_Start_IT+0x478>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d06d      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	@ (80027bc <HAL_DMA_Start_IT+0x47c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d068      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7f      	ldr	r2, [pc, #508]	@ (80027c0 <HAL_DMA_Start_IT+0x480>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d063      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7d      	ldr	r2, [pc, #500]	@ (80027c4 <HAL_DMA_Start_IT+0x484>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d05e      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	@ (80027c8 <HAL_DMA_Start_IT+0x488>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d059      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	@ (80027cc <HAL_DMA_Start_IT+0x48c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d054      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a79      	ldr	r2, [pc, #484]	@ (80027d0 <HAL_DMA_Start_IT+0x490>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04f      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a77      	ldr	r2, [pc, #476]	@ (80027d4 <HAL_DMA_Start_IT+0x494>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a76      	ldr	r2, [pc, #472]	@ (80027d8 <HAL_DMA_Start_IT+0x498>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a74      	ldr	r2, [pc, #464]	@ (80027dc <HAL_DMA_Start_IT+0x49c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	@ (80027e0 <HAL_DMA_Start_IT+0x4a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a71      	ldr	r2, [pc, #452]	@ (80027e4 <HAL_DMA_Start_IT+0x4a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a70      	ldr	r2, [pc, #448]	@ (80027e8 <HAL_DMA_Start_IT+0x4a8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	@ (80027ec <HAL_DMA_Start_IT+0x4ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6d      	ldr	r2, [pc, #436]	@ (80027f0 <HAL_DMA_Start_IT+0x4b0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6b      	ldr	r2, [pc, #428]	@ (80027f4 <HAL_DMA_Start_IT+0x4b4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_DMA_Start_IT+0x4b8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a68      	ldr	r2, [pc, #416]	@ (80027fc <HAL_DMA_Start_IT+0x4bc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a67      	ldr	r2, [pc, #412]	@ (8002800 <HAL_DMA_Start_IT+0x4c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	@ (8002804 <HAL_DMA_Start_IT+0x4c4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a64      	ldr	r2, [pc, #400]	@ (8002808 <HAL_DMA_Start_IT+0x4c8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a62      	ldr	r2, [pc, #392]	@ (800280c <HAL_DMA_Start_IT+0x4cc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Start_IT+0x350>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a61      	ldr	r2, [pc, #388]	@ (8002810 <HAL_DMA_Start_IT+0x4d0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Start_IT+0x354>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Start_IT+0x356>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01a      	beq.n	80026d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <HAL_DMA_Start_IT+0x474>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a36      	ldr	r2, [pc, #216]	@ (80027b8 <HAL_DMA_Start_IT+0x478>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_DMA_Start_IT+0x47c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a33      	ldr	r2, [pc, #204]	@ (80027c0 <HAL_DMA_Start_IT+0x480>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_DMA_Start_IT+0x484>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a30      	ldr	r2, [pc, #192]	@ (80027c8 <HAL_DMA_Start_IT+0x488>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2e      	ldr	r2, [pc, #184]	@ (80027cc <HAL_DMA_Start_IT+0x48c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2d      	ldr	r2, [pc, #180]	@ (80027d0 <HAL_DMA_Start_IT+0x490>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <HAL_DMA_Start_IT+0x494>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2a      	ldr	r2, [pc, #168]	@ (80027d8 <HAL_DMA_Start_IT+0x498>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <HAL_DMA_Start_IT+0x49c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a27      	ldr	r2, [pc, #156]	@ (80027e0 <HAL_DMA_Start_IT+0x4a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a25      	ldr	r2, [pc, #148]	@ (80027e4 <HAL_DMA_Start_IT+0x4a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a24      	ldr	r2, [pc, #144]	@ (80027e8 <HAL_DMA_Start_IT+0x4a8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a22      	ldr	r2, [pc, #136]	@ (80027ec <HAL_DMA_Start_IT+0x4ac>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_Start_IT+0x430>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <HAL_DMA_Start_IT+0x4b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_Start_IT+0x442>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e012      	b.n	80027a8 <HAL_DMA_Start_IT+0x468>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e009      	b.n	80027a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	40020040 	.word	0x40020040
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020070 	.word	0x40020070
 80027c8:	40020088 	.word	0x40020088
 80027cc:	400200a0 	.word	0x400200a0
 80027d0:	400200b8 	.word	0x400200b8
 80027d4:	40020410 	.word	0x40020410
 80027d8:	40020428 	.word	0x40020428
 80027dc:	40020440 	.word	0x40020440
 80027e0:	40020458 	.word	0x40020458
 80027e4:	40020470 	.word	0x40020470
 80027e8:	40020488 	.word	0x40020488
 80027ec:	400204a0 	.word	0x400204a0
 80027f0:	400204b8 	.word	0x400204b8
 80027f4:	58025408 	.word	0x58025408
 80027f8:	5802541c 	.word	0x5802541c
 80027fc:	58025430 	.word	0x58025430
 8002800:	58025444 	.word	0x58025444
 8002804:	58025458 	.word	0x58025458
 8002808:	5802546c 	.word	0x5802546c
 800280c:	58025480 	.word	0x58025480
 8002810:	58025494 	.word	0x58025494

08002814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800281c:	f7fe ff1a 	bl	8001654 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e2dc      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d008      	beq.n	800284a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e2cd      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a76      	ldr	r2, [pc, #472]	@ (8002a28 <HAL_DMA_Abort+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d04a      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a74      	ldr	r2, [pc, #464]	@ (8002a2c <HAL_DMA_Abort+0x218>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d045      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a73      	ldr	r2, [pc, #460]	@ (8002a30 <HAL_DMA_Abort+0x21c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a71      	ldr	r2, [pc, #452]	@ (8002a34 <HAL_DMA_Abort+0x220>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03b      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a70      	ldr	r2, [pc, #448]	@ (8002a38 <HAL_DMA_Abort+0x224>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d036      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6e      	ldr	r2, [pc, #440]	@ (8002a3c <HAL_DMA_Abort+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a40 <HAL_DMA_Abort+0x22c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02c      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6b      	ldr	r2, [pc, #428]	@ (8002a44 <HAL_DMA_Abort+0x230>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6a      	ldr	r2, [pc, #424]	@ (8002a48 <HAL_DMA_Abort+0x234>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	@ (8002a4c <HAL_DMA_Abort+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a67      	ldr	r2, [pc, #412]	@ (8002a50 <HAL_DMA_Abort+0x23c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	@ (8002a54 <HAL_DMA_Abort+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a64      	ldr	r2, [pc, #400]	@ (8002a58 <HAL_DMA_Abort+0x244>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a62      	ldr	r2, [pc, #392]	@ (8002a5c <HAL_DMA_Abort+0x248>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a61      	ldr	r2, [pc, #388]	@ (8002a60 <HAL_DMA_Abort+0x24c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_Abort+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a64 <HAL_DMA_Abort+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Abort+0xda>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_DMA_Abort+0xdc>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 021e 	bic.w	r2, r2, #30
 8002902:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002912:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e00a      	b.n	8002932 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020e 	bic.w	r2, r2, #14
 800292a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3c      	ldr	r2, [pc, #240]	@ (8002a28 <HAL_DMA_Abort+0x214>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d072      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3a      	ldr	r2, [pc, #232]	@ (8002a2c <HAL_DMA_Abort+0x218>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d06d      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a39      	ldr	r2, [pc, #228]	@ (8002a30 <HAL_DMA_Abort+0x21c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d068      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a37      	ldr	r2, [pc, #220]	@ (8002a34 <HAL_DMA_Abort+0x220>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d063      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a36      	ldr	r2, [pc, #216]	@ (8002a38 <HAL_DMA_Abort+0x224>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d05e      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a34      	ldr	r2, [pc, #208]	@ (8002a3c <HAL_DMA_Abort+0x228>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d059      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a33      	ldr	r2, [pc, #204]	@ (8002a40 <HAL_DMA_Abort+0x22c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d054      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <HAL_DMA_Abort+0x230>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04f      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <HAL_DMA_Abort+0x234>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2e      	ldr	r2, [pc, #184]	@ (8002a4c <HAL_DMA_Abort+0x238>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a50 <HAL_DMA_Abort+0x23c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <HAL_DMA_Abort+0x240>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002a58 <HAL_DMA_Abort+0x244>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <HAL_DMA_Abort+0x248>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a27      	ldr	r2, [pc, #156]	@ (8002a60 <HAL_DMA_Abort+0x24c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <HAL_DMA_Abort+0x250>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a24      	ldr	r2, [pc, #144]	@ (8002a68 <HAL_DMA_Abort+0x254>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a22      	ldr	r2, [pc, #136]	@ (8002a6c <HAL_DMA_Abort+0x258>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_DMA_Abort+0x25c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_DMA_Abort+0x260>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <HAL_DMA_Abort+0x264>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_DMA_Abort+0x268>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <HAL_DMA_Abort+0x26c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Abort+0x20e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <HAL_DMA_Abort+0x270>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d132      	bne.n	8002a88 <HAL_DMA_Abort+0x274>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e031      	b.n	8002a8a <HAL_DMA_Abort+0x276>
 8002a26:	bf00      	nop
 8002a28:	40020010 	.word	0x40020010
 8002a2c:	40020028 	.word	0x40020028
 8002a30:	40020040 	.word	0x40020040
 8002a34:	40020058 	.word	0x40020058
 8002a38:	40020070 	.word	0x40020070
 8002a3c:	40020088 	.word	0x40020088
 8002a40:	400200a0 	.word	0x400200a0
 8002a44:	400200b8 	.word	0x400200b8
 8002a48:	40020410 	.word	0x40020410
 8002a4c:	40020428 	.word	0x40020428
 8002a50:	40020440 	.word	0x40020440
 8002a54:	40020458 	.word	0x40020458
 8002a58:	40020470 	.word	0x40020470
 8002a5c:	40020488 	.word	0x40020488
 8002a60:	400204a0 	.word	0x400204a0
 8002a64:	400204b8 	.word	0x400204b8
 8002a68:	58025408 	.word	0x58025408
 8002a6c:	5802541c 	.word	0x5802541c
 8002a70:	58025430 	.word	0x58025430
 8002a74:	58025444 	.word	0x58025444
 8002a78:	58025458 	.word	0x58025458
 8002a7c:	5802546c 	.word	0x5802546c
 8002a80:	58025480 	.word	0x58025480
 8002a84:	58025494 	.word	0x58025494
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8002c58 <HAL_DMA_Abort+0x444>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04a      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_DMA_Abort+0x448>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d045      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_DMA_Abort+0x44c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d040      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <HAL_DMA_Abort+0x450>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d03b      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a67      	ldr	r2, [pc, #412]	@ (8002c68 <HAL_DMA_Abort+0x454>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d036      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_DMA_Abort+0x458>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a64      	ldr	r2, [pc, #400]	@ (8002c70 <HAL_DMA_Abort+0x45c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d02c      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a62      	ldr	r2, [pc, #392]	@ (8002c74 <HAL_DMA_Abort+0x460>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d027      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a61      	ldr	r2, [pc, #388]	@ (8002c78 <HAL_DMA_Abort+0x464>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5f      	ldr	r2, [pc, #380]	@ (8002c7c <HAL_DMA_Abort+0x468>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5e      	ldr	r2, [pc, #376]	@ (8002c80 <HAL_DMA_Abort+0x46c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5c      	ldr	r2, [pc, #368]	@ (8002c84 <HAL_DMA_Abort+0x470>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c88 <HAL_DMA_Abort+0x474>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a59      	ldr	r2, [pc, #356]	@ (8002c8c <HAL_DMA_Abort+0x478>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a58      	ldr	r2, [pc, #352]	@ (8002c90 <HAL_DMA_Abort+0x47c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_Abort+0x32a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a56      	ldr	r2, [pc, #344]	@ (8002c94 <HAL_DMA_Abort+0x480>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <HAL_DMA_Abort+0x33c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e007      	b.n	8002b60 <HAL_DMA_Abort+0x34c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b60:	e013      	b.n	8002b8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b62:	f7fe fd77 	bl	8001654 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d90c      	bls.n	8002b8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12d      	b.n	8002de6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c58 <HAL_DMA_Abort+0x444>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04a      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c5c <HAL_DMA_Abort+0x448>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d045      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	@ (8002c60 <HAL_DMA_Abort+0x44c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d040      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c64 <HAL_DMA_Abort+0x450>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d03b      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	@ (8002c68 <HAL_DMA_Abort+0x454>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d036      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <HAL_DMA_Abort+0x458>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d031      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <HAL_DMA_Abort+0x45c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d02c      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a24      	ldr	r2, [pc, #144]	@ (8002c74 <HAL_DMA_Abort+0x460>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d027      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_DMA_Abort+0x464>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	@ (8002c7c <HAL_DMA_Abort+0x468>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a20      	ldr	r2, [pc, #128]	@ (8002c80 <HAL_DMA_Abort+0x46c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <HAL_DMA_Abort+0x470>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_DMA_Abort+0x474>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c8c <HAL_DMA_Abort+0x478>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	@ (8002c90 <HAL_DMA_Abort+0x47c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Abort+0x422>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <HAL_DMA_Abort+0x480>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_DMA_Abort+0x426>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_DMA_Abort+0x428>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02b      	beq.n	8002c98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	223f      	movs	r2, #63	@ 0x3f
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	e02a      	b.n	8002cae <HAL_DMA_Abort+0x49a>
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	@ (8002df0 <HAL_DMA_Abort+0x5dc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d072      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_DMA_Abort+0x5e0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d06d      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_DMA_Abort+0x5e4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d068      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dfc <HAL_DMA_Abort+0x5e8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d063      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a49      	ldr	r2, [pc, #292]	@ (8002e00 <HAL_DMA_Abort+0x5ec>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a47      	ldr	r2, [pc, #284]	@ (8002e04 <HAL_DMA_Abort+0x5f0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d059      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a46      	ldr	r2, [pc, #280]	@ (8002e08 <HAL_DMA_Abort+0x5f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d054      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a44      	ldr	r2, [pc, #272]	@ (8002e0c <HAL_DMA_Abort+0x5f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04f      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a43      	ldr	r2, [pc, #268]	@ (8002e10 <HAL_DMA_Abort+0x5fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04a      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a41      	ldr	r2, [pc, #260]	@ (8002e14 <HAL_DMA_Abort+0x600>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d045      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a40      	ldr	r2, [pc, #256]	@ (8002e18 <HAL_DMA_Abort+0x604>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d040      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3e      	ldr	r2, [pc, #248]	@ (8002e1c <HAL_DMA_Abort+0x608>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03b      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e20 <HAL_DMA_Abort+0x60c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d036      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3b      	ldr	r2, [pc, #236]	@ (8002e24 <HAL_DMA_Abort+0x610>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d031      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002e28 <HAL_DMA_Abort+0x614>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d02c      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a38      	ldr	r2, [pc, #224]	@ (8002e2c <HAL_DMA_Abort+0x618>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d027      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a37      	ldr	r2, [pc, #220]	@ (8002e30 <HAL_DMA_Abort+0x61c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <HAL_DMA_Abort+0x620>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_DMA_Abort+0x624>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a32      	ldr	r2, [pc, #200]	@ (8002e3c <HAL_DMA_Abort+0x628>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_DMA_Abort+0x62c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <HAL_DMA_Abort+0x630>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e48 <HAL_DMA_Abort+0x634>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_Abort+0x58a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	@ (8002e4c <HAL_DMA_Abort+0x638>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_DMA_Abort+0x58e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_Abort+0x590>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002db0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	58025408 	.word	0x58025408
 8002e34:	5802541c 	.word	0x5802541c
 8002e38:	58025430 	.word	0x58025430
 8002e3c:	58025444 	.word	0x58025444
 8002e40:	58025458 	.word	0x58025458
 8002e44:	5802546c 	.word	0x5802546c
 8002e48:	58025480 	.word	0x58025480
 8002e4c:	58025494 	.word	0x58025494

08002e50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e237      	b.n	80032d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e22c      	b.n	80032d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff0 <HAL_DMA_Abort_IT+0x1a0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d04a      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff4 <HAL_DMA_Abort_IT+0x1a4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d045      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a59      	ldr	r2, [pc, #356]	@ (8002ff8 <HAL_DMA_Abort_IT+0x1a8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d040      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a58      	ldr	r2, [pc, #352]	@ (8002ffc <HAL_DMA_Abort_IT+0x1ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d03b      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a56      	ldr	r2, [pc, #344]	@ (8003000 <HAL_DMA_Abort_IT+0x1b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d036      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a55      	ldr	r2, [pc, #340]	@ (8003004 <HAL_DMA_Abort_IT+0x1b4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d031      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a53      	ldr	r2, [pc, #332]	@ (8003008 <HAL_DMA_Abort_IT+0x1b8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02c      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_DMA_Abort_IT+0x1bc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d027      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a50      	ldr	r2, [pc, #320]	@ (8003010 <HAL_DMA_Abort_IT+0x1c0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4f      	ldr	r2, [pc, #316]	@ (8003014 <HAL_DMA_Abort_IT+0x1c4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01d      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8003018 <HAL_DMA_Abort_IT+0x1c8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4c      	ldr	r2, [pc, #304]	@ (800301c <HAL_DMA_Abort_IT+0x1cc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8003020 <HAL_DMA_Abort_IT+0x1d0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <HAL_DMA_Abort_IT+0x1d4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a47      	ldr	r2, [pc, #284]	@ (8003028 <HAL_DMA_Abort_IT+0x1d8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xc8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a46      	ldr	r2, [pc, #280]	@ (800302c <HAL_DMA_Abort_IT+0x1dc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Abort_IT+0xcc>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_Abort_IT+0xce>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8086 	beq.w	8003030 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2204      	movs	r2, #4
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <HAL_DMA_Abort_IT+0x1a0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04a      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <HAL_DMA_Abort_IT+0x1a4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d045      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff8 <HAL_DMA_Abort_IT+0x1a8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <HAL_DMA_Abort_IT+0x1ac>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d03b      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a29      	ldr	r2, [pc, #164]	@ (8003000 <HAL_DMA_Abort_IT+0x1b0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d036      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a28      	ldr	r2, [pc, #160]	@ (8003004 <HAL_DMA_Abort_IT+0x1b4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_DMA_Abort_IT+0x1b8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02c      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a25      	ldr	r2, [pc, #148]	@ (800300c <HAL_DMA_Abort_IT+0x1bc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d027      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_DMA_Abort_IT+0x1c0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <HAL_DMA_Abort_IT+0x1c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d01d      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_DMA_Abort_IT+0x1c8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <HAL_DMA_Abort_IT+0x1cc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_DMA_Abort_IT+0x1d0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003024 <HAL_DMA_Abort_IT+0x1d4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_DMA_Abort_IT+0x1d8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x17c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_DMA_Abort_IT+0x1dc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_Abort_IT+0x18e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e178      	b.n	80032d0 <HAL_DMA_Abort_IT+0x480>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e16f      	b.n	80032d0 <HAL_DMA_Abort_IT+0x480>
 8002ff0:	40020010 	.word	0x40020010
 8002ff4:	40020028 	.word	0x40020028
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	40020058 	.word	0x40020058
 8003000:	40020070 	.word	0x40020070
 8003004:	40020088 	.word	0x40020088
 8003008:	400200a0 	.word	0x400200a0
 800300c:	400200b8 	.word	0x400200b8
 8003010:	40020410 	.word	0x40020410
 8003014:	40020428 	.word	0x40020428
 8003018:	40020440 	.word	0x40020440
 800301c:	40020458 	.word	0x40020458
 8003020:	40020470 	.word	0x40020470
 8003024:	40020488 	.word	0x40020488
 8003028:	400204a0 	.word	0x400204a0
 800302c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 020e 	bic.w	r2, r2, #14
 800303e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6c      	ldr	r2, [pc, #432]	@ (80031f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04a      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6b      	ldr	r2, [pc, #428]	@ (80031fc <HAL_DMA_Abort_IT+0x3ac>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d045      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a69      	ldr	r2, [pc, #420]	@ (8003200 <HAL_DMA_Abort_IT+0x3b0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d040      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a68      	ldr	r2, [pc, #416]	@ (8003204 <HAL_DMA_Abort_IT+0x3b4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d03b      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a66      	ldr	r2, [pc, #408]	@ (8003208 <HAL_DMA_Abort_IT+0x3b8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d036      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_DMA_Abort_IT+0x3bc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a63      	ldr	r2, [pc, #396]	@ (8003210 <HAL_DMA_Abort_IT+0x3c0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02c      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a62      	ldr	r2, [pc, #392]	@ (8003214 <HAL_DMA_Abort_IT+0x3c4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d027      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a60      	ldr	r2, [pc, #384]	@ (8003218 <HAL_DMA_Abort_IT+0x3c8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d022      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5f      	ldr	r2, [pc, #380]	@ (800321c <HAL_DMA_Abort_IT+0x3cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d01d      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003220 <HAL_DMA_Abort_IT+0x3d0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d018      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003224 <HAL_DMA_Abort_IT+0x3d4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_DMA_Abort_IT+0x3d8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00e      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a59      	ldr	r2, [pc, #356]	@ (800322c <HAL_DMA_Abort_IT+0x3dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a57      	ldr	r2, [pc, #348]	@ (8003230 <HAL_DMA_Abort_IT+0x3e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x290>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a56      	ldr	r2, [pc, #344]	@ (8003234 <HAL_DMA_Abort_IT+0x3e4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d108      	bne.n	80030f2 <HAL_DMA_Abort_IT+0x2a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_DMA_Abort_IT+0x2b2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a3c      	ldr	r2, [pc, #240]	@ (80031f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d072      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3a      	ldr	r2, [pc, #232]	@ (80031fc <HAL_DMA_Abort_IT+0x3ac>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d06d      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a39      	ldr	r2, [pc, #228]	@ (8003200 <HAL_DMA_Abort_IT+0x3b0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d068      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a37      	ldr	r2, [pc, #220]	@ (8003204 <HAL_DMA_Abort_IT+0x3b4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d063      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a36      	ldr	r2, [pc, #216]	@ (8003208 <HAL_DMA_Abort_IT+0x3b8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d05e      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a34      	ldr	r2, [pc, #208]	@ (800320c <HAL_DMA_Abort_IT+0x3bc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d059      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a33      	ldr	r2, [pc, #204]	@ (8003210 <HAL_DMA_Abort_IT+0x3c0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d054      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a31      	ldr	r2, [pc, #196]	@ (8003214 <HAL_DMA_Abort_IT+0x3c4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d04f      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <HAL_DMA_Abort_IT+0x3c8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04a      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <HAL_DMA_Abort_IT+0x3cc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d045      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <HAL_DMA_Abort_IT+0x3d0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d040      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2b      	ldr	r2, [pc, #172]	@ (8003224 <HAL_DMA_Abort_IT+0x3d4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d03b      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2a      	ldr	r2, [pc, #168]	@ (8003228 <HAL_DMA_Abort_IT+0x3d8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d036      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	@ (800322c <HAL_DMA_Abort_IT+0x3dc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d031      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a27      	ldr	r2, [pc, #156]	@ (8003230 <HAL_DMA_Abort_IT+0x3e0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d02c      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a25      	ldr	r2, [pc, #148]	@ (8003234 <HAL_DMA_Abort_IT+0x3e4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d027      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a24      	ldr	r2, [pc, #144]	@ (8003238 <HAL_DMA_Abort_IT+0x3e8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_DMA_Abort_IT+0x3ec>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <HAL_DMA_Abort_IT+0x3f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003244 <HAL_DMA_Abort_IT+0x3f4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003248 <HAL_DMA_Abort_IT+0x3f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <HAL_DMA_Abort_IT+0x3fc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <HAL_DMA_Abort_IT+0x400>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x3a2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_DMA_Abort_IT+0x404>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d132      	bne.n	8003258 <HAL_DMA_Abort_IT+0x408>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e031      	b.n	800325a <HAL_DMA_Abort_IT+0x40a>
 80031f6:	bf00      	nop
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	58025408 	.word	0x58025408
 800323c:	5802541c 	.word	0x5802541c
 8003240:	58025430 	.word	0x58025430
 8003244:	58025444 	.word	0x58025444
 8003248:	58025458 	.word	0x58025458
 800324c:	5802546c 	.word	0x5802546c
 8003250:	58025480 	.word	0x58025480
 8003254:	58025494 	.word	0x58025494
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d028      	beq.n	80032b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800326c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800328c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e8:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <HAL_DMA_IRQHandler+0x1ac>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	@ (800348c <HAL_DMA_IRQHandler+0x1b0>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5f      	ldr	r2, [pc, #380]	@ (8003490 <HAL_DMA_IRQHandler+0x1b4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5d      	ldr	r2, [pc, #372]	@ (8003494 <HAL_DMA_IRQHandler+0x1b8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5c      	ldr	r2, [pc, #368]	@ (8003498 <HAL_DMA_IRQHandler+0x1bc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5a      	ldr	r2, [pc, #360]	@ (800349c <HAL_DMA_IRQHandler+0x1c0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a59      	ldr	r2, [pc, #356]	@ (80034a0 <HAL_DMA_IRQHandler+0x1c4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a57      	ldr	r2, [pc, #348]	@ (80034a4 <HAL_DMA_IRQHandler+0x1c8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a56      	ldr	r2, [pc, #344]	@ (80034a8 <HAL_DMA_IRQHandler+0x1cc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a54      	ldr	r2, [pc, #336]	@ (80034ac <HAL_DMA_IRQHandler+0x1d0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a53      	ldr	r2, [pc, #332]	@ (80034b0 <HAL_DMA_IRQHandler+0x1d4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a51      	ldr	r2, [pc, #324]	@ (80034b4 <HAL_DMA_IRQHandler+0x1d8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a50      	ldr	r2, [pc, #320]	@ (80034b8 <HAL_DMA_IRQHandler+0x1dc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a4e      	ldr	r2, [pc, #312]	@ (80034bc <HAL_DMA_IRQHandler+0x1e0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a4d      	ldr	r2, [pc, #308]	@ (80034c0 <HAL_DMA_IRQHandler+0x1e4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a4b      	ldr	r2, [pc, #300]	@ (80034c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <HAL_DMA_IRQHandler+0x1ec>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_IRQHandler+0xd2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a48      	ldr	r2, [pc, #288]	@ (80034cc <HAL_DMA_IRQHandler+0x1f0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_IRQHandler+0xd6>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_DMA_IRQHandler+0xd8>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 842b 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2208      	movs	r2, #8
 80033c4:	409a      	lsls	r2, r3
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a2 	beq.w	8003514 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003490 <HAL_DMA_IRQHandler+0x1b4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04a      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2d      	ldr	r2, [pc, #180]	@ (8003494 <HAL_DMA_IRQHandler+0x1b8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d045      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <HAL_DMA_IRQHandler+0x1bc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d040      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2a      	ldr	r2, [pc, #168]	@ (800349c <HAL_DMA_IRQHandler+0x1c0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d03b      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <HAL_DMA_IRQHandler+0x1c4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d036      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <HAL_DMA_IRQHandler+0x1c8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d031      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a25      	ldr	r2, [pc, #148]	@ (80034a8 <HAL_DMA_IRQHandler+0x1cc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02c      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a24      	ldr	r2, [pc, #144]	@ (80034ac <HAL_DMA_IRQHandler+0x1d0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d027      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <HAL_DMA_IRQHandler+0x1d4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_DMA_IRQHandler+0x1d8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01d      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_DMA_IRQHandler+0x1dc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <HAL_DMA_IRQHandler+0x1e0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_DMA_IRQHandler+0x1e4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_DMA_IRQHandler+0x1ec>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_DMA_IRQHandler+0x194>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_DMA_IRQHandler+0x1f0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d12f      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x1f4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e02e      	b.n	80034e4 <HAL_DMA_IRQHandler+0x208>
 8003486:	bf00      	nop
 8003488:	24000060 	.word	0x24000060
 800348c:	1b4e81b5 	.word	0x1b4e81b5
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2208      	movs	r2, #8
 8003502:	409a      	lsls	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d06e      	beq.n	8003608 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a69      	ldr	r2, [pc, #420]	@ (80036d4 <HAL_DMA_IRQHandler+0x3f8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a67      	ldr	r2, [pc, #412]	@ (80036d8 <HAL_DMA_IRQHandler+0x3fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a66      	ldr	r2, [pc, #408]	@ (80036dc <HAL_DMA_IRQHandler+0x400>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a64      	ldr	r2, [pc, #400]	@ (80036e0 <HAL_DMA_IRQHandler+0x404>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a63      	ldr	r2, [pc, #396]	@ (80036e4 <HAL_DMA_IRQHandler+0x408>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a61      	ldr	r2, [pc, #388]	@ (80036e8 <HAL_DMA_IRQHandler+0x40c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <HAL_DMA_IRQHandler+0x410>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5e      	ldr	r2, [pc, #376]	@ (80036f0 <HAL_DMA_IRQHandler+0x414>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5d      	ldr	r2, [pc, #372]	@ (80036f4 <HAL_DMA_IRQHandler+0x418>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a5b      	ldr	r2, [pc, #364]	@ (80036f8 <HAL_DMA_IRQHandler+0x41c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5a      	ldr	r2, [pc, #360]	@ (80036fc <HAL_DMA_IRQHandler+0x420>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a58      	ldr	r2, [pc, #352]	@ (8003700 <HAL_DMA_IRQHandler+0x424>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a57      	ldr	r2, [pc, #348]	@ (8003704 <HAL_DMA_IRQHandler+0x428>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a55      	ldr	r2, [pc, #340]	@ (8003708 <HAL_DMA_IRQHandler+0x42c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a54      	ldr	r2, [pc, #336]	@ (800370c <HAL_DMA_IRQHandler+0x430>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2ee>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a52      	ldr	r2, [pc, #328]	@ (8003710 <HAL_DMA_IRQHandler+0x434>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10a      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x304>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e003      	b.n	80035e8 <HAL_DMA_IRQHandler+0x30c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2201      	movs	r2, #1
 80035f6:	409a      	lsls	r2, r3
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	f043 0202 	orr.w	r2, r3, #2
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2204      	movs	r2, #4
 8003612:	409a      	lsls	r2, r3
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 808f 	beq.w	800373c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2c      	ldr	r2, [pc, #176]	@ (80036d4 <HAL_DMA_IRQHandler+0x3f8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <HAL_DMA_IRQHandler+0x3fc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a29      	ldr	r2, [pc, #164]	@ (80036dc <HAL_DMA_IRQHandler+0x400>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a27      	ldr	r2, [pc, #156]	@ (80036e0 <HAL_DMA_IRQHandler+0x404>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <HAL_DMA_IRQHandler+0x408>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_DMA_IRQHandler+0x40c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a23      	ldr	r2, [pc, #140]	@ (80036ec <HAL_DMA_IRQHandler+0x410>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_DMA_IRQHandler+0x414>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a20      	ldr	r2, [pc, #128]	@ (80036f4 <HAL_DMA_IRQHandler+0x418>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <HAL_DMA_IRQHandler+0x41c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <HAL_DMA_IRQHandler+0x420>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <HAL_DMA_IRQHandler+0x424>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_DMA_IRQHandler+0x428>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a18      	ldr	r2, [pc, #96]	@ (8003708 <HAL_DMA_IRQHandler+0x42c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a17      	ldr	r2, [pc, #92]	@ (800370c <HAL_DMA_IRQHandler+0x430>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_IRQHandler+0x3e2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a15      	ldr	r2, [pc, #84]	@ (8003710 <HAL_DMA_IRQHandler+0x434>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12a      	bne.n	8003714 <HAL_DMA_IRQHandler+0x438>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e023      	b.n	800371c <HAL_DMA_IRQHandler+0x440>
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a6 	beq.w	800389e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a85      	ldr	r2, [pc, #532]	@ (800396c <HAL_DMA_IRQHandler+0x690>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a83      	ldr	r2, [pc, #524]	@ (8003970 <HAL_DMA_IRQHandler+0x694>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a82      	ldr	r2, [pc, #520]	@ (8003974 <HAL_DMA_IRQHandler+0x698>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a80      	ldr	r2, [pc, #512]	@ (8003978 <HAL_DMA_IRQHandler+0x69c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7f      	ldr	r2, [pc, #508]	@ (800397c <HAL_DMA_IRQHandler+0x6a0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7d      	ldr	r2, [pc, #500]	@ (8003980 <HAL_DMA_IRQHandler+0x6a4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7c      	ldr	r2, [pc, #496]	@ (8003984 <HAL_DMA_IRQHandler+0x6a8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7a      	ldr	r2, [pc, #488]	@ (8003988 <HAL_DMA_IRQHandler+0x6ac>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a79      	ldr	r2, [pc, #484]	@ (800398c <HAL_DMA_IRQHandler+0x6b0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	@ (8003990 <HAL_DMA_IRQHandler+0x6b4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a76      	ldr	r2, [pc, #472]	@ (8003994 <HAL_DMA_IRQHandler+0x6b8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a74      	ldr	r2, [pc, #464]	@ (8003998 <HAL_DMA_IRQHandler+0x6bc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	@ (800399c <HAL_DMA_IRQHandler+0x6c0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a71      	ldr	r2, [pc, #452]	@ (80039a0 <HAL_DMA_IRQHandler+0x6c4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a70      	ldr	r2, [pc, #448]	@ (80039a4 <HAL_DMA_IRQHandler+0x6c8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x516>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	@ (80039a8 <HAL_DMA_IRQHandler+0x6cc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10a      	bne.n	8003808 <HAL_DMA_IRQHandler+0x52c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e009      	b.n	800381c <HAL_DMA_IRQHandler+0x540>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03e      	beq.n	800389e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2210      	movs	r2, #16
 800382a:	409a      	lsls	r2, r3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d024      	beq.n	800389e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e01f      	b.n	800389e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01b      	beq.n	800389e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
 800386e:	e016      	b.n	800389e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0208 	bic.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	2220      	movs	r2, #32
 80038a8:	409a      	lsls	r2, r3
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8110 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <HAL_DMA_IRQHandler+0x690>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d04a      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003970 <HAL_DMA_IRQHandler+0x694>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d045      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a29      	ldr	r2, [pc, #164]	@ (8003974 <HAL_DMA_IRQHandler+0x698>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a28      	ldr	r2, [pc, #160]	@ (8003978 <HAL_DMA_IRQHandler+0x69c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d03b      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a26      	ldr	r2, [pc, #152]	@ (800397c <HAL_DMA_IRQHandler+0x6a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a25      	ldr	r2, [pc, #148]	@ (8003980 <HAL_DMA_IRQHandler+0x6a4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d031      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a23      	ldr	r2, [pc, #140]	@ (8003984 <HAL_DMA_IRQHandler+0x6a8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02c      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a22      	ldr	r2, [pc, #136]	@ (8003988 <HAL_DMA_IRQHandler+0x6ac>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d027      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	@ (800398c <HAL_DMA_IRQHandler+0x6b0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d022      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_DMA_IRQHandler+0x6b4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d01d      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1d      	ldr	r2, [pc, #116]	@ (8003994 <HAL_DMA_IRQHandler+0x6b8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d018      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1c      	ldr	r2, [pc, #112]	@ (8003998 <HAL_DMA_IRQHandler+0x6bc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1a      	ldr	r2, [pc, #104]	@ (800399c <HAL_DMA_IRQHandler+0x6c0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <HAL_DMA_IRQHandler+0x6c4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a17      	ldr	r2, [pc, #92]	@ (80039a4 <HAL_DMA_IRQHandler+0x6c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_DMA_IRQHandler+0x678>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	@ (80039a8 <HAL_DMA_IRQHandler+0x6cc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d12b      	bne.n	80039ac <HAL_DMA_IRQHandler+0x6d0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e02a      	b.n	80039c0 <HAL_DMA_IRQHandler+0x6e4>
 800396a:	bf00      	nop
 800396c:	40020010 	.word	0x40020010
 8003970:	40020028 	.word	0x40020028
 8003974:	40020040 	.word	0x40020040
 8003978:	40020058 	.word	0x40020058
 800397c:	40020070 	.word	0x40020070
 8003980:	40020088 	.word	0x40020088
 8003984:	400200a0 	.word	0x400200a0
 8003988:	400200b8 	.word	0x400200b8
 800398c:	40020410 	.word	0x40020410
 8003990:	40020428 	.word	0x40020428
 8003994:	40020440 	.word	0x40020440
 8003998:	40020458 	.word	0x40020458
 800399c:	40020470 	.word	0x40020470
 80039a0:	40020488 	.word	0x40020488
 80039a4:	400204a0 	.word	0x400204a0
 80039a8:	400204b8 	.word	0x400204b8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8087 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2220      	movs	r2, #32
 80039d0:	409a      	lsls	r2, r3
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d139      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x736>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	223f      	movs	r2, #63	@ 0x3f
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 834a 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
          }
          return;
 8003a54:	e344      	b.n	80040e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d018      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02c      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
 8003a82:	e027      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e01e      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0210 	bic.w	r2, r2, #16
 8003ab2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8306 	beq.w	80040ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8088 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7a      	ldr	r2, [pc, #488]	@ (8003ce4 <HAL_DMA_IRQHandler+0xa08>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a79      	ldr	r2, [pc, #484]	@ (8003ce8 <HAL_DMA_IRQHandler+0xa0c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a77      	ldr	r2, [pc, #476]	@ (8003cec <HAL_DMA_IRQHandler+0xa10>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a76      	ldr	r2, [pc, #472]	@ (8003cf0 <HAL_DMA_IRQHandler+0xa14>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a74      	ldr	r2, [pc, #464]	@ (8003cf4 <HAL_DMA_IRQHandler+0xa18>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a73      	ldr	r2, [pc, #460]	@ (8003cf8 <HAL_DMA_IRQHandler+0xa1c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a71      	ldr	r2, [pc, #452]	@ (8003cfc <HAL_DMA_IRQHandler+0xa20>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a70      	ldr	r2, [pc, #448]	@ (8003d00 <HAL_DMA_IRQHandler+0xa24>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	@ (8003d04 <HAL_DMA_IRQHandler+0xa28>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6d      	ldr	r2, [pc, #436]	@ (8003d08 <HAL_DMA_IRQHandler+0xa2c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d0c <HAL_DMA_IRQHandler+0xa30>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6a      	ldr	r2, [pc, #424]	@ (8003d10 <HAL_DMA_IRQHandler+0xa34>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a68      	ldr	r2, [pc, #416]	@ (8003d14 <HAL_DMA_IRQHandler+0xa38>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a67      	ldr	r2, [pc, #412]	@ (8003d18 <HAL_DMA_IRQHandler+0xa3c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_DMA_IRQHandler+0xa40>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x8b8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a64      	ldr	r2, [pc, #400]	@ (8003d20 <HAL_DMA_IRQHandler+0xa44>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d108      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0x8ca>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e007      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x8da>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d307      	bcc.n	8003bd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f2      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x8da>
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003bea:	e003      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8272 	beq.w	80040ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
 8003c0e:	e26c      	b.n	80040ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a43      	ldr	r2, [pc, #268]	@ (8003d24 <HAL_DMA_IRQHandler+0xa48>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a42      	ldr	r2, [pc, #264]	@ (8003d28 <HAL_DMA_IRQHandler+0xa4c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <HAL_DMA_IRQHandler+0xa50>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3f      	ldr	r2, [pc, #252]	@ (8003d30 <HAL_DMA_IRQHandler+0xa54>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d34 <HAL_DMA_IRQHandler+0xa58>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3c      	ldr	r2, [pc, #240]	@ (8003d38 <HAL_DMA_IRQHandler+0xa5c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3a      	ldr	r2, [pc, #232]	@ (8003d3c <HAL_DMA_IRQHandler+0xa60>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x984>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a39      	ldr	r2, [pc, #228]	@ (8003d40 <HAL_DMA_IRQHandler+0xa64>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x988>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_DMA_IRQHandler+0x98a>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 823f 	beq.w	80040ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80cd 	beq.w	8003e24 <HAL_DMA_IRQHandler+0xb48>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80c7 	beq.w	8003e24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d049      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8210 	beq.w	80040e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ccc:	e20a      	b.n	80040e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8206 	beq.w	80040e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	e200      	b.n	80040e4 <HAL_DMA_IRQHandler+0xe08>
 8003ce2:	bf00      	nop
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	40020028 	.word	0x40020028
 8003cec:	40020040 	.word	0x40020040
 8003cf0:	40020058 	.word	0x40020058
 8003cf4:	40020070 	.word	0x40020070
 8003cf8:	40020088 	.word	0x40020088
 8003cfc:	400200a0 	.word	0x400200a0
 8003d00:	400200b8 	.word	0x400200b8
 8003d04:	40020410 	.word	0x40020410
 8003d08:	40020428 	.word	0x40020428
 8003d0c:	40020440 	.word	0x40020440
 8003d10:	40020458 	.word	0x40020458
 8003d14:	40020470 	.word	0x40020470
 8003d18:	40020488 	.word	0x40020488
 8003d1c:	400204a0 	.word	0x400204a0
 8003d20:	400204b8 	.word	0x400204b8
 8003d24:	58025408 	.word	0x58025408
 8003d28:	5802541c 	.word	0x5802541c
 8003d2c:	58025430 	.word	0x58025430
 8003d30:	58025444 	.word	0x58025444
 8003d34:	58025458 	.word	0x58025458
 8003d38:	5802546c 	.word	0x5802546c
 8003d3c:	58025480 	.word	0x58025480
 8003d40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d160      	bne.n	8003e10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7f      	ldr	r2, [pc, #508]	@ (8003f50 <HAL_DMA_IRQHandler+0xc74>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f54 <HAL_DMA_IRQHandler+0xc78>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7c      	ldr	r2, [pc, #496]	@ (8003f58 <HAL_DMA_IRQHandler+0xc7c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a7a      	ldr	r2, [pc, #488]	@ (8003f5c <HAL_DMA_IRQHandler+0xc80>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a79      	ldr	r2, [pc, #484]	@ (8003f60 <HAL_DMA_IRQHandler+0xc84>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a77      	ldr	r2, [pc, #476]	@ (8003f64 <HAL_DMA_IRQHandler+0xc88>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a76      	ldr	r2, [pc, #472]	@ (8003f68 <HAL_DMA_IRQHandler+0xc8c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a74      	ldr	r2, [pc, #464]	@ (8003f6c <HAL_DMA_IRQHandler+0xc90>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a73      	ldr	r2, [pc, #460]	@ (8003f70 <HAL_DMA_IRQHandler+0xc94>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a71      	ldr	r2, [pc, #452]	@ (8003f74 <HAL_DMA_IRQHandler+0xc98>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a70      	ldr	r2, [pc, #448]	@ (8003f78 <HAL_DMA_IRQHandler+0xc9c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_DMA_IRQHandler+0xca0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6d      	ldr	r2, [pc, #436]	@ (8003f80 <HAL_DMA_IRQHandler+0xca4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f84 <HAL_DMA_IRQHandler+0xca8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6a      	ldr	r2, [pc, #424]	@ (8003f88 <HAL_DMA_IRQHandler+0xcac>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_IRQHandler+0xb12>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a68      	ldr	r2, [pc, #416]	@ (8003f8c <HAL_DMA_IRQHandler+0xcb0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0xb24>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0208 	bic.w	r2, r2, #8
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e007      	b.n	8003e10 <HAL_DMA_IRQHandler+0xb34>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8165 	beq.w	80040e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e22:	e15f      	b.n	80040e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80c5 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0xce8>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80bf 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2202      	movs	r2, #2
 8003e50:	409a      	lsls	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 813a 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e7c:	e134      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8130 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e90:	e12a      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8089 	bne.w	8003fb0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <HAL_DMA_IRQHandler+0xc74>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d04a      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a29      	ldr	r2, [pc, #164]	@ (8003f54 <HAL_DMA_IRQHandler+0xc78>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d045      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a28      	ldr	r2, [pc, #160]	@ (8003f58 <HAL_DMA_IRQHandler+0xc7c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d040      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	@ (8003f5c <HAL_DMA_IRQHandler+0xc80>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d03b      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a25      	ldr	r2, [pc, #148]	@ (8003f60 <HAL_DMA_IRQHandler+0xc84>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d036      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	@ (8003f64 <HAL_DMA_IRQHandler+0xc88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <HAL_DMA_IRQHandler+0xc8c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d02c      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a20      	ldr	r2, [pc, #128]	@ (8003f6c <HAL_DMA_IRQHandler+0xc90>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d027      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <HAL_DMA_IRQHandler+0xc94>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HAL_DMA_IRQHandler+0xc98>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01d      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <HAL_DMA_IRQHandler+0xc9c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1a      	ldr	r2, [pc, #104]	@ (8003f7c <HAL_DMA_IRQHandler+0xca0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <HAL_DMA_IRQHandler+0xca4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <HAL_DMA_IRQHandler+0xca8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <HAL_DMA_IRQHandler+0xcac>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xc62>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <HAL_DMA_IRQHandler+0xcb0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d128      	bne.n	8003f90 <HAL_DMA_IRQHandler+0xcb4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0214 	bic.w	r2, r2, #20
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e027      	b.n	8003fa0 <HAL_DMA_IRQHandler+0xcc4>
 8003f50:	40020010 	.word	0x40020010
 8003f54:	40020028 	.word	0x40020028
 8003f58:	40020040 	.word	0x40020040
 8003f5c:	40020058 	.word	0x40020058
 8003f60:	40020070 	.word	0x40020070
 8003f64:	40020088 	.word	0x40020088
 8003f68:	400200a0 	.word	0x400200a0
 8003f6c:	400200b8 	.word	0x400200b8
 8003f70:	40020410 	.word	0x40020410
 8003f74:	40020428 	.word	0x40020428
 8003f78:	40020440 	.word	0x40020440
 8003f7c:	40020458 	.word	0x40020458
 8003f80:	40020470 	.word	0x40020470
 8003f84:	40020488 	.word	0x40020488
 8003f88:	400204a0 	.word	0x400204a0
 8003f8c:	400204b8 	.word	0x400204b8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020a 	bic.w	r2, r2, #10
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8097 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc2:	e091      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2208      	movs	r2, #8
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8088 	beq.w	80040ea <HAL_DMA_IRQHandler+0xe0e>
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8082 	beq.w	80040ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a41      	ldr	r2, [pc, #260]	@ (80040f0 <HAL_DMA_IRQHandler+0xe14>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d04a      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80040f4 <HAL_DMA_IRQHandler+0xe18>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d045      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80040f8 <HAL_DMA_IRQHandler+0xe1c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d040      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <HAL_DMA_IRQHandler+0xe20>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d03b      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3b      	ldr	r2, [pc, #236]	@ (8004100 <HAL_DMA_IRQHandler+0xe24>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d036      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a39      	ldr	r2, [pc, #228]	@ (8004104 <HAL_DMA_IRQHandler+0xe28>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d031      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a38      	ldr	r2, [pc, #224]	@ (8004108 <HAL_DMA_IRQHandler+0xe2c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d02c      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a36      	ldr	r2, [pc, #216]	@ (800410c <HAL_DMA_IRQHandler+0xe30>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d027      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a35      	ldr	r2, [pc, #212]	@ (8004110 <HAL_DMA_IRQHandler+0xe34>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <HAL_DMA_IRQHandler+0xe38>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01d      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <HAL_DMA_IRQHandler+0xe3c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a30      	ldr	r2, [pc, #192]	@ (800411c <HAL_DMA_IRQHandler+0xe40>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2f      	ldr	r2, [pc, #188]	@ (8004120 <HAL_DMA_IRQHandler+0xe44>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <HAL_DMA_IRQHandler+0xe48>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2c      	ldr	r2, [pc, #176]	@ (8004128 <HAL_DMA_IRQHandler+0xe4c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_DMA_IRQHandler+0xdaa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2a      	ldr	r2, [pc, #168]	@ (800412c <HAL_DMA_IRQHandler+0xe50>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d108      	bne.n	8004098 <HAL_DMA_IRQHandler+0xdbc>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 021c 	bic.w	r2, r2, #28
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e007      	b.n	80040a8 <HAL_DMA_IRQHandler+0xdcc>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 020e 	bic.w	r2, r2, #14
 80040a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2201      	movs	r2, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	e004      	b.n	80040ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040ea:	3728      	adds	r7, #40	@ 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8

08004130 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7f      	ldr	r2, [pc, #508]	@ (800434c <DMA_SetConfig+0x21c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d072      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a7d      	ldr	r2, [pc, #500]	@ (8004350 <DMA_SetConfig+0x220>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d06d      	beq.n	800423a <DMA_SetConfig+0x10a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7c      	ldr	r2, [pc, #496]	@ (8004354 <DMA_SetConfig+0x224>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d068      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a7a      	ldr	r2, [pc, #488]	@ (8004358 <DMA_SetConfig+0x228>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d063      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a79      	ldr	r2, [pc, #484]	@ (800435c <DMA_SetConfig+0x22c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d05e      	beq.n	800423a <DMA_SetConfig+0x10a>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a77      	ldr	r2, [pc, #476]	@ (8004360 <DMA_SetConfig+0x230>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d059      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a76      	ldr	r2, [pc, #472]	@ (8004364 <DMA_SetConfig+0x234>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d054      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a74      	ldr	r2, [pc, #464]	@ (8004368 <DMA_SetConfig+0x238>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04f      	beq.n	800423a <DMA_SetConfig+0x10a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a73      	ldr	r2, [pc, #460]	@ (800436c <DMA_SetConfig+0x23c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a71      	ldr	r2, [pc, #452]	@ (8004370 <DMA_SetConfig+0x240>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a70      	ldr	r2, [pc, #448]	@ (8004374 <DMA_SetConfig+0x244>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004378 <DMA_SetConfig+0x248>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a6d      	ldr	r2, [pc, #436]	@ (800437c <DMA_SetConfig+0x24c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004380 <DMA_SetConfig+0x250>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6a      	ldr	r2, [pc, #424]	@ (8004384 <DMA_SetConfig+0x254>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a68      	ldr	r2, [pc, #416]	@ (8004388 <DMA_SetConfig+0x258>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a67      	ldr	r2, [pc, #412]	@ (800438c <DMA_SetConfig+0x25c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a65      	ldr	r2, [pc, #404]	@ (8004390 <DMA_SetConfig+0x260>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <DMA_SetConfig+0x10a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a64      	ldr	r2, [pc, #400]	@ (8004394 <DMA_SetConfig+0x264>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a62      	ldr	r2, [pc, #392]	@ (8004398 <DMA_SetConfig+0x268>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a61      	ldr	r2, [pc, #388]	@ (800439c <DMA_SetConfig+0x26c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <DMA_SetConfig+0x10a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5f      	ldr	r2, [pc, #380]	@ (80043a0 <DMA_SetConfig+0x270>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a5e      	ldr	r2, [pc, #376]	@ (80043a4 <DMA_SetConfig+0x274>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <DMA_SetConfig+0x10a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5c      	ldr	r2, [pc, #368]	@ (80043a8 <DMA_SetConfig+0x278>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <DMA_SetConfig+0x10e>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <DMA_SetConfig+0x110>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800424c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800425e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	@ (800434c <DMA_SetConfig+0x21c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d04a      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <DMA_SetConfig+0x220>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d045      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a36      	ldr	r2, [pc, #216]	@ (8004354 <DMA_SetConfig+0x224>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d040      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <DMA_SetConfig+0x228>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d03b      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a33      	ldr	r2, [pc, #204]	@ (800435c <DMA_SetConfig+0x22c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d036      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a32      	ldr	r2, [pc, #200]	@ (8004360 <DMA_SetConfig+0x230>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d031      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	@ (8004364 <DMA_SetConfig+0x234>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02c      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <DMA_SetConfig+0x238>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d027      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <DMA_SetConfig+0x23c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d022      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <DMA_SetConfig+0x240>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01d      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004374 <DMA_SetConfig+0x244>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a29      	ldr	r2, [pc, #164]	@ (8004378 <DMA_SetConfig+0x248>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a27      	ldr	r2, [pc, #156]	@ (800437c <DMA_SetConfig+0x24c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a26      	ldr	r2, [pc, #152]	@ (8004380 <DMA_SetConfig+0x250>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a24      	ldr	r2, [pc, #144]	@ (8004384 <DMA_SetConfig+0x254>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <DMA_SetConfig+0x1d0>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a23      	ldr	r2, [pc, #140]	@ (8004388 <DMA_SetConfig+0x258>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <DMA_SetConfig+0x1d4>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <DMA_SetConfig+0x1d6>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d059      	beq.n	80043be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	223f      	movs	r2, #63	@ 0x3f
 8004314:	409a      	lsls	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004328:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d138      	bne.n	80043ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800434a:	e086      	b.n	800445a <DMA_SetConfig+0x32a>
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
 800438c:	58025408 	.word	0x58025408
 8004390:	5802541c 	.word	0x5802541c
 8004394:	58025430 	.word	0x58025430
 8004398:	58025444 	.word	0x58025444
 800439c:	58025458 	.word	0x58025458
 80043a0:	5802546c 	.word	0x5802546c
 80043a4:	58025480 	.word	0x58025480
 80043a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
}
 80043bc:	e04d      	b.n	800445a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a29      	ldr	r2, [pc, #164]	@ (8004468 <DMA_SetConfig+0x338>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a27      	ldr	r2, [pc, #156]	@ (800446c <DMA_SetConfig+0x33c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <DMA_SetConfig+0x340>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <DMA_SetConfig+0x344>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <DMA_SetConfig+0x348>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a21      	ldr	r2, [pc, #132]	@ (800447c <DMA_SetConfig+0x34c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <DMA_SetConfig+0x2de>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <DMA_SetConfig+0x350>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <DMA_SetConfig+0x2de>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <DMA_SetConfig+0x354>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <DMA_SetConfig+0x2e2>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <DMA_SetConfig+0x2e4>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d108      	bne.n	800444a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	60da      	str	r2, [r3, #12]
}
 8004448:	e007      	b.n	800445a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58025408 	.word	0x58025408
 800446c:	5802541c 	.word	0x5802541c
 8004470:	58025430 	.word	0x58025430
 8004474:	58025444 	.word	0x58025444
 8004478:	58025458 	.word	0x58025458
 800447c:	5802546c 	.word	0x5802546c
 8004480:	58025480 	.word	0x58025480
 8004484:	58025494 	.word	0x58025494

08004488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a42      	ldr	r2, [pc, #264]	@ (80045a0 <DMA_CalcBaseAndBitshift+0x118>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04a      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a41      	ldr	r2, [pc, #260]	@ (80045a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d045      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3f      	ldr	r2, [pc, #252]	@ (80045a8 <DMA_CalcBaseAndBitshift+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d040      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3e      	ldr	r2, [pc, #248]	@ (80045ac <DMA_CalcBaseAndBitshift+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d03b      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3c      	ldr	r2, [pc, #240]	@ (80045b0 <DMA_CalcBaseAndBitshift+0x128>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d036      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3b      	ldr	r2, [pc, #236]	@ (80045b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d031      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a39      	ldr	r2, [pc, #228]	@ (80045b8 <DMA_CalcBaseAndBitshift+0x130>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02c      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a38      	ldr	r2, [pc, #224]	@ (80045bc <DMA_CalcBaseAndBitshift+0x134>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d027      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a36      	ldr	r2, [pc, #216]	@ (80045c0 <DMA_CalcBaseAndBitshift+0x138>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d01d      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a33      	ldr	r2, [pc, #204]	@ (80045c8 <DMA_CalcBaseAndBitshift+0x140>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a32      	ldr	r2, [pc, #200]	@ (80045cc <DMA_CalcBaseAndBitshift+0x144>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <DMA_CalcBaseAndBitshift+0x148>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2d      	ldr	r2, [pc, #180]	@ (80045d8 <DMA_CalcBaseAndBitshift+0x150>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xa8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2c      	ldr	r2, [pc, #176]	@ (80045dc <DMA_CalcBaseAndBitshift+0x154>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <DMA_CalcBaseAndBitshift+0xac>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <DMA_CalcBaseAndBitshift+0xae>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d024      	beq.n	8004584 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3b10      	subs	r3, #16
 8004542:	4a27      	ldr	r2, [pc, #156]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x158>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	4a24      	ldr	r2, [pc, #144]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	461a      	mov	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d908      	bls.n	8004574 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	4b1f      	ldr	r3, [pc, #124]	@ (80045e8 <DMA_CalcBaseAndBitshift+0x160>)
 800456a:	4013      	ands	r3, r2
 800456c:	1d1a      	adds	r2, r3, #4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	@ 0x58
 8004572:	e00d      	b.n	8004590 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <DMA_CalcBaseAndBitshift+0x160>)
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6593      	str	r3, [r2, #88]	@ 0x58
 8004582:	e005      	b.n	8004590 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8
 80045e0:	aaaaaaab 	.word	0xaaaaaaab
 80045e4:	0800c334 	.word	0x0800c334
 80045e8:	fffffc00 	.word	0xfffffc00

080045ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d120      	bne.n	8004642 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	2b03      	cmp	r3, #3
 8004606:	d858      	bhi.n	80046ba <DMA_CheckFifoParam+0xce>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <DMA_CheckFifoParam+0x24>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004621 	.word	0x08004621
 800461c:	080046bb 	.word	0x080046bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d048      	beq.n	80046be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004630:	e045      	b.n	80046be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800463a:	d142      	bne.n	80046c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004640:	e03f      	b.n	80046c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464a:	d123      	bne.n	8004694 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b03      	cmp	r3, #3
 8004652:	d838      	bhi.n	80046c6 <DMA_CheckFifoParam+0xda>
 8004654:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <DMA_CheckFifoParam+0x70>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	08004673 	.word	0x08004673
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004685 	.word	0x08004685
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
        break;
 8004670:	e030      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d025      	beq.n	80046ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004682:	e022      	b.n	80046ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800468c:	d11f      	bne.n	80046ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004692:	e01c      	b.n	80046ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	2b02      	cmp	r3, #2
 800469a:	d902      	bls.n	80046a2 <DMA_CheckFifoParam+0xb6>
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046a0:	e018      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
        break;
 80046a6:	e015      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
    break;
 80046b8:	e00b      	b.n	80046d2 <DMA_CheckFifoParam+0xe6>
        break;
 80046ba:	bf00      	nop
 80046bc:	e00a      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        break;
 80046be:	bf00      	nop
 80046c0:	e008      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        break;
 80046c2:	bf00      	nop
 80046c4:	e006      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        break;
 80046c6:	bf00      	nop
 80046c8:	e004      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
        break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
    break;
 80046d2:	bf00      	nop
    }
  }

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop

080046e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a38      	ldr	r2, [pc, #224]	@ (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01d      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a33      	ldr	r2, [pc, #204]	@ (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a30      	ldr	r2, [pc, #192]	@ (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	3b08      	subs	r3, #8
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4b26      	ldr	r3, [pc, #152]	@ (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	461a      	mov	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a24      	ldr	r2, [pc, #144]	@ (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004770:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2201      	movs	r2, #1
 800477a:	409a      	lsls	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004780:	e024      	b.n	80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3b10      	subs	r3, #16
 800478a:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d806      	bhi.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a1b      	ldr	r2, [pc, #108]	@ (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d902      	bls.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3308      	adds	r3, #8
 80047a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4b18      	ldr	r3, [pc, #96]	@ (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	461a      	mov	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a16      	ldr	r2, [pc, #88]	@ (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	58025408 	.word	0x58025408
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025430 	.word	0x58025430
 80047e4:	58025444 	.word	0x58025444
 80047e8:	58025458 	.word	0x58025458
 80047ec:	5802546c 	.word	0x5802546c
 80047f0:	58025480 	.word	0x58025480
 80047f4:	58025494 	.word	0x58025494
 80047f8:	cccccccd 	.word	0xcccccccd
 80047fc:	16009600 	.word	0x16009600
 8004800:	58025880 	.word	0x58025880
 8004804:	aaaaaaab 	.word	0xaaaaaaab
 8004808:	400204b8 	.word	0x400204b8
 800480c:	4002040f 	.word	0x4002040f
 8004810:	10008200 	.word	0x10008200
 8004814:	40020880 	.word	0x40020880

08004818 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d04a      	beq.n	80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d847      	bhi.n	80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a25      	ldr	r2, [pc, #148]	@ (80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d01d      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	@ (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1c      	ldr	r2, [pc, #112]	@ (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004888:	2300      	movs	r3, #0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80048a2:	e009      	b.n	80048b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a11      	ldr	r2, [pc, #68]	@ (80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	58025408 	.word	0x58025408
 80048d4:	5802541c 	.word	0x5802541c
 80048d8:	58025430 	.word	0x58025430
 80048dc:	58025444 	.word	0x58025444
 80048e0:	58025458 	.word	0x58025458
 80048e4:	5802546c 	.word	0x5802546c
 80048e8:	58025480 	.word	0x58025480
 80048ec:	58025494 	.word	0x58025494
 80048f0:	1600963f 	.word	0x1600963f
 80048f4:	58025940 	.word	0x58025940
 80048f8:	1000823f 	.word	0x1000823f
 80048fc:	40020940 	.word	0x40020940

08004900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800490e:	4b86      	ldr	r3, [pc, #536]	@ (8004b28 <HAL_GPIO_Init+0x228>)
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004912:	e18c      	b.n	8004c2e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 817e 	beq.w	8004c28 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d005      	beq.n	8004944 <HAL_GPIO_Init+0x44>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d130      	bne.n	80049a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800497a:	2201      	movs	r2, #1
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0201 	and.w	r2, r3, #1
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d017      	beq.n	80049e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	69b9      	ldr	r1, [r7, #24]
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80d8 	beq.w	8004c28 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a78:	4b2c      	ldr	r3, [pc, #176]	@ (8004b2c <HAL_GPIO_Init+0x22c>)
 8004a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <HAL_GPIO_Init+0x22c>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a88:	4b28      	ldr	r3, [pc, #160]	@ (8004b2c <HAL_GPIO_Init+0x22c>)
 8004a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a96:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <HAL_GPIO_Init+0x230>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_GPIO_Init+0x234>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04a      	beq.n	8004b58 <HAL_GPIO_Init+0x258>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_GPIO_Init+0x238>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02b      	beq.n	8004b22 <HAL_GPIO_Init+0x222>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <HAL_GPIO_Init+0x23c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d025      	beq.n	8004b1e <HAL_GPIO_Init+0x21e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <HAL_GPIO_Init+0x240>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <HAL_GPIO_Init+0x21a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_GPIO_Init+0x244>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d019      	beq.n	8004b16 <HAL_GPIO_Init+0x216>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <HAL_GPIO_Init+0x248>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_GPIO_Init+0x212>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HAL_GPIO_Init+0x24c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00d      	beq.n	8004b0e <HAL_GPIO_Init+0x20e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <HAL_GPIO_Init+0x250>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d007      	beq.n	8004b0a <HAL_GPIO_Init+0x20a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a15      	ldr	r2, [pc, #84]	@ (8004b54 <HAL_GPIO_Init+0x254>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d101      	bne.n	8004b06 <HAL_GPIO_Init+0x206>
 8004b02:	2309      	movs	r3, #9
 8004b04:	e029      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b06:	230a      	movs	r3, #10
 8004b08:	e027      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	e025      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b0e:	2306      	movs	r3, #6
 8004b10:	e023      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b12:	2305      	movs	r3, #5
 8004b14:	e021      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b16:	2304      	movs	r3, #4
 8004b18:	e01f      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e01d      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e01b      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e019      	b.n	8004b5a <HAL_GPIO_Init+0x25a>
 8004b26:	bf00      	nop
 8004b28:	58000080 	.word	0x58000080
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	58000400 	.word	0x58000400
 8004b34:	58020000 	.word	0x58020000
 8004b38:	58020400 	.word	0x58020400
 8004b3c:	58020800 	.word	0x58020800
 8004b40:	58020c00 	.word	0x58020c00
 8004b44:	58021000 	.word	0x58021000
 8004b48:	58021400 	.word	0x58021400
 8004b4c:	58021800 	.word	0x58021800
 8004b50:	58021c00 	.word	0x58021c00
 8004b54:	58022400 	.word	0x58022400
 8004b58:	2300      	movs	r3, #0
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	f002 0203 	and.w	r2, r2, #3
 8004b60:	0092      	lsls	r2, r2, #2
 8004b62:	4093      	lsls	r3, r2
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b6a:	4938      	ldr	r1, [pc, #224]	@ (8004c4c <HAL_GPIO_Init+0x34c>)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	3302      	adds	r3, #2
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f ae6b 	bne.w	8004914 <HAL_GPIO_Init+0x14>
  }
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	3724      	adds	r7, #36	@ 0x24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	58000400 	.word	0x58000400

08004c50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c5e:	4b72      	ldr	r3, [pc, #456]	@ (8004e28 <HAL_GPIO_DeInit+0x1d8>)
 8004c60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004c62:	e0d3      	b.n	8004e0c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004c64:	2201      	movs	r2, #1
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80c6 	beq.w	8004e06 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e2c <HAL_GPIO_DeInit+0x1dc>)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3302      	adds	r3, #2
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c86:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	220f      	movs	r2, #15
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a64      	ldr	r2, [pc, #400]	@ (8004e30 <HAL_GPIO_DeInit+0x1e0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d031      	beq.n	8004d08 <HAL_GPIO_DeInit+0xb8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a63      	ldr	r2, [pc, #396]	@ (8004e34 <HAL_GPIO_DeInit+0x1e4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02b      	beq.n	8004d04 <HAL_GPIO_DeInit+0xb4>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a62      	ldr	r2, [pc, #392]	@ (8004e38 <HAL_GPIO_DeInit+0x1e8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d025      	beq.n	8004d00 <HAL_GPIO_DeInit+0xb0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a61      	ldr	r2, [pc, #388]	@ (8004e3c <HAL_GPIO_DeInit+0x1ec>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d01f      	beq.n	8004cfc <HAL_GPIO_DeInit+0xac>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a60      	ldr	r2, [pc, #384]	@ (8004e40 <HAL_GPIO_DeInit+0x1f0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d019      	beq.n	8004cf8 <HAL_GPIO_DeInit+0xa8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8004e44 <HAL_GPIO_DeInit+0x1f4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_GPIO_DeInit+0xa4>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a5e      	ldr	r2, [pc, #376]	@ (8004e48 <HAL_GPIO_DeInit+0x1f8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_GPIO_DeInit+0xa0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_GPIO_DeInit+0x1fc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <HAL_GPIO_DeInit+0x9c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a5c      	ldr	r2, [pc, #368]	@ (8004e50 <HAL_GPIO_DeInit+0x200>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <HAL_GPIO_DeInit+0x98>
 8004ce4:	2309      	movs	r3, #9
 8004ce6:	e010      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004ce8:	230a      	movs	r3, #10
 8004cea:	e00e      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004cec:	2307      	movs	r3, #7
 8004cee:	e00c      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004cf0:	2306      	movs	r3, #6
 8004cf2:	e00a      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004cf4:	2305      	movs	r3, #5
 8004cf6:	e008      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	e006      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e004      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e002      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <HAL_GPIO_DeInit+0xba>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	f002 0203 	and.w	r2, r2, #3
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	4093      	lsls	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d136      	bne.n	8004d88 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	401a      	ands	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	401a      	ands	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d44:	4013      	ands	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d56:	4013      	ands	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d6a:	4a30      	ldr	r2, [pc, #192]	@ (8004e2c <HAL_GPIO_DeInit+0x1dc>)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	482c      	ldr	r0, [pc, #176]	@ (8004e2c <HAL_GPIO_DeInit+0x1dc>)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	089b      	lsrs	r3, r3, #2
 8004d80:	400a      	ands	r2, r1
 8004d82:	3302      	adds	r3, #2
 8004d84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2103      	movs	r1, #3
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	08da      	lsrs	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3208      	adds	r2, #8
 8004da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	220f      	movs	r2, #15
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	08d2      	lsrs	r2, r2, #3
 8004dbc:	4019      	ands	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3208      	adds	r2, #8
 8004dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2103      	movs	r1, #3
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	2101      	movs	r1, #1
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2103      	movs	r1, #3
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	401a      	ands	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f af25 	bne.w	8004c64 <HAL_GPIO_DeInit+0x14>
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	58000080 	.word	0x58000080
 8004e2c:	58000400 	.word	0x58000400
 8004e30:	58020000 	.word	0x58020000
 8004e34:	58020400 	.word	0x58020400
 8004e38:	58020800 	.word	0x58020800
 8004e3c:	58020c00 	.word	0x58020c00
 8004e40:	58021000 	.word	0x58021000
 8004e44:	58021400 	.word	0x58021400
 8004e48:	58021800 	.word	0x58021800
 8004e4c:	58021c00 	.word	0x58021c00
 8004e50:	58022400 	.word	0x58022400

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e70:	e003      	b.n	8004e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	041a      	lsls	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f005 fd03 	bl	800a8b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ec8:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <HAL_PWR_EnterSLEEPMode+0x30>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a07      	ldr	r2, [pc, #28]	@ (8004eec <HAL_PWR_EnterSLEEPMode+0x30>)
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004eda:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004edc:	e000      	b.n	8004ee0 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004ede:	bf20      	wfe
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d00a      	beq.n	8004f1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f04:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e01f      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e01d      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f1a:	4b11      	ldr	r3, [pc, #68]	@ (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	490f      	ldr	r1, [pc, #60]	@ (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f2a:	f7fc fb93 	bl	8001654 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f30:	e009      	b.n	8004f46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f32:	f7fc fb8f 	bl	8001654 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f40:	d901      	bls.n	8004f46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e007      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f52:	d1ee      	bne.n	8004f32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	58024800 	.word	0x58024800

08004f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08c      	sub	sp, #48	@ 0x30
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e3c8      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8087 	beq.w	8005092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f84:	4b88      	ldr	r3, [pc, #544]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f8e:	4b86      	ldr	r3, [pc, #536]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d007      	beq.n	8004faa <HAL_RCC_OscConfig+0x46>
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	2b18      	cmp	r3, #24
 8004f9e:	d110      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5e>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004faa:	4b7f      	ldr	r3, [pc, #508]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d06c      	beq.n	8005090 <HAL_RCC_OscConfig+0x12c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d168      	bne.n	8005090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e3a2      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x76>
 8004fcc:	4b76      	ldr	r3, [pc, #472]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a75      	ldr	r2, [pc, #468]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e02e      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x98>
 8004fe2:	4b71      	ldr	r3, [pc, #452]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a70      	ldr	r2, [pc, #448]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b6e      	ldr	r3, [pc, #440]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6d      	ldr	r2, [pc, #436]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8004ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0xbc>
 8005006:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a67      	ldr	r2, [pc, #412]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b65      	ldr	r3, [pc, #404]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a64      	ldr	r2, [pc, #400]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8005020:	4b61      	ldr	r3, [pc, #388]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a60      	ldr	r2, [pc, #384]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b5e      	ldr	r3, [pc, #376]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5d      	ldr	r2, [pc, #372]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fc fb08 	bl	8001654 <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fc fb04 	bl	8001654 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e356      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800505a:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xe4>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc faf4 	bl	8001654 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fc faf0 	bl	8001654 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e342      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005082:	4b49      	ldr	r3, [pc, #292]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x10c>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 808c 	beq.w	80051b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a0:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050aa:	4b3f      	ldr	r3, [pc, #252]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_RCC_OscConfig+0x162>
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	2b18      	cmp	r3, #24
 80050ba:	d137      	bne.n	800512c <HAL_RCC_OscConfig+0x1c8>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d132      	bne.n	800512c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c6:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x17a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e314      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050de:	4b32      	ldr	r3, [pc, #200]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 0219 	bic.w	r2, r3, #25
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	492f      	ldr	r1, [pc, #188]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc fab0 	bl	8001654 <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fc faac 	bl	8001654 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e2fe      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	4920      	ldr	r1, [pc, #128]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512a:	e045      	b.n	80051b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d026      	beq.n	8005182 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005134:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 0219 	bic.w	r2, r3, #25
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4919      	ldr	r1, [pc, #100]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fc fa85 	bl	8001654 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514e:	f7fc fa81 	bl	8001654 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e2d3      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005160:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	490b      	ldr	r1, [pc, #44]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	e01a      	b.n	80051b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005182:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a08      	ldr	r2, [pc, #32]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fc fa61 	bl	8001654 <HAL_GetTick>
 8005192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005196:	f7fc fa5d 	bl	8001654 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d903      	bls.n	80051ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e2af      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
 80051a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051ac:	4b96      	ldr	r3, [pc, #600]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d06a      	beq.n	800529a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c4:	4b90      	ldr	r3, [pc, #576]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d007      	beq.n	80051ea <HAL_RCC_OscConfig+0x286>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b18      	cmp	r3, #24
 80051de:	d11b      	bne.n	8005218 <HAL_RCC_OscConfig+0x2b4>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ea:	4b87      	ldr	r3, [pc, #540]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x29e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	2b80      	cmp	r3, #128	@ 0x80
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e282      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005202:	4b81      	ldr	r3, [pc, #516]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	497d      	ldr	r1, [pc, #500]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005216:	e040      	b.n	800529a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005220:	4b79      	ldr	r3, [pc, #484]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a78      	ldr	r2, [pc, #480]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fc fa12 	bl	8001654 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005234:	f7fc fa0e 	bl	8001654 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e260      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005246:	4b70      	ldr	r3, [pc, #448]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005252:	4b6d      	ldr	r3, [pc, #436]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	061b      	lsls	r3, r3, #24
 8005260:	4969      	ldr	r1, [pc, #420]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	60cb      	str	r3, [r1, #12]
 8005266:	e018      	b.n	800529a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005268:	4b67      	ldr	r3, [pc, #412]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a66      	ldr	r2, [pc, #408]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800526e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc f9ee 	bl	8001654 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800527c:	f7fc f9ea 	bl	8001654 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e23c      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800528e:	4b5e      	ldr	r3, [pc, #376]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d036      	beq.n	8005314 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d019      	beq.n	80052e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ae:	4b56      	ldr	r3, [pc, #344]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b2:	4a55      	ldr	r2, [pc, #340]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fc f9cb 	bl	8001654 <HAL_GetTick>
 80052be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fc f9c7 	bl	8001654 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e219      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80052d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x35e>
 80052e0:	e018      	b.n	8005314 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e2:	4b49      	ldr	r3, [pc, #292]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	4a48      	ldr	r2, [pc, #288]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fc f9b1 	bl	8001654 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fc f9ad 	bl	8001654 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e1ff      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005308:	4b3f      	ldr	r3, [pc, #252]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800530a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d036      	beq.n	800538e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005328:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a36      	ldr	r2, [pc, #216]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800532e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005332:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005334:	f7fc f98e 	bl	8001654 <HAL_GetTick>
 8005338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800533c:	f7fc f98a 	bl	8001654 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1dc      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800534e:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x3d8>
 800535a:	e018      	b.n	800538e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800535c:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a29      	ldr	r2, [pc, #164]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005366:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005368:	f7fc f974 	bl	8001654 <HAL_GetTick>
 800536c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005370:	f7fc f970 	bl	8001654 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1c2      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005382:	4b21      	ldr	r3, [pc, #132]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8086 	beq.w	80054a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x4a8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1a      	ldr	r2, [pc, #104]	@ (800540c <HAL_RCC_OscConfig+0x4a8>)
 80053a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053a8:	f7fc f954 	bl	8001654 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b0:	f7fc f950 	bl	8001654 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	@ 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1a2      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <HAL_RCC_OscConfig+0x4a8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x480>
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053da:	4a0b      	ldr	r2, [pc, #44]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e2:	e032      	b.n	800544a <HAL_RCC_OscConfig+0x4e6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <HAL_RCC_OscConfig+0x4ac>
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a05      	ldr	r2, [pc, #20]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f8:	4b03      	ldr	r3, [pc, #12]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	4a02      	ldr	r2, [pc, #8]	@ (8005408 <HAL_RCC_OscConfig+0x4a4>)
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	6713      	str	r3, [r2, #112]	@ 0x70
 8005404:	e021      	b.n	800544a <HAL_RCC_OscConfig+0x4e6>
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400
 800540c:	58024800 	.word	0x58024800
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b05      	cmp	r3, #5
 8005416:	d10c      	bne.n	8005432 <HAL_RCC_OscConfig+0x4ce>
 8005418:	4b83      	ldr	r3, [pc, #524]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	4a82      	ldr	r2, [pc, #520]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	6713      	str	r3, [r2, #112]	@ 0x70
 8005424:	4b80      	ldr	r3, [pc, #512]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	4a7f      	ldr	r2, [pc, #508]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005430:	e00b      	b.n	800544a <HAL_RCC_OscConfig+0x4e6>
 8005432:	4b7d      	ldr	r3, [pc, #500]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005436:	4a7c      	ldr	r2, [pc, #496]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	6713      	str	r3, [r2, #112]	@ 0x70
 800543e:	4b7a      	ldr	r3, [pc, #488]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	4a79      	ldr	r2, [pc, #484]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d015      	beq.n	800547e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fc f8ff 	bl	8001654 <HAL_GetTick>
 8005456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc f8fb 	bl	8001654 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e14b      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005470:	4b6d      	ldr	r3, [pc, #436]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCC_OscConfig+0x4f6>
 800547c:	e014      	b.n	80054a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547e:	f7fc f8e9 	bl	8001654 <HAL_GetTick>
 8005482:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005484:	e00a      	b.n	800549c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fc f8e5 	bl	8001654 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e135      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800549c:	4b62      	ldr	r3, [pc, #392]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ee      	bne.n	8005486 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 812a 	beq.w	8005706 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ba:	2b18      	cmp	r3, #24
 80054bc:	f000 80ba 	beq.w	8005634 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f040 8095 	bne.w	80055f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ca:	4b57      	ldr	r3, [pc, #348]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80054d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc f8bd 	bl	8001654 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054de:	f7fc f8b9 	bl	8001654 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e10b      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80054fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005500:	4b4a      	ldr	r3, [pc, #296]	@ (800562c <HAL_RCC_OscConfig+0x6c8>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	430a      	orrs	r2, r1
 8005510:	4945      	ldr	r1, [pc, #276]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005512:	4313      	orrs	r3, r2
 8005514:	628b      	str	r3, [r1, #40]	@ 0x28
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	3b01      	subs	r3, #1
 800551c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	3b01      	subs	r3, #1
 8005526:	025b      	lsls	r3, r3, #9
 8005528:	b29b      	uxth	r3, r3
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	3b01      	subs	r3, #1
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	3b01      	subs	r3, #1
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005546:	4938      	ldr	r1, [pc, #224]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005548:	4313      	orrs	r3, r2
 800554a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800554c:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	4a35      	ldr	r2, [pc, #212]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005558:	4b33      	ldr	r3, [pc, #204]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800555a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555c:	4b34      	ldr	r3, [pc, #208]	@ (8005630 <HAL_RCC_OscConfig+0x6cc>)
 800555e:	4013      	ands	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005564:	00d2      	lsls	r2, r2, #3
 8005566:	4930      	ldr	r1, [pc, #192]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005568:	4313      	orrs	r3, r2
 800556a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800556c:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	f023 020c 	bic.w	r2, r3, #12
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	492b      	ldr	r1, [pc, #172]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800557e:	4b2a      	ldr	r3, [pc, #168]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	f023 0202 	bic.w	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	4927      	ldr	r1, [pc, #156]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800558c:	4313      	orrs	r3, r2
 800558e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005590:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 8005596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559c:	4b22      	ldr	r3, [pc, #136]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c0:	4b19      	ldr	r3, [pc, #100]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fc f842 	bl	8001654 <HAL_GetTick>
 80055d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fc f83e 	bl	8001654 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e090      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055e6:	4b10      	ldr	r3, [pc, #64]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x670>
 80055f2:	e088      	b.n	8005706 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 80055fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc f828 	bl	8001654 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fc f824 	bl	8001654 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e076      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800561a:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_RCC_OscConfig+0x6c4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x6a4>
 8005626:	e06e      	b.n	8005706 <HAL_RCC_OscConfig+0x7a2>
 8005628:	58024400 	.word	0x58024400
 800562c:	fffffc0c 	.word	0xfffffc0c
 8005630:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005634:	4b36      	ldr	r3, [pc, #216]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800563a:	4b35      	ldr	r3, [pc, #212]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	2b01      	cmp	r3, #1
 8005646:	d031      	beq.n	80056ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f003 0203 	and.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d12a      	bne.n	80056ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d122      	bne.n	80056ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d11a      	bne.n	80056ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005682:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d111      	bne.n	80056ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005694:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d108      	bne.n	80056ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e02b      	b.n	8005708 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056b0:	4b17      	ldr	r3, [pc, #92]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b4:	08db      	lsrs	r3, r3, #3
 80056b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d01f      	beq.n	8005706 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056c6:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a11      	ldr	r2, [pc, #68]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056d2:	f7fb ffbf 	bl	8001654 <HAL_GetTick>
 80056d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056d8:	bf00      	nop
 80056da:	f7fb ffbb 	bl	8001654 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d0f9      	beq.n	80056da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <HAL_RCC_OscConfig+0x7b0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056f2:	00d2      	lsls	r2, r2, #3
 80056f4:	4906      	ldr	r1, [pc, #24]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056fa:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	4a04      	ldr	r2, [pc, #16]	@ (8005710 <HAL_RCC_OscConfig+0x7ac>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3730      	adds	r7, #48	@ 0x30
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	58024400 	.word	0x58024400
 8005714:	ffff0007 	.word	0xffff0007

08005718 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e19c      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800572c:	4b8a      	ldr	r3, [pc, #552]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d910      	bls.n	800575c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b87      	ldr	r3, [pc, #540]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 020f 	bic.w	r2, r3, #15
 8005742:	4985      	ldr	r1, [pc, #532]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b83      	ldr	r3, [pc, #524]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e184      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	4b7b      	ldr	r3, [pc, #492]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005774:	429a      	cmp	r2, r3
 8005776:	d908      	bls.n	800578a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005778:	4b78      	ldr	r3, [pc, #480]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	4975      	ldr	r1, [pc, #468]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005786:	4313      	orrs	r3, r2
 8005788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	4b70      	ldr	r3, [pc, #448]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d908      	bls.n	80057b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057a6:	4b6d      	ldr	r3, [pc, #436]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	496a      	ldr	r1, [pc, #424]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d010      	beq.n	80057e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	4b64      	ldr	r3, [pc, #400]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d908      	bls.n	80057e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057d4:	4b61      	ldr	r3, [pc, #388]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	495e      	ldr	r1, [pc, #376]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057fe:	429a      	cmp	r2, r3
 8005800:	d908      	bls.n	8005814 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005802:	4b56      	ldr	r3, [pc, #344]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	4953      	ldr	r1, [pc, #332]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005810:	4313      	orrs	r3, r2
 8005812:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	4b4d      	ldr	r3, [pc, #308]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	429a      	cmp	r2, r3
 800582e:	d908      	bls.n	8005842 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005830:	4b4a      	ldr	r3, [pc, #296]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f023 020f 	bic.w	r2, r3, #15
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4947      	ldr	r1, [pc, #284]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800583e:	4313      	orrs	r3, r2
 8005840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d055      	beq.n	80058fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800584e:	4b43      	ldr	r3, [pc, #268]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4940      	ldr	r1, [pc, #256]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800585c:	4313      	orrs	r3, r2
 800585e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d107      	bne.n	8005878 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005868:	4b3c      	ldr	r3, [pc, #240]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d121      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0f6      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d107      	bne.n	8005890 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005880:	4b36      	ldr	r3, [pc, #216]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d115      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0ea      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005898:	4b30      	ldr	r3, [pc, #192]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0de      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058a8:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0d6      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058b8:	4b28      	ldr	r3, [pc, #160]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f023 0207 	bic.w	r2, r3, #7
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4925      	ldr	r1, [pc, #148]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ca:	f7fb fec3 	bl	8001654 <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d0:	e00a      	b.n	80058e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d2:	f7fb febf 	bl	8001654 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e0be      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e8:	4b1c      	ldr	r3, [pc, #112]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d1eb      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	4b14      	ldr	r3, [pc, #80]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	429a      	cmp	r2, r3
 8005914:	d208      	bcs.n	8005928 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005916:	4b11      	ldr	r3, [pc, #68]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f023 020f 	bic.w	r2, r3, #15
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	490e      	ldr	r1, [pc, #56]	@ (800595c <HAL_RCC_ClockConfig+0x244>)
 8005924:	4313      	orrs	r3, r2
 8005926:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d214      	bcs.n	8005960 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 020f 	bic.w	r2, r3, #15
 800593e:	4906      	ldr	r1, [pc, #24]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <HAL_RCC_ClockConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d005      	beq.n	8005960 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e086      	b.n	8005a66 <HAL_RCC_ClockConfig+0x34e>
 8005958:	52002000 	.word	0x52002000
 800595c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	4b3f      	ldr	r3, [pc, #252]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005978:	429a      	cmp	r2, r3
 800597a:	d208      	bcs.n	800598e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800597c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4939      	ldr	r1, [pc, #228]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 800598a:	4313      	orrs	r3, r2
 800598c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d010      	beq.n	80059bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	4b34      	ldr	r3, [pc, #208]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d208      	bcs.n	80059bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059aa:	4b31      	ldr	r3, [pc, #196]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	492e      	ldr	r1, [pc, #184]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	4b28      	ldr	r3, [pc, #160]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d208      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	4922      	ldr	r1, [pc, #136]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d208      	bcs.n	8005a18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a06:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4917      	ldr	r1, [pc, #92]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a18:	f000 f834 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b14      	ldr	r3, [pc, #80]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	0a1b      	lsrs	r3, r3, #8
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	4912      	ldr	r1, [pc, #72]	@ (8005a74 <HAL_RCC_ClockConfig+0x35c>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a36:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <HAL_RCC_ClockConfig+0x358>)
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a74 <HAL_RCC_ClockConfig+0x35c>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a78 <HAL_RCC_ClockConfig+0x360>)
 8005a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a50:	4a0a      	ldr	r2, [pc, #40]	@ (8005a7c <HAL_RCC_ClockConfig+0x364>)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a56:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <HAL_RCC_ClockConfig+0x368>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fb fdb0 	bl	80015c0 <HAL_InitTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	58024400 	.word	0x58024400
 8005a74:	0800c324 	.word	0x0800c324
 8005a78:	24000064 	.word	0x24000064
 8005a7c:	24000060 	.word	0x24000060
 8005a80:	24000068 	.word	0x24000068

08005a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	@ 0x24
 8005a88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a8a:	4bb3      	ldr	r3, [pc, #716]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a92:	2b18      	cmp	r3, #24
 8005a94:	f200 8155 	bhi.w	8005d42 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a98:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005b05 	.word	0x08005b05
 8005aa4:	08005d43 	.word	0x08005d43
 8005aa8:	08005d43 	.word	0x08005d43
 8005aac:	08005d43 	.word	0x08005d43
 8005ab0:	08005d43 	.word	0x08005d43
 8005ab4:	08005d43 	.word	0x08005d43
 8005ab8:	08005d43 	.word	0x08005d43
 8005abc:	08005d43 	.word	0x08005d43
 8005ac0:	08005b2b 	.word	0x08005b2b
 8005ac4:	08005d43 	.word	0x08005d43
 8005ac8:	08005d43 	.word	0x08005d43
 8005acc:	08005d43 	.word	0x08005d43
 8005ad0:	08005d43 	.word	0x08005d43
 8005ad4:	08005d43 	.word	0x08005d43
 8005ad8:	08005d43 	.word	0x08005d43
 8005adc:	08005d43 	.word	0x08005d43
 8005ae0:	08005b31 	.word	0x08005b31
 8005ae4:	08005d43 	.word	0x08005d43
 8005ae8:	08005d43 	.word	0x08005d43
 8005aec:	08005d43 	.word	0x08005d43
 8005af0:	08005d43 	.word	0x08005d43
 8005af4:	08005d43 	.word	0x08005d43
 8005af8:	08005d43 	.word	0x08005d43
 8005afc:	08005d43 	.word	0x08005d43
 8005b00:	08005b37 	.word	0x08005b37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b04:	4b94      	ldr	r3, [pc, #592]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b10:	4b91      	ldr	r3, [pc, #580]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a90      	ldr	r2, [pc, #576]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b22:	e111      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b24:	4b8d      	ldr	r3, [pc, #564]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b26:	61bb      	str	r3, [r7, #24]
      break;
 8005b28:	e10e      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b2c:	61bb      	str	r3, [r7, #24]
      break;
 8005b2e:	e10b      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b30:	4b8c      	ldr	r3, [pc, #560]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b32:	61bb      	str	r3, [r7, #24]
      break;
 8005b34:	e108      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b36:	4b88      	ldr	r3, [pc, #544]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b40:	4b85      	ldr	r3, [pc, #532]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b4c:	4b82      	ldr	r3, [pc, #520]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b56:	4b80      	ldr	r3, [pc, #512]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	08db      	lsrs	r3, r3, #3
 8005b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80e1 	beq.w	8005d3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f000 8083 	beq.w	8005c88 <HAL_RCC_GetSysClockFreq+0x204>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	f200 80a1 	bhi.w	8005ccc <HAL_RCC_GetSysClockFreq+0x248>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x114>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d056      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b96:	e099      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b98:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02d      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	4a6b      	ldr	r2, [pc, #428]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	4b62      	ldr	r3, [pc, #392]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005be2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bfe:	e087      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b51      	ldr	r3, [pc, #324]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c42:	e065      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b40      	ldr	r3, [pc, #256]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c86:	e043      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cca:	e021      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d14:	0a5b      	lsrs	r3, r3, #9
 8005d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d34:	ee17 3a90 	vmov	r3, s15
 8005d38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d3a:	e005      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
      break;
 8005d40:	e002      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d42:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d44:	61bb      	str	r3, [r7, #24]
      break;
 8005d46:	bf00      	nop
  }

  return sysclockfreq;
 8005d48:	69bb      	ldr	r3, [r7, #24]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3724      	adds	r7, #36	@ 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	03d09000 	.word	0x03d09000
 8005d60:	003d0900 	.word	0x003d0900
 8005d64:	007a1200 	.word	0x007a1200
 8005d68:	46000000 	.word	0x46000000
 8005d6c:	4c742400 	.word	0x4c742400
 8005d70:	4a742400 	.word	0x4a742400
 8005d74:	4af42400 	.word	0x4af42400

08005d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d7e:	f7ff fe81 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005d82:	4602      	mov	r2, r0
 8005d84:	4b10      	ldr	r3, [pc, #64]	@ (8005dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	490f      	ldr	r1, [pc, #60]	@ (8005dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8005d90:	5ccb      	ldrb	r3, [r1, r3]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	4a09      	ldr	r2, [pc, #36]	@ (8005dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	4a07      	ldr	r2, [pc, #28]	@ (8005dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005db4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005db6:	4a07      	ldr	r2, [pc, #28]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dbc:	4b04      	ldr	r3, [pc, #16]	@ (8005dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	0800c324 	.word	0x0800c324
 8005dd0:	24000064 	.word	0x24000064
 8005dd4:	24000060 	.word	0x24000060

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ddc:	f7ff ffcc 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4904      	ldr	r1, [pc, #16]	@ (8005e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	0800c324 	.word	0x0800c324

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e08:	f7ff ffb6 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4904      	ldr	r1, [pc, #16]	@ (8005e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	0800c324 	.word	0x0800c324

08005e30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e34:	b0c6      	sub	sp, #280	@ 0x118
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e54:	2500      	movs	r5, #0
 8005e56:	ea54 0305 	orrs.w	r3, r4, r5
 8005e5a:	d049      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e66:	d02f      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e6c:	d828      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e72:	d01a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e78:	d822      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e82:	d007      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e84:	e01c      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e86:	4bab      	ldr	r3, [pc, #684]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	4aaa      	ldr	r2, [pc, #680]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e92:	e01a      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e98:	3308      	adds	r3, #8
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fc25 	bl	80076ec <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ea8:	e00f      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eae:	3328      	adds	r3, #40	@ 0x28
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fccc 	bl	8007850 <RCCEx_PLL3_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ed2:	4b98      	ldr	r3, [pc, #608]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee0:	4a94      	ldr	r2, [pc, #592]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005efc:	f04f 0900 	mov.w	r9, #0
 8005f00:	ea58 0309 	orrs.w	r3, r8, r9
 8005f04:	d047      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d82a      	bhi.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f2d 	.word	0x08005f2d
 8005f1c:	08005f3b 	.word	0x08005f3b
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f6f 	.word	0x08005f6f
 8005f28:	08005f6f 	.word	0x08005f6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2c:	4b81      	ldr	r3, [pc, #516]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	4a80      	ldr	r2, [pc, #512]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f38:	e01a      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	3308      	adds	r3, #8
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fbd2 	bl	80076ec <RCCEx_PLL2_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4e:	e00f      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	3328      	adds	r3, #40	@ 0x28
 8005f56:	2100      	movs	r1, #0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fc79 	bl	8007850 <RCCEx_PLL3_Config>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f64:	e004      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f6c:	e000      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f78:	4b6e      	ldr	r3, [pc, #440]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7c:	f023 0107 	bic.w	r1, r3, #7
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	4a6b      	ldr	r2, [pc, #428]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005fa2:	f04f 0b00 	mov.w	fp, #0
 8005fa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005faa:	d05b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fb4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fb8:	d03b      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005fba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fbe:	d834      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fc4:	d037      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005fc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fca:	d82e      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005fd0:	d033      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005fd2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005fd6:	d828      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fdc:	d01a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe2:	d822      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fec:	d007      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005fee:	e01c      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b50      	ldr	r3, [pc, #320]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e01e      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	3308      	adds	r3, #8
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fb70 	bl	80076ec <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006012:	e013      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006018:	3328      	adds	r3, #40	@ 0x28
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fc17 	bl	8007850 <RCCEx_PLL3_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006028:	e008      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006030:	e004      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800603a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006044:	4b3b      	ldr	r3, [pc, #236]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006054:	4a37      	ldr	r2, [pc, #220]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006056:	430b      	orrs	r3, r1
 8006058:	6593      	str	r3, [r2, #88]	@ 0x58
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800607a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d05d      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800608c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006090:	d03b      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006092:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006096:	d834      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800609c:	d037      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800609e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060a2:	d82e      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060a8:	d033      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80060aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060ae:	d828      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060b4:	d01a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80060b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060ba:	d822      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80060c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060c4:	d007      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80060c6:	e01c      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a19      	ldr	r2, [pc, #100]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060d4:	e01e      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060da:	3308      	adds	r3, #8
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fb04 	bl	80076ec <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060ea:	e013      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	3328      	adds	r3, #40	@ 0x28
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fbab 	bl	8007850 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006100:	e008      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006108:	e004      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10d      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006120:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800612c:	4a01      	ldr	r2, [pc, #4]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800612e:	430b      	orrs	r3, r1
 8006130:	6593      	str	r3, [r2, #88]	@ 0x58
 8006132:	e005      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800614c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006156:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d03a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006166:	2b30      	cmp	r3, #48	@ 0x30
 8006168:	d01f      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800616a:	2b30      	cmp	r3, #48	@ 0x30
 800616c:	d819      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d00c      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d815      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d111      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617e:	4baa      	ldr	r3, [pc, #680]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	4aa9      	ldr	r2, [pc, #676]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	3308      	adds	r3, #8
 8006192:	2102      	movs	r1, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 faa9 	bl	80076ec <RCCEx_PLL2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061b8:	4b9b      	ldr	r3, [pc, #620]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c6:	4a98      	ldr	r2, [pc, #608]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d051      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006200:	d035      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006206:	d82e      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006208:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800620c:	d031      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800620e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006212:	d828      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006218:	d01a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621e:	d822      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006228:	d007      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800622a:	e01c      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622c:	4b7e      	ldr	r3, [pc, #504]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a7d      	ldr	r2, [pc, #500]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006238:	e01c      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623e:	3308      	adds	r3, #8
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f001 fa52 	bl	80076ec <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006254:	3328      	adds	r3, #40	@ 0x28
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f001 faf9 	bl	8007850 <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800627c:	4b6a      	ldr	r3, [pc, #424]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006280:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628a:	4a67      	ldr	r2, [pc, #412]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800628c:	430b      	orrs	r3, r1
 800628e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006290:	e003      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006296:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062aa:	2300      	movs	r3, #0
 80062ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d053      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062c4:	d033      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80062c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062ca:	d82c      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d0:	d02f      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80062d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d6:	d826      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062dc:	d02b      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80062de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062e2:	d820      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e8:	d012      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80062ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ee:	d81a      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d022      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f8:	d115      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fe:	3308      	adds	r3, #8
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f9f2 	bl	80076ec <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800630e:	e015      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	3328      	adds	r3, #40	@ 0x28
 8006316:	2101      	movs	r1, #1
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fa99 	bl	8007850 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006324:	e00a      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800632c:	e006      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800632e:	bf00      	nop
 8006330:	e004      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800633a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006344:	4b38      	ldr	r3, [pc, #224]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006352:	4a35      	ldr	r2, [pc, #212]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6513      	str	r3, [r2, #80]	@ 0x50
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800636e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006372:	2300      	movs	r3, #0
 8006374:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006378:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d058      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800638a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800638e:	d033      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006394:	d82c      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d02f      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d826      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063a6:	d02b      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80063a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063ac:	d820      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b2:	d012      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b8:	d81a      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d022      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c2:	d115      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	3308      	adds	r3, #8
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f98d 	bl	80076ec <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063d8:	e015      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	3328      	adds	r3, #40	@ 0x28
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa34 	bl	8007850 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063ee:	e00a      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063f6:	e006      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063f8:	bf00      	nop
 80063fa:	e004      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10e      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800640e:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800641e:	4a02      	ldr	r2, [pc, #8]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006420:	430b      	orrs	r3, r1
 8006422:	6593      	str	r3, [r2, #88]	@ 0x58
 8006424:	e006      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800644a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d037      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645e:	d00e      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006464:	d816      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d018      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800646a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800646e:	d111      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006470:	4bc4      	ldr	r3, [pc, #784]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	4ac3      	ldr	r2, [pc, #780]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800647a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800647c:	e00f      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006482:	3308      	adds	r3, #8
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f930 	bl	80076ec <RCCEx_PLL2_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006492:	e004      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064a6:	4bb7      	ldr	r3, [pc, #732]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b4:	4ab3      	ldr	r2, [pc, #716]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80064d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064de:	460b      	mov	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	d039      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d81c      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80064ee:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006505 	.word	0x08006505
 80064fc:	08006513 	.word	0x08006513
 8006500:	08006531 	.word	0x08006531
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b9f      	ldr	r3, [pc, #636]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	4a9e      	ldr	r2, [pc, #632]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006510:	e00f      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	3308      	adds	r3, #8
 8006518:	2102      	movs	r1, #2
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f8e6 	bl	80076ec <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006532:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800653a:	4b92      	ldr	r3, [pc, #584]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653e:	f023 0103 	bic.w	r1, r3, #3
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006548:	4a8e      	ldr	r2, [pc, #568]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654a:	430b      	orrs	r3, r1
 800654c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006564:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800656e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	f000 8099 	beq.w	80066ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657a:	4b83      	ldr	r3, [pc, #524]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a82      	ldr	r2, [pc, #520]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006586:	f7fb f865 	bl	8001654 <HAL_GetTick>
 800658a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800658e:	e00b      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006590:	f7fb f860 	bl	8001654 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b64      	cmp	r3, #100	@ 0x64
 800659e:	d903      	bls.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065a6:	e005      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a8:	4b77      	ldr	r3, [pc, #476]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ed      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80065b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d173      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065bc:	4b71      	ldr	r3, [pc, #452]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065c8:	4053      	eors	r3, r2
 80065ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d015      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065de:	4b69      	ldr	r3, [pc, #420]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e2:	4a68      	ldr	r2, [pc, #416]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ea:	4b66      	ldr	r3, [pc, #408]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ee:	4a65      	ldr	r2, [pc, #404]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065f6:	4a63      	ldr	r2, [pc, #396]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660a:	d118      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fb f822 	bl	8001654 <HAL_GetTick>
 8006610:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006614:	e00d      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006616:	f7fb f81d 	bl	8001654 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006620:	1ad2      	subs	r2, r2, r3
 8006622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006630:	e005      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006632:	4b54      	ldr	r3, [pc, #336]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0eb      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800663e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006642:	2b00      	cmp	r3, #0
 8006644:	d129      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006656:	d10e      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006658:	4b4a      	ldr	r3, [pc, #296]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006668:	091a      	lsrs	r2, r3, #4
 800666a:	4b48      	ldr	r3, [pc, #288]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800666c:	4013      	ands	r3, r2
 800666e:	4a45      	ldr	r2, [pc, #276]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6113      	str	r3, [r2, #16]
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006676:	4b43      	ldr	r3, [pc, #268]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	4a42      	ldr	r2, [pc, #264]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800667c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006680:	6113      	str	r3, [r2, #16]
 8006682:	4b40      	ldr	r3, [pc, #256]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006684:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800668e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006692:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006694:	430b      	orrs	r3, r1
 8006696:	6713      	str	r3, [r2, #112]	@ 0x70
 8006698:	e008      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800669a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800669e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80066a2:	e003      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f002 0301 	and.w	r3, r2, #1
 80066b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f000 808f 	beq.w	80067ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d4:	2b28      	cmp	r3, #40	@ 0x28
 80066d6:	d871      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80066d8:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	080067c5 	.word	0x080067c5
 80066e4:	080067bd 	.word	0x080067bd
 80066e8:	080067bd 	.word	0x080067bd
 80066ec:	080067bd 	.word	0x080067bd
 80066f0:	080067bd 	.word	0x080067bd
 80066f4:	080067bd 	.word	0x080067bd
 80066f8:	080067bd 	.word	0x080067bd
 80066fc:	080067bd 	.word	0x080067bd
 8006700:	08006791 	.word	0x08006791
 8006704:	080067bd 	.word	0x080067bd
 8006708:	080067bd 	.word	0x080067bd
 800670c:	080067bd 	.word	0x080067bd
 8006710:	080067bd 	.word	0x080067bd
 8006714:	080067bd 	.word	0x080067bd
 8006718:	080067bd 	.word	0x080067bd
 800671c:	080067bd 	.word	0x080067bd
 8006720:	080067a7 	.word	0x080067a7
 8006724:	080067bd 	.word	0x080067bd
 8006728:	080067bd 	.word	0x080067bd
 800672c:	080067bd 	.word	0x080067bd
 8006730:	080067bd 	.word	0x080067bd
 8006734:	080067bd 	.word	0x080067bd
 8006738:	080067bd 	.word	0x080067bd
 800673c:	080067bd 	.word	0x080067bd
 8006740:	080067c5 	.word	0x080067c5
 8006744:	080067bd 	.word	0x080067bd
 8006748:	080067bd 	.word	0x080067bd
 800674c:	080067bd 	.word	0x080067bd
 8006750:	080067bd 	.word	0x080067bd
 8006754:	080067bd 	.word	0x080067bd
 8006758:	080067bd 	.word	0x080067bd
 800675c:	080067bd 	.word	0x080067bd
 8006760:	080067c5 	.word	0x080067c5
 8006764:	080067bd 	.word	0x080067bd
 8006768:	080067bd 	.word	0x080067bd
 800676c:	080067bd 	.word	0x080067bd
 8006770:	080067bd 	.word	0x080067bd
 8006774:	080067bd 	.word	0x080067bd
 8006778:	080067bd 	.word	0x080067bd
 800677c:	080067bd 	.word	0x080067bd
 8006780:	080067c5 	.word	0x080067c5
 8006784:	58024400 	.word	0x58024400
 8006788:	58024800 	.word	0x58024800
 800678c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	3308      	adds	r3, #8
 8006796:	2101      	movs	r1, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f000 ffa7 	bl	80076ec <RCCEx_PLL2_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067a4:	e00f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	3328      	adds	r3, #40	@ 0x28
 80067ac:	2101      	movs	r1, #1
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 f84e 	bl	8007850 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067ce:	4bbf      	ldr	r3, [pc, #764]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067dc:	4abb      	ldr	r2, [pc, #748]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80067e2:	e003      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f002 0302 	and.w	r3, r2, #2
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	d041      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006812:	2b05      	cmp	r3, #5
 8006814:	d824      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006816:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006869 	.word	0x08006869
 8006820:	08006835 	.word	0x08006835
 8006824:	0800684b 	.word	0x0800684b
 8006828:	08006869 	.word	0x08006869
 800682c:	08006869 	.word	0x08006869
 8006830:	08006869 	.word	0x08006869
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	3308      	adds	r3, #8
 800683a:	2101      	movs	r1, #1
 800683c:	4618      	mov	r0, r3
 800683e:	f000 ff55 	bl	80076ec <RCCEx_PLL2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006848:	e00f      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	3328      	adds	r3, #40	@ 0x28
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fffc 	bl	8007850 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006872:	4b96      	ldr	r3, [pc, #600]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006876:	f023 0107 	bic.w	r1, r3, #7
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006880:	4a92      	ldr	r2, [pc, #584]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6553      	str	r3, [r2, #84]	@ 0x54
 8006886:	e003      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f002 0304 	and.w	r3, r2, #4
 800689c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d044      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d825      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80068bc:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	08006911 	.word	0x08006911
 80068c8:	080068dd 	.word	0x080068dd
 80068cc:	080068f3 	.word	0x080068f3
 80068d0:	08006911 	.word	0x08006911
 80068d4:	08006911 	.word	0x08006911
 80068d8:	08006911 	.word	0x08006911
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	3308      	adds	r3, #8
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ff01 	bl	80076ec <RCCEx_PLL2_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068f0:	e00f      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f6:	3328      	adds	r3, #40	@ 0x28
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 ffa8 	bl	8007850 <RCCEx_PLL3_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800691a:	4b6c      	ldr	r3, [pc, #432]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691e:	f023 0107 	bic.w	r1, r3, #7
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	4a68      	ldr	r2, [pc, #416]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800692c:	430b      	orrs	r3, r1
 800692e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006930:	e003      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f002 0320 	and.w	r3, r2, #32
 8006946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800694a:	2300      	movs	r3, #0
 800694c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006950:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006954:	460b      	mov	r3, r1
 8006956:	4313      	orrs	r3, r2
 8006958:	d055      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006966:	d033      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800696c:	d82c      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006972:	d02f      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006978:	d826      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800697a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800697e:	d02b      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006980:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006984:	d820      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698a:	d012      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800698c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006990:	d81a      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d022      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800699a:	d115      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	3308      	adds	r3, #8
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fea1 	bl	80076ec <RCCEx_PLL2_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069b0:	e015      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b6:	3328      	adds	r3, #40	@ 0x28
 80069b8:	2102      	movs	r1, #2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 ff48 	bl	8007850 <RCCEx_PLL3_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069c6:	e00a      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ce:	e006      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069d0:	bf00      	nop
 80069d2:	e004      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069d4:	bf00      	nop
 80069d6:	e002      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069d8:	bf00      	nop
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e6:	4b39      	ldr	r3, [pc, #228]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069f6:	4a35      	ldr	r2, [pc, #212]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d058      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a32:	d033      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006a34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a38:	d82c      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a44:	d826      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4a:	d02b      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a50:	d820      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a56:	d012      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a5c:	d81a      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d022      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a66:	d115      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fe3b 	bl	80076ec <RCCEx_PLL2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a7c:	e015      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	3328      	adds	r3, #40	@ 0x28
 8006a84:	2102      	movs	r1, #2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fee2 	bl	8007850 <RCCEx_PLL3_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a92:	e00a      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a9a:	e006      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e004      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006aa0:	bf00      	nop
 8006aa2:	e002      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006aa4:	bf00      	nop
 8006aa6:	e000      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ac2:	4a02      	ldr	r2, [pc, #8]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac8:	e006      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006aca:	bf00      	nop
 8006acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d055      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b04:	d033      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006b06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b0a:	d82c      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b10:	d02f      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b16:	d826      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b1c:	d02b      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006b1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b22:	d820      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b28:	d012      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b2e:	d81a      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d022      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b38:	d115      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	3308      	adds	r3, #8
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fdd2 	bl	80076ec <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b4e:	e015      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	3328      	adds	r3, #40	@ 0x28
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fe79 	bl	8007850 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b64:	e00a      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b6c:	e006      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b6e:	bf00      	nop
 8006b70:	e004      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b72:	bf00      	nop
 8006b74:	e002      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b84:	4ba0      	ldr	r3, [pc, #640]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b94:	4a9c      	ldr	r2, [pc, #624]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b9a:	e003      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f002 0308 	and.w	r3, r2, #8
 8006bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d01e      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	3328      	adds	r3, #40	@ 0x28
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fe38 	bl	8007850 <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006bec:	4b86      	ldr	r3, [pc, #536]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfc:	4a82      	ldr	r2, [pc, #520]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f002 0310 	and.w	r3, r2, #16
 8006c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d01e      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c2e:	d10c      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	3328      	adds	r3, #40	@ 0x28
 8006c36:	2102      	movs	r1, #2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fe09 	bl	8007850 <RCCEx_PLL3_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c5a:	4a6b      	ldr	r2, [pc, #428]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c6e:	2300      	movs	r3, #0
 8006c70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d03e      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c88:	d022      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c8e:	d81b      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c98:	d00b      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006c9a:	e015      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fd21 	bl	80076ec <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	3328      	adds	r3, #40	@ 0x28
 8006cb8:	2102      	movs	r1, #2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fdc8 	bl	8007850 <RCCEx_PLL3_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cda:	4b4b      	ldr	r3, [pc, #300]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cea:	4a47      	ldr	r2, [pc, #284]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d06:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d08:	2300      	movs	r3, #0
 8006d0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d22:	d01f      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d28:	d818      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d34:	d007      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006d36:	e011      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d38:	4b33      	ldr	r3, [pc, #204]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	4a32      	ldr	r2, [pc, #200]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d44:	e00f      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4a:	3328      	adds	r3, #40	@ 0x28
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fd7e 	bl	8007850 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d5a:	e004      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d62:	e000      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d6e:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7e:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006da0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d034      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db8:	d007      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006dba:	e011      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dbc:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dc8:	e00e      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	3308      	adds	r3, #8
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fc8a 	bl	80076ec <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfe:	4a02      	ldr	r2, [pc, #8]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e00:	430b      	orrs	r3, r1
 8006e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e04:	e006      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e22:	2300      	movs	r3, #0
 8006e24:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	d00c      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	3328      	adds	r3, #40	@ 0x28
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fd09 	bl	8007850 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e58:	2300      	movs	r3, #0
 8006e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e60:	460b      	mov	r3, r1
 8006e62:	4313      	orrs	r3, r2
 8006e64:	d036      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e70:	d018      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e76:	d811      	bhi.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7c:	d014      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e82:	d80b      	bhi.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8c:	d106      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8e:	4bb7      	ldr	r3, [pc, #732]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	4ab6      	ldr	r2, [pc, #728]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e9a:	e008      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ea2:	e004      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ea4:	bf00      	nop
 8006ea6:	e002      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ea8:	bf00      	nop
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006eb6:	4bad      	ldr	r3, [pc, #692]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec4:	4aa9      	ldr	r2, [pc, #676]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ee6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006eea:	460b      	mov	r3, r1
 8006eec:	4313      	orrs	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ef0:	4b9e      	ldr	r3, [pc, #632]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006efe:	4a9b      	ldr	r2, [pc, #620]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f12:	2300      	movs	r3, #0
 8006f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f20:	4b92      	ldr	r3, [pc, #584]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f24:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f2e:	4a8f      	ldr	r2, [pc, #572]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f42:	2300      	movs	r3, #0
 8006f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f50:	4b86      	ldr	r3, [pc, #536]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	4a85      	ldr	r2, [pc, #532]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f5a:	6113      	str	r3, [r2, #16]
 8006f5c:	4b83      	ldr	r3, [pc, #524]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f5e:	6919      	ldr	r1, [r3, #16]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f68:	4a80      	ldr	r2, [pc, #512]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f84:	460b      	mov	r3, r1
 8006f86:	4313      	orrs	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f8a:	4b78      	ldr	r3, [pc, #480]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f98:	4a74      	ldr	r2, [pc, #464]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fac:	2300      	movs	r3, #0
 8006fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fba:	4b6c      	ldr	r3, [pc, #432]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fbe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fca:	4a68      	ldr	r2, [pc, #416]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d011      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fb79 	bl	80076ec <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800700c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	2100      	movs	r1, #0
 800701a:	6239      	str	r1, [r7, #32]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
 8007022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	d011      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	3308      	adds	r3, #8
 8007032:	2101      	movs	r1, #1
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fb59 	bl	80076ec <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800704c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	2100      	movs	r1, #0
 800705a:	61b9      	str	r1, [r7, #24]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d011      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	3308      	adds	r3, #8
 8007072:	2102      	movs	r1, #2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fb39 	bl	80076ec <RCCEx_PLL2_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800708c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	2100      	movs	r1, #0
 800709a:	6139      	str	r1, [r7, #16]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070a6:	460b      	mov	r3, r1
 80070a8:	4313      	orrs	r3, r2
 80070aa:	d011      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b0:	3328      	adds	r3, #40	@ 0x28
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fbcb 	bl	8007850 <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80070c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	2100      	movs	r1, #0
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070e6:	460b      	mov	r3, r1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	d011      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	3328      	adds	r3, #40	@ 0x28
 80070f2:	2101      	movs	r1, #1
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fbab 	bl	8007850 <RCCEx_PLL3_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800710c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	2100      	movs	r1, #0
 800711a:	6039      	str	r1, [r7, #0]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d011      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007130:	3328      	adds	r3, #40	@ 0x28
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fb8b 	bl	8007850 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007150:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e000      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
}
 800715e:	4618      	mov	r0, r3
 8007160:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007164:	46bd      	mov	sp, r7
 8007166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800716a:	bf00      	nop
 800716c:	58024400 	.word	0x58024400

08007170 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007174:	f7fe fe00 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8007178:	4602      	mov	r2, r0
 800717a:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	091b      	lsrs	r3, r3, #4
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	4904      	ldr	r1, [pc, #16]	@ (8007198 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007186:	5ccb      	ldrb	r3, [r1, r3]
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	58024400 	.word	0x58024400
 8007198:	0800c324 	.word	0x0800c324

0800719c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800719c:	b480      	push	{r7}
 800719e:	b089      	sub	sp, #36	@ 0x24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071a4:	4ba1      	ldr	r3, [pc, #644]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071ae:	4b9f      	ldr	r3, [pc, #636]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b2:	0b1b      	lsrs	r3, r3, #12
 80071b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071ba:	4b9c      	ldr	r3, [pc, #624]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071be:	091b      	lsrs	r3, r3, #4
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071c6:	4b99      	ldr	r3, [pc, #612]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ca:	08db      	lsrs	r3, r3, #3
 80071cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8111 	beq.w	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	f000 8083 	beq.w	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	f200 80a1 	bhi.w	800733c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d056      	beq.n	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007206:	e099      	b.n	800733c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007208:	4b88      	ldr	r3, [pc, #544]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d02d      	beq.n	8007270 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007214:	4b85      	ldr	r3, [pc, #532]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	08db      	lsrs	r3, r3, #3
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	4a84      	ldr	r2, [pc, #528]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
 8007224:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b7b      	ldr	r3, [pc, #492]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800726e:	e087      	b.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b6a      	ldr	r3, [pc, #424]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	e065      	b.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800743c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b59      	ldr	r3, [pc, #356]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f6:	e043      	b.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730a:	4b48      	ldr	r3, [pc, #288]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733a:	e021      	b.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800743c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800734a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734e:	4b37      	ldr	r3, [pc, #220]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007362:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007380:	4b2a      	ldr	r3, [pc, #168]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739a:	edd7 6a07 	vldr	s13, [r7, #28]
 800739e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a6:	ee17 2a90 	vmov	r2, s15
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073ae:	4b1f      	ldr	r3, [pc, #124]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d4:	ee17 2a90 	vmov	r2, s15
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073dc:	4b13      	ldr	r3, [pc, #76]	@ (800742c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	0e1b      	lsrs	r3, r3, #24
 80073e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007402:	ee17 2a90 	vmov	r2, s15
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800740a:	e008      	b.n	800741e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	609a      	str	r2, [r3, #8]
}
 800741e:	bf00      	nop
 8007420:	3724      	adds	r7, #36	@ 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	58024400 	.word	0x58024400
 8007430:	03d09000 	.word	0x03d09000
 8007434:	46000000 	.word	0x46000000
 8007438:	4c742400 	.word	0x4c742400
 800743c:	4a742400 	.word	0x4a742400
 8007440:	4af42400 	.word	0x4af42400

08007444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007444:	b480      	push	{r7}
 8007446:	b089      	sub	sp, #36	@ 0x24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800744c:	4ba1      	ldr	r3, [pc, #644]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007456:	4b9f      	ldr	r3, [pc, #636]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745a:	0d1b      	lsrs	r3, r3, #20
 800745c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007462:	4b9c      	ldr	r3, [pc, #624]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800746e:	4b99      	ldr	r3, [pc, #612]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007472:	08db      	lsrs	r3, r3, #3
 8007474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8111 	beq.w	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b02      	cmp	r3, #2
 8007496:	f000 8083 	beq.w	80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b02      	cmp	r3, #2
 800749e:	f200 80a1 	bhi.w	80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d056      	beq.n	800755c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074ae:	e099      	b.n	80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b0:	4b88      	ldr	r3, [pc, #544]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d02d      	beq.n	8007518 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074bc:	4b85      	ldr	r3, [pc, #532]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	08db      	lsrs	r3, r3, #3
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	4a84      	ldr	r2, [pc, #528]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
 80074cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e6:	4b7b      	ldr	r3, [pc, #492]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800750a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007516:	e087      	b.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752a:	4b6a      	ldr	r3, [pc, #424]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753a:	ed97 6a03 	vldr	s12, [r7, #12]
 800753e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800754e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800755a:	e065      	b.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800756a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756e:	4b59      	ldr	r3, [pc, #356]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007582:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800759e:	e043      	b.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b2:	4b48      	ldr	r3, [pc, #288]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e2:	e021      	b.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f6:	4b37      	ldr	r3, [pc, #220]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007606:	ed97 6a03 	vldr	s12, [r7, #12]
 800760a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800760e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800761a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007626:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007628:	4b2a      	ldr	r3, [pc, #168]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762c:	0a5b      	lsrs	r3, r3, #9
 800762e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800763e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007642:	edd7 6a07 	vldr	s13, [r7, #28]
 8007646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764e:	ee17 2a90 	vmov	r2, s15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007656:	4b1f      	ldr	r3, [pc, #124]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800766c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007670:	edd7 6a07 	vldr	s13, [r7, #28]
 8007674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767c:	ee17 2a90 	vmov	r2, s15
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007684:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800769a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800769e:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076aa:	ee17 2a90 	vmov	r2, s15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076b2:	e008      	b.n	80076c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	609a      	str	r2, [r3, #8]
}
 80076c6:	bf00      	nop
 80076c8:	3724      	adds	r7, #36	@ 0x24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	03d09000 	.word	0x03d09000
 80076dc:	46000000 	.word	0x46000000
 80076e0:	4c742400 	.word	0x4c742400
 80076e4:	4a742400 	.word	0x4a742400
 80076e8:	4af42400 	.word	0x4af42400

080076ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076fa:	4b53      	ldr	r3, [pc, #332]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d101      	bne.n	800770a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e099      	b.n	800783e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800770a:	4b4f      	ldr	r3, [pc, #316]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a4e      	ldr	r2, [pc, #312]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007710:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007716:	f7f9 ff9d 	bl	8001654 <HAL_GetTick>
 800771a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800771c:	e008      	b.n	8007730 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800771e:	f7f9 ff99 	bl	8001654 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e086      	b.n	800783e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007730:	4b45      	ldr	r3, [pc, #276]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1f0      	bne.n	800771e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800773c:	4b42      	ldr	r3, [pc, #264]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	031b      	lsls	r3, r3, #12
 800774a:	493f      	ldr	r1, [pc, #252]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 800774c:	4313      	orrs	r3, r2
 800774e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	3b01      	subs	r3, #1
 8007756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	3b01      	subs	r3, #1
 8007760:	025b      	lsls	r3, r3, #9
 8007762:	b29b      	uxth	r3, r3
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	3b01      	subs	r3, #1
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	3b01      	subs	r3, #1
 800777a:	061b      	lsls	r3, r3, #24
 800777c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007780:	4931      	ldr	r1, [pc, #196]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007786:	4b30      	ldr	r3, [pc, #192]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	492d      	ldr	r1, [pc, #180]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007794:	4313      	orrs	r3, r2
 8007796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007798:	4b2b      	ldr	r3, [pc, #172]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	f023 0220 	bic.w	r2, r3, #32
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	4928      	ldr	r1, [pc, #160]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077aa:	4b27      	ldr	r3, [pc, #156]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ae:	4a26      	ldr	r2, [pc, #152]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077b0:	f023 0310 	bic.w	r3, r3, #16
 80077b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077b6:	4b24      	ldr	r3, [pc, #144]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ba:	4b24      	ldr	r3, [pc, #144]	@ (800784c <RCCEx_PLL2_Config+0x160>)
 80077bc:	4013      	ands	r3, r2
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	69d2      	ldr	r2, [r2, #28]
 80077c2:	00d2      	lsls	r2, r2, #3
 80077c4:	4920      	ldr	r1, [pc, #128]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	f043 0310 	orr.w	r3, r3, #16
 80077d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	4a19      	ldr	r2, [pc, #100]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077e8:	e00f      	b.n	800780a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d106      	bne.n	80077fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077f0:	4b15      	ldr	r3, [pc, #84]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	4a14      	ldr	r2, [pc, #80]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 80077f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077fc:	e005      	b.n	800780a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077fe:	4b12      	ldr	r3, [pc, #72]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	4a11      	ldr	r2, [pc, #68]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800780a:	4b0f      	ldr	r3, [pc, #60]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a0e      	ldr	r2, [pc, #56]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007810:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007816:	f7f9 ff1d 	bl	8001654 <HAL_GetTick>
 800781a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800781c:	e008      	b.n	8007830 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800781e:	f7f9 ff19 	bl	8001654 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e006      	b.n	800783e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007830:	4b05      	ldr	r3, [pc, #20]	@ (8007848 <RCCEx_PLL2_Config+0x15c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400
 800784c:	ffff0007 	.word	0xffff0007

08007850 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800785e:	4b53      	ldr	r3, [pc, #332]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d101      	bne.n	800786e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e099      	b.n	80079a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800786e:	4b4f      	ldr	r3, [pc, #316]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a4e      	ldr	r2, [pc, #312]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787a:	f7f9 feeb 	bl	8001654 <HAL_GetTick>
 800787e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007880:	e008      	b.n	8007894 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007882:	f7f9 fee7 	bl	8001654 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e086      	b.n	80079a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007894:	4b45      	ldr	r3, [pc, #276]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078a0:	4b42      	ldr	r3, [pc, #264]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	051b      	lsls	r3, r3, #20
 80078ae:	493f      	ldr	r1, [pc, #252]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	025b      	lsls	r3, r3, #9
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	3b01      	subs	r3, #1
 80078de:	061b      	lsls	r3, r3, #24
 80078e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078e4:	4931      	ldr	r1, [pc, #196]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078ea:	4b30      	ldr	r3, [pc, #192]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	492d      	ldr	r1, [pc, #180]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078fc:	4b2b      	ldr	r3, [pc, #172]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4928      	ldr	r1, [pc, #160]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 800790a:	4313      	orrs	r3, r2
 800790c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800790e:	4b27      	ldr	r3, [pc, #156]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	4a26      	ldr	r2, [pc, #152]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800791a:	4b24      	ldr	r3, [pc, #144]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 800791c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800791e:	4b24      	ldr	r3, [pc, #144]	@ (80079b0 <RCCEx_PLL3_Config+0x160>)
 8007920:	4013      	ands	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	69d2      	ldr	r2, [r2, #28]
 8007926:	00d2      	lsls	r2, r2, #3
 8007928:	4920      	ldr	r1, [pc, #128]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800792e:	4b1f      	ldr	r3, [pc, #124]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007932:	4a1e      	ldr	r2, [pc, #120]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007938:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007940:	4b1a      	ldr	r3, [pc, #104]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	4a19      	ldr	r2, [pc, #100]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800794a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800794c:	e00f      	b.n	800796e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d106      	bne.n	8007962 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007954:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	4a14      	ldr	r2, [pc, #80]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 800795a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800795e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007960:	e005      	b.n	800796e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007962:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	4a11      	ldr	r2, [pc, #68]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800796c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800796e:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a0e      	ldr	r2, [pc, #56]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797a:	f7f9 fe6b 	bl	8001654 <HAL_GetTick>
 800797e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007980:	e008      	b.n	8007994 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007982:	f7f9 fe67 	bl	8001654 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e006      	b.n	80079a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007994:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <RCCEx_PLL3_Config+0x15c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0f0      	beq.n	8007982 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	58024400 	.word	0x58024400
 80079b0:	ffff0007 	.word	0xffff0007

080079b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d071      	beq.n	8007aaa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7f9 fa9a 	bl	8000f14 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d050      	beq.n	8007a98 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	22ca      	movs	r2, #202	@ 0xca
 80079fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2253      	movs	r2, #83	@ 0x53
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb78 	bl	80080fc <RTC_EnterInitMode>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d124      	bne.n	8007a60 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6899      	ldr	r1, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b24      	ldr	r3, [pc, #144]	@ (8007ab4 <HAL_RTC_Init+0x100>)
 8007a22:	400b      	ands	r3, r1
 8007a24:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6899      	ldr	r1, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	0419      	lsls	r1, r3, #16
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fb84 	bl	8008164 <RTC_ExitInitMode>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d113      	bne.n	8007a8e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0203 	bic.w	r2, r2, #3
 8007a74:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	22ff      	movs	r2, #255	@ 0xff
 8007a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a96:	e001      	b.n	8007a9c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	ff8fffbf 	.word	0xff8fffbf

08007ab8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_RTC_SetTime+0x1a>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e089      	b.n	8007be6 <HAL_RTC_SetTime+0x12e>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	22ca      	movs	r2, #202	@ 0xca
 8007ae8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2253      	movs	r2, #83	@ 0x53
 8007af0:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fb02 	bl	80080fc <RTC_EnterInitMode>
 8007af8:	4603      	mov	r3, r0
 8007afa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007afc:	7cfb      	ldrb	r3, [r7, #19]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d161      	bne.n	8007bc6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d126      	bne.n	8007b56 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d102      	bne.n	8007b1c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fb5d 	bl	80081e0 <RTC_ByteToBcd2>
 8007b26:	4603      	mov	r3, r0
 8007b28:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb56 	bl	80081e0 <RTC_ByteToBcd2>
 8007b34:	4603      	mov	r3, r0
 8007b36:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b38:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	789b      	ldrb	r3, [r3, #2]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fb4e 	bl	80081e0 <RTC_ByteToBcd2>
 8007b44:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b46:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	78db      	ldrb	r3, [r3, #3]
 8007b4e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e018      	b.n	8007b88 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b76:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b7c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	78db      	ldrb	r3, [r3, #3]
 8007b82:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	4b18      	ldr	r3, [pc, #96]	@ (8007bf0 <HAL_RTC_SetTime+0x138>)
 8007b90:	400b      	ands	r3, r1
 8007b92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ba2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6899      	ldr	r1, [r3, #8]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fad1 	bl	8008164 <RTC_ExitInitMode>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	22ff      	movs	r2, #255	@ 0xff
 8007bcc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007bce:	7cfb      	ldrb	r3, [r7, #19]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd90      	pop	{r4, r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	007f7f7f 	.word	0x007f7f7f

08007bf4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b22      	ldr	r3, [pc, #136]	@ (8007ca8 <HAL_RTC_GetTime+0xb4>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	0d9b      	lsrs	r3, r3, #22
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11a      	bne.n	8007c9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fad7 	bl	8008220 <RTC_Bcd2ToByte>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 face 	bl	8008220 <RTC_Bcd2ToByte>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fac5 	bl	8008220 <RTC_Bcd2ToByte>
 8007c96:	4603      	mov	r3, r0
 8007c98:	461a      	mov	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	007f7f7f 	.word	0x007f7f7f

08007cac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RTC_SetDate+0x1a>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e073      	b.n	8007dae <HAL_RTC_SetDate+0x102>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10e      	bne.n	8007cfa <HAL_RTC_SetDate+0x4e>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	f023 0310 	bic.w	r3, r3, #16
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	330a      	adds	r3, #10
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d11c      	bne.n	8007d3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	78db      	ldrb	r3, [r3, #3]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fa6b 	bl	80081e0 <RTC_ByteToBcd2>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fa64 	bl	80081e0 <RTC_ByteToBcd2>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	789b      	ldrb	r3, [r3, #2]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fa5c 	bl	80081e0 <RTC_ByteToBcd2>
 8007d28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e00e      	b.n	8007d58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	78db      	ldrb	r3, [r3, #3]
 8007d3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	22ca      	movs	r2, #202	@ 0xca
 8007d5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2253      	movs	r2, #83	@ 0x53
 8007d66:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f9c7 	bl	80080fc <RTC_EnterInitMode>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007d72:	7cfb      	ldrb	r3, [r7, #19]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6979      	ldr	r1, [r7, #20]
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <HAL_RTC_SetDate+0x10c>)
 8007d80:	400b      	ands	r3, r1
 8007d82:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f9ed 	bl	8008164 <RTC_ExitInitMode>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	22ff      	movs	r2, #255	@ 0xff
 8007d94:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007d96:	7cfb      	ldrb	r3, [r7, #19]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007dac:	7cfb      	ldrb	r3, [r7, #19]


}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	00ffff3f 	.word	0x00ffff3f

08007dbc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	4b21      	ldr	r3, [pc, #132]	@ (8007e54 <HAL_RTC_GetDate+0x98>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	0c1b      	lsrs	r3, r3, #16
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	0b5b      	lsrs	r3, r3, #13
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d11a      	bne.n	8007e48 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	78db      	ldrb	r3, [r3, #3]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fa02 	bl	8008220 <RTC_Bcd2ToByte>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f9f9 	bl	8008220 <RTC_Bcd2ToByte>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	789b      	ldrb	r3, [r3, #2]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f9f0 	bl	8008220 <RTC_Bcd2ToByte>
 8007e40:	4603      	mov	r3, r0
 8007e42:	461a      	mov	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	00ffff3f 	.word	0x00ffff3f

08007e58 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b089      	sub	sp, #36	@ 0x24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_RTC_SetAlarm+0x1a>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e11b      	b.n	80080aa <HAL_RTC_SetAlarm+0x252>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d137      	bne.n	8007ef8 <HAL_RTC_SetAlarm+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f99d 	bl	80081e0 <RTC_ByteToBcd2>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f996 	bl	80081e0 <RTC_ByteToBcd2>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007eb8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	789b      	ldrb	r3, [r3, #2]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f98e 	bl	80081e0 <RTC_ByteToBcd2>
 8007ec4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007ec6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	78db      	ldrb	r3, [r3, #3]
 8007ece:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007ed0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f980 	bl	80081e0 <RTC_ByteToBcd2>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007ee4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007eec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	e023      	b.n	8007f40 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007f18:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007f1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	78db      	ldrb	r3, [r3, #3]
 8007f24:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007f26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007f30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007f36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	22ca      	movs	r2, #202	@ 0xca
 8007f52:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2253      	movs	r2, #83	@ 0x53
 8007f5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f64:	d14a      	bne.n	8007ffc <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f74:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007f86:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f96:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007f98:	f7f9 fb5c 	bl	8001654 <HAL_GetTick>
 8007f9c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007f9e:	e015      	b.n	8007fcc <HAL_RTC_SetAlarm+0x174>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fa0:	f7f9 fb58 	bl	8001654 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fae:	d90d      	bls.n	8007fcc <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	22ff      	movs	r2, #255	@ 0xff
 8007fb6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2203      	movs	r2, #3
 8007fbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e06e      	b.n	80080aa <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0e2      	beq.n	8007fa0 <HAL_RTC_SetAlarm+0x148>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ff8:	609a      	str	r2, [r3, #8]
 8007ffa:	e049      	b.n	8008090 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800800a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800801c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800802c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800802e:	f7f9 fb11 	bl	8001654 <HAL_GetTick>
 8008032:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008034:	e015      	b.n	8008062 <HAL_RTC_SetAlarm+0x20a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008036:	f7f9 fb0d 	bl	8001654 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008044:	d90d      	bls.n	8008062 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	22ff      	movs	r2, #255	@ 0xff
 800804c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2203      	movs	r2, #3
 8008052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e023      	b.n	80080aa <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0e2      	beq.n	8008036 <HAL_RTC_SetAlarm+0x1de>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800808e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	22ff      	movs	r2, #255	@ 0xff
 8008096:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3724      	adds	r7, #36	@ 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd90      	pop	{r4, r7, pc}
	...

080080b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0d      	ldr	r2, [pc, #52]	@ (80080f8 <HAL_RTC_WaitForSynchro+0x44>)
 80080c2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80080c4:	f7f9 fac6 	bl	8001654 <HAL_GetTick>
 80080c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080ca:	e009      	b.n	80080e0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080cc:	f7f9 fac2 	bl	8001654 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080da:	d901      	bls.n	80080e0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e007      	b.n	80080f0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0ee      	beq.n	80080cc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	0003ff5f 	.word	0x0003ff5f

080080fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d120      	bne.n	8008158 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008120:	f7f9 fa98 	bl	8001654 <HAL_GetTick>
 8008124:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008126:	e00d      	b.n	8008144 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008128:	f7f9 fa94 	bl	8001654 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008136:	d905      	bls.n	8008144 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2203      	movs	r2, #3
 8008140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d102      	bne.n	8008158 <RTC_EnterInitMode+0x5c>
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b03      	cmp	r3, #3
 8008156:	d1e7      	bne.n	8008128 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008170:	4b1a      	ldr	r3, [pc, #104]	@ (80081dc <RTC_ExitInitMode+0x78>)
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <RTC_ExitInitMode+0x78>)
 8008176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800817a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800817c:	4b17      	ldr	r3, [pc, #92]	@ (80081dc <RTC_ExitInitMode+0x78>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10c      	bne.n	80081a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff ff93 	bl	80080b4 <HAL_RTC_WaitForSynchro>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01e      	beq.n	80081d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2203      	movs	r2, #3
 8008198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	73fb      	strb	r3, [r7, #15]
 80081a0:	e017      	b.n	80081d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081a2:	4b0e      	ldr	r3, [pc, #56]	@ (80081dc <RTC_ExitInitMode+0x78>)
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	4a0d      	ldr	r2, [pc, #52]	@ (80081dc <RTC_ExitInitMode+0x78>)
 80081a8:	f023 0320 	bic.w	r3, r3, #32
 80081ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff ff80 	bl	80080b4 <HAL_RTC_WaitForSynchro>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2203      	movs	r2, #3
 80081be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081c6:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <RTC_ExitInitMode+0x78>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	4a04      	ldr	r2, [pc, #16]	@ (80081dc <RTC_ExitInitMode+0x78>)
 80081cc:	f043 0320 	orr.w	r3, r3, #32
 80081d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	58004000 	.word	0x58004000

080081e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80081f2:	e005      	b.n	8008200 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	3b0a      	subs	r3, #10
 80081fe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	2b09      	cmp	r3, #9
 8008204:	d8f6      	bhi.n	80081f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	b2da      	uxtb	r2, r3
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	4313      	orrs	r3, r2
 8008212:	b2db      	uxtb	r3, r3
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	091b      	lsrs	r3, r3, #4
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	4413      	add	r3, r2
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	b2da      	uxtb	r2, r3
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	4413      	add	r3, r2
 8008246:	b2db      	uxtb	r3, r3
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3350      	adds	r3, #80	@ 0x50
 8008266:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4413      	add	r3, r2
 8008270:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3350      	adds	r3, #80	@ 0x50
 8008294:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e042      	b.n	8008348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7f9 f83f 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2224      	movs	r2, #36	@ 0x24
 80082de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fbdc 	bl	8009ab8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fd6d 	bl	8008de0 <UART_SetConfig>
 8008306:	4603      	mov	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e01b      	b.n	8008348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800831e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800832e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 fc5b 	bl	8009bfc <UART_CheckIdleState>
 8008346:	4603      	mov	r3, r0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	@ 0x28
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008366:	2b20      	cmp	r3, #32
 8008368:	d17b      	bne.n	8008462 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <HAL_UART_Transmit+0x26>
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e074      	b.n	8008464 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2221      	movs	r2, #33	@ 0x21
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800838a:	f7f9 f963 	bl	8001654 <HAL_GetTick>
 800838e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	88fa      	ldrh	r2, [r7, #6]
 800839c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a8:	d108      	bne.n	80083bc <HAL_UART_Transmit+0x6c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e003      	b.n	80083c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083c4:	e030      	b.n	8008428 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2200      	movs	r2, #0
 80083ce:	2180      	movs	r1, #128	@ 0x80
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f001 fcbd 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e03d      	b.n	8008464 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10b      	bne.n	8008406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	3302      	adds	r3, #2
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e007      	b.n	8008416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	3301      	adds	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	b29a      	uxth	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1c8      	bne.n	80083c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	2140      	movs	r1, #64	@ 0x40
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f001 fc86 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e006      	b.n	8008464 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008462:	2302      	movs	r3, #2
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800846c:	b480      	push	{r7}
 800846e:	b091      	sub	sp, #68	@ 0x44
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008480:	2b20      	cmp	r3, #32
 8008482:	d178      	bne.n	8008576 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_UART_Transmit_IT+0x24>
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e071      	b.n	8008578 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2221      	movs	r2, #33	@ 0x21
 80084bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c8:	d12a      	bne.n	8008520 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d2:	d107      	bne.n	80084e4 <HAL_UART_Transmit_IT+0x78>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <HAL_UART_Transmit_IT+0x118>)
 80084e0:	679a      	str	r2, [r3, #120]	@ 0x78
 80084e2:	e002      	b.n	80084ea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4a28      	ldr	r2, [pc, #160]	@ (8008588 <HAL_UART_Transmit_IT+0x11c>)
 80084e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008500:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800850a:	637a      	str	r2, [r7, #52]	@ 0x34
 800850c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <HAL_UART_Transmit_IT+0x7e>
 800851e:	e028      	b.n	8008572 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008528:	d107      	bne.n	800853a <HAL_UART_Transmit_IT+0xce>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a15      	ldr	r2, [pc, #84]	@ (800858c <HAL_UART_Transmit_IT+0x120>)
 8008536:	679a      	str	r2, [r3, #120]	@ 0x78
 8008538:	e002      	b.n	8008540 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a14      	ldr	r2, [pc, #80]	@ (8008590 <HAL_UART_Transmit_IT+0x124>)
 800853e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	613b      	str	r3, [r7, #16]
   return(result);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855e:	623b      	str	r3, [r7, #32]
 8008560:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	69f9      	ldr	r1, [r7, #28]
 8008564:	6a3a      	ldr	r2, [r7, #32]
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	61bb      	str	r3, [r7, #24]
   return(result);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e000      	b.n	8008578 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3744      	adds	r7, #68	@ 0x44
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	0800a535 	.word	0x0800a535
 8008588:	0800a455 	.word	0x0800a455
 800858c:	0800a393 	.word	0x0800a393
 8008590:	0800a2db 	.word	0x0800a2db

08008594 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	@ 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d137      	bne.n	800861c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_UART_Receive_DMA+0x24>
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e030      	b.n	800861e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a18      	ldr	r2, [pc, #96]	@ (8008628 <HAL_UART_Receive_DMA+0x94>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d01f      	beq.n	800860c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d018      	beq.n	800860c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	613b      	str	r3, [r7, #16]
   return(result);
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	623b      	str	r3, [r7, #32]
 80085fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fc:	69f9      	ldr	r1, [r7, #28]
 80085fe:	6a3a      	ldr	r2, [r7, #32]
 8008600:	e841 2300 	strex	r3, r2, [r1]
 8008604:	61bb      	str	r3, [r7, #24]
   return(result);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e6      	bne.n	80085da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800860c:	88fb      	ldrh	r3, [r7, #6]
 800860e:	461a      	mov	r2, r3
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f001 fc0a 	bl	8009e2c <UART_Start_Receive_DMA>
 8008618:	4603      	mov	r3, r0
 800861a:	e000      	b.n	800861e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3728      	adds	r7, #40	@ 0x28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	58000c00 	.word	0x58000c00

0800862c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b0ba      	sub	sp, #232	@ 0xe8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008656:	f640 030f 	movw	r3, #2063	@ 0x80f
 800865a:	4013      	ands	r3, r2
 800865c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11b      	bne.n	80086a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d015      	beq.n	80086a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d009      	beq.n	80086a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 8377 	beq.w	8008d84 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
      }
      return;
 800869e:	e371      	b.n	8008d84 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80086a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8123 	beq.w	80088f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80086aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086ae:	4b8d      	ldr	r3, [pc, #564]	@ (80088e4 <HAL_UART_IRQHandler+0x2b8>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80086b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80086ba:	4b8b      	ldr	r3, [pc, #556]	@ (80088e8 <HAL_UART_IRQHandler+0x2bc>)
 80086bc:	4013      	ands	r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 8116 	beq.w	80088f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d011      	beq.n	80086f4 <HAL_UART_IRQHandler+0xc8>
 80086d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2201      	movs	r2, #1
 80086e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ea:	f043 0201 	orr.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d011      	beq.n	8008724 <HAL_UART_IRQHandler+0xf8>
 8008700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2202      	movs	r2, #2
 8008712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871a:	f043 0204 	orr.w	r2, r3, #4
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d011      	beq.n	8008754 <HAL_UART_IRQHandler+0x128>
 8008730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2204      	movs	r2, #4
 8008742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874a:	f043 0202 	orr.w	r2, r3, #2
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d017      	beq.n	8008790 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800876c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008770:	4b5c      	ldr	r3, [pc, #368]	@ (80088e4 <HAL_UART_IRQHandler+0x2b8>)
 8008772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2208      	movs	r2, #8
 800877e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008786:	f043 0208 	orr.w	r2, r3, #8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008798:	2b00      	cmp	r3, #0
 800879a:	d012      	beq.n	80087c2 <HAL_UART_IRQHandler+0x196>
 800879c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b8:	f043 0220 	orr.w	r2, r3, #32
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 82dd 	beq.w	8008d88 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d013      	beq.n	8008802 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d105      	bne.n	80087f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008816:	2b40      	cmp	r3, #64	@ 0x40
 8008818:	d005      	beq.n	8008826 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800881a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800881e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008822:	2b00      	cmp	r3, #0
 8008824:	d054      	beq.n	80088d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fbe8 	bl	8009ffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d146      	bne.n	80088c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800886a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800887e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1d9      	bne.n	800883a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	d017      	beq.n	80088c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008896:	4a15      	ldr	r2, [pc, #84]	@ (80088ec <HAL_UART_IRQHandler+0x2c0>)
 8008898:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fa fad5 	bl	8002e50 <HAL_DMA_Abort_IT>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80088ba:	4610      	mov	r0, r2
 80088bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088be:	e00f      	b.n	80088e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa77 	bl	8008db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c6:	e00b      	b.n	80088e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa73 	bl	8008db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ce:	e007      	b.n	80088e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa6f 	bl	8008db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80088de:	e253      	b.n	8008d88 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e0:	bf00      	nop
    return;
 80088e2:	e251      	b.n	8008d88 <HAL_UART_IRQHandler+0x75c>
 80088e4:	10000001 	.word	0x10000001
 80088e8:	04000120 	.word	0x04000120
 80088ec:	0800a2af 	.word	0x0800a2af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	f040 81e7 	bne.w	8008cc8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 81e0 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 81d9 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2210      	movs	r2, #16
 800891c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008928:	2b40      	cmp	r3, #64	@ 0x40
 800892a:	f040 8151 	bne.w	8008bd0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a96      	ldr	r2, [pc, #600]	@ (8008b90 <HAL_UART_IRQHandler+0x564>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d068      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a93      	ldr	r2, [pc, #588]	@ (8008b94 <HAL_UART_IRQHandler+0x568>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d061      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a91      	ldr	r2, [pc, #580]	@ (8008b98 <HAL_UART_IRQHandler+0x56c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d05a      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a8e      	ldr	r2, [pc, #568]	@ (8008b9c <HAL_UART_IRQHandler+0x570>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d053      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a8c      	ldr	r2, [pc, #560]	@ (8008ba0 <HAL_UART_IRQHandler+0x574>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d04c      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a89      	ldr	r2, [pc, #548]	@ (8008ba4 <HAL_UART_IRQHandler+0x578>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d045      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a87      	ldr	r2, [pc, #540]	@ (8008ba8 <HAL_UART_IRQHandler+0x57c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d03e      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a84      	ldr	r2, [pc, #528]	@ (8008bac <HAL_UART_IRQHandler+0x580>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d037      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a82      	ldr	r2, [pc, #520]	@ (8008bb0 <HAL_UART_IRQHandler+0x584>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d030      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a7f      	ldr	r2, [pc, #508]	@ (8008bb4 <HAL_UART_IRQHandler+0x588>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d029      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a7d      	ldr	r2, [pc, #500]	@ (8008bb8 <HAL_UART_IRQHandler+0x58c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d022      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a7a      	ldr	r2, [pc, #488]	@ (8008bbc <HAL_UART_IRQHandler+0x590>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01b      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a78      	ldr	r2, [pc, #480]	@ (8008bc0 <HAL_UART_IRQHandler+0x594>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d014      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a75      	ldr	r2, [pc, #468]	@ (8008bc4 <HAL_UART_IRQHandler+0x598>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00d      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a73      	ldr	r2, [pc, #460]	@ (8008bc8 <HAL_UART_IRQHandler+0x59c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d006      	beq.n	8008a0e <HAL_UART_IRQHandler+0x3e2>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a70      	ldr	r2, [pc, #448]	@ (8008bcc <HAL_UART_IRQHandler+0x5a0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d106      	bne.n	8008a1c <HAL_UART_IRQHandler+0x3f0>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	e005      	b.n	8008a28 <HAL_UART_IRQHandler+0x3fc>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 81ab 	beq.w	8008d8c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a40:	429a      	cmp	r2, r3
 8008a42:	f080 81a3 	bcs.w	8008d8c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5c:	f000 8087 	beq.w	8008b6e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1da      	bne.n	8008a60 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008aba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ace:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e1      	bne.n	8008aaa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3308      	adds	r3, #8
 8008b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e3      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b3c:	f023 0310 	bic.w	r3, r3, #16
 8008b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e4      	bne.n	8008b2c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f9 fe53 	bl	8002814 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2202      	movs	r2, #2
 8008b72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f91d 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b8e:	e0fd      	b.n	8008d8c <HAL_UART_IRQHandler+0x760>
 8008b90:	40020010 	.word	0x40020010
 8008b94:	40020028 	.word	0x40020028
 8008b98:	40020040 	.word	0x40020040
 8008b9c:	40020058 	.word	0x40020058
 8008ba0:	40020070 	.word	0x40020070
 8008ba4:	40020088 	.word	0x40020088
 8008ba8:	400200a0 	.word	0x400200a0
 8008bac:	400200b8 	.word	0x400200b8
 8008bb0:	40020410 	.word	0x40020410
 8008bb4:	40020428 	.word	0x40020428
 8008bb8:	40020440 	.word	0x40020440
 8008bbc:	40020458 	.word	0x40020458
 8008bc0:	40020470 	.word	0x40020470
 8008bc4:	40020488 	.word	0x40020488
 8008bc8:	400204a0 	.word	0x400204a0
 8008bcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80cf 	beq.w	8008d90 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80ca 	beq.w	8008d90 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e4      	bne.n	8008bfc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3308      	adds	r3, #8
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	623b      	str	r3, [r7, #32]
   return(result);
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	4b55      	ldr	r3, [pc, #340]	@ (8008d9c <HAL_UART_IRQHandler+0x770>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c56:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c5e:	e841 2300 	strex	r3, r2, [r1]
 8008c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1e3      	bne.n	8008c32 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0310 	bic.w	r3, r3, #16
 8008c92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	69b9      	ldr	r1, [r7, #24]
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	617b      	str	r3, [r7, #20]
   return(result);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e4      	bne.n	8008c7e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f881 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cc6:	e063      	b.n	8008d90 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00e      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x6c6>
 8008cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d008      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fcc2 	bl	800a674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cf0:	e051      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d014      	beq.n	8008d28 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03a      	beq.n	8008d94 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
    }
    return;
 8008d26:	e035      	b.n	8008d94 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <HAL_UART_IRQHandler+0x71c>
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fc6c 	bl	800a61e <UART_EndTransmit_IT>
    return;
 8008d46:	e026      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <HAL_UART_IRQHandler+0x73c>
 8008d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fc9b 	bl	800a69c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d66:	e016      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d010      	beq.n	8008d96 <HAL_UART_IRQHandler+0x76a>
 8008d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	da0c      	bge.n	8008d96 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fc83 	bl	800a688 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d82:	e008      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d84:	bf00      	nop
 8008d86:	e006      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
    return;
 8008d88:	bf00      	nop
 8008d8a:	e004      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d8c:	bf00      	nop
 8008d8e:	e002      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d90:	bf00      	nop
 8008d92:	e000      	b.n	8008d96 <HAL_UART_IRQHandler+0x76a>
    return;
 8008d94:	bf00      	nop
  }
}
 8008d96:	37e8      	adds	r7, #232	@ 0xe8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	effffffe 	.word	0xeffffffe

08008da0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de4:	b092      	sub	sp, #72	@ 0x48
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4bbe      	ldr	r3, [pc, #760]	@ (8009108 <UART_SetConfig+0x328>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4ab3      	ldr	r2, [pc, #716]	@ (800910c <UART_SetConfig+0x32c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	4baf      	ldr	r3, [pc, #700]	@ (8009110 <UART_SetConfig+0x330>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	6812      	ldr	r2, [r2, #0]
 8008e5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e5c:	430b      	orrs	r3, r1
 8008e5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e66:	f023 010f 	bic.w	r1, r3, #15
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4aa6      	ldr	r2, [pc, #664]	@ (8009114 <UART_SetConfig+0x334>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d177      	bne.n	8008f70 <UART_SetConfig+0x190>
 8008e80:	4ba5      	ldr	r3, [pc, #660]	@ (8009118 <UART_SetConfig+0x338>)
 8008e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e88:	2b28      	cmp	r3, #40	@ 0x28
 8008e8a:	d86d      	bhi.n	8008f68 <UART_SetConfig+0x188>
 8008e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e94 <UART_SetConfig+0xb4>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008f39 	.word	0x08008f39
 8008e98:	08008f69 	.word	0x08008f69
 8008e9c:	08008f69 	.word	0x08008f69
 8008ea0:	08008f69 	.word	0x08008f69
 8008ea4:	08008f69 	.word	0x08008f69
 8008ea8:	08008f69 	.word	0x08008f69
 8008eac:	08008f69 	.word	0x08008f69
 8008eb0:	08008f69 	.word	0x08008f69
 8008eb4:	08008f41 	.word	0x08008f41
 8008eb8:	08008f69 	.word	0x08008f69
 8008ebc:	08008f69 	.word	0x08008f69
 8008ec0:	08008f69 	.word	0x08008f69
 8008ec4:	08008f69 	.word	0x08008f69
 8008ec8:	08008f69 	.word	0x08008f69
 8008ecc:	08008f69 	.word	0x08008f69
 8008ed0:	08008f69 	.word	0x08008f69
 8008ed4:	08008f49 	.word	0x08008f49
 8008ed8:	08008f69 	.word	0x08008f69
 8008edc:	08008f69 	.word	0x08008f69
 8008ee0:	08008f69 	.word	0x08008f69
 8008ee4:	08008f69 	.word	0x08008f69
 8008ee8:	08008f69 	.word	0x08008f69
 8008eec:	08008f69 	.word	0x08008f69
 8008ef0:	08008f69 	.word	0x08008f69
 8008ef4:	08008f51 	.word	0x08008f51
 8008ef8:	08008f69 	.word	0x08008f69
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08008f69 	.word	0x08008f69
 8008f04:	08008f69 	.word	0x08008f69
 8008f08:	08008f69 	.word	0x08008f69
 8008f0c:	08008f69 	.word	0x08008f69
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f59 	.word	0x08008f59
 8008f18:	08008f69 	.word	0x08008f69
 8008f1c:	08008f69 	.word	0x08008f69
 8008f20:	08008f69 	.word	0x08008f69
 8008f24:	08008f69 	.word	0x08008f69
 8008f28:	08008f69 	.word	0x08008f69
 8008f2c:	08008f69 	.word	0x08008f69
 8008f30:	08008f69 	.word	0x08008f69
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e326      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e322      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e31e      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e31a      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e316      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e312      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f68:	2380      	movs	r3, #128	@ 0x80
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e30e      	b.n	800958e <UART_SetConfig+0x7ae>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a69      	ldr	r2, [pc, #420]	@ (800911c <UART_SetConfig+0x33c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d130      	bne.n	8008fdc <UART_SetConfig+0x1fc>
 8008f7a:	4b67      	ldr	r3, [pc, #412]	@ (8009118 <UART_SetConfig+0x338>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d826      	bhi.n	8008fd4 <UART_SetConfig+0x1f4>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <UART_SetConfig+0x1ac>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fc5 	.word	0x08008fc5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e2f0      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e2ec      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e2e8      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e2e4      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e2e0      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fcc:	2340      	movs	r3, #64	@ 0x40
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e2dc      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e2d8      	b.n	800958e <UART_SetConfig+0x7ae>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8009120 <UART_SetConfig+0x340>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d130      	bne.n	8009048 <UART_SetConfig+0x268>
 8008fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8009118 <UART_SetConfig+0x338>)
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	d826      	bhi.n	8009040 <UART_SetConfig+0x260>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <UART_SetConfig+0x218>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009021 	.word	0x08009021
 8009004:	08009029 	.word	0x08009029
 8009008:	08009031 	.word	0x08009031
 800900c:	08009039 	.word	0x08009039
 8009010:	2300      	movs	r3, #0
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e2ba      	b.n	800958e <UART_SetConfig+0x7ae>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e2b6      	b.n	800958e <UART_SetConfig+0x7ae>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e2b2      	b.n	800958e <UART_SetConfig+0x7ae>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e2ae      	b.n	800958e <UART_SetConfig+0x7ae>
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e2aa      	b.n	800958e <UART_SetConfig+0x7ae>
 8009038:	2340      	movs	r3, #64	@ 0x40
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e2a6      	b.n	800958e <UART_SetConfig+0x7ae>
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e2a2      	b.n	800958e <UART_SetConfig+0x7ae>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a35      	ldr	r2, [pc, #212]	@ (8009124 <UART_SetConfig+0x344>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d130      	bne.n	80090b4 <UART_SetConfig+0x2d4>
 8009052:	4b31      	ldr	r3, [pc, #196]	@ (8009118 <UART_SetConfig+0x338>)
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b05      	cmp	r3, #5
 800905c:	d826      	bhi.n	80090ac <UART_SetConfig+0x2cc>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <UART_SetConfig+0x284>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	0800907d 	.word	0x0800907d
 8009068:	08009085 	.word	0x08009085
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009095 	.word	0x08009095
 8009074:	0800909d 	.word	0x0800909d
 8009078:	080090a5 	.word	0x080090a5
 800907c:	2300      	movs	r3, #0
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e284      	b.n	800958e <UART_SetConfig+0x7ae>
 8009084:	2304      	movs	r3, #4
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e280      	b.n	800958e <UART_SetConfig+0x7ae>
 800908c:	2308      	movs	r3, #8
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e27c      	b.n	800958e <UART_SetConfig+0x7ae>
 8009094:	2310      	movs	r3, #16
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e278      	b.n	800958e <UART_SetConfig+0x7ae>
 800909c:	2320      	movs	r3, #32
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e274      	b.n	800958e <UART_SetConfig+0x7ae>
 80090a4:	2340      	movs	r3, #64	@ 0x40
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e270      	b.n	800958e <UART_SetConfig+0x7ae>
 80090ac:	2380      	movs	r3, #128	@ 0x80
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e26c      	b.n	800958e <UART_SetConfig+0x7ae>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009128 <UART_SetConfig+0x348>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d142      	bne.n	8009144 <UART_SetConfig+0x364>
 80090be:	4b16      	ldr	r3, [pc, #88]	@ (8009118 <UART_SetConfig+0x338>)
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d838      	bhi.n	800913c <UART_SetConfig+0x35c>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <UART_SetConfig+0x2f0>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	080090e9 	.word	0x080090e9
 80090d4:	080090f1 	.word	0x080090f1
 80090d8:	080090f9 	.word	0x080090f9
 80090dc:	08009101 	.word	0x08009101
 80090e0:	0800912d 	.word	0x0800912d
 80090e4:	08009135 	.word	0x08009135
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e24e      	b.n	800958e <UART_SetConfig+0x7ae>
 80090f0:	2304      	movs	r3, #4
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e24a      	b.n	800958e <UART_SetConfig+0x7ae>
 80090f8:	2308      	movs	r3, #8
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e246      	b.n	800958e <UART_SetConfig+0x7ae>
 8009100:	2310      	movs	r3, #16
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e242      	b.n	800958e <UART_SetConfig+0x7ae>
 8009108:	cfff69f3 	.word	0xcfff69f3
 800910c:	58000c00 	.word	0x58000c00
 8009110:	11fff4ff 	.word	0x11fff4ff
 8009114:	40011000 	.word	0x40011000
 8009118:	58024400 	.word	0x58024400
 800911c:	40004400 	.word	0x40004400
 8009120:	40004800 	.word	0x40004800
 8009124:	40004c00 	.word	0x40004c00
 8009128:	40005000 	.word	0x40005000
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e22c      	b.n	800958e <UART_SetConfig+0x7ae>
 8009134:	2340      	movs	r3, #64	@ 0x40
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e228      	b.n	800958e <UART_SetConfig+0x7ae>
 800913c:	2380      	movs	r3, #128	@ 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e224      	b.n	800958e <UART_SetConfig+0x7ae>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4ab1      	ldr	r2, [pc, #708]	@ (8009410 <UART_SetConfig+0x630>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d176      	bne.n	800923c <UART_SetConfig+0x45c>
 800914e:	4bb1      	ldr	r3, [pc, #708]	@ (8009414 <UART_SetConfig+0x634>)
 8009150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009156:	2b28      	cmp	r3, #40	@ 0x28
 8009158:	d86c      	bhi.n	8009234 <UART_SetConfig+0x454>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <UART_SetConfig+0x380>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009205 	.word	0x08009205
 8009164:	08009235 	.word	0x08009235
 8009168:	08009235 	.word	0x08009235
 800916c:	08009235 	.word	0x08009235
 8009170:	08009235 	.word	0x08009235
 8009174:	08009235 	.word	0x08009235
 8009178:	08009235 	.word	0x08009235
 800917c:	08009235 	.word	0x08009235
 8009180:	0800920d 	.word	0x0800920d
 8009184:	08009235 	.word	0x08009235
 8009188:	08009235 	.word	0x08009235
 800918c:	08009235 	.word	0x08009235
 8009190:	08009235 	.word	0x08009235
 8009194:	08009235 	.word	0x08009235
 8009198:	08009235 	.word	0x08009235
 800919c:	08009235 	.word	0x08009235
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009235 	.word	0x08009235
 80091a8:	08009235 	.word	0x08009235
 80091ac:	08009235 	.word	0x08009235
 80091b0:	08009235 	.word	0x08009235
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009235 	.word	0x08009235
 80091bc:	08009235 	.word	0x08009235
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	08009235 	.word	0x08009235
 80091c8:	08009235 	.word	0x08009235
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	08009235 	.word	0x08009235
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009225 	.word	0x08009225
 80091e4:	08009235 	.word	0x08009235
 80091e8:	08009235 	.word	0x08009235
 80091ec:	08009235 	.word	0x08009235
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009235 	.word	0x08009235
 80091f8:	08009235 	.word	0x08009235
 80091fc:	08009235 	.word	0x08009235
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e1c0      	b.n	800958e <UART_SetConfig+0x7ae>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e1bc      	b.n	800958e <UART_SetConfig+0x7ae>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e1b8      	b.n	800958e <UART_SetConfig+0x7ae>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e1b4      	b.n	800958e <UART_SetConfig+0x7ae>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e1b0      	b.n	800958e <UART_SetConfig+0x7ae>
 800922c:	2340      	movs	r3, #64	@ 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e1ac      	b.n	800958e <UART_SetConfig+0x7ae>
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e1a8      	b.n	800958e <UART_SetConfig+0x7ae>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a75      	ldr	r2, [pc, #468]	@ (8009418 <UART_SetConfig+0x638>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d130      	bne.n	80092a8 <UART_SetConfig+0x4c8>
 8009246:	4b73      	ldr	r3, [pc, #460]	@ (8009414 <UART_SetConfig+0x634>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d826      	bhi.n	80092a0 <UART_SetConfig+0x4c0>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0x478>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e18a      	b.n	800958e <UART_SetConfig+0x7ae>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e186      	b.n	800958e <UART_SetConfig+0x7ae>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e182      	b.n	800958e <UART_SetConfig+0x7ae>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e17e      	b.n	800958e <UART_SetConfig+0x7ae>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e17a      	b.n	800958e <UART_SetConfig+0x7ae>
 8009298:	2340      	movs	r3, #64	@ 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e176      	b.n	800958e <UART_SetConfig+0x7ae>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e172      	b.n	800958e <UART_SetConfig+0x7ae>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a5b      	ldr	r2, [pc, #364]	@ (800941c <UART_SetConfig+0x63c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x534>
 80092b2:	4b58      	ldr	r3, [pc, #352]	@ (8009414 <UART_SetConfig+0x634>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x52c>
 80092be:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <UART_SetConfig+0x4e4>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e154      	b.n	800958e <UART_SetConfig+0x7ae>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e150      	b.n	800958e <UART_SetConfig+0x7ae>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e14c      	b.n	800958e <UART_SetConfig+0x7ae>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e148      	b.n	800958e <UART_SetConfig+0x7ae>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e144      	b.n	800958e <UART_SetConfig+0x7ae>
 8009304:	2340      	movs	r3, #64	@ 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e140      	b.n	800958e <UART_SetConfig+0x7ae>
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e13c      	b.n	800958e <UART_SetConfig+0x7ae>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a41      	ldr	r2, [pc, #260]	@ (8009420 <UART_SetConfig+0x640>)
 800931a:	4293      	cmp	r3, r2
 800931c:	f040 8082 	bne.w	8009424 <UART_SetConfig+0x644>
 8009320:	4b3c      	ldr	r3, [pc, #240]	@ (8009414 <UART_SetConfig+0x634>)
 8009322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009328:	2b28      	cmp	r3, #40	@ 0x28
 800932a:	d86d      	bhi.n	8009408 <UART_SetConfig+0x628>
 800932c:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <UART_SetConfig+0x554>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	080093d9 	.word	0x080093d9
 8009338:	08009409 	.word	0x08009409
 800933c:	08009409 	.word	0x08009409
 8009340:	08009409 	.word	0x08009409
 8009344:	08009409 	.word	0x08009409
 8009348:	08009409 	.word	0x08009409
 800934c:	08009409 	.word	0x08009409
 8009350:	08009409 	.word	0x08009409
 8009354:	080093e1 	.word	0x080093e1
 8009358:	08009409 	.word	0x08009409
 800935c:	08009409 	.word	0x08009409
 8009360:	08009409 	.word	0x08009409
 8009364:	08009409 	.word	0x08009409
 8009368:	08009409 	.word	0x08009409
 800936c:	08009409 	.word	0x08009409
 8009370:	08009409 	.word	0x08009409
 8009374:	080093e9 	.word	0x080093e9
 8009378:	08009409 	.word	0x08009409
 800937c:	08009409 	.word	0x08009409
 8009380:	08009409 	.word	0x08009409
 8009384:	08009409 	.word	0x08009409
 8009388:	08009409 	.word	0x08009409
 800938c:	08009409 	.word	0x08009409
 8009390:	08009409 	.word	0x08009409
 8009394:	080093f1 	.word	0x080093f1
 8009398:	08009409 	.word	0x08009409
 800939c:	08009409 	.word	0x08009409
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009409 	.word	0x08009409
 80093a8:	08009409 	.word	0x08009409
 80093ac:	08009409 	.word	0x08009409
 80093b0:	08009409 	.word	0x08009409
 80093b4:	080093f9 	.word	0x080093f9
 80093b8:	08009409 	.word	0x08009409
 80093bc:	08009409 	.word	0x08009409
 80093c0:	08009409 	.word	0x08009409
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009409 	.word	0x08009409
 80093cc:	08009409 	.word	0x08009409
 80093d0:	08009409 	.word	0x08009409
 80093d4:	08009401 	.word	0x08009401
 80093d8:	2301      	movs	r3, #1
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e0d6      	b.n	800958e <UART_SetConfig+0x7ae>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e0d2      	b.n	800958e <UART_SetConfig+0x7ae>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e0ce      	b.n	800958e <UART_SetConfig+0x7ae>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e0ca      	b.n	800958e <UART_SetConfig+0x7ae>
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e0c6      	b.n	800958e <UART_SetConfig+0x7ae>
 8009400:	2340      	movs	r3, #64	@ 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e0c2      	b.n	800958e <UART_SetConfig+0x7ae>
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e0be      	b.n	800958e <UART_SetConfig+0x7ae>
 8009410:	40011400 	.word	0x40011400
 8009414:	58024400 	.word	0x58024400
 8009418:	40007800 	.word	0x40007800
 800941c:	40007c00 	.word	0x40007c00
 8009420:	40011800 	.word	0x40011800
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4aad      	ldr	r2, [pc, #692]	@ (80096e0 <UART_SetConfig+0x900>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d176      	bne.n	800951c <UART_SetConfig+0x73c>
 800942e:	4bad      	ldr	r3, [pc, #692]	@ (80096e4 <UART_SetConfig+0x904>)
 8009430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009436:	2b28      	cmp	r3, #40	@ 0x28
 8009438:	d86c      	bhi.n	8009514 <UART_SetConfig+0x734>
 800943a:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <UART_SetConfig+0x660>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	080094e5 	.word	0x080094e5
 8009444:	08009515 	.word	0x08009515
 8009448:	08009515 	.word	0x08009515
 800944c:	08009515 	.word	0x08009515
 8009450:	08009515 	.word	0x08009515
 8009454:	08009515 	.word	0x08009515
 8009458:	08009515 	.word	0x08009515
 800945c:	08009515 	.word	0x08009515
 8009460:	080094ed 	.word	0x080094ed
 8009464:	08009515 	.word	0x08009515
 8009468:	08009515 	.word	0x08009515
 800946c:	08009515 	.word	0x08009515
 8009470:	08009515 	.word	0x08009515
 8009474:	08009515 	.word	0x08009515
 8009478:	08009515 	.word	0x08009515
 800947c:	08009515 	.word	0x08009515
 8009480:	080094f5 	.word	0x080094f5
 8009484:	08009515 	.word	0x08009515
 8009488:	08009515 	.word	0x08009515
 800948c:	08009515 	.word	0x08009515
 8009490:	08009515 	.word	0x08009515
 8009494:	08009515 	.word	0x08009515
 8009498:	08009515 	.word	0x08009515
 800949c:	08009515 	.word	0x08009515
 80094a0:	080094fd 	.word	0x080094fd
 80094a4:	08009515 	.word	0x08009515
 80094a8:	08009515 	.word	0x08009515
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009515 	.word	0x08009515
 80094b4:	08009515 	.word	0x08009515
 80094b8:	08009515 	.word	0x08009515
 80094bc:	08009515 	.word	0x08009515
 80094c0:	08009505 	.word	0x08009505
 80094c4:	08009515 	.word	0x08009515
 80094c8:	08009515 	.word	0x08009515
 80094cc:	08009515 	.word	0x08009515
 80094d0:	08009515 	.word	0x08009515
 80094d4:	08009515 	.word	0x08009515
 80094d8:	08009515 	.word	0x08009515
 80094dc:	08009515 	.word	0x08009515
 80094e0:	0800950d 	.word	0x0800950d
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e050      	b.n	800958e <UART_SetConfig+0x7ae>
 80094ec:	2304      	movs	r3, #4
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e04c      	b.n	800958e <UART_SetConfig+0x7ae>
 80094f4:	2308      	movs	r3, #8
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e048      	b.n	800958e <UART_SetConfig+0x7ae>
 80094fc:	2310      	movs	r3, #16
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e044      	b.n	800958e <UART_SetConfig+0x7ae>
 8009504:	2320      	movs	r3, #32
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e040      	b.n	800958e <UART_SetConfig+0x7ae>
 800950c:	2340      	movs	r3, #64	@ 0x40
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e03c      	b.n	800958e <UART_SetConfig+0x7ae>
 8009514:	2380      	movs	r3, #128	@ 0x80
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e038      	b.n	800958e <UART_SetConfig+0x7ae>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a71      	ldr	r2, [pc, #452]	@ (80096e8 <UART_SetConfig+0x908>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d130      	bne.n	8009588 <UART_SetConfig+0x7a8>
 8009526:	4b6f      	ldr	r3, [pc, #444]	@ (80096e4 <UART_SetConfig+0x904>)
 8009528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b05      	cmp	r3, #5
 8009530:	d826      	bhi.n	8009580 <UART_SetConfig+0x7a0>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <UART_SetConfig+0x758>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009551 	.word	0x08009551
 800953c:	08009559 	.word	0x08009559
 8009540:	08009561 	.word	0x08009561
 8009544:	08009569 	.word	0x08009569
 8009548:	08009571 	.word	0x08009571
 800954c:	08009579 	.word	0x08009579
 8009550:	2302      	movs	r3, #2
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e01a      	b.n	800958e <UART_SetConfig+0x7ae>
 8009558:	2304      	movs	r3, #4
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e016      	b.n	800958e <UART_SetConfig+0x7ae>
 8009560:	2308      	movs	r3, #8
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e012      	b.n	800958e <UART_SetConfig+0x7ae>
 8009568:	2310      	movs	r3, #16
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e00e      	b.n	800958e <UART_SetConfig+0x7ae>
 8009570:	2320      	movs	r3, #32
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e00a      	b.n	800958e <UART_SetConfig+0x7ae>
 8009578:	2340      	movs	r3, #64	@ 0x40
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e006      	b.n	800958e <UART_SetConfig+0x7ae>
 8009580:	2380      	movs	r3, #128	@ 0x80
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e002      	b.n	800958e <UART_SetConfig+0x7ae>
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a55      	ldr	r2, [pc, #340]	@ (80096e8 <UART_SetConfig+0x908>)
 8009594:	4293      	cmp	r3, r2
 8009596:	f040 80f8 	bne.w	800978a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800959a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800959e:	2b20      	cmp	r3, #32
 80095a0:	dc46      	bgt.n	8009630 <UART_SetConfig+0x850>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	db75      	blt.n	8009692 <UART_SetConfig+0x8b2>
 80095a6:	3b02      	subs	r3, #2
 80095a8:	2b1e      	cmp	r3, #30
 80095aa:	d872      	bhi.n	8009692 <UART_SetConfig+0x8b2>
 80095ac:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <UART_SetConfig+0x7d4>)
 80095ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b2:	bf00      	nop
 80095b4:	08009637 	.word	0x08009637
 80095b8:	08009693 	.word	0x08009693
 80095bc:	0800963f 	.word	0x0800963f
 80095c0:	08009693 	.word	0x08009693
 80095c4:	08009693 	.word	0x08009693
 80095c8:	08009693 	.word	0x08009693
 80095cc:	0800964f 	.word	0x0800964f
 80095d0:	08009693 	.word	0x08009693
 80095d4:	08009693 	.word	0x08009693
 80095d8:	08009693 	.word	0x08009693
 80095dc:	08009693 	.word	0x08009693
 80095e0:	08009693 	.word	0x08009693
 80095e4:	08009693 	.word	0x08009693
 80095e8:	08009693 	.word	0x08009693
 80095ec:	0800965f 	.word	0x0800965f
 80095f0:	08009693 	.word	0x08009693
 80095f4:	08009693 	.word	0x08009693
 80095f8:	08009693 	.word	0x08009693
 80095fc:	08009693 	.word	0x08009693
 8009600:	08009693 	.word	0x08009693
 8009604:	08009693 	.word	0x08009693
 8009608:	08009693 	.word	0x08009693
 800960c:	08009693 	.word	0x08009693
 8009610:	08009693 	.word	0x08009693
 8009614:	08009693 	.word	0x08009693
 8009618:	08009693 	.word	0x08009693
 800961c:	08009693 	.word	0x08009693
 8009620:	08009693 	.word	0x08009693
 8009624:	08009693 	.word	0x08009693
 8009628:	08009693 	.word	0x08009693
 800962c:	08009685 	.word	0x08009685
 8009630:	2b40      	cmp	r3, #64	@ 0x40
 8009632:	d02a      	beq.n	800968a <UART_SetConfig+0x8aa>
 8009634:	e02d      	b.n	8009692 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009636:	f7fd fd9b 	bl	8007170 <HAL_RCCEx_GetD3PCLK1Freq>
 800963a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800963c:	e02f      	b.n	800969e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009642:	4618      	mov	r0, r3
 8009644:	f7fd fdaa 	bl	800719c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964c:	e027      	b.n	800969e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964e:	f107 0318 	add.w	r3, r7, #24
 8009652:	4618      	mov	r0, r3
 8009654:	f7fd fef6 	bl	8007444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800965c:	e01f      	b.n	800969e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800965e:	4b21      	ldr	r3, [pc, #132]	@ (80096e4 <UART_SetConfig+0x904>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800966a:	4b1e      	ldr	r3, [pc, #120]	@ (80096e4 <UART_SetConfig+0x904>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	08db      	lsrs	r3, r3, #3
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	4a1d      	ldr	r2, [pc, #116]	@ (80096ec <UART_SetConfig+0x90c>)
 8009676:	fa22 f303 	lsr.w	r3, r2, r3
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800967c:	e00f      	b.n	800969e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800967e:	4b1b      	ldr	r3, [pc, #108]	@ (80096ec <UART_SetConfig+0x90c>)
 8009680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009682:	e00c      	b.n	800969e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009684:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <UART_SetConfig+0x910>)
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009688:	e009      	b.n	800969e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800968a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009690:	e005      	b.n	800969e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800969c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800969e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 81ee 	beq.w	8009a82 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	4a12      	ldr	r2, [pc, #72]	@ (80096f4 <UART_SetConfig+0x914>)
 80096ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096b0:	461a      	mov	r2, r3
 80096b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4413      	add	r3, r2
 80096c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d305      	bcc.n	80096d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d910      	bls.n	80096f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096dc:	e1d1      	b.n	8009a82 <UART_SetConfig+0xca2>
 80096de:	bf00      	nop
 80096e0:	40011c00 	.word	0x40011c00
 80096e4:	58024400 	.word	0x58024400
 80096e8:	58000c00 	.word	0x58000c00
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	003d0900 	.word	0x003d0900
 80096f4:	0800c33c 	.word	0x0800c33c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	2200      	movs	r2, #0
 80096fc:	60bb      	str	r3, [r7, #8]
 80096fe:	60fa      	str	r2, [r7, #12]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	4ac0      	ldr	r2, [pc, #768]	@ (8009a08 <UART_SetConfig+0xc28>)
 8009706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800970a:	b29b      	uxth	r3, r3
 800970c:	2200      	movs	r2, #0
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800971a:	f7f6 fe59 	bl	80003d0 <__aeabi_uldivmod>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4610      	mov	r0, r2
 8009724:	4619      	mov	r1, r3
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	f04f 0300 	mov.w	r3, #0
 800972e:	020b      	lsls	r3, r1, #8
 8009730:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009734:	0202      	lsls	r2, r0, #8
 8009736:	6979      	ldr	r1, [r7, #20]
 8009738:	6849      	ldr	r1, [r1, #4]
 800973a:	0849      	lsrs	r1, r1, #1
 800973c:	2000      	movs	r0, #0
 800973e:	460c      	mov	r4, r1
 8009740:	4605      	mov	r5, r0
 8009742:	eb12 0804 	adds.w	r8, r2, r4
 8009746:	eb43 0905 	adc.w	r9, r3, r5
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	469a      	mov	sl, r3
 8009752:	4693      	mov	fp, r2
 8009754:	4652      	mov	r2, sl
 8009756:	465b      	mov	r3, fp
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f6 fe38 	bl	80003d0 <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4613      	mov	r3, r2
 8009766:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800976e:	d308      	bcc.n	8009782 <UART_SetConfig+0x9a2>
 8009770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009776:	d204      	bcs.n	8009782 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800977e:	60da      	str	r2, [r3, #12]
 8009780:	e17f      	b.n	8009a82 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009788:	e17b      	b.n	8009a82 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009792:	f040 80bd 	bne.w	8009910 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009796:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800979a:	2b20      	cmp	r3, #32
 800979c:	dc48      	bgt.n	8009830 <UART_SetConfig+0xa50>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db7b      	blt.n	800989a <UART_SetConfig+0xaba>
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d879      	bhi.n	800989a <UART_SetConfig+0xaba>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <UART_SetConfig+0x9cc>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	08009837 	.word	0x08009837
 80097b0:	0800983f 	.word	0x0800983f
 80097b4:	0800989b 	.word	0x0800989b
 80097b8:	0800989b 	.word	0x0800989b
 80097bc:	08009847 	.word	0x08009847
 80097c0:	0800989b 	.word	0x0800989b
 80097c4:	0800989b 	.word	0x0800989b
 80097c8:	0800989b 	.word	0x0800989b
 80097cc:	08009857 	.word	0x08009857
 80097d0:	0800989b 	.word	0x0800989b
 80097d4:	0800989b 	.word	0x0800989b
 80097d8:	0800989b 	.word	0x0800989b
 80097dc:	0800989b 	.word	0x0800989b
 80097e0:	0800989b 	.word	0x0800989b
 80097e4:	0800989b 	.word	0x0800989b
 80097e8:	0800989b 	.word	0x0800989b
 80097ec:	08009867 	.word	0x08009867
 80097f0:	0800989b 	.word	0x0800989b
 80097f4:	0800989b 	.word	0x0800989b
 80097f8:	0800989b 	.word	0x0800989b
 80097fc:	0800989b 	.word	0x0800989b
 8009800:	0800989b 	.word	0x0800989b
 8009804:	0800989b 	.word	0x0800989b
 8009808:	0800989b 	.word	0x0800989b
 800980c:	0800989b 	.word	0x0800989b
 8009810:	0800989b 	.word	0x0800989b
 8009814:	0800989b 	.word	0x0800989b
 8009818:	0800989b 	.word	0x0800989b
 800981c:	0800989b 	.word	0x0800989b
 8009820:	0800989b 	.word	0x0800989b
 8009824:	0800989b 	.word	0x0800989b
 8009828:	0800989b 	.word	0x0800989b
 800982c:	0800988d 	.word	0x0800988d
 8009830:	2b40      	cmp	r3, #64	@ 0x40
 8009832:	d02e      	beq.n	8009892 <UART_SetConfig+0xab2>
 8009834:	e031      	b.n	800989a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009836:	f7fc facf 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 800983a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800983c:	e033      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800983e:	f7fc fae1 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 8009842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009844:	e02f      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800984a:	4618      	mov	r0, r3
 800984c:	f7fd fca6 	bl	800719c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009854:	e027      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009856:	f107 0318 	add.w	r3, r7, #24
 800985a:	4618      	mov	r0, r3
 800985c:	f7fd fdf2 	bl	8007444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009864:	e01f      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009866:	4b69      	ldr	r3, [pc, #420]	@ (8009a0c <UART_SetConfig+0xc2c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009872:	4b66      	ldr	r3, [pc, #408]	@ (8009a0c <UART_SetConfig+0xc2c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	08db      	lsrs	r3, r3, #3
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	4a64      	ldr	r2, [pc, #400]	@ (8009a10 <UART_SetConfig+0xc30>)
 800987e:	fa22 f303 	lsr.w	r3, r2, r3
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009884:	e00f      	b.n	80098a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009886:	4b62      	ldr	r3, [pc, #392]	@ (8009a10 <UART_SetConfig+0xc30>)
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e00c      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800988c:	4b61      	ldr	r3, [pc, #388]	@ (8009a14 <UART_SetConfig+0xc34>)
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009890:	e009      	b.n	80098a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009898:	e005      	b.n	80098a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80ea 	beq.w	8009a82 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b2:	4a55      	ldr	r2, [pc, #340]	@ (8009a08 <UART_SetConfig+0xc28>)
 80098b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c0:	005a      	lsls	r2, r3, #1
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	441a      	add	r2, r3
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d916      	bls.n	8009908 <UART_SetConfig+0xb28>
 80098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e0:	d212      	bcs.n	8009908 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f023 030f 	bic.w	r3, r3, #15
 80098ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80098fa:	4313      	orrs	r3, r2
 80098fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	e0bc      	b.n	8009a82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800990e:	e0b8      	b.n	8009a82 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009910:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009914:	2b20      	cmp	r3, #32
 8009916:	dc4b      	bgt.n	80099b0 <UART_SetConfig+0xbd0>
 8009918:	2b00      	cmp	r3, #0
 800991a:	f2c0 8087 	blt.w	8009a2c <UART_SetConfig+0xc4c>
 800991e:	2b20      	cmp	r3, #32
 8009920:	f200 8084 	bhi.w	8009a2c <UART_SetConfig+0xc4c>
 8009924:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <UART_SetConfig+0xb4c>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	080099b7 	.word	0x080099b7
 8009930:	080099bf 	.word	0x080099bf
 8009934:	08009a2d 	.word	0x08009a2d
 8009938:	08009a2d 	.word	0x08009a2d
 800993c:	080099c7 	.word	0x080099c7
 8009940:	08009a2d 	.word	0x08009a2d
 8009944:	08009a2d 	.word	0x08009a2d
 8009948:	08009a2d 	.word	0x08009a2d
 800994c:	080099d7 	.word	0x080099d7
 8009950:	08009a2d 	.word	0x08009a2d
 8009954:	08009a2d 	.word	0x08009a2d
 8009958:	08009a2d 	.word	0x08009a2d
 800995c:	08009a2d 	.word	0x08009a2d
 8009960:	08009a2d 	.word	0x08009a2d
 8009964:	08009a2d 	.word	0x08009a2d
 8009968:	08009a2d 	.word	0x08009a2d
 800996c:	080099e7 	.word	0x080099e7
 8009970:	08009a2d 	.word	0x08009a2d
 8009974:	08009a2d 	.word	0x08009a2d
 8009978:	08009a2d 	.word	0x08009a2d
 800997c:	08009a2d 	.word	0x08009a2d
 8009980:	08009a2d 	.word	0x08009a2d
 8009984:	08009a2d 	.word	0x08009a2d
 8009988:	08009a2d 	.word	0x08009a2d
 800998c:	08009a2d 	.word	0x08009a2d
 8009990:	08009a2d 	.word	0x08009a2d
 8009994:	08009a2d 	.word	0x08009a2d
 8009998:	08009a2d 	.word	0x08009a2d
 800999c:	08009a2d 	.word	0x08009a2d
 80099a0:	08009a2d 	.word	0x08009a2d
 80099a4:	08009a2d 	.word	0x08009a2d
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009a1f 	.word	0x08009a1f
 80099b0:	2b40      	cmp	r3, #64	@ 0x40
 80099b2:	d037      	beq.n	8009a24 <UART_SetConfig+0xc44>
 80099b4:	e03a      	b.n	8009a2c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b6:	f7fc fa0f 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80099ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099bc:	e03c      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099be:	f7fc fa21 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 80099c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099c4:	e038      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fd fbe6 	bl	800719c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d4:	e030      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099d6:	f107 0318 	add.w	r3, r7, #24
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fd fd32 	bl	8007444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e028      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099e6:	4b09      	ldr	r3, [pc, #36]	@ (8009a0c <UART_SetConfig+0xc2c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d012      	beq.n	8009a18 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099f2:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <UART_SetConfig+0xc2c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	08db      	lsrs	r3, r3, #3
 80099f8:	f003 0303 	and.w	r3, r3, #3
 80099fc:	4a04      	ldr	r2, [pc, #16]	@ (8009a10 <UART_SetConfig+0xc30>)
 80099fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a04:	e018      	b.n	8009a38 <UART_SetConfig+0xc58>
 8009a06:	bf00      	nop
 8009a08:	0800c33c 	.word	0x0800c33c
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	03d09000 	.word	0x03d09000
 8009a14:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009a18:	4b24      	ldr	r3, [pc, #144]	@ (8009aac <UART_SetConfig+0xccc>)
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a1c:	e00c      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a1e:	4b24      	ldr	r3, [pc, #144]	@ (8009ab0 <UART_SetConfig+0xcd0>)
 8009a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a22:	e009      	b.n	8009a38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2a:	e005      	b.n	8009a38 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a36:	bf00      	nop
    }

    if (pclk != 0U)
 8009a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d021      	beq.n	8009a82 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab4 <UART_SetConfig+0xcd4>)
 8009a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	085b      	lsrs	r3, r3, #1
 8009a56:	441a      	add	r2, r3
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a60:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	2b0f      	cmp	r3, #15
 8009a66:	d909      	bls.n	8009a7c <UART_SetConfig+0xc9c>
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a6e:	d205      	bcs.n	8009a7c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60da      	str	r2, [r3, #12]
 8009a7a:	e002      	b.n	8009a82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2200      	movs	r2, #0
 8009a96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a9e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3748      	adds	r7, #72	@ 0x48
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	003d0900 	.word	0x003d0900
 8009ab4:	0800c33c 	.word	0x0800c33c

08009ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00a      	beq.n	8009ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00a      	beq.n	8009b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00a      	beq.n	8009b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6e:	f003 0320 	and.w	r3, r3, #32
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d01a      	beq.n	8009bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bb6:	d10a      	bne.n	8009bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	605a      	str	r2, [r3, #4]
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b098      	sub	sp, #96	@ 0x60
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c0c:	f7f7 fd22 	bl	8001654 <HAL_GetTick>
 8009c10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0308 	and.w	r3, r3, #8
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d12f      	bne.n	8009c80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f88e 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d022      	beq.n	8009c80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e6      	bne.n	8009c3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e063      	b.n	8009d48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d149      	bne.n	8009d22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c96:	2200      	movs	r2, #0
 8009c98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f857 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d03c      	beq.n	8009d22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cfa:	61fa      	str	r2, [r7, #28]
 8009cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	69b9      	ldr	r1, [r7, #24]
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	617b      	str	r3, [r7, #20]
   return(result);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e012      	b.n	8009d48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3758      	adds	r7, #88	@ 0x58
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d60:	e04f      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d04b      	beq.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d6a:	f7f7 fc73 	bl	8001654 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d302      	bcc.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e04e      	b.n	8009e22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d037      	beq.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b80      	cmp	r3, #128	@ 0x80
 8009d96:	d034      	beq.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	d031      	beq.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d110      	bne.n	8009dce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2208      	movs	r2, #8
 8009db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f921 	bl	8009ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e029      	b.n	8009e22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ddc:	d111      	bne.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 f907 	bl	8009ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e00f      	b.n	8009e22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	bf0c      	ite	eq
 8009e12:	2301      	moveq	r3, #1
 8009e14:	2300      	movne	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d0a0      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b096      	sub	sp, #88	@ 0x58
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	88fa      	ldrh	r2, [r7, #6]
 8009e44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2222      	movs	r2, #34	@ 0x22
 8009e54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d02d      	beq.n	8009ebe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e68:	4a40      	ldr	r2, [pc, #256]	@ (8009f6c <UART_Start_Receive_DMA+0x140>)
 8009e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e72:	4a3f      	ldr	r2, [pc, #252]	@ (8009f70 <UART_Start_Receive_DMA+0x144>)
 8009e74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8009f74 <UART_Start_Receive_DMA+0x148>)
 8009e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	2200      	movs	r2, #0
 8009e88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3324      	adds	r3, #36	@ 0x24
 8009e96:	4619      	mov	r1, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	88fb      	ldrh	r3, [r7, #6]
 8009ea0:	f7f8 fa4e 	bl	8002340 <HAL_DMA_Start_IT>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2210      	movs	r2, #16
 8009eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e051      	b.n	8009f62 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d018      	beq.n	8009ef8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009eda:	657b      	str	r3, [r7, #84]	@ 0x54
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ee6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e6      	bne.n	8009ec6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f18:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f20:	e841 2300 	strex	r3, r2, [r1]
 8009f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e5      	bne.n	8009ef8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3308      	adds	r3, #8
 8009f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3308      	adds	r3, #8
 8009f4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f4c:	623a      	str	r2, [r7, #32]
 8009f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	69f9      	ldr	r1, [r7, #28]
 8009f52:	6a3a      	ldr	r2, [r7, #32]
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e5      	bne.n	8009f2c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3758      	adds	r7, #88	@ 0x58
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	0800a0c9 	.word	0x0800a0c9
 8009f70:	0800a1f1 	.word	0x0800a1f1
 8009f74:	0800a22f 	.word	0x0800a22f

08009f78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b08f      	sub	sp, #60	@ 0x3c
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e6      	bne.n	8009f80 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fd2:	61ba      	str	r2, [r7, #24]
 8009fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6979      	ldr	r1, [r7, #20]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009fee:	bf00      	nop
 8009ff0:	373c      	adds	r7, #60	@ 0x3c
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
	...

08009ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b095      	sub	sp, #84	@ 0x54
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a022:	643b      	str	r3, [r7, #64]	@ 0x40
 800a024:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e6      	bne.n	800a004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3308      	adds	r3, #8
 800a03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	61fb      	str	r3, [r7, #28]
   return(result);
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c4 <UART_EndRxTransfer+0xc8>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a058:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a05c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d118      	bne.n	800a0a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f023 0310 	bic.w	r3, r3, #16
 800a086:	647b      	str	r3, [r7, #68]	@ 0x44
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a090:	61bb      	str	r3, [r7, #24]
 800a092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6979      	ldr	r1, [r7, #20]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	613b      	str	r3, [r7, #16]
   return(result);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0b8:	bf00      	nop
 800a0ba:	3754      	adds	r7, #84	@ 0x54
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	effffffe 	.word	0xeffffffe

0800a0c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b09c      	sub	sp, #112	@ 0x70
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0de:	d071      	beq.n	800a1c4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a106:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a108:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a10c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e6      	bne.n	800a0e8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	667b      	str	r3, [r7, #100]	@ 0x64
 800a132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a13a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a13c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e5      	bne.n	800a11a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3308      	adds	r3, #8
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	623b      	str	r3, [r7, #32]
   return(result);
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a164:	663b      	str	r3, [r7, #96]	@ 0x60
 800a166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a16e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e5      	bne.n	800a14e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a18c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d118      	bne.n	800a1c4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0310 	bic.w	r3, r3, #16
 800a1a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1b0:	61fb      	str	r3, [r7, #28]
 800a1b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	69b9      	ldr	r1, [r7, #24]
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d107      	bne.n	800a1e2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1dc:	f7fe fdf4 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1e0:	e002      	b.n	800a1e8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a1e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1e4:	f000 fc5a 	bl	800aa9c <HAL_UART_RxCpltCallback>
}
 800a1e8:	bf00      	nop
 800a1ea:	3770      	adds	r7, #112	@ 0x70
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d109      	bne.n	800a220 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a212:	085b      	lsrs	r3, r3, #1
 800a214:	b29b      	uxth	r3, r3
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7fe fdd5 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a21e:	e002      	b.n	800a226 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7fe fdbd 	bl	8008da0 <HAL_UART_RxHalfCpltCallback>
}
 800a226:	bf00      	nop
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b086      	sub	sp, #24
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a23a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a242:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a256:	2b80      	cmp	r3, #128	@ 0x80
 800a258:	d109      	bne.n	800a26e <UART_DMAError+0x40>
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2b21      	cmp	r3, #33	@ 0x21
 800a25e:	d106      	bne.n	800a26e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2200      	movs	r2, #0
 800a264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a268:	6978      	ldr	r0, [r7, #20]
 800a26a:	f7ff fe85 	bl	8009f78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a278:	2b40      	cmp	r3, #64	@ 0x40
 800a27a:	d109      	bne.n	800a290 <UART_DMAError+0x62>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b22      	cmp	r3, #34	@ 0x22
 800a280:	d106      	bne.n	800a290 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2200      	movs	r2, #0
 800a286:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a28a:	6978      	ldr	r0, [r7, #20]
 800a28c:	f7ff feb6 	bl	8009ffc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a296:	f043 0210 	orr.w	r2, r3, #16
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2a0:	6978      	ldr	r0, [r7, #20]
 800a2a2:	f7fe fd87 	bl	8008db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b084      	sub	sp, #16
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7fe fd71 	bl	8008db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d2:	bf00      	nop
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b08f      	sub	sp, #60	@ 0x3c
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e8:	2b21      	cmp	r3, #33	@ 0x21
 800a2ea:	d14c      	bne.n	800a386 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d132      	bne.n	800a35e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	61fb      	str	r3, [r7, #28]
   return(result);
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a318:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a31c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e6      	bne.n	800a2f8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60bb      	str	r3, [r7, #8]
   return(result);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a33e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	613b      	str	r3, [r7, #16]
   return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a35c:	e013      	b.n	800a386 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a362:	781a      	ldrb	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a386:	bf00      	nop
 800a388:	373c      	adds	r7, #60	@ 0x3c
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a392:	b480      	push	{r7}
 800a394:	b091      	sub	sp, #68	@ 0x44
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a0:	2b21      	cmp	r3, #33	@ 0x21
 800a3a2:	d151      	bne.n	800a448 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d132      	bne.n	800a416 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e6      	bne.n	800a3b0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a400:	61fb      	str	r3, [r7, #28]
 800a402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	69b9      	ldr	r1, [r7, #24]
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	617b      	str	r3, [r7, #20]
   return(result);
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e6      	bne.n	800a3e2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a414:	e018      	b.n	800a448 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a42a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a430:	1c9a      	adds	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	3b01      	subs	r3, #1
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a448:	bf00      	nop
 800a44a:	3744      	adds	r7, #68	@ 0x44
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a454:	b480      	push	{r7}
 800a456:	b091      	sub	sp, #68	@ 0x44
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a462:	2b21      	cmp	r3, #33	@ 0x21
 800a464:	d160      	bne.n	800a528 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a46c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a46e:	e057      	b.n	800a520 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d133      	bne.n	800a4e4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3308      	adds	r3, #8
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	623b      	str	r3, [r7, #32]
   return(result);
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3308      	adds	r3, #8
 800a49a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a49c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e5      	bne.n	800a47c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	69b9      	ldr	r1, [r7, #24]
 800a4d4:	69fa      	ldr	r2, [r7, #28]
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	617b      	str	r3, [r7, #20]
   return(result);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e6      	bne.n	800a4b0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a4e2:	e021      	b.n	800a528 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4f6:	781a      	ldrb	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a50e:	b29b      	uxth	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a51a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a51c:	3b01      	subs	r3, #1
 800a51e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a520:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1a4      	bne.n	800a470 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a526:	e7ff      	b.n	800a528 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a528:	bf00      	nop
 800a52a:	3744      	adds	r7, #68	@ 0x44
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b091      	sub	sp, #68	@ 0x44
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a542:	2b21      	cmp	r3, #33	@ 0x21
 800a544:	d165      	bne.n	800a612 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a54c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a54e:	e05c      	b.n	800a60a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a556:	b29b      	uxth	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d133      	bne.n	800a5c4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3308      	adds	r3, #8
 800a57a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a57c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e5      	bne.n	800a55c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b2:	6979      	ldr	r1, [r7, #20]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e6      	bne.n	800a590 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a5c2:	e026      	b.n	800a612 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d018      	beq.n	800a604 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5e6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ec:	1c9a      	adds	r2, r3, #2
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a604:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a606:	3b01      	subs	r3, #1
 800a608:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a60a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d19f      	bne.n	800a550 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a610:	e7ff      	b.n	800a612 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a612:	bf00      	nop
 800a614:	3744      	adds	r7, #68	@ 0x44
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b088      	sub	sp, #32
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	60bb      	str	r3, [r7, #8]
   return(result);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	61bb      	str	r3, [r7, #24]
 800a646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6979      	ldr	r1, [r7, #20]
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	613b      	str	r3, [r7, #16]
   return(result);
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e6      	bne.n	800a626 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa28 	bl	800aabc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a66c:	bf00      	nop
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e027      	b.n	800a716 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	@ 0x24
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a6f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a732:	2b01      	cmp	r3, #1
 800a734:	d101      	bne.n	800a73a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a736:	2302      	movs	r3, #2
 800a738:	e02d      	b.n	800a796 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2224      	movs	r2, #36	@ 0x24
 800a746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0201 	bic.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	430a      	orrs	r2, r1
 800a774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f850 	bl	800a81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2220      	movs	r2, #32
 800a788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d101      	bne.n	800a7b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	e02d      	b.n	800a812 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2224      	movs	r2, #36	@ 0x24
 800a7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 0201 	bic.w	r2, r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f812 	bl	800a81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2220      	movs	r2, #32
 800a804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d108      	bne.n	800a83e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a83c:	e031      	b.n	800a8a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a83e:	2310      	movs	r3, #16
 800a840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a842:	2310      	movs	r3, #16
 800a844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	0e5b      	lsrs	r3, r3, #25
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	0f5b      	lsrs	r3, r3, #29
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	7b3a      	ldrb	r2, [r7, #12]
 800a86a:	4911      	ldr	r1, [pc, #68]	@ (800a8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a86c:	5c8a      	ldrb	r2, [r1, r2]
 800a86e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a872:	7b3a      	ldrb	r2, [r7, #12]
 800a874:	490f      	ldr	r1, [pc, #60]	@ (800a8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a878:	fb93 f3f2 	sdiv	r3, r3, r2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	7b7a      	ldrb	r2, [r7, #13]
 800a888:	4909      	ldr	r1, [pc, #36]	@ (800a8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a88a:	5c8a      	ldrb	r2, [r1, r2]
 800a88c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a890:	7b7a      	ldrb	r2, [r7, #13]
 800a892:	4908      	ldr	r1, [pc, #32]	@ (800a8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a896:	fb93 f3f2 	sdiv	r3, r3, r2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	0800c354 	.word	0x0800c354
 800a8b4:	0800c35c 	.word	0x0800c35c

0800a8b8 <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a8c2:	f000 f83d 	bl	800a940 <HAL_ResumeTick>

	HAL_UART_MspInit(&huart3);
 800a8c6:	480b      	ldr	r0, [pc, #44]	@ (800a8f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a8c8:	f7f6 fd46 	bl	8001358 <HAL_UART_MspInit>

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a8f8 <HAL_GPIO_EXTI_Callback+0x40>)
 800a8ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8d2:	480a      	ldr	r0, [pc, #40]	@ (800a8fc <HAL_GPIO_EXTI_Callback+0x44>)
 800a8d4:	f000 fc40 	bl	800b158 <sniprintf>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a8dc:	89fa      	ldrh	r2, [r7, #14]
 800a8de:	2364      	movs	r3, #100	@ 0x64
 800a8e0:	4906      	ldr	r1, [pc, #24]	@ (800a8fc <HAL_GPIO_EXTI_Callback+0x44>)
 800a8e2:	4804      	ldr	r0, [pc, #16]	@ (800a8f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a8e4:	f7fd fd34 	bl	8008350 <HAL_UART_Transmit>

	HAL_NVIC_SystemReset();
 800a8e8:	f7f7 f80b 	bl	8001902 <HAL_NVIC_SystemReset>
}
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	24000540 	.word	0x24000540
 800a8f8:	0800c2e8 	.word	0x0800c2e8
 800a8fc:	24000650 	.word	0x24000650

0800a900 <startLowPowerMode>:
#include "lowPowerMode.h"
#include "uart.h"


void startLowPowerMode(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
	HAL_UART_MspDeInit(&huart3);
 800a904:	4805      	ldr	r0, [pc, #20]	@ (800a91c <startLowPowerMode+0x1c>)
 800a906:	f7f6 fdcb 	bl	80014a0 <HAL_UART_MspDeInit>

	HAL_SuspendTick();
 800a90a:	f000 f809 	bl	800a920 <HAL_SuspendTick>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a90e:	2101      	movs	r1, #1
 800a910:	2000      	movs	r0, #0
 800a912:	f7fa fad3 	bl	8004ebc <HAL_PWR_EnterSLEEPMode>
}
 800a916:	bf00      	nop
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	24000540 	.word	0x24000540

0800a920 <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a924:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <HAL_SuspendTick+0x1c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a04      	ldr	r2, [pc, #16]	@ (800a93c <HAL_SuspendTick+0x1c>)
 800a92a:	f023 0302 	bic.w	r3, r3, #2
 800a92e:	6013      	str	r3, [r2, #0]
}
 800a930:	bf00      	nop
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	e000e010 	.word	0xe000e010

0800a940 <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <HAL_ResumeTick+0x1c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a04      	ldr	r2, [pc, #16]	@ (800a95c <HAL_ResumeTick+0x1c>)
 800a94a:	f043 0302 	orr.w	r3, r3, #2
 800a94e:	6013      	str	r3, [r2, #0]
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	e000e010 	.word	0xe000e010

0800a960 <RTCInit>:
		.mins	= 0,
		.secs	= 21
};

void RTCInit(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a964:	2101      	movs	r1, #1
 800a966:	4809      	ldr	r0, [pc, #36]	@ (800a98c <RTCInit+0x2c>)
 800a968:	f7fd fc8c 	bl	8008284 <HAL_RTCEx_BKUPRead>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a972:	4293      	cmp	r3, r2
 800a974:	d008      	beq.n	800a988 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a976:	4806      	ldr	r0, [pc, #24]	@ (800a990 <RTCInit+0x30>)
 800a978:	f000 f810 	bl	800a99c <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a97c:	2364      	movs	r3, #100	@ 0x64
 800a97e:	220d      	movs	r2, #13
 800a980:	4904      	ldr	r1, [pc, #16]	@ (800a994 <RTCInit+0x34>)
 800a982:	4805      	ldr	r0, [pc, #20]	@ (800a998 <RTCInit+0x38>)
 800a984:	f7fd fce4 	bl	8008350 <HAL_UART_Transmit>
	}
}
 800a988:	bf00      	nop
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	24000518 	.word	0x24000518
 800a990:	24000070 	.word	0x24000070
 800a994:	0800c2fc 	.word	0x0800c2fc
 800a998:	24000540 	.word	0x24000540

0800a99c <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a9a4:	f107 030c 	add.w	r3, r7, #12
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	609a      	str	r2, [r3, #8]
 800a9b0:	60da      	str	r2, [r3, #12]
 800a9b2:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	789b      	ldrb	r3, [r3, #2]
 800a9c4:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	78db      	ldrb	r3, [r3, #3]
 800a9d6:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	795b      	ldrb	r3, [r3, #5]
 800a9dc:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	791b      	ldrb	r3, [r3, #4]
 800a9e2:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	799b      	ldrb	r3, [r3, #6]
 800a9e8:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4810      	ldr	r0, [pc, #64]	@ (800aa34 <setRTCData+0x98>)
 800a9f4:	f7fd f860 	bl	8007ab8 <HAL_RTC_SetTime>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d115      	bne.n	800aa2a <setRTCData+0x8e>
 800a9fe:	f107 0308 	add.w	r3, r7, #8
 800aa02:	2200      	movs	r2, #0
 800aa04:	4619      	mov	r1, r3
 800aa06:	480b      	ldr	r0, [pc, #44]	@ (800aa34 <setRTCData+0x98>)
 800aa08:	f7fd f950 	bl	8007cac <HAL_RTC_SetDate>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10b      	bne.n	800aa2a <setRTCData+0x8e>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800aa12:	f242 3245 	movw	r2, #9029	@ 0x2345
 800aa16:	2101      	movs	r1, #1
 800aa18:	4806      	ldr	r0, [pc, #24]	@ (800aa34 <setRTCData+0x98>)
 800aa1a:	f7fd fc1b 	bl	8008254 <HAL_RTCEx_BKUPWrite>
		HAL_UART_Transmit(&huart3, "RTC date Time Set\r\n", 18, 100);
 800aa1e:	2364      	movs	r3, #100	@ 0x64
 800aa20:	2212      	movs	r2, #18
 800aa22:	4905      	ldr	r1, [pc, #20]	@ (800aa38 <setRTCData+0x9c>)
 800aa24:	4805      	ldr	r0, [pc, #20]	@ (800aa3c <setRTCData+0xa0>)
 800aa26:	f7fd fc93 	bl	8008350 <HAL_UART_Transmit>
	}
}
 800aa2a:	bf00      	nop
 800aa2c:	3720      	adds	r7, #32
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	24000518 	.word	0x24000518
 800aa38:	0800c310 	.word	0x0800c310
 800aa3c:	24000540 	.word	0x24000540

0800aa40 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800aa48:	f107 0308 	add.w	r3, r7, #8
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4811      	ldr	r0, [pc, #68]	@ (800aa98 <getRTCData+0x58>)
 800aa52:	f7fd f8cf 	bl	8007bf4 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800aa56:	f107 031c 	add.w	r3, r7, #28
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	480e      	ldr	r0, [pc, #56]	@ (800aa98 <getRTCData+0x58>)
 800aa60:	f7fd f9ac 	bl	8007dbc <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800aa64:	7fba      	ldrb	r2, [r7, #30]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800aa6a:	7f3a      	ldrb	r2, [r7, #28]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800aa70:	7f7a      	ldrb	r2, [r7, #29]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800aa76:	7ffa      	ldrb	r2, [r7, #31]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800aa7c:	7a3a      	ldrb	r2, [r7, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800aa82:	7a7a      	ldrb	r2, [r7, #9]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800aa88:	7aba      	ldrb	r2, [r7, #10]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	709a      	strb	r2, [r3, #2]
}
 800aa8e:	bf00      	nop
 800aa90:	3720      	adds	r7, #32
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	24000518 	.word	0x24000518

0800aa9c <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800aaa4:	4b04      	ldr	r3, [pc, #16]	@ (800aab8 <HAL_UART_RxCpltCallback+0x1c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60fb      	str	r3, [r7, #12]

	fptr();
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4798      	blx	r3
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	240006b4 	.word	0x240006b4

0800aabc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]

}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800aad8:	4a04      	ldr	r2, [pc, #16]	@ (800aaec <uartInit+0x1c>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6013      	str	r3, [r2, #0]
}
 800aade:	bf00      	nop
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	240006b4 	.word	0x240006b4

0800aaf0 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800aaf8:	2201      	movs	r2, #1
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	4803      	ldr	r0, [pc, #12]	@ (800ab0c <receptionItrOn+0x1c>)
 800aafe:	f7fd fd49 	bl	8008594 <HAL_UART_Receive_DMA>
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	24000540 	.word	0x24000540

0800ab10 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800ab14:	4b07      	ldr	r3, [pc, #28]	@ (800ab34 <debugRxCallback+0x24>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b0d      	cmp	r3, #13
 800ab1a:	d102      	bne.n	800ab22 <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <debugRxCallback+0x28>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800ab22:	4b06      	ldr	r3, [pc, #24]	@ (800ab3c <debugRxCallback+0x2c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4903      	ldr	r1, [pc, #12]	@ (800ab34 <debugRxCallback+0x24>)
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f888 	bl	800ac3e <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800ab2e:	bf00      	nop
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	240006b8 	.word	0x240006b8
 800ab38:	240006c0 	.word	0x240006c0
 800ab3c:	240006bc 	.word	0x240006bc

0800ab40 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800ab46:	4b0a      	ldr	r3, [pc, #40]	@ (800ab70 <debugUartInit+0x30>)
 800ab48:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800ab4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab74 <debugUartInit+0x34>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f839 	bl	800abcc <circularBufferInit>

	uartInit(rxCallbackFptr);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff ffb8 	bl	800aad0 <uartInit>

	receptionItrOn(&data);
 800ab60:	4805      	ldr	r0, [pc, #20]	@ (800ab78 <debugUartInit+0x38>)
 800ab62:	f7ff ffc5 	bl	800aaf0 <receptionItrOn>
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800ab11 	.word	0x0800ab11
 800ab74:	240006bc 	.word	0x240006bc
 800ab78:	240006b8 	.word	0x240006b8

0800ab7c <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800ab80:	4b03      	ldr	r3, [pc, #12]	@ (800ab90 <getCmdReceivedFlag+0x14>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	240006c0 	.word	0x240006c0

0800ab94 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800ab9e:	4a04      	ldr	r2, [pc, #16]	@ (800abb0 <setCmdReceivedFlag+0x1c>)
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	7013      	strb	r3, [r2, #0]
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	240006c0 	.word	0x240006c0

0800abb4 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800abb4:	b480      	push	{r7}
 800abb6:	af00      	add	r7, sp, #0
	return rxBuffer;
 800abb8:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <getRxBuffer+0x14>)
 800abba:	681b      	ldr	r3, [r3, #0]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	240006bc 	.word	0x240006bc

0800abcc <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
 800abd8:	4613      	mov	r3, r2
 800abda:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	883a      	ldrh	r2, [r7, #0]
 800abf0:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	887a      	ldrh	r2, [r7, #2]
 800abf6:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800abf8:	887b      	ldrh	r3, [r7, #2]
 800abfa:	883a      	ldrh	r2, [r7, #0]
 800abfc:	fb02 f303 	mul.w	r3, r2, r3
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f8ad 	bl	800ad60 <malloc>
 800ac06:	4603      	mov	r3, r0
 800ac08:	461a      	mov	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68d8      	ldr	r0, [r3, #12]
 800ac20:	887b      	ldrh	r3, [r7, #2]
 800ac22:	883a      	ldrh	r2, [r7, #0]
 800ac24:	fb02 f303 	mul.w	r3, r2, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	f000 fb0b 	bl	800b246 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	3301      	adds	r3, #1
 800ac52:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	889b      	ldrh	r3, [r3, #4]
 800ac58:	89ba      	ldrh	r2, [r7, #12]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d301      	bcc.n	800ac62 <circularBufferEnqueue+0x24>
    {
        next = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	89ba      	ldrh	r2, [r7, #12]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d02b      	beq.n	800acc4 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	8812      	ldrh	r2, [r2, #0]
 800ac74:	4611      	mov	r1, r2
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	88d2      	ldrh	r2, [r2, #6]
 800ac7a:	fb01 f202 	mul.w	r2, r1, r2
 800ac7e:	1898      	adds	r0, r3, r2
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	88db      	ldrh	r3, [r3, #6]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	f000 fbc5 	bl	800b416 <memcpy>
 800ac8c:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d017      	beq.n	800acc4 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	89ba      	ldrh	r2, [r7, #12]
 800ac98:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	889b      	ldrh	r3, [r3, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	8852      	ldrh	r2, [r2, #2]
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	8892      	ldrh	r2, [r2, #4]
 800acb4:	fb93 f1f2 	sdiv	r1, r3, r2
 800acb8:	fb01 f202 	mul.w	r2, r1, r2
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800acd8:	2305      	movs	r3, #5
 800acda:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	885a      	ldrh	r2, [r3, #2]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d032      	beq.n	800ad4e <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	885b      	ldrh	r3, [r3, #2]
 800acec:	3301      	adds	r3, #1
 800acee:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	889b      	ldrh	r3, [r3, #4]
 800acf4:	89ba      	ldrh	r2, [r7, #12]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d301      	bcc.n	800acfe <circularBufferDequeue+0x30>
        {
            next = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	8852      	ldrh	r2, [r2, #2]
 800ad06:	4611      	mov	r1, r2
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	88d2      	ldrh	r2, [r2, #6]
 800ad0c:	fb01 f202 	mul.w	r2, r1, r2
 800ad10:	1899      	adds	r1, r3, r2
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6838      	ldr	r0, [r7, #0]
 800ad1a:	f000 fb7c 	bl	800b416 <memcpy>

        cBuff->tail = next;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	89ba      	ldrh	r2, [r7, #12]
 800ad22:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	889b      	ldrh	r3, [r3, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	8852      	ldrh	r2, [r2, #2]
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	8892      	ldrh	r2, [r2, #4]
 800ad3a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad3e:	fb01 f202 	mul.w	r2, r1, r2
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ad4a:	2304      	movs	r3, #4
 800ad4c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <atoi>:
 800ad58:	220a      	movs	r2, #10
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	f000 b930 	b.w	800afc0 <strtol>

0800ad60 <malloc>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <malloc+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f000 b825 	b.w	800adb4 <_malloc_r>
 800ad6a:	bf00      	nop
 800ad6c:	24000084 	.word	0x24000084

0800ad70 <sbrk_aligned>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4e0f      	ldr	r6, [pc, #60]	@ (800adb0 <sbrk_aligned+0x40>)
 800ad74:	460c      	mov	r4, r1
 800ad76:	6831      	ldr	r1, [r6, #0]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	b911      	cbnz	r1, 800ad82 <sbrk_aligned+0x12>
 800ad7c:	f000 fafc 	bl	800b378 <_sbrk_r>
 800ad80:	6030      	str	r0, [r6, #0]
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 faf7 	bl	800b378 <_sbrk_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d103      	bne.n	800ad96 <sbrk_aligned+0x26>
 800ad8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ad92:	4620      	mov	r0, r4
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d0f8      	beq.n	800ad92 <sbrk_aligned+0x22>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 fae8 	bl	800b378 <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1f2      	bne.n	800ad92 <sbrk_aligned+0x22>
 800adac:	e7ef      	b.n	800ad8e <sbrk_aligned+0x1e>
 800adae:	bf00      	nop
 800adb0:	240006c4 	.word	0x240006c4

0800adb4 <_malloc_r>:
 800adb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	4606      	mov	r6, r0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d904      	bls.n	800adda <_malloc_r+0x26>
 800add0:	230c      	movs	r3, #12
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	2000      	movs	r0, #0
 800add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeb0 <_malloc_r+0xfc>
 800adde:	f000 f869 	bl	800aeb4 <__malloc_lock>
 800ade2:	f8d8 3000 	ldr.w	r3, [r8]
 800ade6:	461c      	mov	r4, r3
 800ade8:	bb44      	cbnz	r4, 800ae3c <_malloc_r+0x88>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbf 	bl	800ad70 <sbrk_aligned>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	4604      	mov	r4, r0
 800adf6:	d158      	bne.n	800aeaa <_malloc_r+0xf6>
 800adf8:	f8d8 4000 	ldr.w	r4, [r8]
 800adfc:	4627      	mov	r7, r4
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d143      	bne.n	800ae8a <_malloc_r+0xd6>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d04b      	beq.n	800ae9e <_malloc_r+0xea>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	eb04 0903 	add.w	r9, r4, r3
 800ae10:	f000 fab2 	bl	800b378 <_sbrk_r>
 800ae14:	4581      	cmp	r9, r0
 800ae16:	d142      	bne.n	800ae9e <_malloc_r+0xea>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	1a6d      	subs	r5, r5, r1
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ffa6 	bl	800ad70 <sbrk_aligned>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d03a      	beq.n	800ae9e <_malloc_r+0xea>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	442b      	add	r3, r5
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	bb62      	cbnz	r2, 800ae90 <_malloc_r+0xdc>
 800ae36:	f8c8 7000 	str.w	r7, [r8]
 800ae3a:	e00f      	b.n	800ae5c <_malloc_r+0xa8>
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	1b52      	subs	r2, r2, r5
 800ae40:	d420      	bmi.n	800ae84 <_malloc_r+0xd0>
 800ae42:	2a0b      	cmp	r2, #11
 800ae44:	d917      	bls.n	800ae76 <_malloc_r+0xc2>
 800ae46:	1961      	adds	r1, r4, r5
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	6059      	strne	r1, [r3, #4]
 800ae50:	6863      	ldr	r3, [r4, #4]
 800ae52:	bf08      	it	eq
 800ae54:	f8c8 1000 	streq.w	r1, [r8]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 f82f 	bl	800aec0 <__malloc_unlock>
 800ae62:	f104 000b 	add.w	r0, r4, #11
 800ae66:	1d23      	adds	r3, r4, #4
 800ae68:	f020 0007 	bic.w	r0, r0, #7
 800ae6c:	1ac2      	subs	r2, r0, r3
 800ae6e:	bf1c      	itt	ne
 800ae70:	1a1b      	subne	r3, r3, r0
 800ae72:	50a3      	strne	r3, [r4, r2]
 800ae74:	e7af      	b.n	800add6 <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	f8c8 2000 	streq.w	r2, [r8]
 800ae80:	605a      	strne	r2, [r3, #4]
 800ae82:	e7eb      	b.n	800ae5c <_malloc_r+0xa8>
 800ae84:	4623      	mov	r3, r4
 800ae86:	6864      	ldr	r4, [r4, #4]
 800ae88:	e7ae      	b.n	800ade8 <_malloc_r+0x34>
 800ae8a:	463c      	mov	r4, r7
 800ae8c:	687f      	ldr	r7, [r7, #4]
 800ae8e:	e7b6      	b.n	800adfe <_malloc_r+0x4a>
 800ae90:	461a      	mov	r2, r3
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d1fb      	bne.n	800ae90 <_malloc_r+0xdc>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa8>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 f80c 	bl	800aec0 <__malloc_unlock>
 800aea8:	e794      	b.n	800add4 <_malloc_r+0x20>
 800aeaa:	6005      	str	r5, [r0, #0]
 800aeac:	e7d6      	b.n	800ae5c <_malloc_r+0xa8>
 800aeae:	bf00      	nop
 800aeb0:	240006c8 	.word	0x240006c8

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	@ (800aebc <__malloc_lock+0x8>)
 800aeb6:	f000 baac 	b.w	800b412 <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	2400080c 	.word	0x2400080c

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	@ (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f000 baa7 	b.w	800b414 <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	2400080c 	.word	0x2400080c

0800aecc <_strtol_l.constprop.0>:
 800aecc:	2b24      	cmp	r3, #36	@ 0x24
 800aece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed2:	4686      	mov	lr, r0
 800aed4:	4690      	mov	r8, r2
 800aed6:	d801      	bhi.n	800aedc <_strtol_l.constprop.0+0x10>
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d106      	bne.n	800aeea <_strtol_l.constprop.0+0x1e>
 800aedc:	f000 fa6e 	bl	800b3bc <__errno>
 800aee0:	2316      	movs	r3, #22
 800aee2:	6003      	str	r3, [r0, #0]
 800aee4:	2000      	movs	r0, #0
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	4834      	ldr	r0, [pc, #208]	@ (800afbc <_strtol_l.constprop.0+0xf0>)
 800aeec:	460d      	mov	r5, r1
 800aeee:	462a      	mov	r2, r5
 800aef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aef4:	5d06      	ldrb	r6, [r0, r4]
 800aef6:	f016 0608 	ands.w	r6, r6, #8
 800aefa:	d1f8      	bne.n	800aeee <_strtol_l.constprop.0+0x22>
 800aefc:	2c2d      	cmp	r4, #45	@ 0x2d
 800aefe:	d12d      	bne.n	800af5c <_strtol_l.constprop.0+0x90>
 800af00:	782c      	ldrb	r4, [r5, #0]
 800af02:	2601      	movs	r6, #1
 800af04:	1c95      	adds	r5, r2, #2
 800af06:	f033 0210 	bics.w	r2, r3, #16
 800af0a:	d109      	bne.n	800af20 <_strtol_l.constprop.0+0x54>
 800af0c:	2c30      	cmp	r4, #48	@ 0x30
 800af0e:	d12a      	bne.n	800af66 <_strtol_l.constprop.0+0x9a>
 800af10:	782a      	ldrb	r2, [r5, #0]
 800af12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af16:	2a58      	cmp	r2, #88	@ 0x58
 800af18:	d125      	bne.n	800af66 <_strtol_l.constprop.0+0x9a>
 800af1a:	786c      	ldrb	r4, [r5, #1]
 800af1c:	2310      	movs	r3, #16
 800af1e:	3502      	adds	r5, #2
 800af20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af28:	2200      	movs	r2, #0
 800af2a:	fbbc f9f3 	udiv	r9, ip, r3
 800af2e:	4610      	mov	r0, r2
 800af30:	fb03 ca19 	mls	sl, r3, r9, ip
 800af34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af38:	2f09      	cmp	r7, #9
 800af3a:	d81b      	bhi.n	800af74 <_strtol_l.constprop.0+0xa8>
 800af3c:	463c      	mov	r4, r7
 800af3e:	42a3      	cmp	r3, r4
 800af40:	dd27      	ble.n	800af92 <_strtol_l.constprop.0+0xc6>
 800af42:	1c57      	adds	r7, r2, #1
 800af44:	d007      	beq.n	800af56 <_strtol_l.constprop.0+0x8a>
 800af46:	4581      	cmp	r9, r0
 800af48:	d320      	bcc.n	800af8c <_strtol_l.constprop.0+0xc0>
 800af4a:	d101      	bne.n	800af50 <_strtol_l.constprop.0+0x84>
 800af4c:	45a2      	cmp	sl, r4
 800af4e:	db1d      	blt.n	800af8c <_strtol_l.constprop.0+0xc0>
 800af50:	fb00 4003 	mla	r0, r0, r3, r4
 800af54:	2201      	movs	r2, #1
 800af56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af5a:	e7eb      	b.n	800af34 <_strtol_l.constprop.0+0x68>
 800af5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800af5e:	bf04      	itt	eq
 800af60:	782c      	ldrbeq	r4, [r5, #0]
 800af62:	1c95      	addeq	r5, r2, #2
 800af64:	e7cf      	b.n	800af06 <_strtol_l.constprop.0+0x3a>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1da      	bne.n	800af20 <_strtol_l.constprop.0+0x54>
 800af6a:	2c30      	cmp	r4, #48	@ 0x30
 800af6c:	bf0c      	ite	eq
 800af6e:	2308      	moveq	r3, #8
 800af70:	230a      	movne	r3, #10
 800af72:	e7d5      	b.n	800af20 <_strtol_l.constprop.0+0x54>
 800af74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af78:	2f19      	cmp	r7, #25
 800af7a:	d801      	bhi.n	800af80 <_strtol_l.constprop.0+0xb4>
 800af7c:	3c37      	subs	r4, #55	@ 0x37
 800af7e:	e7de      	b.n	800af3e <_strtol_l.constprop.0+0x72>
 800af80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af84:	2f19      	cmp	r7, #25
 800af86:	d804      	bhi.n	800af92 <_strtol_l.constprop.0+0xc6>
 800af88:	3c57      	subs	r4, #87	@ 0x57
 800af8a:	e7d8      	b.n	800af3e <_strtol_l.constprop.0+0x72>
 800af8c:	f04f 32ff 	mov.w	r2, #4294967295
 800af90:	e7e1      	b.n	800af56 <_strtol_l.constprop.0+0x8a>
 800af92:	1c53      	adds	r3, r2, #1
 800af94:	d108      	bne.n	800afa8 <_strtol_l.constprop.0+0xdc>
 800af96:	2322      	movs	r3, #34	@ 0x22
 800af98:	f8ce 3000 	str.w	r3, [lr]
 800af9c:	4660      	mov	r0, ip
 800af9e:	f1b8 0f00 	cmp.w	r8, #0
 800afa2:	d0a0      	beq.n	800aee6 <_strtol_l.constprop.0+0x1a>
 800afa4:	1e69      	subs	r1, r5, #1
 800afa6:	e006      	b.n	800afb6 <_strtol_l.constprop.0+0xea>
 800afa8:	b106      	cbz	r6, 800afac <_strtol_l.constprop.0+0xe0>
 800afaa:	4240      	negs	r0, r0
 800afac:	f1b8 0f00 	cmp.w	r8, #0
 800afb0:	d099      	beq.n	800aee6 <_strtol_l.constprop.0+0x1a>
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d1f6      	bne.n	800afa4 <_strtol_l.constprop.0+0xd8>
 800afb6:	f8c8 1000 	str.w	r1, [r8]
 800afba:	e794      	b.n	800aee6 <_strtol_l.constprop.0+0x1a>
 800afbc:	0800c365 	.word	0x0800c365

0800afc0 <strtol>:
 800afc0:	4613      	mov	r3, r2
 800afc2:	460a      	mov	r2, r1
 800afc4:	4601      	mov	r1, r0
 800afc6:	4802      	ldr	r0, [pc, #8]	@ (800afd0 <strtol+0x10>)
 800afc8:	6800      	ldr	r0, [r0, #0]
 800afca:	f7ff bf7f 	b.w	800aecc <_strtol_l.constprop.0>
 800afce:	bf00      	nop
 800afd0:	24000084 	.word	0x24000084

0800afd4 <std>:
 800afd4:	2300      	movs	r3, #0
 800afd6:	b510      	push	{r4, lr}
 800afd8:	4604      	mov	r4, r0
 800afda:	e9c0 3300 	strd	r3, r3, [r0]
 800afde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afe2:	6083      	str	r3, [r0, #8]
 800afe4:	8181      	strh	r1, [r0, #12]
 800afe6:	6643      	str	r3, [r0, #100]	@ 0x64
 800afe8:	81c2      	strh	r2, [r0, #14]
 800afea:	6183      	str	r3, [r0, #24]
 800afec:	4619      	mov	r1, r3
 800afee:	2208      	movs	r2, #8
 800aff0:	305c      	adds	r0, #92	@ 0x5c
 800aff2:	f000 f928 	bl	800b246 <memset>
 800aff6:	4b0d      	ldr	r3, [pc, #52]	@ (800b02c <std+0x58>)
 800aff8:	6263      	str	r3, [r4, #36]	@ 0x24
 800affa:	4b0d      	ldr	r3, [pc, #52]	@ (800b030 <std+0x5c>)
 800affc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800affe:	4b0d      	ldr	r3, [pc, #52]	@ (800b034 <std+0x60>)
 800b000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b002:	4b0d      	ldr	r3, [pc, #52]	@ (800b038 <std+0x64>)
 800b004:	6323      	str	r3, [r4, #48]	@ 0x30
 800b006:	4b0d      	ldr	r3, [pc, #52]	@ (800b03c <std+0x68>)
 800b008:	6224      	str	r4, [r4, #32]
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d006      	beq.n	800b01c <std+0x48>
 800b00e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b012:	4294      	cmp	r4, r2
 800b014:	d002      	beq.n	800b01c <std+0x48>
 800b016:	33d0      	adds	r3, #208	@ 0xd0
 800b018:	429c      	cmp	r4, r3
 800b01a:	d105      	bne.n	800b028 <std+0x54>
 800b01c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b024:	f000 b9f4 	b.w	800b410 <__retarget_lock_init_recursive>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	0800b1c1 	.word	0x0800b1c1
 800b030:	0800b1e3 	.word	0x0800b1e3
 800b034:	0800b21b 	.word	0x0800b21b
 800b038:	0800b23f 	.word	0x0800b23f
 800b03c:	240006cc 	.word	0x240006cc

0800b040 <stdio_exit_handler>:
 800b040:	4a02      	ldr	r2, [pc, #8]	@ (800b04c <stdio_exit_handler+0xc>)
 800b042:	4903      	ldr	r1, [pc, #12]	@ (800b050 <stdio_exit_handler+0x10>)
 800b044:	4803      	ldr	r0, [pc, #12]	@ (800b054 <stdio_exit_handler+0x14>)
 800b046:	f000 b869 	b.w	800b11c <_fwalk_sglue>
 800b04a:	bf00      	nop
 800b04c:	24000078 	.word	0x24000078
 800b050:	0800bbd9 	.word	0x0800bbd9
 800b054:	24000088 	.word	0x24000088

0800b058 <cleanup_stdio>:
 800b058:	6841      	ldr	r1, [r0, #4]
 800b05a:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <cleanup_stdio+0x34>)
 800b05c:	4299      	cmp	r1, r3
 800b05e:	b510      	push	{r4, lr}
 800b060:	4604      	mov	r4, r0
 800b062:	d001      	beq.n	800b068 <cleanup_stdio+0x10>
 800b064:	f000 fdb8 	bl	800bbd8 <_fflush_r>
 800b068:	68a1      	ldr	r1, [r4, #8]
 800b06a:	4b09      	ldr	r3, [pc, #36]	@ (800b090 <cleanup_stdio+0x38>)
 800b06c:	4299      	cmp	r1, r3
 800b06e:	d002      	beq.n	800b076 <cleanup_stdio+0x1e>
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fdb1 	bl	800bbd8 <_fflush_r>
 800b076:	68e1      	ldr	r1, [r4, #12]
 800b078:	4b06      	ldr	r3, [pc, #24]	@ (800b094 <cleanup_stdio+0x3c>)
 800b07a:	4299      	cmp	r1, r3
 800b07c:	d004      	beq.n	800b088 <cleanup_stdio+0x30>
 800b07e:	4620      	mov	r0, r4
 800b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b084:	f000 bda8 	b.w	800bbd8 <_fflush_r>
 800b088:	bd10      	pop	{r4, pc}
 800b08a:	bf00      	nop
 800b08c:	240006cc 	.word	0x240006cc
 800b090:	24000734 	.word	0x24000734
 800b094:	2400079c 	.word	0x2400079c

0800b098 <global_stdio_init.part.0>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c8 <global_stdio_init.part.0+0x30>)
 800b09c:	4c0b      	ldr	r4, [pc, #44]	@ (800b0cc <global_stdio_init.part.0+0x34>)
 800b09e:	4a0c      	ldr	r2, [pc, #48]	@ (800b0d0 <global_stdio_init.part.0+0x38>)
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2104      	movs	r1, #4
 800b0a8:	f7ff ff94 	bl	800afd4 <std>
 800b0ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	2109      	movs	r1, #9
 800b0b4:	f7ff ff8e 	bl	800afd4 <std>
 800b0b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0bc:	2202      	movs	r2, #2
 800b0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c2:	2112      	movs	r1, #18
 800b0c4:	f7ff bf86 	b.w	800afd4 <std>
 800b0c8:	24000804 	.word	0x24000804
 800b0cc:	240006cc 	.word	0x240006cc
 800b0d0:	0800b041 	.word	0x0800b041

0800b0d4 <__sfp_lock_acquire>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	@ (800b0dc <__sfp_lock_acquire+0x8>)
 800b0d6:	f000 b99c 	b.w	800b412 <__retarget_lock_acquire_recursive>
 800b0da:	bf00      	nop
 800b0dc:	2400080d 	.word	0x2400080d

0800b0e0 <__sfp_lock_release>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	@ (800b0e8 <__sfp_lock_release+0x8>)
 800b0e2:	f000 b997 	b.w	800b414 <__retarget_lock_release_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	2400080d 	.word	0x2400080d

0800b0ec <__sinit>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	f7ff fff0 	bl	800b0d4 <__sfp_lock_acquire>
 800b0f4:	6a23      	ldr	r3, [r4, #32]
 800b0f6:	b11b      	cbz	r3, 800b100 <__sinit+0x14>
 800b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0fc:	f7ff bff0 	b.w	800b0e0 <__sfp_lock_release>
 800b100:	4b04      	ldr	r3, [pc, #16]	@ (800b114 <__sinit+0x28>)
 800b102:	6223      	str	r3, [r4, #32]
 800b104:	4b04      	ldr	r3, [pc, #16]	@ (800b118 <__sinit+0x2c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f5      	bne.n	800b0f8 <__sinit+0xc>
 800b10c:	f7ff ffc4 	bl	800b098 <global_stdio_init.part.0>
 800b110:	e7f2      	b.n	800b0f8 <__sinit+0xc>
 800b112:	bf00      	nop
 800b114:	0800b059 	.word	0x0800b059
 800b118:	24000804 	.word	0x24000804

0800b11c <_fwalk_sglue>:
 800b11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b120:	4607      	mov	r7, r0
 800b122:	4688      	mov	r8, r1
 800b124:	4614      	mov	r4, r2
 800b126:	2600      	movs	r6, #0
 800b128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b12c:	f1b9 0901 	subs.w	r9, r9, #1
 800b130:	d505      	bpl.n	800b13e <_fwalk_sglue+0x22>
 800b132:	6824      	ldr	r4, [r4, #0]
 800b134:	2c00      	cmp	r4, #0
 800b136:	d1f7      	bne.n	800b128 <_fwalk_sglue+0xc>
 800b138:	4630      	mov	r0, r6
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d907      	bls.n	800b154 <_fwalk_sglue+0x38>
 800b144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b148:	3301      	adds	r3, #1
 800b14a:	d003      	beq.n	800b154 <_fwalk_sglue+0x38>
 800b14c:	4629      	mov	r1, r5
 800b14e:	4638      	mov	r0, r7
 800b150:	47c0      	blx	r8
 800b152:	4306      	orrs	r6, r0
 800b154:	3568      	adds	r5, #104	@ 0x68
 800b156:	e7e9      	b.n	800b12c <_fwalk_sglue+0x10>

0800b158 <sniprintf>:
 800b158:	b40c      	push	{r2, r3}
 800b15a:	b530      	push	{r4, r5, lr}
 800b15c:	4b17      	ldr	r3, [pc, #92]	@ (800b1bc <sniprintf+0x64>)
 800b15e:	1e0c      	subs	r4, r1, #0
 800b160:	681d      	ldr	r5, [r3, #0]
 800b162:	b09d      	sub	sp, #116	@ 0x74
 800b164:	da08      	bge.n	800b178 <sniprintf+0x20>
 800b166:	238b      	movs	r3, #139	@ 0x8b
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	f04f 30ff 	mov.w	r0, #4294967295
 800b16e:	b01d      	add	sp, #116	@ 0x74
 800b170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b174:	b002      	add	sp, #8
 800b176:	4770      	bx	lr
 800b178:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b17c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b180:	bf14      	ite	ne
 800b182:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b186:	4623      	moveq	r3, r4
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b190:	9002      	str	r0, [sp, #8]
 800b192:	9006      	str	r0, [sp, #24]
 800b194:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b198:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b19a:	ab21      	add	r3, sp, #132	@ 0x84
 800b19c:	a902      	add	r1, sp, #8
 800b19e:	4628      	mov	r0, r5
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	f000 fa0b 	bl	800b5bc <_svfiprintf_r>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	bfbc      	itt	lt
 800b1aa:	238b      	movlt	r3, #139	@ 0x8b
 800b1ac:	602b      	strlt	r3, [r5, #0]
 800b1ae:	2c00      	cmp	r4, #0
 800b1b0:	d0dd      	beq.n	800b16e <sniprintf+0x16>
 800b1b2:	9b02      	ldr	r3, [sp, #8]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
 800b1b8:	e7d9      	b.n	800b16e <sniprintf+0x16>
 800b1ba:	bf00      	nop
 800b1bc:	24000084 	.word	0x24000084

0800b1c0 <__sread>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c8:	f000 f8c4 	bl	800b354 <_read_r>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	bfab      	itete	ge
 800b1d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b1d4:	181b      	addge	r3, r3, r0
 800b1d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1da:	bfac      	ite	ge
 800b1dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1de:	81a3      	strhlt	r3, [r4, #12]
 800b1e0:	bd10      	pop	{r4, pc}

0800b1e2 <__swrite>:
 800b1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e6:	461f      	mov	r7, r3
 800b1e8:	898b      	ldrh	r3, [r1, #12]
 800b1ea:	05db      	lsls	r3, r3, #23
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	d505      	bpl.n	800b200 <__swrite+0x1e>
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f000 f898 	bl	800b330 <_lseek_r>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	4632      	mov	r2, r6
 800b20e:	463b      	mov	r3, r7
 800b210:	4628      	mov	r0, r5
 800b212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	f000 b8bf 	b.w	800b398 <_write_r>

0800b21a <__sseek>:
 800b21a:	b510      	push	{r4, lr}
 800b21c:	460c      	mov	r4, r1
 800b21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b222:	f000 f885 	bl	800b330 <_lseek_r>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	bf15      	itete	ne
 800b22c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b22e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b236:	81a3      	strheq	r3, [r4, #12]
 800b238:	bf18      	it	ne
 800b23a:	81a3      	strhne	r3, [r4, #12]
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <__sclose>:
 800b23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b242:	f000 b865 	b.w	800b310 <_close_r>

0800b246 <memset>:
 800b246:	4402      	add	r2, r0
 800b248:	4603      	mov	r3, r0
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d100      	bne.n	800b250 <memset+0xa>
 800b24e:	4770      	bx	lr
 800b250:	f803 1b01 	strb.w	r1, [r3], #1
 800b254:	e7f9      	b.n	800b24a <memset+0x4>
	...

0800b258 <strtok>:
 800b258:	4b16      	ldr	r3, [pc, #88]	@ (800b2b4 <strtok+0x5c>)
 800b25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25e:	681f      	ldr	r7, [r3, #0]
 800b260:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b262:	4605      	mov	r5, r0
 800b264:	460e      	mov	r6, r1
 800b266:	b9ec      	cbnz	r4, 800b2a4 <strtok+0x4c>
 800b268:	2050      	movs	r0, #80	@ 0x50
 800b26a:	f7ff fd79 	bl	800ad60 <malloc>
 800b26e:	4602      	mov	r2, r0
 800b270:	6478      	str	r0, [r7, #68]	@ 0x44
 800b272:	b920      	cbnz	r0, 800b27e <strtok+0x26>
 800b274:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <strtok+0x60>)
 800b276:	4811      	ldr	r0, [pc, #68]	@ (800b2bc <strtok+0x64>)
 800b278:	215b      	movs	r1, #91	@ 0x5b
 800b27a:	f000 f8db 	bl	800b434 <__assert_func>
 800b27e:	e9c0 4400 	strd	r4, r4, [r0]
 800b282:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b286:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b28a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b28e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b292:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b296:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b29a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b29e:	6184      	str	r4, [r0, #24]
 800b2a0:	7704      	strb	r4, [r0, #28]
 800b2a2:	6244      	str	r4, [r0, #36]	@ 0x24
 800b2a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	f000 b806 	b.w	800b2c0 <__strtok_r>
 800b2b4:	24000084 	.word	0x24000084
 800b2b8:	0800c465 	.word	0x0800c465
 800b2bc:	0800c47c 	.word	0x0800c47c

0800b2c0 <__strtok_r>:
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	b908      	cbnz	r0, 800b2ca <__strtok_r+0xa>
 800b2c6:	6814      	ldr	r4, [r2, #0]
 800b2c8:	b144      	cbz	r4, 800b2dc <__strtok_r+0x1c>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2d6:	b91e      	cbnz	r6, 800b2e0 <__strtok_r+0x20>
 800b2d8:	b965      	cbnz	r5, 800b2f4 <__strtok_r+0x34>
 800b2da:	6015      	str	r5, [r2, #0]
 800b2dc:	2000      	movs	r0, #0
 800b2de:	e005      	b.n	800b2ec <__strtok_r+0x2c>
 800b2e0:	42b5      	cmp	r5, r6
 800b2e2:	d1f6      	bne.n	800b2d2 <__strtok_r+0x12>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1f0      	bne.n	800b2ca <__strtok_r+0xa>
 800b2e8:	6014      	str	r4, [r2, #0]
 800b2ea:	7003      	strb	r3, [r0, #0]
 800b2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ee:	461c      	mov	r4, r3
 800b2f0:	e00c      	b.n	800b30c <__strtok_r+0x4c>
 800b2f2:	b915      	cbnz	r5, 800b2fa <__strtok_r+0x3a>
 800b2f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2f8:	460e      	mov	r6, r1
 800b2fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2fe:	42ab      	cmp	r3, r5
 800b300:	d1f7      	bne.n	800b2f2 <__strtok_r+0x32>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f3      	beq.n	800b2ee <__strtok_r+0x2e>
 800b306:	2300      	movs	r3, #0
 800b308:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b30c:	6014      	str	r4, [r2, #0]
 800b30e:	e7ed      	b.n	800b2ec <__strtok_r+0x2c>

0800b310 <_close_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d06      	ldr	r5, [pc, #24]	@ (800b32c <_close_r+0x1c>)
 800b314:	2300      	movs	r3, #0
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	f7f5 feee 	bl	80010fc <_close>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_close_r+0x1a>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_close_r+0x1a>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	24000808 	.word	0x24000808

0800b330 <_lseek_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d07      	ldr	r5, [pc, #28]	@ (800b350 <_lseek_r+0x20>)
 800b334:	4604      	mov	r4, r0
 800b336:	4608      	mov	r0, r1
 800b338:	4611      	mov	r1, r2
 800b33a:	2200      	movs	r2, #0
 800b33c:	602a      	str	r2, [r5, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	f7f5 ff03 	bl	800114a <_lseek>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_lseek_r+0x1e>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_lseek_r+0x1e>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	24000808 	.word	0x24000808

0800b354 <_read_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	@ (800b374 <_read_r+0x20>)
 800b358:	4604      	mov	r4, r0
 800b35a:	4608      	mov	r0, r1
 800b35c:	4611      	mov	r1, r2
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	f7f5 fe91 	bl	800108a <_read>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_read_r+0x1e>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_read_r+0x1e>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	24000808 	.word	0x24000808

0800b378 <_sbrk_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d06      	ldr	r5, [pc, #24]	@ (800b394 <_sbrk_r+0x1c>)
 800b37c:	2300      	movs	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	602b      	str	r3, [r5, #0]
 800b384:	f7f5 feee 	bl	8001164 <_sbrk>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_sbrk_r+0x1a>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_sbrk_r+0x1a>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	24000808 	.word	0x24000808

0800b398 <_write_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d07      	ldr	r5, [pc, #28]	@ (800b3b8 <_write_r+0x20>)
 800b39c:	4604      	mov	r4, r0
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	602a      	str	r2, [r5, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f7f5 fe8c 	bl	80010c4 <_write>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_write_r+0x1e>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_write_r+0x1e>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	24000808 	.word	0x24000808

0800b3bc <__errno>:
 800b3bc:	4b01      	ldr	r3, [pc, #4]	@ (800b3c4 <__errno+0x8>)
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	24000084 	.word	0x24000084

0800b3c8 <__libc_init_array>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b400 <__libc_init_array+0x38>)
 800b3cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b404 <__libc_init_array+0x3c>)
 800b3ce:	1b64      	subs	r4, r4, r5
 800b3d0:	10a4      	asrs	r4, r4, #2
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	42a6      	cmp	r6, r4
 800b3d6:	d109      	bne.n	800b3ec <__libc_init_array+0x24>
 800b3d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b408 <__libc_init_array+0x40>)
 800b3da:	4c0c      	ldr	r4, [pc, #48]	@ (800b40c <__libc_init_array+0x44>)
 800b3dc:	f000 ff2a 	bl	800c234 <_init>
 800b3e0:	1b64      	subs	r4, r4, r5
 800b3e2:	10a4      	asrs	r4, r4, #2
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	42a6      	cmp	r6, r4
 800b3e8:	d105      	bne.n	800b3f6 <__libc_init_array+0x2e>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f0:	4798      	blx	r3
 800b3f2:	3601      	adds	r6, #1
 800b3f4:	e7ee      	b.n	800b3d4 <__libc_init_array+0xc>
 800b3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fa:	4798      	blx	r3
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	e7f2      	b.n	800b3e6 <__libc_init_array+0x1e>
 800b400:	0800c550 	.word	0x0800c550
 800b404:	0800c550 	.word	0x0800c550
 800b408:	0800c550 	.word	0x0800c550
 800b40c:	0800c554 	.word	0x0800c554

0800b410 <__retarget_lock_init_recursive>:
 800b410:	4770      	bx	lr

0800b412 <__retarget_lock_acquire_recursive>:
 800b412:	4770      	bx	lr

0800b414 <__retarget_lock_release_recursive>:
 800b414:	4770      	bx	lr

0800b416 <memcpy>:
 800b416:	440a      	add	r2, r1
 800b418:	4291      	cmp	r1, r2
 800b41a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b41e:	d100      	bne.n	800b422 <memcpy+0xc>
 800b420:	4770      	bx	lr
 800b422:	b510      	push	{r4, lr}
 800b424:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b42c:	4291      	cmp	r1, r2
 800b42e:	d1f9      	bne.n	800b424 <memcpy+0xe>
 800b430:	bd10      	pop	{r4, pc}
	...

0800b434 <__assert_func>:
 800b434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b436:	4614      	mov	r4, r2
 800b438:	461a      	mov	r2, r3
 800b43a:	4b09      	ldr	r3, [pc, #36]	@ (800b460 <__assert_func+0x2c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4605      	mov	r5, r0
 800b440:	68d8      	ldr	r0, [r3, #12]
 800b442:	b954      	cbnz	r4, 800b45a <__assert_func+0x26>
 800b444:	4b07      	ldr	r3, [pc, #28]	@ (800b464 <__assert_func+0x30>)
 800b446:	461c      	mov	r4, r3
 800b448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b44c:	9100      	str	r1, [sp, #0]
 800b44e:	462b      	mov	r3, r5
 800b450:	4905      	ldr	r1, [pc, #20]	@ (800b468 <__assert_func+0x34>)
 800b452:	f000 fbe9 	bl	800bc28 <fiprintf>
 800b456:	f000 fc13 	bl	800bc80 <abort>
 800b45a:	4b04      	ldr	r3, [pc, #16]	@ (800b46c <__assert_func+0x38>)
 800b45c:	e7f4      	b.n	800b448 <__assert_func+0x14>
 800b45e:	bf00      	nop
 800b460:	24000084 	.word	0x24000084
 800b464:	0800c511 	.word	0x0800c511
 800b468:	0800c4e3 	.word	0x0800c4e3
 800b46c:	0800c4d6 	.word	0x0800c4d6

0800b470 <_free_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4605      	mov	r5, r0
 800b474:	2900      	cmp	r1, #0
 800b476:	d041      	beq.n	800b4fc <_free_r+0x8c>
 800b478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47c:	1f0c      	subs	r4, r1, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bfb8      	it	lt
 800b482:	18e4      	addlt	r4, r4, r3
 800b484:	f7ff fd16 	bl	800aeb4 <__malloc_lock>
 800b488:	4a1d      	ldr	r2, [pc, #116]	@ (800b500 <_free_r+0x90>)
 800b48a:	6813      	ldr	r3, [r2, #0]
 800b48c:	b933      	cbnz	r3, 800b49c <_free_r+0x2c>
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	4628      	mov	r0, r5
 800b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b498:	f7ff bd12 	b.w	800aec0 <__malloc_unlock>
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d908      	bls.n	800b4b2 <_free_r+0x42>
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	1821      	adds	r1, r4, r0
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	bf01      	itttt	eq
 800b4a8:	6819      	ldreq	r1, [r3, #0]
 800b4aa:	685b      	ldreq	r3, [r3, #4]
 800b4ac:	1809      	addeq	r1, r1, r0
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	e7ed      	b.n	800b48e <_free_r+0x1e>
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b10b      	cbz	r3, 800b4bc <_free_r+0x4c>
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	d9fa      	bls.n	800b4b2 <_free_r+0x42>
 800b4bc:	6811      	ldr	r1, [r2, #0]
 800b4be:	1850      	adds	r0, r2, r1
 800b4c0:	42a0      	cmp	r0, r4
 800b4c2:	d10b      	bne.n	800b4dc <_free_r+0x6c>
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	4401      	add	r1, r0
 800b4c8:	1850      	adds	r0, r2, r1
 800b4ca:	4283      	cmp	r3, r0
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	d1e0      	bne.n	800b492 <_free_r+0x22>
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	6053      	str	r3, [r2, #4]
 800b4d6:	4408      	add	r0, r1
 800b4d8:	6010      	str	r0, [r2, #0]
 800b4da:	e7da      	b.n	800b492 <_free_r+0x22>
 800b4dc:	d902      	bls.n	800b4e4 <_free_r+0x74>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	602b      	str	r3, [r5, #0]
 800b4e2:	e7d6      	b.n	800b492 <_free_r+0x22>
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	1821      	adds	r1, r4, r0
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf04      	itt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	bf04      	itt	eq
 800b4f4:	1809      	addeq	r1, r1, r0
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	6054      	str	r4, [r2, #4]
 800b4fa:	e7ca      	b.n	800b492 <_free_r+0x22>
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	bf00      	nop
 800b500:	240006c8 	.word	0x240006c8

0800b504 <__ssputs_r>:
 800b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b508:	688e      	ldr	r6, [r1, #8]
 800b50a:	461f      	mov	r7, r3
 800b50c:	42be      	cmp	r6, r7
 800b50e:	680b      	ldr	r3, [r1, #0]
 800b510:	4682      	mov	sl, r0
 800b512:	460c      	mov	r4, r1
 800b514:	4690      	mov	r8, r2
 800b516:	d82d      	bhi.n	800b574 <__ssputs_r+0x70>
 800b518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b520:	d026      	beq.n	800b570 <__ssputs_r+0x6c>
 800b522:	6965      	ldr	r5, [r4, #20]
 800b524:	6909      	ldr	r1, [r1, #16]
 800b526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b52a:	eba3 0901 	sub.w	r9, r3, r1
 800b52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b532:	1c7b      	adds	r3, r7, #1
 800b534:	444b      	add	r3, r9
 800b536:	106d      	asrs	r5, r5, #1
 800b538:	429d      	cmp	r5, r3
 800b53a:	bf38      	it	cc
 800b53c:	461d      	movcc	r5, r3
 800b53e:	0553      	lsls	r3, r2, #21
 800b540:	d527      	bpl.n	800b592 <__ssputs_r+0x8e>
 800b542:	4629      	mov	r1, r5
 800b544:	f7ff fc36 	bl	800adb4 <_malloc_r>
 800b548:	4606      	mov	r6, r0
 800b54a:	b360      	cbz	r0, 800b5a6 <__ssputs_r+0xa2>
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	464a      	mov	r2, r9
 800b550:	f7ff ff61 	bl	800b416 <memcpy>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	6165      	str	r5, [r4, #20]
 800b564:	444e      	add	r6, r9
 800b566:	eba5 0509 	sub.w	r5, r5, r9
 800b56a:	6026      	str	r6, [r4, #0]
 800b56c:	60a5      	str	r5, [r4, #8]
 800b56e:	463e      	mov	r6, r7
 800b570:	42be      	cmp	r6, r7
 800b572:	d900      	bls.n	800b576 <__ssputs_r+0x72>
 800b574:	463e      	mov	r6, r7
 800b576:	6820      	ldr	r0, [r4, #0]
 800b578:	4632      	mov	r2, r6
 800b57a:	4641      	mov	r1, r8
 800b57c:	f000 fb66 	bl	800bc4c <memmove>
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	1b9b      	subs	r3, r3, r6
 800b584:	60a3      	str	r3, [r4, #8]
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	4433      	add	r3, r6
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	2000      	movs	r0, #0
 800b58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b592:	462a      	mov	r2, r5
 800b594:	f000 fb7b 	bl	800bc8e <_realloc_r>
 800b598:	4606      	mov	r6, r0
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1e0      	bne.n	800b560 <__ssputs_r+0x5c>
 800b59e:	6921      	ldr	r1, [r4, #16]
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f7ff ff65 	bl	800b470 <_free_r>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	f8ca 3000 	str.w	r3, [sl]
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e7e9      	b.n	800b58e <__ssputs_r+0x8a>
	...

0800b5bc <_svfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4698      	mov	r8, r3
 800b5c2:	898b      	ldrh	r3, [r1, #12]
 800b5c4:	061b      	lsls	r3, r3, #24
 800b5c6:	b09d      	sub	sp, #116	@ 0x74
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	d510      	bpl.n	800b5f2 <_svfiprintf_r+0x36>
 800b5d0:	690b      	ldr	r3, [r1, #16]
 800b5d2:	b973      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x36>
 800b5d4:	2140      	movs	r1, #64	@ 0x40
 800b5d6:	f7ff fbed 	bl	800adb4 <_malloc_r>
 800b5da:	6028      	str	r0, [r5, #0]
 800b5dc:	6128      	str	r0, [r5, #16]
 800b5de:	b930      	cbnz	r0, 800b5ee <_svfiprintf_r+0x32>
 800b5e0:	230c      	movs	r3, #12
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b01d      	add	sp, #116	@ 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	2340      	movs	r3, #64	@ 0x40
 800b5f0:	616b      	str	r3, [r5, #20]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f6:	2320      	movs	r3, #32
 800b5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b600:	2330      	movs	r3, #48	@ 0x30
 800b602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7a0 <_svfiprintf_r+0x1e4>
 800b606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b60a:	f04f 0901 	mov.w	r9, #1
 800b60e:	4623      	mov	r3, r4
 800b610:	469a      	mov	sl, r3
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	b10a      	cbz	r2, 800b61c <_svfiprintf_r+0x60>
 800b618:	2a25      	cmp	r2, #37	@ 0x25
 800b61a:	d1f9      	bne.n	800b610 <_svfiprintf_r+0x54>
 800b61c:	ebba 0b04 	subs.w	fp, sl, r4
 800b620:	d00b      	beq.n	800b63a <_svfiprintf_r+0x7e>
 800b622:	465b      	mov	r3, fp
 800b624:	4622      	mov	r2, r4
 800b626:	4629      	mov	r1, r5
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff ff6b 	bl	800b504 <__ssputs_r>
 800b62e:	3001      	adds	r0, #1
 800b630:	f000 80a7 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b636:	445a      	add	r2, fp
 800b638:	9209      	str	r2, [sp, #36]	@ 0x24
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 809f 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b644:	2300      	movs	r3, #0
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64e:	f10a 0a01 	add.w	sl, sl, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b65c:	4654      	mov	r4, sl
 800b65e:	2205      	movs	r2, #5
 800b660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b664:	484e      	ldr	r0, [pc, #312]	@ (800b7a0 <_svfiprintf_r+0x1e4>)
 800b666:	f7f4 fe63 	bl	8000330 <memchr>
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	b9d8      	cbnz	r0, 800b6a6 <_svfiprintf_r+0xea>
 800b66e:	06d0      	lsls	r0, r2, #27
 800b670:	bf44      	itt	mi
 800b672:	2320      	movmi	r3, #32
 800b674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b678:	0711      	lsls	r1, r2, #28
 800b67a:	bf44      	itt	mi
 800b67c:	232b      	movmi	r3, #43	@ 0x2b
 800b67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b682:	f89a 3000 	ldrb.w	r3, [sl]
 800b686:	2b2a      	cmp	r3, #42	@ 0x2a
 800b688:	d015      	beq.n	800b6b6 <_svfiprintf_r+0xfa>
 800b68a:	9a07      	ldr	r2, [sp, #28]
 800b68c:	4654      	mov	r4, sl
 800b68e:	2000      	movs	r0, #0
 800b690:	f04f 0c0a 	mov.w	ip, #10
 800b694:	4621      	mov	r1, r4
 800b696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b69a:	3b30      	subs	r3, #48	@ 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d94b      	bls.n	800b738 <_svfiprintf_r+0x17c>
 800b6a0:	b1b0      	cbz	r0, 800b6d0 <_svfiprintf_r+0x114>
 800b6a2:	9207      	str	r2, [sp, #28]
 800b6a4:	e014      	b.n	800b6d0 <_svfiprintf_r+0x114>
 800b6a6:	eba0 0308 	sub.w	r3, r0, r8
 800b6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	46a2      	mov	sl, r4
 800b6b4:	e7d2      	b.n	800b65c <_svfiprintf_r+0xa0>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	1d19      	adds	r1, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9103      	str	r1, [sp, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfbb      	ittet	lt
 800b6c2:	425b      	neglt	r3, r3
 800b6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c8:	9307      	strge	r3, [sp, #28]
 800b6ca:	9307      	strlt	r3, [sp, #28]
 800b6cc:	bfb8      	it	lt
 800b6ce:	9204      	strlt	r2, [sp, #16]
 800b6d0:	7823      	ldrb	r3, [r4, #0]
 800b6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6d4:	d10a      	bne.n	800b6ec <_svfiprintf_r+0x130>
 800b6d6:	7863      	ldrb	r3, [r4, #1]
 800b6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6da:	d132      	bne.n	800b742 <_svfiprintf_r+0x186>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	1d1a      	adds	r2, r3, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	9203      	str	r2, [sp, #12]
 800b6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6e8:	3402      	adds	r4, #2
 800b6ea:	9305      	str	r3, [sp, #20]
 800b6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7b0 <_svfiprintf_r+0x1f4>
 800b6f0:	7821      	ldrb	r1, [r4, #0]
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	4650      	mov	r0, sl
 800b6f6:	f7f4 fe1b 	bl	8000330 <memchr>
 800b6fa:	b138      	cbz	r0, 800b70c <_svfiprintf_r+0x150>
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	eba0 000a 	sub.w	r0, r0, sl
 800b702:	2240      	movs	r2, #64	@ 0x40
 800b704:	4082      	lsls	r2, r0
 800b706:	4313      	orrs	r3, r2
 800b708:	3401      	adds	r4, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	4824      	ldr	r0, [pc, #144]	@ (800b7a4 <_svfiprintf_r+0x1e8>)
 800b712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b716:	2206      	movs	r2, #6
 800b718:	f7f4 fe0a 	bl	8000330 <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d036      	beq.n	800b78e <_svfiprintf_r+0x1d2>
 800b720:	4b21      	ldr	r3, [pc, #132]	@ (800b7a8 <_svfiprintf_r+0x1ec>)
 800b722:	bb1b      	cbnz	r3, 800b76c <_svfiprintf_r+0x1b0>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	3307      	adds	r3, #7
 800b728:	f023 0307 	bic.w	r3, r3, #7
 800b72c:	3308      	adds	r3, #8
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b732:	4433      	add	r3, r6
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	e76a      	b.n	800b60e <_svfiprintf_r+0x52>
 800b738:	fb0c 3202 	mla	r2, ip, r2, r3
 800b73c:	460c      	mov	r4, r1
 800b73e:	2001      	movs	r0, #1
 800b740:	e7a8      	b.n	800b694 <_svfiprintf_r+0xd8>
 800b742:	2300      	movs	r3, #0
 800b744:	3401      	adds	r4, #1
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	4619      	mov	r1, r3
 800b74a:	f04f 0c0a 	mov.w	ip, #10
 800b74e:	4620      	mov	r0, r4
 800b750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b754:	3a30      	subs	r2, #48	@ 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_svfiprintf_r+0x1a6>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c6      	beq.n	800b6ec <_svfiprintf_r+0x130>
 800b75e:	9105      	str	r1, [sp, #20]
 800b760:	e7c4      	b.n	800b6ec <_svfiprintf_r+0x130>
 800b762:	fb0c 2101 	mla	r1, ip, r1, r2
 800b766:	4604      	mov	r4, r0
 800b768:	2301      	movs	r3, #1
 800b76a:	e7f0      	b.n	800b74e <_svfiprintf_r+0x192>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4638      	mov	r0, r7
 800b778:	f3af 8000 	nop.w
 800b77c:	1c42      	adds	r2, r0, #1
 800b77e:	4606      	mov	r6, r0
 800b780:	d1d6      	bne.n	800b730 <_svfiprintf_r+0x174>
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	065b      	lsls	r3, r3, #25
 800b786:	f53f af2d 	bmi.w	800b5e4 <_svfiprintf_r+0x28>
 800b78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b78c:	e72c      	b.n	800b5e8 <_svfiprintf_r+0x2c>
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	462a      	mov	r2, r5
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b796:	a904      	add	r1, sp, #16
 800b798:	4638      	mov	r0, r7
 800b79a:	f000 f879 	bl	800b890 <_printf_i>
 800b79e:	e7ed      	b.n	800b77c <_svfiprintf_r+0x1c0>
 800b7a0:	0800c512 	.word	0x0800c512
 800b7a4:	0800c51c 	.word	0x0800c51c
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	0800b505 	.word	0x0800b505
 800b7b0:	0800c518 	.word	0x0800c518

0800b7b4 <_printf_common>:
 800b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	688a      	ldr	r2, [r1, #8]
 800b7be:	690b      	ldr	r3, [r1, #16]
 800b7c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	bfb8      	it	lt
 800b7c8:	4613      	movlt	r3, r2
 800b7ca:	6033      	str	r3, [r6, #0]
 800b7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	b10a      	cbz	r2, 800b7da <_printf_common+0x26>
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	6033      	str	r3, [r6, #0]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	0699      	lsls	r1, r3, #26
 800b7de:	bf42      	ittt	mi
 800b7e0:	6833      	ldrmi	r3, [r6, #0]
 800b7e2:	3302      	addmi	r3, #2
 800b7e4:	6033      	strmi	r3, [r6, #0]
 800b7e6:	6825      	ldr	r5, [r4, #0]
 800b7e8:	f015 0506 	ands.w	r5, r5, #6
 800b7ec:	d106      	bne.n	800b7fc <_printf_common+0x48>
 800b7ee:	f104 0a19 	add.w	sl, r4, #25
 800b7f2:	68e3      	ldr	r3, [r4, #12]
 800b7f4:	6832      	ldr	r2, [r6, #0]
 800b7f6:	1a9b      	subs	r3, r3, r2
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	dc26      	bgt.n	800b84a <_printf_common+0x96>
 800b7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b800:	6822      	ldr	r2, [r4, #0]
 800b802:	3b00      	subs	r3, #0
 800b804:	bf18      	it	ne
 800b806:	2301      	movne	r3, #1
 800b808:	0692      	lsls	r2, r2, #26
 800b80a:	d42b      	bmi.n	800b864 <_printf_common+0xb0>
 800b80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b810:	4641      	mov	r1, r8
 800b812:	4638      	mov	r0, r7
 800b814:	47c8      	blx	r9
 800b816:	3001      	adds	r0, #1
 800b818:	d01e      	beq.n	800b858 <_printf_common+0xa4>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	6922      	ldr	r2, [r4, #16]
 800b81e:	f003 0306 	and.w	r3, r3, #6
 800b822:	2b04      	cmp	r3, #4
 800b824:	bf02      	ittt	eq
 800b826:	68e5      	ldreq	r5, [r4, #12]
 800b828:	6833      	ldreq	r3, [r6, #0]
 800b82a:	1aed      	subeq	r5, r5, r3
 800b82c:	68a3      	ldr	r3, [r4, #8]
 800b82e:	bf0c      	ite	eq
 800b830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b834:	2500      	movne	r5, #0
 800b836:	4293      	cmp	r3, r2
 800b838:	bfc4      	itt	gt
 800b83a:	1a9b      	subgt	r3, r3, r2
 800b83c:	18ed      	addgt	r5, r5, r3
 800b83e:	2600      	movs	r6, #0
 800b840:	341a      	adds	r4, #26
 800b842:	42b5      	cmp	r5, r6
 800b844:	d11a      	bne.n	800b87c <_printf_common+0xc8>
 800b846:	2000      	movs	r0, #0
 800b848:	e008      	b.n	800b85c <_printf_common+0xa8>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4652      	mov	r2, sl
 800b84e:	4641      	mov	r1, r8
 800b850:	4638      	mov	r0, r7
 800b852:	47c8      	blx	r9
 800b854:	3001      	adds	r0, #1
 800b856:	d103      	bne.n	800b860 <_printf_common+0xac>
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b860:	3501      	adds	r5, #1
 800b862:	e7c6      	b.n	800b7f2 <_printf_common+0x3e>
 800b864:	18e1      	adds	r1, r4, r3
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	2030      	movs	r0, #48	@ 0x30
 800b86a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b86e:	4422      	add	r2, r4
 800b870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b878:	3302      	adds	r3, #2
 800b87a:	e7c7      	b.n	800b80c <_printf_common+0x58>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4622      	mov	r2, r4
 800b880:	4641      	mov	r1, r8
 800b882:	4638      	mov	r0, r7
 800b884:	47c8      	blx	r9
 800b886:	3001      	adds	r0, #1
 800b888:	d0e6      	beq.n	800b858 <_printf_common+0xa4>
 800b88a:	3601      	adds	r6, #1
 800b88c:	e7d9      	b.n	800b842 <_printf_common+0x8e>
	...

0800b890 <_printf_i>:
 800b890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	7e0f      	ldrb	r7, [r1, #24]
 800b896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b898:	2f78      	cmp	r7, #120	@ 0x78
 800b89a:	4691      	mov	r9, r2
 800b89c:	4680      	mov	r8, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	469a      	mov	sl, r3
 800b8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8a6:	d807      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8a8:	2f62      	cmp	r7, #98	@ 0x62
 800b8aa:	d80a      	bhi.n	800b8c2 <_printf_i+0x32>
 800b8ac:	2f00      	cmp	r7, #0
 800b8ae:	f000 80d2 	beq.w	800ba56 <_printf_i+0x1c6>
 800b8b2:	2f58      	cmp	r7, #88	@ 0x58
 800b8b4:	f000 80b9 	beq.w	800ba2a <_printf_i+0x19a>
 800b8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8c0:	e03a      	b.n	800b938 <_printf_i+0xa8>
 800b8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8c6:	2b15      	cmp	r3, #21
 800b8c8:	d8f6      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b8d0 <_printf_i+0x40>)
 800b8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8d0:	0800b929 	.word	0x0800b929
 800b8d4:	0800b93d 	.word	0x0800b93d
 800b8d8:	0800b8b9 	.word	0x0800b8b9
 800b8dc:	0800b8b9 	.word	0x0800b8b9
 800b8e0:	0800b8b9 	.word	0x0800b8b9
 800b8e4:	0800b8b9 	.word	0x0800b8b9
 800b8e8:	0800b93d 	.word	0x0800b93d
 800b8ec:	0800b8b9 	.word	0x0800b8b9
 800b8f0:	0800b8b9 	.word	0x0800b8b9
 800b8f4:	0800b8b9 	.word	0x0800b8b9
 800b8f8:	0800b8b9 	.word	0x0800b8b9
 800b8fc:	0800ba3d 	.word	0x0800ba3d
 800b900:	0800b967 	.word	0x0800b967
 800b904:	0800b9f7 	.word	0x0800b9f7
 800b908:	0800b8b9 	.word	0x0800b8b9
 800b90c:	0800b8b9 	.word	0x0800b8b9
 800b910:	0800ba5f 	.word	0x0800ba5f
 800b914:	0800b8b9 	.word	0x0800b8b9
 800b918:	0800b967 	.word	0x0800b967
 800b91c:	0800b8b9 	.word	0x0800b8b9
 800b920:	0800b8b9 	.word	0x0800b8b9
 800b924:	0800b9ff 	.word	0x0800b9ff
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6032      	str	r2, [r6, #0]
 800b930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b938:	2301      	movs	r3, #1
 800b93a:	e09d      	b.n	800ba78 <_printf_i+0x1e8>
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	6820      	ldr	r0, [r4, #0]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	6031      	str	r1, [r6, #0]
 800b944:	0606      	lsls	r6, r0, #24
 800b946:	d501      	bpl.n	800b94c <_printf_i+0xbc>
 800b948:	681d      	ldr	r5, [r3, #0]
 800b94a:	e003      	b.n	800b954 <_printf_i+0xc4>
 800b94c:	0645      	lsls	r5, r0, #25
 800b94e:	d5fb      	bpl.n	800b948 <_printf_i+0xb8>
 800b950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b954:	2d00      	cmp	r5, #0
 800b956:	da03      	bge.n	800b960 <_printf_i+0xd0>
 800b958:	232d      	movs	r3, #45	@ 0x2d
 800b95a:	426d      	negs	r5, r5
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b960:	4859      	ldr	r0, [pc, #356]	@ (800bac8 <_printf_i+0x238>)
 800b962:	230a      	movs	r3, #10
 800b964:	e011      	b.n	800b98a <_printf_i+0xfa>
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	0608      	lsls	r0, r1, #24
 800b96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b970:	d402      	bmi.n	800b978 <_printf_i+0xe8>
 800b972:	0649      	lsls	r1, r1, #25
 800b974:	bf48      	it	mi
 800b976:	b2ad      	uxthmi	r5, r5
 800b978:	2f6f      	cmp	r7, #111	@ 0x6f
 800b97a:	4853      	ldr	r0, [pc, #332]	@ (800bac8 <_printf_i+0x238>)
 800b97c:	6033      	str	r3, [r6, #0]
 800b97e:	bf14      	ite	ne
 800b980:	230a      	movne	r3, #10
 800b982:	2308      	moveq	r3, #8
 800b984:	2100      	movs	r1, #0
 800b986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b98a:	6866      	ldr	r6, [r4, #4]
 800b98c:	60a6      	str	r6, [r4, #8]
 800b98e:	2e00      	cmp	r6, #0
 800b990:	bfa2      	ittt	ge
 800b992:	6821      	ldrge	r1, [r4, #0]
 800b994:	f021 0104 	bicge.w	r1, r1, #4
 800b998:	6021      	strge	r1, [r4, #0]
 800b99a:	b90d      	cbnz	r5, 800b9a0 <_printf_i+0x110>
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	d04b      	beq.n	800ba38 <_printf_i+0x1a8>
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b9aa:	5dc7      	ldrb	r7, [r0, r7]
 800b9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9b0:	462f      	mov	r7, r5
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	d9f4      	bls.n	800b9a2 <_printf_i+0x112>
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d10b      	bne.n	800b9d4 <_printf_i+0x144>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07df      	lsls	r7, r3, #31
 800b9c0:	d508      	bpl.n	800b9d4 <_printf_i+0x144>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6861      	ldr	r1, [r4, #4]
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	bfde      	ittt	le
 800b9ca:	2330      	movle	r3, #48	@ 0x30
 800b9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9d4:	1b92      	subs	r2, r2, r6
 800b9d6:	6122      	str	r2, [r4, #16]
 800b9d8:	f8cd a000 	str.w	sl, [sp]
 800b9dc:	464b      	mov	r3, r9
 800b9de:	aa03      	add	r2, sp, #12
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fee6 	bl	800b7b4 <_printf_common>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d14a      	bne.n	800ba82 <_printf_i+0x1f2>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b004      	add	sp, #16
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	f043 0320 	orr.w	r3, r3, #32
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	4833      	ldr	r0, [pc, #204]	@ (800bacc <_printf_i+0x23c>)
 800ba00:	2778      	movs	r7, #120	@ 0x78
 800ba02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	6831      	ldr	r1, [r6, #0]
 800ba0a:	061f      	lsls	r7, r3, #24
 800ba0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba10:	d402      	bmi.n	800ba18 <_printf_i+0x188>
 800ba12:	065f      	lsls	r7, r3, #25
 800ba14:	bf48      	it	mi
 800ba16:	b2ad      	uxthmi	r5, r5
 800ba18:	6031      	str	r1, [r6, #0]
 800ba1a:	07d9      	lsls	r1, r3, #31
 800ba1c:	bf44      	itt	mi
 800ba1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba22:	6023      	strmi	r3, [r4, #0]
 800ba24:	b11d      	cbz	r5, 800ba2e <_printf_i+0x19e>
 800ba26:	2310      	movs	r3, #16
 800ba28:	e7ac      	b.n	800b984 <_printf_i+0xf4>
 800ba2a:	4827      	ldr	r0, [pc, #156]	@ (800bac8 <_printf_i+0x238>)
 800ba2c:	e7e9      	b.n	800ba02 <_printf_i+0x172>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	f023 0320 	bic.w	r3, r3, #32
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	e7f6      	b.n	800ba26 <_printf_i+0x196>
 800ba38:	4616      	mov	r6, r2
 800ba3a:	e7bd      	b.n	800b9b8 <_printf_i+0x128>
 800ba3c:	6833      	ldr	r3, [r6, #0]
 800ba3e:	6825      	ldr	r5, [r4, #0]
 800ba40:	6961      	ldr	r1, [r4, #20]
 800ba42:	1d18      	adds	r0, r3, #4
 800ba44:	6030      	str	r0, [r6, #0]
 800ba46:	062e      	lsls	r6, r5, #24
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0x1c0>
 800ba4c:	6019      	str	r1, [r3, #0]
 800ba4e:	e002      	b.n	800ba56 <_printf_i+0x1c6>
 800ba50:	0668      	lsls	r0, r5, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0x1bc>
 800ba54:	8019      	strh	r1, [r3, #0]
 800ba56:	2300      	movs	r3, #0
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	4616      	mov	r6, r2
 800ba5c:	e7bc      	b.n	800b9d8 <_printf_i+0x148>
 800ba5e:	6833      	ldr	r3, [r6, #0]
 800ba60:	1d1a      	adds	r2, r3, #4
 800ba62:	6032      	str	r2, [r6, #0]
 800ba64:	681e      	ldr	r6, [r3, #0]
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7f4 fc60 	bl	8000330 <memchr>
 800ba70:	b108      	cbz	r0, 800ba76 <_printf_i+0x1e6>
 800ba72:	1b80      	subs	r0, r0, r6
 800ba74:	6060      	str	r0, [r4, #4]
 800ba76:	6863      	ldr	r3, [r4, #4]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba80:	e7aa      	b.n	800b9d8 <_printf_i+0x148>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d0ad      	beq.n	800b9ec <_printf_i+0x15c>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	079b      	lsls	r3, r3, #30
 800ba94:	d413      	bmi.n	800babe <_printf_i+0x22e>
 800ba96:	68e0      	ldr	r0, [r4, #12]
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	4298      	cmp	r0, r3
 800ba9c:	bfb8      	it	lt
 800ba9e:	4618      	movlt	r0, r3
 800baa0:	e7a6      	b.n	800b9f0 <_printf_i+0x160>
 800baa2:	2301      	movs	r3, #1
 800baa4:	4632      	mov	r2, r6
 800baa6:	4649      	mov	r1, r9
 800baa8:	4640      	mov	r0, r8
 800baaa:	47d0      	blx	sl
 800baac:	3001      	adds	r0, #1
 800baae:	d09d      	beq.n	800b9ec <_printf_i+0x15c>
 800bab0:	3501      	adds	r5, #1
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	9903      	ldr	r1, [sp, #12]
 800bab6:	1a5b      	subs	r3, r3, r1
 800bab8:	42ab      	cmp	r3, r5
 800baba:	dcf2      	bgt.n	800baa2 <_printf_i+0x212>
 800babc:	e7eb      	b.n	800ba96 <_printf_i+0x206>
 800babe:	2500      	movs	r5, #0
 800bac0:	f104 0619 	add.w	r6, r4, #25
 800bac4:	e7f5      	b.n	800bab2 <_printf_i+0x222>
 800bac6:	bf00      	nop
 800bac8:	0800c523 	.word	0x0800c523
 800bacc:	0800c534 	.word	0x0800c534

0800bad0 <__sflush_r>:
 800bad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	0716      	lsls	r6, r2, #28
 800bada:	4605      	mov	r5, r0
 800badc:	460c      	mov	r4, r1
 800bade:	d454      	bmi.n	800bb8a <__sflush_r+0xba>
 800bae0:	684b      	ldr	r3, [r1, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dc02      	bgt.n	800baec <__sflush_r+0x1c>
 800bae6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dd48      	ble.n	800bb7e <__sflush_r+0xae>
 800baec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baee:	2e00      	cmp	r6, #0
 800baf0:	d045      	beq.n	800bb7e <__sflush_r+0xae>
 800baf2:	2300      	movs	r3, #0
 800baf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baf8:	682f      	ldr	r7, [r5, #0]
 800bafa:	6a21      	ldr	r1, [r4, #32]
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	d030      	beq.n	800bb62 <__sflush_r+0x92>
 800bb00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	0759      	lsls	r1, r3, #29
 800bb06:	d505      	bpl.n	800bb14 <__sflush_r+0x44>
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	1ad2      	subs	r2, r2, r3
 800bb0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb0e:	b10b      	cbz	r3, 800bb14 <__sflush_r+0x44>
 800bb10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb12:	1ad2      	subs	r2, r2, r3
 800bb14:	2300      	movs	r3, #0
 800bb16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb18:	6a21      	ldr	r1, [r4, #32]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b0      	blx	r6
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	d106      	bne.n	800bb32 <__sflush_r+0x62>
 800bb24:	6829      	ldr	r1, [r5, #0]
 800bb26:	291d      	cmp	r1, #29
 800bb28:	d82b      	bhi.n	800bb82 <__sflush_r+0xb2>
 800bb2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbd4 <__sflush_r+0x104>)
 800bb2c:	410a      	asrs	r2, r1
 800bb2e:	07d6      	lsls	r6, r2, #31
 800bb30:	d427      	bmi.n	800bb82 <__sflush_r+0xb2>
 800bb32:	2200      	movs	r2, #0
 800bb34:	6062      	str	r2, [r4, #4]
 800bb36:	04d9      	lsls	r1, r3, #19
 800bb38:	6922      	ldr	r2, [r4, #16]
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	d504      	bpl.n	800bb48 <__sflush_r+0x78>
 800bb3e:	1c42      	adds	r2, r0, #1
 800bb40:	d101      	bne.n	800bb46 <__sflush_r+0x76>
 800bb42:	682b      	ldr	r3, [r5, #0]
 800bb44:	b903      	cbnz	r3, 800bb48 <__sflush_r+0x78>
 800bb46:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb4a:	602f      	str	r7, [r5, #0]
 800bb4c:	b1b9      	cbz	r1, 800bb7e <__sflush_r+0xae>
 800bb4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb52:	4299      	cmp	r1, r3
 800bb54:	d002      	beq.n	800bb5c <__sflush_r+0x8c>
 800bb56:	4628      	mov	r0, r5
 800bb58:	f7ff fc8a 	bl	800b470 <_free_r>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb60:	e00d      	b.n	800bb7e <__sflush_r+0xae>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b0      	blx	r6
 800bb68:	4602      	mov	r2, r0
 800bb6a:	1c50      	adds	r0, r2, #1
 800bb6c:	d1c9      	bne.n	800bb02 <__sflush_r+0x32>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0c6      	beq.n	800bb02 <__sflush_r+0x32>
 800bb74:	2b1d      	cmp	r3, #29
 800bb76:	d001      	beq.n	800bb7c <__sflush_r+0xac>
 800bb78:	2b16      	cmp	r3, #22
 800bb7a:	d11e      	bne.n	800bbba <__sflush_r+0xea>
 800bb7c:	602f      	str	r7, [r5, #0]
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e022      	b.n	800bbc8 <__sflush_r+0xf8>
 800bb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb86:	b21b      	sxth	r3, r3
 800bb88:	e01b      	b.n	800bbc2 <__sflush_r+0xf2>
 800bb8a:	690f      	ldr	r7, [r1, #16]
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	d0f6      	beq.n	800bb7e <__sflush_r+0xae>
 800bb90:	0793      	lsls	r3, r2, #30
 800bb92:	680e      	ldr	r6, [r1, #0]
 800bb94:	bf08      	it	eq
 800bb96:	694b      	ldreq	r3, [r1, #20]
 800bb98:	600f      	str	r7, [r1, #0]
 800bb9a:	bf18      	it	ne
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	eba6 0807 	sub.w	r8, r6, r7
 800bba2:	608b      	str	r3, [r1, #8]
 800bba4:	f1b8 0f00 	cmp.w	r8, #0
 800bba8:	dde9      	ble.n	800bb7e <__sflush_r+0xae>
 800bbaa:	6a21      	ldr	r1, [r4, #32]
 800bbac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbae:	4643      	mov	r3, r8
 800bbb0:	463a      	mov	r2, r7
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b0      	blx	r6
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	dc08      	bgt.n	800bbcc <__sflush_r+0xfc>
 800bbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	4407      	add	r7, r0
 800bbce:	eba8 0800 	sub.w	r8, r8, r0
 800bbd2:	e7e7      	b.n	800bba4 <__sflush_r+0xd4>
 800bbd4:	dfbffffe 	.word	0xdfbffffe

0800bbd8 <_fflush_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	690b      	ldr	r3, [r1, #16]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	b913      	cbnz	r3, 800bbe8 <_fflush_r+0x10>
 800bbe2:	2500      	movs	r5, #0
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	b118      	cbz	r0, 800bbf2 <_fflush_r+0x1a>
 800bbea:	6a03      	ldr	r3, [r0, #32]
 800bbec:	b90b      	cbnz	r3, 800bbf2 <_fflush_r+0x1a>
 800bbee:	f7ff fa7d 	bl	800b0ec <__sinit>
 800bbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0f3      	beq.n	800bbe2 <_fflush_r+0xa>
 800bbfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbfc:	07d0      	lsls	r0, r2, #31
 800bbfe:	d404      	bmi.n	800bc0a <_fflush_r+0x32>
 800bc00:	0599      	lsls	r1, r3, #22
 800bc02:	d402      	bmi.n	800bc0a <_fflush_r+0x32>
 800bc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc06:	f7ff fc04 	bl	800b412 <__retarget_lock_acquire_recursive>
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f7ff ff5f 	bl	800bad0 <__sflush_r>
 800bc12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc14:	07da      	lsls	r2, r3, #31
 800bc16:	4605      	mov	r5, r0
 800bc18:	d4e4      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	059b      	lsls	r3, r3, #22
 800bc1e:	d4e1      	bmi.n	800bbe4 <_fflush_r+0xc>
 800bc20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc22:	f7ff fbf7 	bl	800b414 <__retarget_lock_release_recursive>
 800bc26:	e7dd      	b.n	800bbe4 <_fflush_r+0xc>

0800bc28 <fiprintf>:
 800bc28:	b40e      	push	{r1, r2, r3}
 800bc2a:	b503      	push	{r0, r1, lr}
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	ab03      	add	r3, sp, #12
 800bc30:	4805      	ldr	r0, [pc, #20]	@ (800bc48 <fiprintf+0x20>)
 800bc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc36:	6800      	ldr	r0, [r0, #0]
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	f000 f87f 	bl	800bd3c <_vfiprintf_r>
 800bc3e:	b002      	add	sp, #8
 800bc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc44:	b003      	add	sp, #12
 800bc46:	4770      	bx	lr
 800bc48:	24000084 	.word	0x24000084

0800bc4c <memmove>:
 800bc4c:	4288      	cmp	r0, r1
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	eb01 0402 	add.w	r4, r1, r2
 800bc54:	d902      	bls.n	800bc5c <memmove+0x10>
 800bc56:	4284      	cmp	r4, r0
 800bc58:	4623      	mov	r3, r4
 800bc5a:	d807      	bhi.n	800bc6c <memmove+0x20>
 800bc5c:	1e43      	subs	r3, r0, #1
 800bc5e:	42a1      	cmp	r1, r4
 800bc60:	d008      	beq.n	800bc74 <memmove+0x28>
 800bc62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc6a:	e7f8      	b.n	800bc5e <memmove+0x12>
 800bc6c:	4402      	add	r2, r0
 800bc6e:	4601      	mov	r1, r0
 800bc70:	428a      	cmp	r2, r1
 800bc72:	d100      	bne.n	800bc76 <memmove+0x2a>
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc7e:	e7f7      	b.n	800bc70 <memmove+0x24>

0800bc80 <abort>:
 800bc80:	b508      	push	{r3, lr}
 800bc82:	2006      	movs	r0, #6
 800bc84:	f000 fa2e 	bl	800c0e4 <raise>
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7f5 f9f3 	bl	8001074 <_exit>

0800bc8e <_realloc_r>:
 800bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc92:	4680      	mov	r8, r0
 800bc94:	4615      	mov	r5, r2
 800bc96:	460c      	mov	r4, r1
 800bc98:	b921      	cbnz	r1, 800bca4 <_realloc_r+0x16>
 800bc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	4611      	mov	r1, r2
 800bca0:	f7ff b888 	b.w	800adb4 <_malloc_r>
 800bca4:	b92a      	cbnz	r2, 800bcb2 <_realloc_r+0x24>
 800bca6:	f7ff fbe3 	bl	800b470 <_free_r>
 800bcaa:	2400      	movs	r4, #0
 800bcac:	4620      	mov	r0, r4
 800bcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb2:	f000 fa33 	bl	800c11c <_malloc_usable_size_r>
 800bcb6:	4285      	cmp	r5, r0
 800bcb8:	4606      	mov	r6, r0
 800bcba:	d802      	bhi.n	800bcc2 <_realloc_r+0x34>
 800bcbc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bcc0:	d8f4      	bhi.n	800bcac <_realloc_r+0x1e>
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	f7ff f875 	bl	800adb4 <_malloc_r>
 800bcca:	4607      	mov	r7, r0
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d0ec      	beq.n	800bcaa <_realloc_r+0x1c>
 800bcd0:	42b5      	cmp	r5, r6
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	bf28      	it	cs
 800bcd8:	4632      	movcs	r2, r6
 800bcda:	f7ff fb9c 	bl	800b416 <memcpy>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4640      	mov	r0, r8
 800bce2:	f7ff fbc5 	bl	800b470 <_free_r>
 800bce6:	463c      	mov	r4, r7
 800bce8:	e7e0      	b.n	800bcac <_realloc_r+0x1e>

0800bcea <__sfputc_r>:
 800bcea:	6893      	ldr	r3, [r2, #8]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	b410      	push	{r4}
 800bcf2:	6093      	str	r3, [r2, #8]
 800bcf4:	da08      	bge.n	800bd08 <__sfputc_r+0x1e>
 800bcf6:	6994      	ldr	r4, [r2, #24]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	db01      	blt.n	800bd00 <__sfputc_r+0x16>
 800bcfc:	290a      	cmp	r1, #10
 800bcfe:	d103      	bne.n	800bd08 <__sfputc_r+0x1e>
 800bd00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd04:	f000 b932 	b.w	800bf6c <__swbuf_r>
 800bd08:	6813      	ldr	r3, [r2, #0]
 800bd0a:	1c58      	adds	r0, r3, #1
 800bd0c:	6010      	str	r0, [r2, #0]
 800bd0e:	7019      	strb	r1, [r3, #0]
 800bd10:	4608      	mov	r0, r1
 800bd12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <__sfputs_r>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	460f      	mov	r7, r1
 800bd1e:	4614      	mov	r4, r2
 800bd20:	18d5      	adds	r5, r2, r3
 800bd22:	42ac      	cmp	r4, r5
 800bd24:	d101      	bne.n	800bd2a <__sfputs_r+0x12>
 800bd26:	2000      	movs	r0, #0
 800bd28:	e007      	b.n	800bd3a <__sfputs_r+0x22>
 800bd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2e:	463a      	mov	r2, r7
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ffda 	bl	800bcea <__sfputc_r>
 800bd36:	1c43      	adds	r3, r0, #1
 800bd38:	d1f3      	bne.n	800bd22 <__sfputs_r+0xa>
 800bd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd3c <_vfiprintf_r>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460d      	mov	r5, r1
 800bd42:	b09d      	sub	sp, #116	@ 0x74
 800bd44:	4614      	mov	r4, r2
 800bd46:	4698      	mov	r8, r3
 800bd48:	4606      	mov	r6, r0
 800bd4a:	b118      	cbz	r0, 800bd54 <_vfiprintf_r+0x18>
 800bd4c:	6a03      	ldr	r3, [r0, #32]
 800bd4e:	b90b      	cbnz	r3, 800bd54 <_vfiprintf_r+0x18>
 800bd50:	f7ff f9cc 	bl	800b0ec <__sinit>
 800bd54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd56:	07d9      	lsls	r1, r3, #31
 800bd58:	d405      	bmi.n	800bd66 <_vfiprintf_r+0x2a>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	059a      	lsls	r2, r3, #22
 800bd5e:	d402      	bmi.n	800bd66 <_vfiprintf_r+0x2a>
 800bd60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd62:	f7ff fb56 	bl	800b412 <__retarget_lock_acquire_recursive>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	071b      	lsls	r3, r3, #28
 800bd6a:	d501      	bpl.n	800bd70 <_vfiprintf_r+0x34>
 800bd6c:	692b      	ldr	r3, [r5, #16]
 800bd6e:	b99b      	cbnz	r3, 800bd98 <_vfiprintf_r+0x5c>
 800bd70:	4629      	mov	r1, r5
 800bd72:	4630      	mov	r0, r6
 800bd74:	f000 f938 	bl	800bfe8 <__swsetup_r>
 800bd78:	b170      	cbz	r0, 800bd98 <_vfiprintf_r+0x5c>
 800bd7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd7c:	07dc      	lsls	r4, r3, #31
 800bd7e:	d504      	bpl.n	800bd8a <_vfiprintf_r+0x4e>
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	b01d      	add	sp, #116	@ 0x74
 800bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	0598      	lsls	r0, r3, #22
 800bd8e:	d4f7      	bmi.n	800bd80 <_vfiprintf_r+0x44>
 800bd90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd92:	f7ff fb3f 	bl	800b414 <__retarget_lock_release_recursive>
 800bd96:	e7f3      	b.n	800bd80 <_vfiprintf_r+0x44>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd9c:	2320      	movs	r3, #32
 800bd9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bda2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda6:	2330      	movs	r3, #48	@ 0x30
 800bda8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf58 <_vfiprintf_r+0x21c>
 800bdac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdb0:	f04f 0901 	mov.w	r9, #1
 800bdb4:	4623      	mov	r3, r4
 800bdb6:	469a      	mov	sl, r3
 800bdb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdbc:	b10a      	cbz	r2, 800bdc2 <_vfiprintf_r+0x86>
 800bdbe:	2a25      	cmp	r2, #37	@ 0x25
 800bdc0:	d1f9      	bne.n	800bdb6 <_vfiprintf_r+0x7a>
 800bdc2:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc6:	d00b      	beq.n	800bde0 <_vfiprintf_r+0xa4>
 800bdc8:	465b      	mov	r3, fp
 800bdca:	4622      	mov	r2, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f7ff ffa2 	bl	800bd18 <__sfputs_r>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f000 80a7 	beq.w	800bf28 <_vfiprintf_r+0x1ec>
 800bdda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bddc:	445a      	add	r2, fp
 800bdde:	9209      	str	r2, [sp, #36]	@ 0x24
 800bde0:	f89a 3000 	ldrb.w	r3, [sl]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 809f 	beq.w	800bf28 <_vfiprintf_r+0x1ec>
 800bdea:	2300      	movs	r3, #0
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf4:	f10a 0a01 	add.w	sl, sl, #1
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	9307      	str	r3, [sp, #28]
 800bdfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be00:	931a      	str	r3, [sp, #104]	@ 0x68
 800be02:	4654      	mov	r4, sl
 800be04:	2205      	movs	r2, #5
 800be06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0a:	4853      	ldr	r0, [pc, #332]	@ (800bf58 <_vfiprintf_r+0x21c>)
 800be0c:	f7f4 fa90 	bl	8000330 <memchr>
 800be10:	9a04      	ldr	r2, [sp, #16]
 800be12:	b9d8      	cbnz	r0, 800be4c <_vfiprintf_r+0x110>
 800be14:	06d1      	lsls	r1, r2, #27
 800be16:	bf44      	itt	mi
 800be18:	2320      	movmi	r3, #32
 800be1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be1e:	0713      	lsls	r3, r2, #28
 800be20:	bf44      	itt	mi
 800be22:	232b      	movmi	r3, #43	@ 0x2b
 800be24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be28:	f89a 3000 	ldrb.w	r3, [sl]
 800be2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2e:	d015      	beq.n	800be5c <_vfiprintf_r+0x120>
 800be30:	9a07      	ldr	r2, [sp, #28]
 800be32:	4654      	mov	r4, sl
 800be34:	2000      	movs	r0, #0
 800be36:	f04f 0c0a 	mov.w	ip, #10
 800be3a:	4621      	mov	r1, r4
 800be3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be40:	3b30      	subs	r3, #48	@ 0x30
 800be42:	2b09      	cmp	r3, #9
 800be44:	d94b      	bls.n	800bede <_vfiprintf_r+0x1a2>
 800be46:	b1b0      	cbz	r0, 800be76 <_vfiprintf_r+0x13a>
 800be48:	9207      	str	r2, [sp, #28]
 800be4a:	e014      	b.n	800be76 <_vfiprintf_r+0x13a>
 800be4c:	eba0 0308 	sub.w	r3, r0, r8
 800be50:	fa09 f303 	lsl.w	r3, r9, r3
 800be54:	4313      	orrs	r3, r2
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	46a2      	mov	sl, r4
 800be5a:	e7d2      	b.n	800be02 <_vfiprintf_r+0xc6>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	1d19      	adds	r1, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9103      	str	r1, [sp, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfbb      	ittet	lt
 800be68:	425b      	neglt	r3, r3
 800be6a:	f042 0202 	orrlt.w	r2, r2, #2
 800be6e:	9307      	strge	r3, [sp, #28]
 800be70:	9307      	strlt	r3, [sp, #28]
 800be72:	bfb8      	it	lt
 800be74:	9204      	strlt	r2, [sp, #16]
 800be76:	7823      	ldrb	r3, [r4, #0]
 800be78:	2b2e      	cmp	r3, #46	@ 0x2e
 800be7a:	d10a      	bne.n	800be92 <_vfiprintf_r+0x156>
 800be7c:	7863      	ldrb	r3, [r4, #1]
 800be7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be80:	d132      	bne.n	800bee8 <_vfiprintf_r+0x1ac>
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	1d1a      	adds	r2, r3, #4
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	9203      	str	r2, [sp, #12]
 800be8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be8e:	3402      	adds	r4, #2
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf68 <_vfiprintf_r+0x22c>
 800be96:	7821      	ldrb	r1, [r4, #0]
 800be98:	2203      	movs	r2, #3
 800be9a:	4650      	mov	r0, sl
 800be9c:	f7f4 fa48 	bl	8000330 <memchr>
 800bea0:	b138      	cbz	r0, 800beb2 <_vfiprintf_r+0x176>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	eba0 000a 	sub.w	r0, r0, sl
 800bea8:	2240      	movs	r2, #64	@ 0x40
 800beaa:	4082      	lsls	r2, r0
 800beac:	4313      	orrs	r3, r2
 800beae:	3401      	adds	r4, #1
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb6:	4829      	ldr	r0, [pc, #164]	@ (800bf5c <_vfiprintf_r+0x220>)
 800beb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bebc:	2206      	movs	r2, #6
 800bebe:	f7f4 fa37 	bl	8000330 <memchr>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d03f      	beq.n	800bf46 <_vfiprintf_r+0x20a>
 800bec6:	4b26      	ldr	r3, [pc, #152]	@ (800bf60 <_vfiprintf_r+0x224>)
 800bec8:	bb1b      	cbnz	r3, 800bf12 <_vfiprintf_r+0x1d6>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	3307      	adds	r3, #7
 800bece:	f023 0307 	bic.w	r3, r3, #7
 800bed2:	3308      	adds	r3, #8
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed8:	443b      	add	r3, r7
 800beda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bedc:	e76a      	b.n	800bdb4 <_vfiprintf_r+0x78>
 800bede:	fb0c 3202 	mla	r2, ip, r2, r3
 800bee2:	460c      	mov	r4, r1
 800bee4:	2001      	movs	r0, #1
 800bee6:	e7a8      	b.n	800be3a <_vfiprintf_r+0xfe>
 800bee8:	2300      	movs	r3, #0
 800beea:	3401      	adds	r4, #1
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	4619      	mov	r1, r3
 800bef0:	f04f 0c0a 	mov.w	ip, #10
 800bef4:	4620      	mov	r0, r4
 800bef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800befa:	3a30      	subs	r2, #48	@ 0x30
 800befc:	2a09      	cmp	r2, #9
 800befe:	d903      	bls.n	800bf08 <_vfiprintf_r+0x1cc>
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0c6      	beq.n	800be92 <_vfiprintf_r+0x156>
 800bf04:	9105      	str	r1, [sp, #20]
 800bf06:	e7c4      	b.n	800be92 <_vfiprintf_r+0x156>
 800bf08:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e7f0      	b.n	800bef4 <_vfiprintf_r+0x1b8>
 800bf12:	ab03      	add	r3, sp, #12
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	462a      	mov	r2, r5
 800bf18:	4b12      	ldr	r3, [pc, #72]	@ (800bf64 <_vfiprintf_r+0x228>)
 800bf1a:	a904      	add	r1, sp, #16
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f3af 8000 	nop.w
 800bf22:	4607      	mov	r7, r0
 800bf24:	1c78      	adds	r0, r7, #1
 800bf26:	d1d6      	bne.n	800bed6 <_vfiprintf_r+0x19a>
 800bf28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	d405      	bmi.n	800bf3a <_vfiprintf_r+0x1fe>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	059a      	lsls	r2, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_vfiprintf_r+0x1fe>
 800bf34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf36:	f7ff fa6d 	bl	800b414 <__retarget_lock_release_recursive>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	065b      	lsls	r3, r3, #25
 800bf3e:	f53f af1f 	bmi.w	800bd80 <_vfiprintf_r+0x44>
 800bf42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf44:	e71e      	b.n	800bd84 <_vfiprintf_r+0x48>
 800bf46:	ab03      	add	r3, sp, #12
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4b05      	ldr	r3, [pc, #20]	@ (800bf64 <_vfiprintf_r+0x228>)
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4630      	mov	r0, r6
 800bf52:	f7ff fc9d 	bl	800b890 <_printf_i>
 800bf56:	e7e4      	b.n	800bf22 <_vfiprintf_r+0x1e6>
 800bf58:	0800c512 	.word	0x0800c512
 800bf5c:	0800c51c 	.word	0x0800c51c
 800bf60:	00000000 	.word	0x00000000
 800bf64:	0800bd19 	.word	0x0800bd19
 800bf68:	0800c518 	.word	0x0800c518

0800bf6c <__swbuf_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	460e      	mov	r6, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	4605      	mov	r5, r0
 800bf74:	b118      	cbz	r0, 800bf7e <__swbuf_r+0x12>
 800bf76:	6a03      	ldr	r3, [r0, #32]
 800bf78:	b90b      	cbnz	r3, 800bf7e <__swbuf_r+0x12>
 800bf7a:	f7ff f8b7 	bl	800b0ec <__sinit>
 800bf7e:	69a3      	ldr	r3, [r4, #24]
 800bf80:	60a3      	str	r3, [r4, #8]
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	071a      	lsls	r2, r3, #28
 800bf86:	d501      	bpl.n	800bf8c <__swbuf_r+0x20>
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	b943      	cbnz	r3, 800bf9e <__swbuf_r+0x32>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f82a 	bl	800bfe8 <__swsetup_r>
 800bf94:	b118      	cbz	r0, 800bf9e <__swbuf_r+0x32>
 800bf96:	f04f 37ff 	mov.w	r7, #4294967295
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	6922      	ldr	r2, [r4, #16]
 800bfa2:	1a98      	subs	r0, r3, r2
 800bfa4:	6963      	ldr	r3, [r4, #20]
 800bfa6:	b2f6      	uxtb	r6, r6
 800bfa8:	4283      	cmp	r3, r0
 800bfaa:	4637      	mov	r7, r6
 800bfac:	dc05      	bgt.n	800bfba <__swbuf_r+0x4e>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f7ff fe11 	bl	800bbd8 <_fflush_r>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d1ed      	bne.n	800bf96 <__swbuf_r+0x2a>
 800bfba:	68a3      	ldr	r3, [r4, #8]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	60a3      	str	r3, [r4, #8]
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	6022      	str	r2, [r4, #0]
 800bfc6:	701e      	strb	r6, [r3, #0]
 800bfc8:	6962      	ldr	r2, [r4, #20]
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d004      	beq.n	800bfda <__swbuf_r+0x6e>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	07db      	lsls	r3, r3, #31
 800bfd4:	d5e1      	bpl.n	800bf9a <__swbuf_r+0x2e>
 800bfd6:	2e0a      	cmp	r6, #10
 800bfd8:	d1df      	bne.n	800bf9a <__swbuf_r+0x2e>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff fdfb 	bl	800bbd8 <_fflush_r>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0d9      	beq.n	800bf9a <__swbuf_r+0x2e>
 800bfe6:	e7d6      	b.n	800bf96 <__swbuf_r+0x2a>

0800bfe8 <__swsetup_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4b29      	ldr	r3, [pc, #164]	@ (800c090 <__swsetup_r+0xa8>)
 800bfec:	4605      	mov	r5, r0
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	460c      	mov	r4, r1
 800bff2:	b118      	cbz	r0, 800bffc <__swsetup_r+0x14>
 800bff4:	6a03      	ldr	r3, [r0, #32]
 800bff6:	b90b      	cbnz	r3, 800bffc <__swsetup_r+0x14>
 800bff8:	f7ff f878 	bl	800b0ec <__sinit>
 800bffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c000:	0719      	lsls	r1, r3, #28
 800c002:	d422      	bmi.n	800c04a <__swsetup_r+0x62>
 800c004:	06da      	lsls	r2, r3, #27
 800c006:	d407      	bmi.n	800c018 <__swsetup_r+0x30>
 800c008:	2209      	movs	r2, #9
 800c00a:	602a      	str	r2, [r5, #0]
 800c00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	f04f 30ff 	mov.w	r0, #4294967295
 800c016:	e033      	b.n	800c080 <__swsetup_r+0x98>
 800c018:	0758      	lsls	r0, r3, #29
 800c01a:	d512      	bpl.n	800c042 <__swsetup_r+0x5a>
 800c01c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c01e:	b141      	cbz	r1, 800c032 <__swsetup_r+0x4a>
 800c020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c024:	4299      	cmp	r1, r3
 800c026:	d002      	beq.n	800c02e <__swsetup_r+0x46>
 800c028:	4628      	mov	r0, r5
 800c02a:	f7ff fa21 	bl	800b470 <_free_r>
 800c02e:	2300      	movs	r3, #0
 800c030:	6363      	str	r3, [r4, #52]	@ 0x34
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	2300      	movs	r3, #0
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f043 0308 	orr.w	r3, r3, #8
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	b94b      	cbnz	r3, 800c062 <__swsetup_r+0x7a>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c058:	d003      	beq.n	800c062 <__swsetup_r+0x7a>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f88b 	bl	800c178 <__smakebuf_r>
 800c062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c066:	f013 0201 	ands.w	r2, r3, #1
 800c06a:	d00a      	beq.n	800c082 <__swsetup_r+0x9a>
 800c06c:	2200      	movs	r2, #0
 800c06e:	60a2      	str	r2, [r4, #8]
 800c070:	6962      	ldr	r2, [r4, #20]
 800c072:	4252      	negs	r2, r2
 800c074:	61a2      	str	r2, [r4, #24]
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	b942      	cbnz	r2, 800c08c <__swsetup_r+0xa4>
 800c07a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c07e:	d1c5      	bne.n	800c00c <__swsetup_r+0x24>
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	0799      	lsls	r1, r3, #30
 800c084:	bf58      	it	pl
 800c086:	6962      	ldrpl	r2, [r4, #20]
 800c088:	60a2      	str	r2, [r4, #8]
 800c08a:	e7f4      	b.n	800c076 <__swsetup_r+0x8e>
 800c08c:	2000      	movs	r0, #0
 800c08e:	e7f7      	b.n	800c080 <__swsetup_r+0x98>
 800c090:	24000084 	.word	0x24000084

0800c094 <_raise_r>:
 800c094:	291f      	cmp	r1, #31
 800c096:	b538      	push	{r3, r4, r5, lr}
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	d904      	bls.n	800c0a8 <_raise_r+0x14>
 800c09e:	2316      	movs	r3, #22
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0aa:	b112      	cbz	r2, 800c0b2 <_raise_r+0x1e>
 800c0ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0b0:	b94b      	cbnz	r3, 800c0c6 <_raise_r+0x32>
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 f830 	bl	800c118 <_getpid_r>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	4628      	mov	r0, r5
 800c0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c2:	f000 b817 	b.w	800c0f4 <_kill_r>
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d00a      	beq.n	800c0e0 <_raise_r+0x4c>
 800c0ca:	1c59      	adds	r1, r3, #1
 800c0cc:	d103      	bne.n	800c0d6 <_raise_r+0x42>
 800c0ce:	2316      	movs	r3, #22
 800c0d0:	6003      	str	r3, [r0, #0]
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	e7e7      	b.n	800c0a6 <_raise_r+0x12>
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4798      	blx	r3
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e7e0      	b.n	800c0a6 <_raise_r+0x12>

0800c0e4 <raise>:
 800c0e4:	4b02      	ldr	r3, [pc, #8]	@ (800c0f0 <raise+0xc>)
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	6818      	ldr	r0, [r3, #0]
 800c0ea:	f7ff bfd3 	b.w	800c094 <_raise_r>
 800c0ee:	bf00      	nop
 800c0f0:	24000084 	.word	0x24000084

0800c0f4 <_kill_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	@ (800c114 <_kill_r+0x20>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	f7f4 ffa7 	bl	8001054 <_kill>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	d102      	bne.n	800c110 <_kill_r+0x1c>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	b103      	cbz	r3, 800c110 <_kill_r+0x1c>
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	24000808 	.word	0x24000808

0800c118 <_getpid_r>:
 800c118:	f7f4 bf94 	b.w	8001044 <_getpid>

0800c11c <_malloc_usable_size_r>:
 800c11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c120:	1f18      	subs	r0, r3, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfbc      	itt	lt
 800c126:	580b      	ldrlt	r3, [r1, r0]
 800c128:	18c0      	addlt	r0, r0, r3
 800c12a:	4770      	bx	lr

0800c12c <__swhatbuf_r>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	2900      	cmp	r1, #0
 800c136:	b096      	sub	sp, #88	@ 0x58
 800c138:	4615      	mov	r5, r2
 800c13a:	461e      	mov	r6, r3
 800c13c:	da0d      	bge.n	800c15a <__swhatbuf_r+0x2e>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c144:	f04f 0100 	mov.w	r1, #0
 800c148:	bf14      	ite	ne
 800c14a:	2340      	movne	r3, #64	@ 0x40
 800c14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c150:	2000      	movs	r0, #0
 800c152:	6031      	str	r1, [r6, #0]
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	b016      	add	sp, #88	@ 0x58
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	466a      	mov	r2, sp
 800c15c:	f000 f848 	bl	800c1f0 <_fstat_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	dbec      	blt.n	800c13e <__swhatbuf_r+0x12>
 800c164:	9901      	ldr	r1, [sp, #4]
 800c166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c16e:	4259      	negs	r1, r3
 800c170:	4159      	adcs	r1, r3
 800c172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c176:	e7eb      	b.n	800c150 <__swhatbuf_r+0x24>

0800c178 <__smakebuf_r>:
 800c178:	898b      	ldrh	r3, [r1, #12]
 800c17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c17c:	079d      	lsls	r5, r3, #30
 800c17e:	4606      	mov	r6, r0
 800c180:	460c      	mov	r4, r1
 800c182:	d507      	bpl.n	800c194 <__smakebuf_r+0x1c>
 800c184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	2301      	movs	r3, #1
 800c18e:	6163      	str	r3, [r4, #20]
 800c190:	b003      	add	sp, #12
 800c192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c194:	ab01      	add	r3, sp, #4
 800c196:	466a      	mov	r2, sp
 800c198:	f7ff ffc8 	bl	800c12c <__swhatbuf_r>
 800c19c:	9f00      	ldr	r7, [sp, #0]
 800c19e:	4605      	mov	r5, r0
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7fe fe06 	bl	800adb4 <_malloc_r>
 800c1a8:	b948      	cbnz	r0, 800c1be <__smakebuf_r+0x46>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	059a      	lsls	r2, r3, #22
 800c1b0:	d4ee      	bmi.n	800c190 <__smakebuf_r+0x18>
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	f043 0302 	orr.w	r3, r3, #2
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	e7e2      	b.n	800c184 <__smakebuf_r+0xc>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	6020      	str	r0, [r4, #0]
 800c1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ce:	b15b      	cbz	r3, 800c1e8 <__smakebuf_r+0x70>
 800c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 f81d 	bl	800c214 <_isatty_r>
 800c1da:	b128      	cbz	r0, 800c1e8 <__smakebuf_r+0x70>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f023 0303 	bic.w	r3, r3, #3
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	431d      	orrs	r5, r3
 800c1ec:	81a5      	strh	r5, [r4, #12]
 800c1ee:	e7cf      	b.n	800c190 <__smakebuf_r+0x18>

0800c1f0 <_fstat_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	@ (800c210 <_fstat_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f4 ff89 	bl	8001114 <_fstat>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_fstat_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_fstat_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	24000808 	.word	0x24000808

0800c214 <_isatty_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d06      	ldr	r5, [pc, #24]	@ (800c230 <_isatty_r+0x1c>)
 800c218:	2300      	movs	r3, #0
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7f4 ff88 	bl	8001134 <_isatty>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_isatty_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_isatty_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	24000808 	.word	0x24000808

0800c234 <_init>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	bf00      	nop
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr

0800c240 <_fini>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	bf00      	nop
 800c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c246:	bc08      	pop	{r3}
 800c248:	469e      	mov	lr, r3
 800c24a:	4770      	bx	lr

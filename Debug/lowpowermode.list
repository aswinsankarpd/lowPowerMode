
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c108  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800c3d8  0800c3d8  0000d3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c770  0800c770  0000d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c778  0800c778  0000d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c77c  0800c77c  0000d77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000ec  24000000  0800c780  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000073c  240000ec  0800c86c  0000e0ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000828  0800c86c  0000e828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000199de  00000000  00000000  0000e11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003aac  00000000  00000000  00027af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010b0  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c91  00000000  00000000  0002c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362bc  00000000  00000000  0002d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c802  00000000  00000000  000635a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149c1a  00000000  00000000  0007fda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c99c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cf8  00000000  00000000  001c9a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001ce6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000ec 	.word	0x240000ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c3c0 	.word	0x0800c3c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000f0 	.word	0x240000f0
 800030c:	0800c3c0 	.word	0x0800c3c0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fb1d 	bl	800ad08 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fb19 	bl	800ad20 <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fe6d 	bl	800b3d2 <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fe67 	bl	800b3d2 <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000308 	.word	0x24000308
 8000710:	24000108 	.word	0x24000108

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a fafe 	bl	800ad40 <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a fb85 	bl	800ae5a <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000108 	.word	0x24000108

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fe30 	bl	800b3e4 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fe23 	bl	800b3e4 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fd30 	bl	800b2e4 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fcbb 	bl	800820c <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000054 	.word	0x24000054
 80008a4:	0800c40c 	.word	0x0800c40c
 80008a8:	24000108 	.word	0x24000108
 80008ac:	24000308 	.word	0x24000308
 80008b0:	24000330 	.word	0x24000330
 80008b4:	0800c410 	.word	0x0800c410
 80008b8:	0800c424 	.word	0x0800c424
 80008bc:	24000558 	.word	0x24000558

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a f822 	bl	800a924 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fced 	bl	800b2e4 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fc79 	bl	800820c <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c428 	.word	0x0800c428
 8000928:	24000558 	.word	0x24000558

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fd43 	bl	800b3e4 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a fabe 	bl	800aee4 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fd30 	bl	800b3e4 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fd18 	bl	800b3e4 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a fa93 	bl	800aee4 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fd05 	bl	800b3e4 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 ff4b 	bl	800a894 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fc6d 	bl	800b2e4 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fbf9 	bl	800820c <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c474 	.word	0x0800c474
 8000a28:	0800c45c 	.word	0x0800c45c
 8000a2c:	0800c460 	.word	0x0800c460
 8000a30:	0800c464 	.word	0x0800c464
 8000a34:	24000558 	.word	0x24000558

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fcbd 	bl	800b3e4 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a fa38 	bl	800aee4 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fcaa 	bl	800b3e4 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fc92 	bl	800b3e4 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a fa0d 	bl	800aee4 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fc7f 	bl	800b3e4 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 ff3b 	bl	800a980 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fbe7 	bl	800b2e4 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fb73 	bl	800820c <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c474 	.word	0x0800c474
 8000b34:	0800c45c 	.word	0x0800c45c
 8000b38:	0800c460 	.word	0x0800c460
 8000b3c:	0800c478 	.word	0x0800c478
 8000b40:	24000558 	.word	0x24000558

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <setCSleep+0x34>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f00a fbc5 	bl	800b2e4 <sniprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <setCSleep+0x38>)
 8000b66:	f007 fb51 	bl	800820c <HAL_UART_Transmit>

	startLowPowerMode();
 8000b6a:	f009 fe23 	bl	800a7b4 <startLowPowerMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800c488 	.word	0x0800c488
 8000b7c:	24000558 	.word	0x24000558

08000b80 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3308      	adds	r3, #8
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	491f      	ldr	r1, [pc, #124]	@ (8000c14 <setGreenLed+0x94>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fbba 	bl	8000310 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10d      	bne.n	8000bbe <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <setGreenLed+0x98>)
 8000ba8:	f003 ff6e 	bl	8004a88 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <setGreenLed+0x9c>)
 8000bae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb2:	6838      	ldr	r0, [r7, #0]
 8000bb4:	f00a fb96 	bl	800b2e4 <sniprintf>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	81fb      	strh	r3, [r7, #14]
 8000bbc:	e01f      	b.n	8000bfe <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4916      	ldr	r1, [pc, #88]	@ (8000c20 <setGreenLed+0xa0>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fba2 	bl	8000310 <strcmp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10d      	bne.n	8000bee <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <setGreenLed+0x98>)
 8000bd8:	f003 ff56 	bl	8004a88 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000bdc:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <setGreenLed+0xa4>)
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	6838      	ldr	r0, [r7, #0]
 8000be4:	f00a fb7e 	bl	800b2e4 <sniprintf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81fb      	strh	r3, [r7, #14]
 8000bec:	e007      	b.n	8000bfe <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <setGreenLed+0xa8>)
 8000bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f00a fb75 	bl	800b2e4 <sniprintf>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	2364      	movs	r3, #100	@ 0x64
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <setGreenLed+0xac>)
 8000c06:	f007 fb01 	bl	800820c <HAL_UART_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800c4a8 	.word	0x0800c4a8
 8000c18:	58020400 	.word	0x58020400
 8000c1c:	0800c4ac 	.word	0x0800c4ac
 8000c20:	0800c4bc 	.word	0x0800c4bc
 8000c24:	0800c4c0 	.word	0x0800c4c0
 8000c28:	0800c4d4 	.word	0x0800c4d4
 8000c2c:	24000558 	.word	0x24000558

08000c30 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c34:	f00a f84a 	bl	800accc <debugUartInit>

	RTCInit();
 8000c38:	f009 fe0e 	bl	800a858 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <systemInit+0x24>)
 8000c42:	f003 ff21 	bl	8004a88 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c46:	2210      	movs	r2, #16
 8000c48:	4903      	ldr	r1, [pc, #12]	@ (8000c58 <systemInit+0x28>)
 8000c4a:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <systemInit+0x2c>)
 8000c4c:	f007 fb6c 	bl	8008328 <HAL_UART_Transmit_IT>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58020400 	.word	0x58020400
 8000c58:	0800c4e0 	.word	0x0800c4e0
 8000c5c:	24000558 	.word	0x24000558

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_DMA_Init+0x3c>)
 8000c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	200b      	movs	r0, #11
 8000c8a:	f000 fee8 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f000 feff 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b90      	ldr	r3, [pc, #576]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc6:	4b8c      	ldr	r3, [pc, #560]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	4b88      	ldr	r3, [pc, #544]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	4a87      	ldr	r2, [pc, #540]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce4:	4b84      	ldr	r3, [pc, #528]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b81      	ldr	r3, [pc, #516]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b7d      	ldr	r3, [pc, #500]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b79      	ldr	r3, [pc, #484]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a78      	ldr	r2, [pc, #480]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b75      	ldr	r3, [pc, #468]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b72      	ldr	r3, [pc, #456]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a70      	ldr	r2, [pc, #448]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a69      	ldr	r2, [pc, #420]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b66      	ldr	r3, [pc, #408]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a61      	ldr	r2, [pc, #388]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <MX_GPIO_Init+0x258>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d8e:	485b      	ldr	r0, [pc, #364]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000d90:	f003 fe7a 	bl	8004a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9a:	4859      	ldr	r0, [pc, #356]	@ (8000f00 <MX_GPIO_Init+0x260>)
 8000d9c:	f003 fe74 	bl	8004a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2102      	movs	r1, #2
 8000da4:	4857      	ldr	r0, [pc, #348]	@ (8000f04 <MX_GPIO_Init+0x264>)
 8000da6:	f003 fe6f 	bl	8004a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4851      	ldr	r0, [pc, #324]	@ (8000f08 <MX_GPIO_Init+0x268>)
 8000dc2:	f003 fcb9 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc6:	2332      	movs	r3, #50	@ 0x32
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4849      	ldr	r0, [pc, #292]	@ (8000f08 <MX_GPIO_Init+0x268>)
 8000de2:	f003 fca9 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000de6:	2386      	movs	r3, #134	@ 0x86
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4842      	ldr	r0, [pc, #264]	@ (8000f0c <MX_GPIO_Init+0x26c>)
 8000e02:	f003 fc99 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e06:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4837      	ldr	r0, [pc, #220]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000e20:	f003 fc8a 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482e      	ldr	r0, [pc, #184]	@ (8000efc <MX_GPIO_Init+0x25c>)
 8000e42:	f003 fc79 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_GPIO_Init+0x260>)
 8000e60:	f003 fc6a 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <MX_GPIO_Init+0x270>)
 8000e7a:	f003 fc5d 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e90:	230a      	movs	r3, #10
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <MX_GPIO_Init+0x26c>)
 8000e9c:	f003 fc4c 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ea0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <MX_GPIO_Init+0x270>)
 8000ebe:	f003 fc3b 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_GPIO_Init+0x264>)
 8000eda:	f003 fc2d 	bl	8004738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2028      	movs	r0, #40	@ 0x28
 8000ee4:	f000 fdbb 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee8:	2028      	movs	r0, #40	@ 0x28
 8000eea:	f000 fdd2 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	@ 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	58021000 	.word	0x58021000
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	58021800 	.word	0x58021800

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fc34 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f80e 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff febe 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f24:	f7ff fe9c 	bl	8000c60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f28:	f000 fb12 	bl	8001550 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000f2c:	f000 f87c 	bl	8001028 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000f30:	f7ff fe7e 	bl	8000c30 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000f34:	f7ff fbc4 	bl	80006c0 <debugCLITask>
 8000f38:	e7fc      	b.n	8000f34 <main+0x20>
	...

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	@ 0x70
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	224c      	movs	r2, #76	@ 0x4c
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00a fa41 	bl	800b3d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2220      	movs	r2, #32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00a fa3b 	bl	800b3d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f003 fdfb 	bl	8004b58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <SystemClock_Config+0xdc>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001018 <SystemClock_Config+0xdc>)
 8000f6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <SystemClock_Config+0xdc>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7e:	bf00      	nop
 8000f80:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <SystemClock_Config+0xdc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f8c:	d1f8      	bne.n	8000f80 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f8e:	2309      	movs	r3, #9
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000fa8:	f240 1313 	movw	r3, #275	@ 0x113
 8000fac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fe06 	bl	8004bdc <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fd6:	f000 f821 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	233f      	movs	r3, #63	@ 0x3f
 8000fdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fea:	2340      	movs	r3, #64	@ 0x40
 8000fec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fee:	2340      	movs	r3, #64	@ 0x40
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff8:	2340      	movs	r3, #64	@ 0x40
 8000ffa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2103      	movs	r1, #3
 8001000:	4618      	mov	r0, r3
 8001002:	f004 f9c5 	bl	8005390 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800100c:	f000 f806 	bl	800101c <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3770      	adds	r7, #112	@ 0x70
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58024800 	.word	0x58024800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	@ 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800102e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2228      	movs	r2, #40	@ 0x28
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00a f9c2 	bl	800b3d2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001050:	4a41      	ldr	r2, [pc, #260]	@ (8001158 <MX_RTC_Init+0x130>)
 8001052:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001054:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105a:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <MX_RTC_Init+0x12c>)
 800105c:	227f      	movs	r2, #127	@ 0x7f
 800105e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001060:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001062:	22ff      	movs	r2, #255	@ 0xff
 8001064:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001066:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <MX_RTC_Init+0x12c>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001072:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <MX_RTC_Init+0x12c>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800107e:	4835      	ldr	r0, [pc, #212]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001080:	f006 fad4 	bl	800762c <HAL_RTC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800108a:	f7ff ffc7 	bl	800101c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	4828      	ldr	r0, [pc, #160]	@ (8001154 <MX_RTC_Init+0x12c>)
 80010b2:	f006 fb3d 	bl	8007730 <HAL_RTC_SetTime>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010bc:	f7ff ffae 	bl	800101c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_RTC_Init+0x12c>)
 80010e2:	f006 fc1f 	bl	8007924 <HAL_RTC_SetDate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80010ec:	f7ff ff96 	bl	800101c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800111a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	@ (8001154 <MX_RTC_Init+0x12c>)
 8001128:	f006 fcd2 	bl	8007ad0 <HAL_RTC_SetAlarm_IT>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001132:	f7ff ff73 	bl	800101c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_RTC_Init+0x12c>)
 800113c:	f006 ff1c 	bl	8007f78 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_RTC_Init+0x122>
  {
    Error_Handler();
 8001146:	f7ff ff69 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3740      	adds	r7, #64	@ 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000530 	.word	0x24000530
 8001158:	58004000 	.word	0x58004000

0800115c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b0      	sub	sp, #192	@ 0xc0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	22b8      	movs	r2, #184	@ 0xb8
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00a f930 	bl	800b3d2 <memset>
  if(rtcHandle->Instance==RTC)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_RTC_MspInit+0x7c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d129      	bne.n	80011d0 <HAL_RTC_MspInit+0x74>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800117c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fc87 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80011a0:	f7ff ff3c 	bl	800101c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_RTC_MspInit+0x80>)
 80011a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a8:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <HAL_RTC_MspInit+0x80>)
 80011aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ae:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 fc52 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 fc69 	bl	8001a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2029      	movs	r0, #41	@ 0x29
 80011c6:	f000 fc4a 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011ca:	2029      	movs	r0, #41	@ 0x29
 80011cc:	f000 fc61 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	37c0      	adds	r7, #192	@ 0xc0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58004000 	.word	0x58004000
 80011dc:	58024400 	.word	0x58024400

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_MspInit+0x30>)
 80011e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ec:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_MspInit+0x30>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_MspInit+0x30>)
 80011f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	58024400 	.word	0x58024400

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <NMI_Handler+0x4>

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <MemManage_Handler+0x4>

0800122c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <UsageFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 fafd 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <RTC_WKUP_IRQHandler+0x10>)
 800127a:	f006 ff0f 	bl	800809c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24000530 	.word	0x24000530

08001288 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <DMA1_Stream0_IRQHandler+0x10>)
 800128e:	f001 ff41 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	240005ec 	.word	0x240005ec

0800129c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <USART3_IRQHandler+0x10>)
 80012a2:	f007 f921 	bl	80084e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24000558 	.word	0x24000558

080012b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012b8:	f003 fc19 	bl	8004aee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <RTC_Alarm_IRQHandler+0x10>)
 80012c6:	f006 fd41 	bl	8007d4c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000530 	.word	0x24000530

080012d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_kill>:

int _kill(int pid, int sig)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ee:	f00a f92b 	bl	800b548 <__errno>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2216      	movs	r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
  return -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_exit>:

void _exit (int status)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ffe7 	bl	80012e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001316:	bf00      	nop
 8001318:	e7fd      	b.n	8001316 <_exit+0x12>

0800131a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e00a      	b.n	8001342 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800132c:	f3af 8000 	nop.w
 8001330:	4601      	mov	r1, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbf0      	blt.n	800132c <_read+0x12>
  }

  return len;
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e009      	b.n	800137a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	dbf1      	blt.n	8001366 <_write+0x12>
  }
  return len;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_close>:

int _close(int file)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b4:	605a      	str	r2, [r3, #4]
  return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_isatty>:

int _isatty(int file)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f00a f890 	bl	800b548 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	24050000 	.word	0x24050000
 8001454:	00000400 	.word	0x00000400
 8001458:	24000554 	.word	0x24000554
 800145c:	24000828 	.word	0x24000828

08001460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <SystemInit+0xd0>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146a:	4a31      	ldr	r2, [pc, #196]	@ (8001530 <SystemInit+0xd0>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <SystemInit+0xd4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	2b06      	cmp	r3, #6
 800147e:	d807      	bhi.n	8001490 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <SystemInit+0xd4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 030f 	bic.w	r3, r3, #15
 8001488:	4a2a      	ldr	r2, [pc, #168]	@ (8001534 <SystemInit+0xd4>)
 800148a:	f043 0307 	orr.w	r3, r3, #7
 800148e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <SystemInit+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <SystemInit+0xd8>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <SystemInit+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014a2:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <SystemInit+0xd8>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4924      	ldr	r1, [pc, #144]	@ (8001538 <SystemInit+0xd8>)
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <SystemInit+0xdc>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <SystemInit+0xd4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <SystemInit+0xd4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 030f 	bic.w	r3, r3, #15
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <SystemInit+0xd4>)
 80014c4:	f043 0307 	orr.w	r3, r3, #7
 80014c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <SystemInit+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <SystemInit+0xd8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <SystemInit+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <SystemInit+0xd8>)
 80014de:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <SystemInit+0xe0>)
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <SystemInit+0xd8>)
 80014e4:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <SystemInit+0xe4>)
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <SystemInit+0xd8>)
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <SystemInit+0xe8>)
 80014ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <SystemInit+0xd8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <SystemInit+0xd8>)
 80014f6:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <SystemInit+0xe8>)
 80014f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <SystemInit+0xd8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <SystemInit+0xd8>)
 8001502:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <SystemInit+0xe8>)
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <SystemInit+0xd8>)
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <SystemInit+0xd8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <SystemInit+0xd8>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <SystemInit+0xd8>)
 800151a:	2200      	movs	r2, #0
 800151c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <SystemInit+0xec>)
 8001520:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001524:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	52002000 	.word	0x52002000
 8001538:	58024400 	.word	0x58024400
 800153c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001540:	02020200 	.word	0x02020200
 8001544:	01ff0000 	.word	0x01ff0000
 8001548:	01010280 	.word	0x01010280
 800154c:	52004000 	.word	0x52004000

08001550 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <MX_USART3_UART_Init+0x94>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001598:	4811      	ldr	r0, [pc, #68]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 800159a:	f006 fde7 	bl	800816c <HAL_UART_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015a4:	f7ff fd3a 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 80015ac:	f009 f817 	bl	800a5de <HAL_UARTEx_SetTxFifoThreshold>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015b6:	f7ff fd31 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 80015be:	f009 f84c 	bl	800a65a <HAL_UARTEx_SetRxFifoThreshold>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f7ff fd28 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_USART3_UART_Init+0x90>)
 80015ce:	f008 ffcd 	bl	800a56c <HAL_UARTEx_DisableFifoMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f7ff fd20 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000558 	.word	0x24000558
 80015e4:	40004800 	.word	0x40004800

080015e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0b8      	sub	sp, #224	@ 0xe0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	22b8      	movs	r2, #184	@ 0xb8
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f009 fee2 	bl	800b3d2 <memset>
  if(uartHandle->Instance==USART3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a42      	ldr	r2, [pc, #264]	@ (800171c <HAL_UART_MspInit+0x134>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d17d      	bne.n	8001714 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001618:	f04f 0202 	mov.w	r2, #2
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fa3a 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800163a:	f7ff fcef 	bl	800101c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001644:	4a36      	ldr	r2, [pc, #216]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800164e:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_UART_MspInit+0x138>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <HAL_UART_MspInit+0x138>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	@ (8001724 <HAL_UART_MspInit+0x13c>)
 80016a2:	f003 f849 	bl	8004738 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016a8:	4a20      	ldr	r2, [pc, #128]	@ (800172c <HAL_UART_MspInit+0x144>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016ae:	222d      	movs	r2, #45	@ 0x2d
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80016e6:	4810      	ldr	r0, [pc, #64]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016e8:	f000 f9ee 	bl	8001ac8 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80016f2:	f7ff fc93 	bl	800101c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_UART_MspInit+0x140>)
 80016fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_UART_MspInit+0x140>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2027      	movs	r0, #39	@ 0x27
 800170a:	f000 f9a8 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800170e:	2027      	movs	r0, #39	@ 0x27
 8001710:	f000 f9bf 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001714:	bf00      	nop
 8001716:	37e0      	adds	r7, #224	@ 0xe0
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004800 	.word	0x40004800
 8001720:	58024400 	.word	0x58024400
 8001724:	58020c00 	.word	0x58020c00
 8001728:	240005ec 	.word	0x240005ec
 800172c:	40020010 	.word	0x40020010

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001734:	f7ff fe94 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	@ (800176c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	@ (8001770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	@ (800177c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f009 fef9 	bl	800b554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fbd7 	bl	8000f14 <main>
  bx  lr
 8001766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001768:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800176c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001770:	240000ec 	.word	0x240000ec
  ldr r2, =_sidata
 8001774:	0800c780 	.word	0x0800c780
  ldr r2, =_sbss
 8001778:	240000ec 	.word	0x240000ec
  ldr r4, =_ebss
 800177c:	24000828 	.word	0x24000828

08001780 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC3_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178a:	2003      	movs	r0, #3
 800178c:	f000 f95c 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001790:	f003 ffb4 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8001794:	4602      	mov	r2, r0
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_Init+0x68>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	4913      	ldr	r1, [pc, #76]	@ (80017f0 <HAL_Init+0x6c>)
 80017a2:	5ccb      	ldrb	r3, [r1, r3]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_Init+0x68>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <HAL_Init+0x6c>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <HAL_Init+0x70>)
 80017c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x74>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f814 	bl	80017fc <HAL_InitTick>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e002      	b.n	80017e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017de:	f7ff fcff 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	58024400 	.word	0x58024400
 80017f0:	0800c54c 	.word	0x0800c54c
 80017f4:	2400007c 	.word	0x2400007c
 80017f8:	24000078 	.word	0x24000078

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_InitTick+0x60>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e021      	b.n	8001854 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_InitTick+0x64>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f941 	bl	8001aae <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 f90b 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <HAL_InitTick+0x68>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	24000084 	.word	0x24000084
 8001860:	24000078 	.word	0x24000078
 8001864:	24000080 	.word	0x24000080

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	24000084 	.word	0x24000084
 800188c:	24000664 	.word	0x24000664

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	24000664 	.word	0x24000664

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	05fa0000 	.word	0x05fa0000

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	@ (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff40 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff90 	bl	800199c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5f 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff33 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa4 	bl	8001a04 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fede 	bl	8001890 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e312      	b.n	8002106 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a66      	ldr	r2, [pc, #408]	@ (8001c80 <HAL_DMA_Init+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d04a      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a65      	ldr	r2, [pc, #404]	@ (8001c84 <HAL_DMA_Init+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d045      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a63      	ldr	r2, [pc, #396]	@ (8001c88 <HAL_DMA_Init+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d040      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a62      	ldr	r2, [pc, #392]	@ (8001c8c <HAL_DMA_Init+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d03b      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a60      	ldr	r2, [pc, #384]	@ (8001c90 <HAL_DMA_Init+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d036      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5f      	ldr	r2, [pc, #380]	@ (8001c94 <HAL_DMA_Init+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d031      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_DMA_Init+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02c      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_DMA_Init+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d027      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca0 <HAL_DMA_Init+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d022      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a59      	ldr	r2, [pc, #356]	@ (8001ca4 <HAL_DMA_Init+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d01d      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a57      	ldr	r2, [pc, #348]	@ (8001ca8 <HAL_DMA_Init+0x1e0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d018      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_DMA_Init+0x1e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_DMA_Init+0x1e8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a53      	ldr	r2, [pc, #332]	@ (8001cb4 <HAL_DMA_Init+0x1ec>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a51      	ldr	r2, [pc, #324]	@ (8001cb8 <HAL_DMA_Init+0x1f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a50      	ldr	r2, [pc, #320]	@ (8001cbc <HAL_DMA_Init+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA_Init+0xbc>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_Init+0xbe>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 813c 	beq.w	8001e04 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a37      	ldr	r2, [pc, #220]	@ (8001c80 <HAL_DMA_Init+0x1b8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04a      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a36      	ldr	r2, [pc, #216]	@ (8001c84 <HAL_DMA_Init+0x1bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d045      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <HAL_DMA_Init+0x1c0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <HAL_DMA_Init+0x1c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d03b      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_DMA_Init+0x1c8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d036      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_DMA_Init+0x1cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c98 <HAL_DMA_Init+0x1d0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02c      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <HAL_DMA_Init+0x1d4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <HAL_DMA_Init+0x1d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d022      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_DMA_Init+0x1dc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01d      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_DMA_Init+0x1e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	@ (8001cac <HAL_DMA_Init+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_DMA_Init+0x1e8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_DMA_Init+0x1ec>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <HAL_DMA_Init+0x1f0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_DMA_Init+0x1f4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d108      	bne.n	8001c4e <HAL_DMA_Init+0x186>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e007      	b.n	8001c5e <HAL_DMA_Init+0x196>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c5e:	e02f      	b.n	8001cc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c60:	f7ff fe16 	bl	8001890 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d928      	bls.n	8001cc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e242      	b.n	8002106 <HAL_DMA_Init+0x63e>
 8001c80:	40020010 	.word	0x40020010
 8001c84:	40020028 	.word	0x40020028
 8001c88:	40020040 	.word	0x40020040
 8001c8c:	40020058 	.word	0x40020058
 8001c90:	40020070 	.word	0x40020070
 8001c94:	40020088 	.word	0x40020088
 8001c98:	400200a0 	.word	0x400200a0
 8001c9c:	400200b8 	.word	0x400200b8
 8001ca0:	40020410 	.word	0x40020410
 8001ca4:	40020428 	.word	0x40020428
 8001ca8:	40020440 	.word	0x40020440
 8001cac:	40020458 	.word	0x40020458
 8001cb0:	40020470 	.word	0x40020470
 8001cb4:	40020488 	.word	0x40020488
 8001cb8:	400204a0 	.word	0x400204a0
 8001cbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1c8      	bne.n	8001c60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4b83      	ldr	r3, [pc, #524]	@ (8001ee8 <HAL_DMA_Init+0x420>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ce6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b28      	cmp	r3, #40	@ 0x28
 8001d2a:	d903      	bls.n	8001d34 <HAL_DMA_Init+0x26c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d32:	d91f      	bls.n	8001d74 <HAL_DMA_Init+0x2ac>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d3a:	d903      	bls.n	8001d44 <HAL_DMA_Init+0x27c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b42      	cmp	r3, #66	@ 0x42
 8001d42:	d917      	bls.n	8001d74 <HAL_DMA_Init+0x2ac>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b46      	cmp	r3, #70	@ 0x46
 8001d4a:	d903      	bls.n	8001d54 <HAL_DMA_Init+0x28c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b48      	cmp	r3, #72	@ 0x48
 8001d52:	d90f      	bls.n	8001d74 <HAL_DMA_Init+0x2ac>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d5a:	d903      	bls.n	8001d64 <HAL_DMA_Init+0x29c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b52      	cmp	r3, #82	@ 0x52
 8001d62:	d907      	bls.n	8001d74 <HAL_DMA_Init+0x2ac>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b73      	cmp	r3, #115	@ 0x73
 8001d6a:	d905      	bls.n	8001d78 <HAL_DMA_Init+0x2b0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b77      	cmp	r3, #119	@ 0x77
 8001d72:	d801      	bhi.n	8001d78 <HAL_DMA_Init+0x2b0>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_Init+0x2b2>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d84:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f023 0307 	bic.w	r3, r3, #7
 8001d9c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d117      	bne.n	8001de0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00e      	beq.n	8001de0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f002 fb2e 	bl	8004424 <DMA_CheckFifoParam>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2240      	movs	r2, #64	@ 0x40
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e192      	b.n	8002106 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f002 fa69 	bl	80042c0 <DMA_CalcBaseAndBitshift>
 8001dee:	4603      	mov	r3, r0
 8001df0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	223f      	movs	r2, #63	@ 0x3f
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e0c8      	b.n	8001f96 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a38      	ldr	r2, [pc, #224]	@ (8001eec <HAL_DMA_Init+0x424>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <HAL_DMA_Init+0x428>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d01d      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a35      	ldr	r2, [pc, #212]	@ (8001ef4 <HAL_DMA_Init+0x42c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a34      	ldr	r2, [pc, #208]	@ (8001ef8 <HAL_DMA_Init+0x430>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <HAL_DMA_Init+0x434>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a31      	ldr	r2, [pc, #196]	@ (8001f00 <HAL_DMA_Init+0x438>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <HAL_DMA_Init+0x43c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_Init+0x38c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f08 <HAL_DMA_Init+0x440>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Init+0x390>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_DMA_Init+0x392>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8092 	beq.w	8001f84 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <HAL_DMA_Init+0x424>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d021      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <HAL_DMA_Init+0x428>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01c      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_DMA_Init+0x42c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d017      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_DMA_Init+0x430>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_DMA_Init+0x434>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1a      	ldr	r2, [pc, #104]	@ (8001f00 <HAL_DMA_Init+0x438>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <HAL_DMA_Init+0x43c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d003      	beq.n	8001eae <HAL_DMA_Init+0x3e6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_DMA_Init+0x440>)
 8001eac:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_DMA_Init+0x444>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b40      	cmp	r3, #64	@ 0x40
 8001ed4:	d01c      	beq.n	8001f10 <HAL_DMA_Init+0x448>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b80      	cmp	r3, #128	@ 0x80
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Init+0x41c>
 8001ede:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ee2:	e016      	b.n	8001f12 <HAL_DMA_Init+0x44a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e014      	b.n	8001f12 <HAL_DMA_Init+0x44a>
 8001ee8:	fe10803f 	.word	0xfe10803f
 8001eec:	58025408 	.word	0x58025408
 8001ef0:	5802541c 	.word	0x5802541c
 8001ef4:	58025430 	.word	0x58025430
 8001ef8:	58025444 	.word	0x58025444
 8001efc:	58025458 	.word	0x58025458
 8001f00:	5802546c 	.word	0x5802546c
 8001f04:	58025480 	.word	0x58025480
 8001f08:	58025494 	.word	0x58025494
 8001f0c:	fffe000f 	.word	0xfffe000f
 8001f10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b6e      	ldr	r3, [pc, #440]	@ (8002110 <HAL_DMA_Init+0x648>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002114 <HAL_DMA_Init+0x64c>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f002 f9a9 	bl	80042c0 <DMA_CalcBaseAndBitshift>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e008      	b.n	8001f96 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0b7      	b.n	8002106 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002118 <HAL_DMA_Init+0x650>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d072      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800211c <HAL_DMA_Init+0x654>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d06d      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	@ (8002120 <HAL_DMA_Init+0x658>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d068      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002124 <HAL_DMA_Init+0x65c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d063      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a59      	ldr	r2, [pc, #356]	@ (8002128 <HAL_DMA_Init+0x660>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	@ (800212c <HAL_DMA_Init+0x664>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d059      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a56      	ldr	r2, [pc, #344]	@ (8002130 <HAL_DMA_Init+0x668>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d054      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a54      	ldr	r2, [pc, #336]	@ (8002134 <HAL_DMA_Init+0x66c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04f      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a53      	ldr	r2, [pc, #332]	@ (8002138 <HAL_DMA_Init+0x670>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04a      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a51      	ldr	r2, [pc, #324]	@ (800213c <HAL_DMA_Init+0x674>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d045      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a50      	ldr	r2, [pc, #320]	@ (8002140 <HAL_DMA_Init+0x678>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4e      	ldr	r2, [pc, #312]	@ (8002144 <HAL_DMA_Init+0x67c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03b      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a4d      	ldr	r2, [pc, #308]	@ (8002148 <HAL_DMA_Init+0x680>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d036      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_DMA_Init+0x684>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_DMA_Init+0x688>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a48      	ldr	r2, [pc, #288]	@ (8002154 <HAL_DMA_Init+0x68c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d027      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a47      	ldr	r2, [pc, #284]	@ (8002158 <HAL_DMA_Init+0x690>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a45      	ldr	r2, [pc, #276]	@ (800215c <HAL_DMA_Init+0x694>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a44      	ldr	r2, [pc, #272]	@ (8002160 <HAL_DMA_Init+0x698>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d018      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a42      	ldr	r2, [pc, #264]	@ (8002164 <HAL_DMA_Init+0x69c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a41      	ldr	r2, [pc, #260]	@ (8002168 <HAL_DMA_Init+0x6a0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3f      	ldr	r2, [pc, #252]	@ (800216c <HAL_DMA_Init+0x6a4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3e      	ldr	r2, [pc, #248]	@ (8002170 <HAL_DMA_Init+0x6a8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Init+0x5be>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3c      	ldr	r2, [pc, #240]	@ (8002174 <HAL_DMA_Init+0x6ac>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_DMA_Init+0x5c2>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_DMA_Init+0x5c4>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d032      	beq.n	80020f6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f002 fa43 	bl	800451c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b80      	cmp	r3, #128	@ 0x80
 800209c:	d102      	bne.n	80020a4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_DMA_Init+0x61c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d80c      	bhi.n	80020e4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f002 fac0 	bl	8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	e008      	b.n	80020f6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	a7fdabf8 	.word	0xa7fdabf8
 8002114:	cccccccd 	.word	0xcccccccd
 8002118:	40020010 	.word	0x40020010
 800211c:	40020028 	.word	0x40020028
 8002120:	40020040 	.word	0x40020040
 8002124:	40020058 	.word	0x40020058
 8002128:	40020070 	.word	0x40020070
 800212c:	40020088 	.word	0x40020088
 8002130:	400200a0 	.word	0x400200a0
 8002134:	400200b8 	.word	0x400200b8
 8002138:	40020410 	.word	0x40020410
 800213c:	40020428 	.word	0x40020428
 8002140:	40020440 	.word	0x40020440
 8002144:	40020458 	.word	0x40020458
 8002148:	40020470 	.word	0x40020470
 800214c:	40020488 	.word	0x40020488
 8002150:	400204a0 	.word	0x400204a0
 8002154:	400204b8 	.word	0x400204b8
 8002158:	58025408 	.word	0x58025408
 800215c:	5802541c 	.word	0x5802541c
 8002160:	58025430 	.word	0x58025430
 8002164:	58025444 	.word	0x58025444
 8002168:	58025458 	.word	0x58025458
 800216c:	5802546c 	.word	0x5802546c
 8002170:	58025480 	.word	0x58025480
 8002174:	58025494 	.word	0x58025494

08002178 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e226      	b.n	80025e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Start_IT+0x2a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e21f      	b.n	80025e2 <HAL_DMA_Start_IT+0x46a>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 820a 	bne.w	80025cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a68      	ldr	r2, [pc, #416]	@ (800236c <HAL_DMA_Start_IT+0x1f4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a66      	ldr	r2, [pc, #408]	@ (8002370 <HAL_DMA_Start_IT+0x1f8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a65      	ldr	r2, [pc, #404]	@ (8002374 <HAL_DMA_Start_IT+0x1fc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a63      	ldr	r2, [pc, #396]	@ (8002378 <HAL_DMA_Start_IT+0x200>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a62      	ldr	r2, [pc, #392]	@ (800237c <HAL_DMA_Start_IT+0x204>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a60      	ldr	r2, [pc, #384]	@ (8002380 <HAL_DMA_Start_IT+0x208>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5f      	ldr	r2, [pc, #380]	@ (8002384 <HAL_DMA_Start_IT+0x20c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a5d      	ldr	r2, [pc, #372]	@ (8002388 <HAL_DMA_Start_IT+0x210>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	@ (800238c <HAL_DMA_Start_IT+0x214>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5a      	ldr	r2, [pc, #360]	@ (8002390 <HAL_DMA_Start_IT+0x218>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a59      	ldr	r2, [pc, #356]	@ (8002394 <HAL_DMA_Start_IT+0x21c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a57      	ldr	r2, [pc, #348]	@ (8002398 <HAL_DMA_Start_IT+0x220>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a56      	ldr	r2, [pc, #344]	@ (800239c <HAL_DMA_Start_IT+0x224>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a54      	ldr	r2, [pc, #336]	@ (80023a0 <HAL_DMA_Start_IT+0x228>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a53      	ldr	r2, [pc, #332]	@ (80023a4 <HAL_DMA_Start_IT+0x22c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Start_IT+0xee>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a51      	ldr	r2, [pc, #324]	@ (80023a8 <HAL_DMA_Start_IT+0x230>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <HAL_DMA_Start_IT+0x100>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e007      	b.n	8002288 <HAL_DMA_Start_IT+0x110>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f001 fe6a 	bl	8003f68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a34      	ldr	r2, [pc, #208]	@ (800236c <HAL_DMA_Start_IT+0x1f4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d04a      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a33      	ldr	r2, [pc, #204]	@ (8002370 <HAL_DMA_Start_IT+0x1f8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d045      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a31      	ldr	r2, [pc, #196]	@ (8002374 <HAL_DMA_Start_IT+0x1fc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d040      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a30      	ldr	r2, [pc, #192]	@ (8002378 <HAL_DMA_Start_IT+0x200>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d03b      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <HAL_DMA_Start_IT+0x204>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d036      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <HAL_DMA_Start_IT+0x208>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d031      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_DMA_Start_IT+0x20c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02c      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2a      	ldr	r2, [pc, #168]	@ (8002388 <HAL_DMA_Start_IT+0x210>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d027      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a28      	ldr	r2, [pc, #160]	@ (800238c <HAL_DMA_Start_IT+0x214>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_DMA_Start_IT+0x218>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01d      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a25      	ldr	r2, [pc, #148]	@ (8002394 <HAL_DMA_Start_IT+0x21c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <HAL_DMA_Start_IT+0x220>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a22      	ldr	r2, [pc, #136]	@ (800239c <HAL_DMA_Start_IT+0x224>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a21      	ldr	r2, [pc, #132]	@ (80023a0 <HAL_DMA_Start_IT+0x228>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1f      	ldr	r2, [pc, #124]	@ (80023a4 <HAL_DMA_Start_IT+0x22c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_DMA_Start_IT+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_DMA_Start_IT+0x230>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Start_IT+0x1c0>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_DMA_Start_IT+0x1c2>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d036      	beq.n	80023ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 021e 	bic.w	r2, r3, #30
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0216 	orr.w	r2, r2, #22
 8002350:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03e      	beq.n	80023d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0208 	orr.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e035      	b.n	80023d8 <HAL_DMA_Start_IT+0x260>
 800236c:	40020010 	.word	0x40020010
 8002370:	40020028 	.word	0x40020028
 8002374:	40020040 	.word	0x40020040
 8002378:	40020058 	.word	0x40020058
 800237c:	40020070 	.word	0x40020070
 8002380:	40020088 	.word	0x40020088
 8002384:	400200a0 	.word	0x400200a0
 8002388:	400200b8 	.word	0x400200b8
 800238c:	40020410 	.word	0x40020410
 8002390:	40020428 	.word	0x40020428
 8002394:	40020440 	.word	0x40020440
 8002398:	40020458 	.word	0x40020458
 800239c:	40020470 	.word	0x40020470
 80023a0:	40020488 	.word	0x40020488
 80023a4:	400204a0 	.word	0x400204a0
 80023a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 020e 	bic.w	r2, r3, #14
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 020a 	orr.w	r2, r2, #10
 80023be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0204 	orr.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a83      	ldr	r2, [pc, #524]	@ (80025ec <HAL_DMA_Start_IT+0x474>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d072      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a82      	ldr	r2, [pc, #520]	@ (80025f0 <HAL_DMA_Start_IT+0x478>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d06d      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a80      	ldr	r2, [pc, #512]	@ (80025f4 <HAL_DMA_Start_IT+0x47c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d068      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7f      	ldr	r2, [pc, #508]	@ (80025f8 <HAL_DMA_Start_IT+0x480>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d063      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a7d      	ldr	r2, [pc, #500]	@ (80025fc <HAL_DMA_Start_IT+0x484>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d05e      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7c      	ldr	r2, [pc, #496]	@ (8002600 <HAL_DMA_Start_IT+0x488>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d059      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7a      	ldr	r2, [pc, #488]	@ (8002604 <HAL_DMA_Start_IT+0x48c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d054      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a79      	ldr	r2, [pc, #484]	@ (8002608 <HAL_DMA_Start_IT+0x490>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d04f      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a77      	ldr	r2, [pc, #476]	@ (800260c <HAL_DMA_Start_IT+0x494>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a76      	ldr	r2, [pc, #472]	@ (8002610 <HAL_DMA_Start_IT+0x498>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d045      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a74      	ldr	r2, [pc, #464]	@ (8002614 <HAL_DMA_Start_IT+0x49c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a73      	ldr	r2, [pc, #460]	@ (8002618 <HAL_DMA_Start_IT+0x4a0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d03b      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a71      	ldr	r2, [pc, #452]	@ (800261c <HAL_DMA_Start_IT+0x4a4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a70      	ldr	r2, [pc, #448]	@ (8002620 <HAL_DMA_Start_IT+0x4a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d031      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_DMA_Start_IT+0x4ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6d      	ldr	r2, [pc, #436]	@ (8002628 <HAL_DMA_Start_IT+0x4b0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d027      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6b      	ldr	r2, [pc, #428]	@ (800262c <HAL_DMA_Start_IT+0x4b4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6a      	ldr	r2, [pc, #424]	@ (8002630 <HAL_DMA_Start_IT+0x4b8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01d      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	@ (8002634 <HAL_DMA_Start_IT+0x4bc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a67      	ldr	r2, [pc, #412]	@ (8002638 <HAL_DMA_Start_IT+0x4c0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	@ (800263c <HAL_DMA_Start_IT+0x4c4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a64      	ldr	r2, [pc, #400]	@ (8002640 <HAL_DMA_Start_IT+0x4c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a62      	ldr	r2, [pc, #392]	@ (8002644 <HAL_DMA_Start_IT+0x4cc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Start_IT+0x350>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_DMA_Start_IT+0x4d0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Start_IT+0x354>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_DMA_Start_IT+0x356>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002506:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a37      	ldr	r2, [pc, #220]	@ (80025ec <HAL_DMA_Start_IT+0x474>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a36      	ldr	r2, [pc, #216]	@ (80025f0 <HAL_DMA_Start_IT+0x478>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	@ (80025f4 <HAL_DMA_Start_IT+0x47c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	@ (80025f8 <HAL_DMA_Start_IT+0x480>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_DMA_Start_IT+0x484>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <HAL_DMA_Start_IT+0x488>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	@ (8002604 <HAL_DMA_Start_IT+0x48c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <HAL_DMA_Start_IT+0x490>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_DMA_Start_IT+0x494>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	@ (8002610 <HAL_DMA_Start_IT+0x498>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	@ (8002614 <HAL_DMA_Start_IT+0x49c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	@ (8002618 <HAL_DMA_Start_IT+0x4a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	@ (800261c <HAL_DMA_Start_IT+0x4a4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	@ (8002620 <HAL_DMA_Start_IT+0x4a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <HAL_DMA_Start_IT+0x4ac>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Start_IT+0x430>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <HAL_DMA_Start_IT+0x4b0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <HAL_DMA_Start_IT+0x442>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e012      	b.n	80025e0 <HAL_DMA_Start_IT+0x468>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e009      	b.n	80025e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40020010 	.word	0x40020010
 80025f0:	40020028 	.word	0x40020028
 80025f4:	40020040 	.word	0x40020040
 80025f8:	40020058 	.word	0x40020058
 80025fc:	40020070 	.word	0x40020070
 8002600:	40020088 	.word	0x40020088
 8002604:	400200a0 	.word	0x400200a0
 8002608:	400200b8 	.word	0x400200b8
 800260c:	40020410 	.word	0x40020410
 8002610:	40020428 	.word	0x40020428
 8002614:	40020440 	.word	0x40020440
 8002618:	40020458 	.word	0x40020458
 800261c:	40020470 	.word	0x40020470
 8002620:	40020488 	.word	0x40020488
 8002624:	400204a0 	.word	0x400204a0
 8002628:	400204b8 	.word	0x400204b8
 800262c:	58025408 	.word	0x58025408
 8002630:	5802541c 	.word	0x5802541c
 8002634:	58025430 	.word	0x58025430
 8002638:	58025444 	.word	0x58025444
 800263c:	58025458 	.word	0x58025458
 8002640:	5802546c 	.word	0x5802546c
 8002644:	58025480 	.word	0x58025480
 8002648:	58025494 	.word	0x58025494

0800264c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff f91c 	bl	8001890 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e2dc      	b.n	8002c1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d008      	beq.n	8002682 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e2cd      	b.n	8002c1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a76      	ldr	r2, [pc, #472]	@ (8002860 <HAL_DMA_Abort+0x214>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a74      	ldr	r2, [pc, #464]	@ (8002864 <HAL_DMA_Abort+0x218>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	@ (8002868 <HAL_DMA_Abort+0x21c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a71      	ldr	r2, [pc, #452]	@ (800286c <HAL_DMA_Abort+0x220>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a70      	ldr	r2, [pc, #448]	@ (8002870 <HAL_DMA_Abort+0x224>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002874 <HAL_DMA_Abort+0x228>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002878 <HAL_DMA_Abort+0x22c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6b      	ldr	r2, [pc, #428]	@ (800287c <HAL_DMA_Abort+0x230>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002880 <HAL_DMA_Abort+0x234>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a68      	ldr	r2, [pc, #416]	@ (8002884 <HAL_DMA_Abort+0x238>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_DMA_Abort+0x23c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_DMA_Abort+0x240>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a64      	ldr	r2, [pc, #400]	@ (8002890 <HAL_DMA_Abort+0x244>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a62      	ldr	r2, [pc, #392]	@ (8002894 <HAL_DMA_Abort+0x248>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <HAL_DMA_Abort+0x24c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Abort+0xd6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5f      	ldr	r2, [pc, #380]	@ (800289c <HAL_DMA_Abort+0x250>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Abort+0xda>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_DMA_Abort+0xdc>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 021e 	bic.w	r2, r2, #30
 800273a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e00a      	b.n	800276a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_DMA_Abort+0x214>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d072      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <HAL_DMA_Abort+0x218>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d06d      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a39      	ldr	r2, [pc, #228]	@ (8002868 <HAL_DMA_Abort+0x21c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d068      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a37      	ldr	r2, [pc, #220]	@ (800286c <HAL_DMA_Abort+0x220>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d063      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a36      	ldr	r2, [pc, #216]	@ (8002870 <HAL_DMA_Abort+0x224>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d05e      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a34      	ldr	r2, [pc, #208]	@ (8002874 <HAL_DMA_Abort+0x228>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d059      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <HAL_DMA_Abort+0x22c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d054      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_DMA_Abort+0x230>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d04f      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <HAL_DMA_Abort+0x234>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d04a      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002884 <HAL_DMA_Abort+0x238>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d045      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <HAL_DMA_Abort+0x23c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d040      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2b      	ldr	r2, [pc, #172]	@ (800288c <HAL_DMA_Abort+0x240>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d03b      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <HAL_DMA_Abort+0x244>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d036      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_DMA_Abort+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d031      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <HAL_DMA_Abort+0x24c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d02c      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a25      	ldr	r2, [pc, #148]	@ (800289c <HAL_DMA_Abort+0x250>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d027      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a24      	ldr	r2, [pc, #144]	@ (80028a0 <HAL_DMA_Abort+0x254>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <HAL_DMA_Abort+0x258>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01d      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a21      	ldr	r2, [pc, #132]	@ (80028a8 <HAL_DMA_Abort+0x25c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_DMA_Abort+0x260>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <HAL_DMA_Abort+0x264>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_DMA_Abort+0x268>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <HAL_DMA_Abort+0x26c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_DMA_Abort+0x20e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a19      	ldr	r2, [pc, #100]	@ (80028bc <HAL_DMA_Abort+0x270>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d132      	bne.n	80028c0 <HAL_DMA_Abort+0x274>
 800285a:	2301      	movs	r3, #1
 800285c:	e031      	b.n	80028c2 <HAL_DMA_Abort+0x276>
 800285e:	bf00      	nop
 8002860:	40020010 	.word	0x40020010
 8002864:	40020028 	.word	0x40020028
 8002868:	40020040 	.word	0x40020040
 800286c:	40020058 	.word	0x40020058
 8002870:	40020070 	.word	0x40020070
 8002874:	40020088 	.word	0x40020088
 8002878:	400200a0 	.word	0x400200a0
 800287c:	400200b8 	.word	0x400200b8
 8002880:	40020410 	.word	0x40020410
 8002884:	40020428 	.word	0x40020428
 8002888:	40020440 	.word	0x40020440
 800288c:	40020458 	.word	0x40020458
 8002890:	40020470 	.word	0x40020470
 8002894:	40020488 	.word	0x40020488
 8002898:	400204a0 	.word	0x400204a0
 800289c:	400204b8 	.word	0x400204b8
 80028a0:	58025408 	.word	0x58025408
 80028a4:	5802541c 	.word	0x5802541c
 80028a8:	58025430 	.word	0x58025430
 80028ac:	58025444 	.word	0x58025444
 80028b0:	58025458 	.word	0x58025458
 80028b4:	5802546c 	.word	0x5802546c
 80028b8:	58025480 	.word	0x58025480
 80028bc:	58025494 	.word	0x58025494
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6d      	ldr	r2, [pc, #436]	@ (8002a90 <HAL_DMA_Abort+0x444>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04a      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a94 <HAL_DMA_Abort+0x448>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d045      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002a98 <HAL_DMA_Abort+0x44c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d040      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a68      	ldr	r2, [pc, #416]	@ (8002a9c <HAL_DMA_Abort+0x450>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d03b      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a67      	ldr	r2, [pc, #412]	@ (8002aa0 <HAL_DMA_Abort+0x454>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d036      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a65      	ldr	r2, [pc, #404]	@ (8002aa4 <HAL_DMA_Abort+0x458>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a64      	ldr	r2, [pc, #400]	@ (8002aa8 <HAL_DMA_Abort+0x45c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d02c      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a62      	ldr	r2, [pc, #392]	@ (8002aac <HAL_DMA_Abort+0x460>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d027      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a61      	ldr	r2, [pc, #388]	@ (8002ab0 <HAL_DMA_Abort+0x464>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab4 <HAL_DMA_Abort+0x468>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab8 <HAL_DMA_Abort+0x46c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d018      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5c      	ldr	r2, [pc, #368]	@ (8002abc <HAL_DMA_Abort+0x470>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac0 <HAL_DMA_Abort+0x474>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a59      	ldr	r2, [pc, #356]	@ (8002ac4 <HAL_DMA_Abort+0x478>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a58      	ldr	r2, [pc, #352]	@ (8002ac8 <HAL_DMA_Abort+0x47c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_DMA_Abort+0x32a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a56      	ldr	r2, [pc, #344]	@ (8002acc <HAL_DMA_Abort+0x480>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d108      	bne.n	8002988 <HAL_DMA_Abort+0x33c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_DMA_Abort+0x34c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002998:	e013      	b.n	80029c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7fe ff79 	bl	8001890 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d90c      	bls.n	80029c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e12d      	b.n	8002c1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e5      	bne.n	800299a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <HAL_DMA_Abort+0x444>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a94 <HAL_DMA_Abort+0x448>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <HAL_DMA_Abort+0x44c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a9c <HAL_DMA_Abort+0x450>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a29      	ldr	r2, [pc, #164]	@ (8002aa0 <HAL_DMA_Abort+0x454>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a27      	ldr	r2, [pc, #156]	@ (8002aa4 <HAL_DMA_Abort+0x458>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a26      	ldr	r2, [pc, #152]	@ (8002aa8 <HAL_DMA_Abort+0x45c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a24      	ldr	r2, [pc, #144]	@ (8002aac <HAL_DMA_Abort+0x460>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <HAL_DMA_Abort+0x464>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <HAL_DMA_Abort+0x468>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a20      	ldr	r2, [pc, #128]	@ (8002ab8 <HAL_DMA_Abort+0x46c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	@ (8002abc <HAL_DMA_Abort+0x470>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <HAL_DMA_Abort+0x474>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_DMA_Abort+0x478>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_DMA_Abort+0x47c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Abort+0x422>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_DMA_Abort+0x480>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Abort+0x426>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_Abort+0x428>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02b      	beq.n	8002ad0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	223f      	movs	r2, #63	@ 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	e02a      	b.n	8002ae6 <HAL_DMA_Abort+0x49a>
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2201      	movs	r2, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a4f      	ldr	r2, [pc, #316]	@ (8002c28 <HAL_DMA_Abort+0x5dc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d072      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a4d      	ldr	r2, [pc, #308]	@ (8002c2c <HAL_DMA_Abort+0x5e0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d06d      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <HAL_DMA_Abort+0x5e4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d068      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4a      	ldr	r2, [pc, #296]	@ (8002c34 <HAL_DMA_Abort+0x5e8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d063      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a49      	ldr	r2, [pc, #292]	@ (8002c38 <HAL_DMA_Abort+0x5ec>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d05e      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a47      	ldr	r2, [pc, #284]	@ (8002c3c <HAL_DMA_Abort+0x5f0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d059      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a46      	ldr	r2, [pc, #280]	@ (8002c40 <HAL_DMA_Abort+0x5f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d054      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a44      	ldr	r2, [pc, #272]	@ (8002c44 <HAL_DMA_Abort+0x5f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04f      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a43      	ldr	r2, [pc, #268]	@ (8002c48 <HAL_DMA_Abort+0x5fc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04a      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a41      	ldr	r2, [pc, #260]	@ (8002c4c <HAL_DMA_Abort+0x600>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d045      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a40      	ldr	r2, [pc, #256]	@ (8002c50 <HAL_DMA_Abort+0x604>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d040      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a3e      	ldr	r2, [pc, #248]	@ (8002c54 <HAL_DMA_Abort+0x608>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3d      	ldr	r2, [pc, #244]	@ (8002c58 <HAL_DMA_Abort+0x60c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d036      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c5c <HAL_DMA_Abort+0x610>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d031      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3a      	ldr	r2, [pc, #232]	@ (8002c60 <HAL_DMA_Abort+0x614>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d02c      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a38      	ldr	r2, [pc, #224]	@ (8002c64 <HAL_DMA_Abort+0x618>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d027      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a37      	ldr	r2, [pc, #220]	@ (8002c68 <HAL_DMA_Abort+0x61c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a35      	ldr	r2, [pc, #212]	@ (8002c6c <HAL_DMA_Abort+0x620>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a34      	ldr	r2, [pc, #208]	@ (8002c70 <HAL_DMA_Abort+0x624>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a32      	ldr	r2, [pc, #200]	@ (8002c74 <HAL_DMA_Abort+0x628>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a31      	ldr	r2, [pc, #196]	@ (8002c78 <HAL_DMA_Abort+0x62c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c7c <HAL_DMA_Abort+0x630>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c80 <HAL_DMA_Abort+0x634>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_Abort+0x58a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <HAL_DMA_Abort+0x638>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Abort+0x58e>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Abort+0x590>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002be8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40020010 	.word	0x40020010
 8002c2c:	40020028 	.word	0x40020028
 8002c30:	40020040 	.word	0x40020040
 8002c34:	40020058 	.word	0x40020058
 8002c38:	40020070 	.word	0x40020070
 8002c3c:	40020088 	.word	0x40020088
 8002c40:	400200a0 	.word	0x400200a0
 8002c44:	400200b8 	.word	0x400200b8
 8002c48:	40020410 	.word	0x40020410
 8002c4c:	40020428 	.word	0x40020428
 8002c50:	40020440 	.word	0x40020440
 8002c54:	40020458 	.word	0x40020458
 8002c58:	40020470 	.word	0x40020470
 8002c5c:	40020488 	.word	0x40020488
 8002c60:	400204a0 	.word	0x400204a0
 8002c64:	400204b8 	.word	0x400204b8
 8002c68:	58025408 	.word	0x58025408
 8002c6c:	5802541c 	.word	0x5802541c
 8002c70:	58025430 	.word	0x58025430
 8002c74:	58025444 	.word	0x58025444
 8002c78:	58025458 	.word	0x58025458
 8002c7c:	5802546c 	.word	0x5802546c
 8002c80:	58025480 	.word	0x58025480
 8002c84:	58025494 	.word	0x58025494

08002c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e237      	b.n	800310a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2280      	movs	r2, #128	@ 0x80
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e22c      	b.n	800310a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_DMA_Abort_IT+0x1a0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04a      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e2c <HAL_DMA_Abort_IT+0x1a4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d045      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a59      	ldr	r2, [pc, #356]	@ (8002e30 <HAL_DMA_Abort_IT+0x1a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d040      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <HAL_DMA_Abort_IT+0x1ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a56      	ldr	r2, [pc, #344]	@ (8002e38 <HAL_DMA_Abort_IT+0x1b0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d036      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a55      	ldr	r2, [pc, #340]	@ (8002e3c <HAL_DMA_Abort_IT+0x1b4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d031      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a53      	ldr	r2, [pc, #332]	@ (8002e40 <HAL_DMA_Abort_IT+0x1b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02c      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_DMA_Abort_IT+0x1bc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_DMA_Abort_IT+0x1c0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_DMA_Abort_IT+0x1c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01d      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4d      	ldr	r2, [pc, #308]	@ (8002e50 <HAL_DMA_Abort_IT+0x1c8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4c      	ldr	r2, [pc, #304]	@ (8002e54 <HAL_DMA_Abort_IT+0x1cc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e58 <HAL_DMA_Abort_IT+0x1d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a49      	ldr	r2, [pc, #292]	@ (8002e5c <HAL_DMA_Abort_IT+0x1d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <HAL_DMA_Abort_IT+0x1d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_Abort_IT+0xc8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_DMA_Abort_IT+0x1dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA_Abort_IT+0xcc>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_DMA_Abort_IT+0xce>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8086 	beq.w	8002e68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2f      	ldr	r2, [pc, #188]	@ (8002e28 <HAL_DMA_Abort_IT+0x1a0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	@ (8002e2c <HAL_DMA_Abort_IT+0x1a4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <HAL_DMA_Abort_IT+0x1a8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	@ (8002e34 <HAL_DMA_Abort_IT+0x1ac>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_DMA_Abort_IT+0x1b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a28      	ldr	r2, [pc, #160]	@ (8002e3c <HAL_DMA_Abort_IT+0x1b4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a26      	ldr	r2, [pc, #152]	@ (8002e40 <HAL_DMA_Abort_IT+0x1b8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <HAL_DMA_Abort_IT+0x1bc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	@ (8002e48 <HAL_DMA_Abort_IT+0x1c0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_DMA_Abort_IT+0x1c4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_DMA_Abort_IT+0x1c8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_DMA_Abort_IT+0x1cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <HAL_DMA_Abort_IT+0x1d0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_DMA_Abort_IT+0x1d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e60 <HAL_DMA_Abort_IT+0x1d8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x17c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_DMA_Abort_IT+0x1dc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <HAL_DMA_Abort_IT+0x18e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e178      	b.n	8003108 <HAL_DMA_Abort_IT+0x480>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e16f      	b.n	8003108 <HAL_DMA_Abort_IT+0x480>
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6c      	ldr	r2, [pc, #432]	@ (8003030 <HAL_DMA_Abort_IT+0x3a8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d04a      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6b      	ldr	r2, [pc, #428]	@ (8003034 <HAL_DMA_Abort_IT+0x3ac>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d045      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a69      	ldr	r2, [pc, #420]	@ (8003038 <HAL_DMA_Abort_IT+0x3b0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d040      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a68      	ldr	r2, [pc, #416]	@ (800303c <HAL_DMA_Abort_IT+0x3b4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d03b      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a66      	ldr	r2, [pc, #408]	@ (8003040 <HAL_DMA_Abort_IT+0x3b8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d036      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a65      	ldr	r2, [pc, #404]	@ (8003044 <HAL_DMA_Abort_IT+0x3bc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d031      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a63      	ldr	r2, [pc, #396]	@ (8003048 <HAL_DMA_Abort_IT+0x3c0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02c      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a62      	ldr	r2, [pc, #392]	@ (800304c <HAL_DMA_Abort_IT+0x3c4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d027      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a60      	ldr	r2, [pc, #384]	@ (8003050 <HAL_DMA_Abort_IT+0x3c8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8003054 <HAL_DMA_Abort_IT+0x3cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01d      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8003058 <HAL_DMA_Abort_IT+0x3d0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5c      	ldr	r2, [pc, #368]	@ (800305c <HAL_DMA_Abort_IT+0x3d4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8003060 <HAL_DMA_Abort_IT+0x3d8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a59      	ldr	r2, [pc, #356]	@ (8003064 <HAL_DMA_Abort_IT+0x3dc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a57      	ldr	r2, [pc, #348]	@ (8003068 <HAL_DMA_Abort_IT+0x3e0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x290>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a56      	ldr	r2, [pc, #344]	@ (800306c <HAL_DMA_Abort_IT+0x3e4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <HAL_DMA_Abort_IT+0x2a2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_DMA_Abort_IT+0x2b2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003030 <HAL_DMA_Abort_IT+0x3a8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d072      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3a      	ldr	r2, [pc, #232]	@ (8003034 <HAL_DMA_Abort_IT+0x3ac>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d06d      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a39      	ldr	r2, [pc, #228]	@ (8003038 <HAL_DMA_Abort_IT+0x3b0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d068      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	@ (800303c <HAL_DMA_Abort_IT+0x3b4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d063      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a36      	ldr	r2, [pc, #216]	@ (8003040 <HAL_DMA_Abort_IT+0x3b8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d05e      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_DMA_Abort_IT+0x3bc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d059      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	@ (8003048 <HAL_DMA_Abort_IT+0x3c0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d054      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a31      	ldr	r2, [pc, #196]	@ (800304c <HAL_DMA_Abort_IT+0x3c4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d04f      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	@ (8003050 <HAL_DMA_Abort_IT+0x3c8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	@ (8003054 <HAL_DMA_Abort_IT+0x3cc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_DMA_Abort_IT+0x3d0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <HAL_DMA_Abort_IT+0x3d4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_DMA_Abort_IT+0x3d8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <HAL_DMA_Abort_IT+0x3dc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_DMA_Abort_IT+0x3e0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_DMA_Abort_IT+0x3e4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <HAL_DMA_Abort_IT+0x3e8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	@ (8003074 <HAL_DMA_Abort_IT+0x3ec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_DMA_Abort_IT+0x3f0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_DMA_Abort_IT+0x3f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_DMA_Abort_IT+0x3f8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_DMA_Abort_IT+0x3fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_DMA_Abort_IT+0x400>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_Abort_IT+0x3a2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <HAL_DMA_Abort_IT+0x404>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d132      	bne.n	8003090 <HAL_DMA_Abort_IT+0x408>
 800302a:	2301      	movs	r3, #1
 800302c:	e031      	b.n	8003092 <HAL_DMA_Abort_IT+0x40a>
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d028      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop

08003114 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003120:	4b67      	ldr	r3, [pc, #412]	@ (80032c0 <HAL_DMA_IRQHandler+0x1ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a67      	ldr	r2, [pc, #412]	@ (80032c4 <HAL_DMA_IRQHandler+0x1b0>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5f      	ldr	r2, [pc, #380]	@ (80032c8 <HAL_DMA_IRQHandler+0x1b4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5d      	ldr	r2, [pc, #372]	@ (80032cc <HAL_DMA_IRQHandler+0x1b8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d045      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5c      	ldr	r2, [pc, #368]	@ (80032d0 <HAL_DMA_IRQHandler+0x1bc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5a      	ldr	r2, [pc, #360]	@ (80032d4 <HAL_DMA_IRQHandler+0x1c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d03b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a59      	ldr	r2, [pc, #356]	@ (80032d8 <HAL_DMA_IRQHandler+0x1c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a57      	ldr	r2, [pc, #348]	@ (80032dc <HAL_DMA_IRQHandler+0x1c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d031      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a56      	ldr	r2, [pc, #344]	@ (80032e0 <HAL_DMA_IRQHandler+0x1cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d02c      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a54      	ldr	r2, [pc, #336]	@ (80032e4 <HAL_DMA_IRQHandler+0x1d0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d027      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a53      	ldr	r2, [pc, #332]	@ (80032e8 <HAL_DMA_IRQHandler+0x1d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a51      	ldr	r2, [pc, #324]	@ (80032ec <HAL_DMA_IRQHandler+0x1d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a50      	ldr	r2, [pc, #320]	@ (80032f0 <HAL_DMA_IRQHandler+0x1dc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4e      	ldr	r2, [pc, #312]	@ (80032f4 <HAL_DMA_IRQHandler+0x1e0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a4d      	ldr	r2, [pc, #308]	@ (80032f8 <HAL_DMA_IRQHandler+0x1e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	@ (80032fc <HAL_DMA_IRQHandler+0x1e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003300 <HAL_DMA_IRQHandler+0x1ec>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xd2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a48      	ldr	r2, [pc, #288]	@ (8003304 <HAL_DMA_IRQHandler+0x1f0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_DMA_IRQHandler+0xd6>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_DMA_IRQHandler+0xd8>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 842b 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2208      	movs	r2, #8
 80031fc:	409a      	lsls	r2, r3
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a2 	beq.w	800334c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2e      	ldr	r2, [pc, #184]	@ (80032c8 <HAL_DMA_IRQHandler+0x1b4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d04a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2d      	ldr	r2, [pc, #180]	@ (80032cc <HAL_DMA_IRQHandler+0x1b8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d045      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_DMA_IRQHandler+0x1bc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d040      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2a      	ldr	r2, [pc, #168]	@ (80032d4 <HAL_DMA_IRQHandler+0x1c0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d03b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a28      	ldr	r2, [pc, #160]	@ (80032d8 <HAL_DMA_IRQHandler+0x1c4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d036      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_DMA_IRQHandler+0x1c8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d031      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a25      	ldr	r2, [pc, #148]	@ (80032e0 <HAL_DMA_IRQHandler+0x1cc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02c      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a24      	ldr	r2, [pc, #144]	@ (80032e4 <HAL_DMA_IRQHandler+0x1d0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d027      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <HAL_DMA_IRQHandler+0x1d4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	@ (80032ec <HAL_DMA_IRQHandler+0x1d8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d01d      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <HAL_DMA_IRQHandler+0x1dc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_DMA_IRQHandler+0x1e0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_DMA_IRQHandler+0x1e4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_DMA_IRQHandler+0x1e8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <HAL_DMA_IRQHandler+0x1ec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x194>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_DMA_IRQHandler+0x1f0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d12f      	bne.n	8003308 <HAL_DMA_IRQHandler+0x1f4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e02e      	b.n	800331c <HAL_DMA_IRQHandler+0x208>
 80032be:	bf00      	nop
 80032c0:	24000078 	.word	0x24000078
 80032c4:	1b4e81b5 	.word	0x1b4e81b5
 80032c8:	40020010 	.word	0x40020010
 80032cc:	40020028 	.word	0x40020028
 80032d0:	40020040 	.word	0x40020040
 80032d4:	40020058 	.word	0x40020058
 80032d8:	40020070 	.word	0x40020070
 80032dc:	40020088 	.word	0x40020088
 80032e0:	400200a0 	.word	0x400200a0
 80032e4:	400200b8 	.word	0x400200b8
 80032e8:	40020410 	.word	0x40020410
 80032ec:	40020428 	.word	0x40020428
 80032f0:	40020440 	.word	0x40020440
 80032f4:	40020458 	.word	0x40020458
 80032f8:	40020470 	.word	0x40020470
 80032fc:	40020488 	.word	0x40020488
 8003300:	400204a0 	.word	0x400204a0
 8003304:	400204b8 	.word	0x400204b8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2208      	movs	r2, #8
 800333a:	409a      	lsls	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06e      	beq.n	8003440 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a69      	ldr	r2, [pc, #420]	@ (800350c <HAL_DMA_IRQHandler+0x3f8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a67      	ldr	r2, [pc, #412]	@ (8003510 <HAL_DMA_IRQHandler+0x3fc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a66      	ldr	r2, [pc, #408]	@ (8003514 <HAL_DMA_IRQHandler+0x400>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a64      	ldr	r2, [pc, #400]	@ (8003518 <HAL_DMA_IRQHandler+0x404>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a63      	ldr	r2, [pc, #396]	@ (800351c <HAL_DMA_IRQHandler+0x408>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <HAL_DMA_IRQHandler+0x40c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a60      	ldr	r2, [pc, #384]	@ (8003524 <HAL_DMA_IRQHandler+0x410>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003528 <HAL_DMA_IRQHandler+0x414>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5d      	ldr	r2, [pc, #372]	@ (800352c <HAL_DMA_IRQHandler+0x418>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003530 <HAL_DMA_IRQHandler+0x41c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003534 <HAL_DMA_IRQHandler+0x420>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a58      	ldr	r2, [pc, #352]	@ (8003538 <HAL_DMA_IRQHandler+0x424>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a57      	ldr	r2, [pc, #348]	@ (800353c <HAL_DMA_IRQHandler+0x428>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a55      	ldr	r2, [pc, #340]	@ (8003540 <HAL_DMA_IRQHandler+0x42c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a54      	ldr	r2, [pc, #336]	@ (8003544 <HAL_DMA_IRQHandler+0x430>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_IRQHandler+0x2ee>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a52      	ldr	r2, [pc, #328]	@ (8003548 <HAL_DMA_IRQHandler+0x434>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10a      	bne.n	8003418 <HAL_DMA_IRQHandler+0x304>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e003      	b.n	8003420 <HAL_DMA_IRQHandler+0x30c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0202 	orr.w	r2, r3, #2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2204      	movs	r2, #4
 800344a:	409a      	lsls	r2, r3
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 808f 	beq.w	8003574 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	@ (800350c <HAL_DMA_IRQHandler+0x3f8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d04a      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_DMA_IRQHandler+0x3fc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d045      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a29      	ldr	r2, [pc, #164]	@ (8003514 <HAL_DMA_IRQHandler+0x400>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d040      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a27      	ldr	r2, [pc, #156]	@ (8003518 <HAL_DMA_IRQHandler+0x404>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d03b      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a26      	ldr	r2, [pc, #152]	@ (800351c <HAL_DMA_IRQHandler+0x408>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d036      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_DMA_IRQHandler+0x40c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d031      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <HAL_DMA_IRQHandler+0x410>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d02c      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a21      	ldr	r2, [pc, #132]	@ (8003528 <HAL_DMA_IRQHandler+0x414>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d027      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a20      	ldr	r2, [pc, #128]	@ (800352c <HAL_DMA_IRQHandler+0x418>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003530 <HAL_DMA_IRQHandler+0x41c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <HAL_DMA_IRQHandler+0x420>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003538 <HAL_DMA_IRQHandler+0x424>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	@ (800353c <HAL_DMA_IRQHandler+0x428>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	@ (8003540 <HAL_DMA_IRQHandler+0x42c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <HAL_DMA_IRQHandler+0x430>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x3e2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a15      	ldr	r2, [pc, #84]	@ (8003548 <HAL_DMA_IRQHandler+0x434>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12a      	bne.n	800354c <HAL_DMA_IRQHandler+0x438>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e023      	b.n	8003554 <HAL_DMA_IRQHandler+0x440>
 800350c:	40020010 	.word	0x40020010
 8003510:	40020028 	.word	0x40020028
 8003514:	40020040 	.word	0x40020040
 8003518:	40020058 	.word	0x40020058
 800351c:	40020070 	.word	0x40020070
 8003520:	40020088 	.word	0x40020088
 8003524:	400200a0 	.word	0x400200a0
 8003528:	400200b8 	.word	0x400200b8
 800352c:	40020410 	.word	0x40020410
 8003530:	40020428 	.word	0x40020428
 8003534:	40020440 	.word	0x40020440
 8003538:	40020458 	.word	0x40020458
 800353c:	40020470 	.word	0x40020470
 8003540:	40020488 	.word	0x40020488
 8003544:	400204a0 	.word	0x400204a0
 8003548:	400204b8 	.word	0x400204b8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2204      	movs	r2, #4
 8003562:	409a      	lsls	r2, r3
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2210      	movs	r2, #16
 800357e:	409a      	lsls	r2, r3
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a6 	beq.w	80036d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a85      	ldr	r2, [pc, #532]	@ (80037a4 <HAL_DMA_IRQHandler+0x690>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04a      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a83      	ldr	r2, [pc, #524]	@ (80037a8 <HAL_DMA_IRQHandler+0x694>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d045      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a82      	ldr	r2, [pc, #520]	@ (80037ac <HAL_DMA_IRQHandler+0x698>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d040      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a80      	ldr	r2, [pc, #512]	@ (80037b0 <HAL_DMA_IRQHandler+0x69c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d03b      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7f      	ldr	r2, [pc, #508]	@ (80037b4 <HAL_DMA_IRQHandler+0x6a0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d036      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7d      	ldr	r2, [pc, #500]	@ (80037b8 <HAL_DMA_IRQHandler+0x6a4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7c      	ldr	r2, [pc, #496]	@ (80037bc <HAL_DMA_IRQHandler+0x6a8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d02c      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7a      	ldr	r2, [pc, #488]	@ (80037c0 <HAL_DMA_IRQHandler+0x6ac>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d027      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a79      	ldr	r2, [pc, #484]	@ (80037c4 <HAL_DMA_IRQHandler+0x6b0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a77      	ldr	r2, [pc, #476]	@ (80037c8 <HAL_DMA_IRQHandler+0x6b4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01d      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a76      	ldr	r2, [pc, #472]	@ (80037cc <HAL_DMA_IRQHandler+0x6b8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a74      	ldr	r2, [pc, #464]	@ (80037d0 <HAL_DMA_IRQHandler+0x6bc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a73      	ldr	r2, [pc, #460]	@ (80037d4 <HAL_DMA_IRQHandler+0x6c0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a71      	ldr	r2, [pc, #452]	@ (80037d8 <HAL_DMA_IRQHandler+0x6c4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a70      	ldr	r2, [pc, #448]	@ (80037dc <HAL_DMA_IRQHandler+0x6c8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_DMA_IRQHandler+0x516>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6e      	ldr	r2, [pc, #440]	@ (80037e0 <HAL_DMA_IRQHandler+0x6cc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10a      	bne.n	8003640 <HAL_DMA_IRQHandler+0x52c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e009      	b.n	8003654 <HAL_DMA_IRQHandler+0x540>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03e      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2210      	movs	r2, #16
 8003662:	409a      	lsls	r2, r3
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d108      	bne.n	8003696 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d024      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e01f      	b.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01b      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
 80036a6:	e016      	b.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0208 	bic.w	r2, r2, #8
 80036c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2220      	movs	r2, #32
 80036e0:	409a      	lsls	r2, r3
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8110 	beq.w	800390c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	@ (80037a4 <HAL_DMA_IRQHandler+0x690>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d04a      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2b      	ldr	r2, [pc, #172]	@ (80037a8 <HAL_DMA_IRQHandler+0x694>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d045      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a29      	ldr	r2, [pc, #164]	@ (80037ac <HAL_DMA_IRQHandler+0x698>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d040      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a28      	ldr	r2, [pc, #160]	@ (80037b0 <HAL_DMA_IRQHandler+0x69c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d03b      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a26      	ldr	r2, [pc, #152]	@ (80037b4 <HAL_DMA_IRQHandler+0x6a0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d036      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <HAL_DMA_IRQHandler+0x6a4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d031      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a23      	ldr	r2, [pc, #140]	@ (80037bc <HAL_DMA_IRQHandler+0x6a8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02c      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <HAL_DMA_IRQHandler+0x6ac>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d027      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a20      	ldr	r2, [pc, #128]	@ (80037c4 <HAL_DMA_IRQHandler+0x6b0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <HAL_DMA_IRQHandler+0x6b4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <HAL_DMA_IRQHandler+0x6b8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <HAL_DMA_IRQHandler+0x6bc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1a      	ldr	r2, [pc, #104]	@ (80037d4 <HAL_DMA_IRQHandler+0x6c0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a19      	ldr	r2, [pc, #100]	@ (80037d8 <HAL_DMA_IRQHandler+0x6c4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <HAL_DMA_IRQHandler+0x6c8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_IRQHandler+0x678>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a16      	ldr	r2, [pc, #88]	@ (80037e0 <HAL_DMA_IRQHandler+0x6cc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d12b      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x6d0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	e02a      	b.n	80037f8 <HAL_DMA_IRQHandler+0x6e4>
 80037a2:	bf00      	nop
 80037a4:	40020010 	.word	0x40020010
 80037a8:	40020028 	.word	0x40020028
 80037ac:	40020040 	.word	0x40020040
 80037b0:	40020058 	.word	0x40020058
 80037b4:	40020070 	.word	0x40020070
 80037b8:	40020088 	.word	0x40020088
 80037bc:	400200a0 	.word	0x400200a0
 80037c0:	400200b8 	.word	0x400200b8
 80037c4:	40020410 	.word	0x40020410
 80037c8:	40020428 	.word	0x40020428
 80037cc:	40020440 	.word	0x40020440
 80037d0:	40020458 	.word	0x40020458
 80037d4:	40020470 	.word	0x40020470
 80037d8:	40020488 	.word	0x40020488
 80037dc:	400204a0 	.word	0x400204a0
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8087 	beq.w	800390c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2220      	movs	r2, #32
 8003808:	409a      	lsls	r2, r3
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b04      	cmp	r3, #4
 8003818:	d139      	bne.n	800388e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0216 	bic.w	r2, r2, #22
 8003828:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003838:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_DMA_IRQHandler+0x736>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0208 	bic.w	r2, r2, #8
 8003858:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	223f      	movs	r2, #63	@ 0x3f
 8003864:	409a      	lsls	r2, r3
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 834a 	beq.w	8003f18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
          }
          return;
 800388c:	e344      	b.n	8003f18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d018      	beq.n	80038ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
 80038ba:	e027      	b.n	800390c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e01e      	b.n	800390c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8306 	beq.w	8003f22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8088 	beq.w	8003a34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2204      	movs	r2, #4
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a7a      	ldr	r2, [pc, #488]	@ (8003b1c <HAL_DMA_IRQHandler+0xa08>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d04a      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a79      	ldr	r2, [pc, #484]	@ (8003b20 <HAL_DMA_IRQHandler+0xa0c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d045      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a77      	ldr	r2, [pc, #476]	@ (8003b24 <HAL_DMA_IRQHandler+0xa10>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d040      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a76      	ldr	r2, [pc, #472]	@ (8003b28 <HAL_DMA_IRQHandler+0xa14>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03b      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a74      	ldr	r2, [pc, #464]	@ (8003b2c <HAL_DMA_IRQHandler+0xa18>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d036      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a73      	ldr	r2, [pc, #460]	@ (8003b30 <HAL_DMA_IRQHandler+0xa1c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d031      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a71      	ldr	r2, [pc, #452]	@ (8003b34 <HAL_DMA_IRQHandler+0xa20>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02c      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a70      	ldr	r2, [pc, #448]	@ (8003b38 <HAL_DMA_IRQHandler+0xa24>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d027      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6e      	ldr	r2, [pc, #440]	@ (8003b3c <HAL_DMA_IRQHandler+0xa28>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b40 <HAL_DMA_IRQHandler+0xa2c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6b      	ldr	r2, [pc, #428]	@ (8003b44 <HAL_DMA_IRQHandler+0xa30>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6a      	ldr	r2, [pc, #424]	@ (8003b48 <HAL_DMA_IRQHandler+0xa34>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	@ (8003b4c <HAL_DMA_IRQHandler+0xa38>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a67      	ldr	r2, [pc, #412]	@ (8003b50 <HAL_DMA_IRQHandler+0xa3c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	@ (8003b54 <HAL_DMA_IRQHandler+0xa40>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x8b8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a64      	ldr	r2, [pc, #400]	@ (8003b58 <HAL_DMA_IRQHandler+0xa44>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <HAL_DMA_IRQHandler+0x8ca>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e007      	b.n	80039ee <HAL_DMA_IRQHandler+0x8da>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d307      	bcc.n	8003a0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f2      	bne.n	80039ee <HAL_DMA_IRQHandler+0x8da>
 8003a08:	e000      	b.n	8003a0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003a22:	e003      	b.n	8003a2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8272 	beq.w	8003f22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	e26c      	b.n	8003f22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a43      	ldr	r2, [pc, #268]	@ (8003b5c <HAL_DMA_IRQHandler+0xa48>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a42      	ldr	r2, [pc, #264]	@ (8003b60 <HAL_DMA_IRQHandler+0xa4c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a40      	ldr	r2, [pc, #256]	@ (8003b64 <HAL_DMA_IRQHandler+0xa50>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b68 <HAL_DMA_IRQHandler+0xa54>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3d      	ldr	r2, [pc, #244]	@ (8003b6c <HAL_DMA_IRQHandler+0xa58>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b70 <HAL_DMA_IRQHandler+0xa5c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3a      	ldr	r2, [pc, #232]	@ (8003b74 <HAL_DMA_IRQHandler+0xa60>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x984>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a39      	ldr	r2, [pc, #228]	@ (8003b78 <HAL_DMA_IRQHandler+0xa64>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x988>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_IRQHandler+0x98a>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 823f 	beq.w	8003f22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80cd 	beq.w	8003c5c <HAL_DMA_IRQHandler+0xb48>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80c7 	beq.w	8003c5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d049      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8210 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b04:	e20a      	b.n	8003f1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8206 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b18:	e200      	b.n	8003f1c <HAL_DMA_IRQHandler+0xe08>
 8003b1a:	bf00      	nop
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8
 8003b5c:	58025408 	.word	0x58025408
 8003b60:	5802541c 	.word	0x5802541c
 8003b64:	58025430 	.word	0x58025430
 8003b68:	58025444 	.word	0x58025444
 8003b6c:	58025458 	.word	0x58025458
 8003b70:	5802546c 	.word	0x5802546c
 8003b74:	58025480 	.word	0x58025480
 8003b78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d160      	bne.n	8003c48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d88 <HAL_DMA_IRQHandler+0xc74>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a7d      	ldr	r2, [pc, #500]	@ (8003d8c <HAL_DMA_IRQHandler+0xc78>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d90 <HAL_DMA_IRQHandler+0xc7c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7a      	ldr	r2, [pc, #488]	@ (8003d94 <HAL_DMA_IRQHandler+0xc80>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a79      	ldr	r2, [pc, #484]	@ (8003d98 <HAL_DMA_IRQHandler+0xc84>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a77      	ldr	r2, [pc, #476]	@ (8003d9c <HAL_DMA_IRQHandler+0xc88>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a76      	ldr	r2, [pc, #472]	@ (8003da0 <HAL_DMA_IRQHandler+0xc8c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a74      	ldr	r2, [pc, #464]	@ (8003da4 <HAL_DMA_IRQHandler+0xc90>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a73      	ldr	r2, [pc, #460]	@ (8003da8 <HAL_DMA_IRQHandler+0xc94>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a71      	ldr	r2, [pc, #452]	@ (8003dac <HAL_DMA_IRQHandler+0xc98>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a70      	ldr	r2, [pc, #448]	@ (8003db0 <HAL_DMA_IRQHandler+0xc9c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003db4 <HAL_DMA_IRQHandler+0xca0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6d      	ldr	r2, [pc, #436]	@ (8003db8 <HAL_DMA_IRQHandler+0xca4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003dbc <HAL_DMA_IRQHandler+0xca8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6a      	ldr	r2, [pc, #424]	@ (8003dc0 <HAL_DMA_IRQHandler+0xcac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xb12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a68      	ldr	r2, [pc, #416]	@ (8003dc4 <HAL_DMA_IRQHandler+0xcb0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <HAL_DMA_IRQHandler+0xb24>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e007      	b.n	8003c48 <HAL_DMA_IRQHandler+0xb34>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8165 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5a:	e15f      	b.n	8003f1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2202      	movs	r2, #2
 8003c66:	409a      	lsls	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80c5 	beq.w	8003dfc <HAL_DMA_IRQHandler+0xce8>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80bf 	beq.w	8003dfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2202      	movs	r2, #2
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d018      	beq.n	8003cca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 813a 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb4:	e134      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8130 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc8:	e12a      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8089 	bne.w	8003de8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_DMA_IRQHandler+0xc74>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04a      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	@ (8003d8c <HAL_DMA_IRQHandler+0xc78>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d045      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <HAL_DMA_IRQHandler+0xc7c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	@ (8003d94 <HAL_DMA_IRQHandler+0xc80>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d03b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a25      	ldr	r2, [pc, #148]	@ (8003d98 <HAL_DMA_IRQHandler+0xc84>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d036      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <HAL_DMA_IRQHandler+0xc88>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d031      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <HAL_DMA_IRQHandler+0xc8c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d02c      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a20      	ldr	r2, [pc, #128]	@ (8003da4 <HAL_DMA_IRQHandler+0xc90>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d027      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <HAL_DMA_IRQHandler+0xc94>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1d      	ldr	r2, [pc, #116]	@ (8003dac <HAL_DMA_IRQHandler+0xc98>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_DMA_IRQHandler+0xc9c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <HAL_DMA_IRQHandler+0xca0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_DMA_IRQHandler+0xca4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <HAL_DMA_IRQHandler+0xca8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <HAL_DMA_IRQHandler+0xcac>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xc62>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d128      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0xcb4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0214 	bic.w	r2, r2, #20
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e027      	b.n	8003dd8 <HAL_DMA_IRQHandler+0xcc4>
 8003d88:	40020010 	.word	0x40020010
 8003d8c:	40020028 	.word	0x40020028
 8003d90:	40020040 	.word	0x40020040
 8003d94:	40020058 	.word	0x40020058
 8003d98:	40020070 	.word	0x40020070
 8003d9c:	40020088 	.word	0x40020088
 8003da0:	400200a0 	.word	0x400200a0
 8003da4:	400200b8 	.word	0x400200b8
 8003da8:	40020410 	.word	0x40020410
 8003dac:	40020428 	.word	0x40020428
 8003db0:	40020440 	.word	0x40020440
 8003db4:	40020458 	.word	0x40020458
 8003db8:	40020470 	.word	0x40020470
 8003dbc:	40020488 	.word	0x40020488
 8003dc0:	400204a0 	.word	0x400204a0
 8003dc4:	400204b8 	.word	0x400204b8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020a 	bic.w	r2, r2, #10
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8097 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dfa:	e091      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2208      	movs	r2, #8
 8003e06:	409a      	lsls	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8088 	beq.w	8003f22 <HAL_DMA_IRQHandler+0xe0e>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8082 	beq.w	8003f22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a41      	ldr	r2, [pc, #260]	@ (8003f28 <HAL_DMA_IRQHandler+0xe14>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d04a      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f2c <HAL_DMA_IRQHandler+0xe18>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d045      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3e      	ldr	r2, [pc, #248]	@ (8003f30 <HAL_DMA_IRQHandler+0xe1c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d040      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3c      	ldr	r2, [pc, #240]	@ (8003f34 <HAL_DMA_IRQHandler+0xe20>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d03b      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f38 <HAL_DMA_IRQHandler+0xe24>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d036      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a39      	ldr	r2, [pc, #228]	@ (8003f3c <HAL_DMA_IRQHandler+0xe28>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <HAL_DMA_IRQHandler+0xe2c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d02c      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a36      	ldr	r2, [pc, #216]	@ (8003f44 <HAL_DMA_IRQHandler+0xe30>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d027      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <HAL_DMA_IRQHandler+0xe34>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a33      	ldr	r2, [pc, #204]	@ (8003f4c <HAL_DMA_IRQHandler+0xe38>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a32      	ldr	r2, [pc, #200]	@ (8003f50 <HAL_DMA_IRQHandler+0xe3c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <HAL_DMA_IRQHandler+0xe40>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <HAL_DMA_IRQHandler+0xe44>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f5c <HAL_DMA_IRQHandler+0xe48>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2c      	ldr	r2, [pc, #176]	@ (8003f60 <HAL_DMA_IRQHandler+0xe4c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xdaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <HAL_DMA_IRQHandler+0xe50>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0xdbc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 021c 	bic.w	r2, r2, #28
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e007      	b.n	8003ee0 <HAL_DMA_IRQHandler+0xdcc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 020e 	bic.w	r2, r2, #14
 8003ede:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
 8003f16:	e004      	b.n	8003f22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f22:	3728      	adds	r7, #40	@ 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8

08003f68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7f      	ldr	r2, [pc, #508]	@ (8004184 <DMA_SetConfig+0x21c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d072      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7d      	ldr	r2, [pc, #500]	@ (8004188 <DMA_SetConfig+0x220>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d06d      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800418c <DMA_SetConfig+0x224>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d068      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8004190 <DMA_SetConfig+0x228>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d063      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a79      	ldr	r2, [pc, #484]	@ (8004194 <DMA_SetConfig+0x22c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d05e      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	@ (8004198 <DMA_SetConfig+0x230>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d059      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a76      	ldr	r2, [pc, #472]	@ (800419c <DMA_SetConfig+0x234>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d054      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a74      	ldr	r2, [pc, #464]	@ (80041a0 <DMA_SetConfig+0x238>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d04f      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a73      	ldr	r2, [pc, #460]	@ (80041a4 <DMA_SetConfig+0x23c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a71      	ldr	r2, [pc, #452]	@ (80041a8 <DMA_SetConfig+0x240>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a70      	ldr	r2, [pc, #448]	@ (80041ac <DMA_SetConfig+0x244>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80041b0 <DMA_SetConfig+0x248>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6d      	ldr	r2, [pc, #436]	@ (80041b4 <DMA_SetConfig+0x24c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6b      	ldr	r2, [pc, #428]	@ (80041b8 <DMA_SetConfig+0x250>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <DMA_SetConfig+0x10a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6a      	ldr	r2, [pc, #424]	@ (80041bc <DMA_SetConfig+0x254>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	@ (80041c0 <DMA_SetConfig+0x258>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a67      	ldr	r2, [pc, #412]	@ (80041c4 <DMA_SetConfig+0x25c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <DMA_SetConfig+0x10a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a65      	ldr	r2, [pc, #404]	@ (80041c8 <DMA_SetConfig+0x260>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a64      	ldr	r2, [pc, #400]	@ (80041cc <DMA_SetConfig+0x264>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <DMA_SetConfig+0x268>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <DMA_SetConfig+0x10a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a61      	ldr	r2, [pc, #388]	@ (80041d4 <DMA_SetConfig+0x26c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a5f      	ldr	r2, [pc, #380]	@ (80041d8 <DMA_SetConfig+0x270>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <DMA_SetConfig+0x10a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5e      	ldr	r2, [pc, #376]	@ (80041dc <DMA_SetConfig+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <DMA_SetConfig+0x10a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5c      	ldr	r2, [pc, #368]	@ (80041e0 <DMA_SetConfig+0x278>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <DMA_SetConfig+0x10e>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <DMA_SetConfig+0x110>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004084:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004096:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a39      	ldr	r2, [pc, #228]	@ (8004184 <DMA_SetConfig+0x21c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04a      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a38      	ldr	r2, [pc, #224]	@ (8004188 <DMA_SetConfig+0x220>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d045      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a36      	ldr	r2, [pc, #216]	@ (800418c <DMA_SetConfig+0x224>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d040      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a35      	ldr	r2, [pc, #212]	@ (8004190 <DMA_SetConfig+0x228>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d03b      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a33      	ldr	r2, [pc, #204]	@ (8004194 <DMA_SetConfig+0x22c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d036      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a32      	ldr	r2, [pc, #200]	@ (8004198 <DMA_SetConfig+0x230>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d031      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a30      	ldr	r2, [pc, #192]	@ (800419c <DMA_SetConfig+0x234>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02c      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	@ (80041a0 <DMA_SetConfig+0x238>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d027      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	@ (80041a4 <DMA_SetConfig+0x23c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2c      	ldr	r2, [pc, #176]	@ (80041a8 <DMA_SetConfig+0x240>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01d      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2a      	ldr	r2, [pc, #168]	@ (80041ac <DMA_SetConfig+0x244>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a29      	ldr	r2, [pc, #164]	@ (80041b0 <DMA_SetConfig+0x248>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a27      	ldr	r2, [pc, #156]	@ (80041b4 <DMA_SetConfig+0x24c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <DMA_SetConfig+0x250>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a24      	ldr	r2, [pc, #144]	@ (80041bc <DMA_SetConfig+0x254>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <DMA_SetConfig+0x1d0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <DMA_SetConfig+0x258>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <DMA_SetConfig+0x1d4>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <DMA_SetConfig+0x1d6>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d059      	beq.n	80041f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	223f      	movs	r2, #63	@ 0x3f
 800414c:	409a      	lsls	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004160:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d138      	bne.n	80041e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004182:	e086      	b.n	8004292 <DMA_SetConfig+0x32a>
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
}
 80041f4:	e04d      	b.n	8004292 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a29      	ldr	r2, [pc, #164]	@ (80042a0 <DMA_SetConfig+0x338>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <DMA_SetConfig+0x2de>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a27      	ldr	r2, [pc, #156]	@ (80042a4 <DMA_SetConfig+0x33c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01d      	beq.n	8004246 <DMA_SetConfig+0x2de>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <DMA_SetConfig+0x340>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <DMA_SetConfig+0x2de>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a24      	ldr	r2, [pc, #144]	@ (80042ac <DMA_SetConfig+0x344>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <DMA_SetConfig+0x2de>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a23      	ldr	r2, [pc, #140]	@ (80042b0 <DMA_SetConfig+0x348>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <DMA_SetConfig+0x2de>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <DMA_SetConfig+0x34c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <DMA_SetConfig+0x2de>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <DMA_SetConfig+0x350>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <DMA_SetConfig+0x2de>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <DMA_SetConfig+0x354>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <DMA_SetConfig+0x2e2>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <DMA_SetConfig+0x2e4>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b40      	cmp	r3, #64	@ 0x40
 800426e:	d108      	bne.n	8004282 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	60da      	str	r2, [r3, #12]
}
 8004280:	e007      	b.n	8004292 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	58025408 	.word	0x58025408
 80042a4:	5802541c 	.word	0x5802541c
 80042a8:	58025430 	.word	0x58025430
 80042ac:	58025444 	.word	0x58025444
 80042b0:	58025458 	.word	0x58025458
 80042b4:	5802546c 	.word	0x5802546c
 80042b8:	58025480 	.word	0x58025480
 80042bc:	58025494 	.word	0x58025494

080042c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a42      	ldr	r2, [pc, #264]	@ (80043d8 <DMA_CalcBaseAndBitshift+0x118>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d04a      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a41      	ldr	r2, [pc, #260]	@ (80043dc <DMA_CalcBaseAndBitshift+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d045      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3f      	ldr	r2, [pc, #252]	@ (80043e0 <DMA_CalcBaseAndBitshift+0x120>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d040      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3e      	ldr	r2, [pc, #248]	@ (80043e4 <DMA_CalcBaseAndBitshift+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d03b      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3c      	ldr	r2, [pc, #240]	@ (80043e8 <DMA_CalcBaseAndBitshift+0x128>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d036      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3b      	ldr	r2, [pc, #236]	@ (80043ec <DMA_CalcBaseAndBitshift+0x12c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d031      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a39      	ldr	r2, [pc, #228]	@ (80043f0 <DMA_CalcBaseAndBitshift+0x130>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d02c      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <DMA_CalcBaseAndBitshift+0x134>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d027      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a36      	ldr	r2, [pc, #216]	@ (80043f8 <DMA_CalcBaseAndBitshift+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a35      	ldr	r2, [pc, #212]	@ (80043fc <DMA_CalcBaseAndBitshift+0x13c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d01d      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <DMA_CalcBaseAndBitshift+0x140>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a32      	ldr	r2, [pc, #200]	@ (8004404 <DMA_CalcBaseAndBitshift+0x144>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	@ (8004408 <DMA_CalcBaseAndBitshift+0x148>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2f      	ldr	r2, [pc, #188]	@ (800440c <DMA_CalcBaseAndBitshift+0x14c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <DMA_CalcBaseAndBitshift+0x150>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <DMA_CalcBaseAndBitshift+0xa8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <DMA_CalcBaseAndBitshift+0x154>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <DMA_CalcBaseAndBitshift+0xac>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <DMA_CalcBaseAndBitshift+0xae>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d024      	beq.n	80043bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3b10      	subs	r3, #16
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <DMA_CalcBaseAndBitshift+0x158>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	4a24      	ldr	r2, [pc, #144]	@ (800441c <DMA_CalcBaseAndBitshift+0x15c>)
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	461a      	mov	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d908      	bls.n	80043ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004420 <DMA_CalcBaseAndBitshift+0x160>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80043aa:	e00d      	b.n	80043c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <DMA_CalcBaseAndBitshift+0x160>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ba:	e005      	b.n	80043c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40020010 	.word	0x40020010
 80043dc:	40020028 	.word	0x40020028
 80043e0:	40020040 	.word	0x40020040
 80043e4:	40020058 	.word	0x40020058
 80043e8:	40020070 	.word	0x40020070
 80043ec:	40020088 	.word	0x40020088
 80043f0:	400200a0 	.word	0x400200a0
 80043f4:	400200b8 	.word	0x400200b8
 80043f8:	40020410 	.word	0x40020410
 80043fc:	40020428 	.word	0x40020428
 8004400:	40020440 	.word	0x40020440
 8004404:	40020458 	.word	0x40020458
 8004408:	40020470 	.word	0x40020470
 800440c:	40020488 	.word	0x40020488
 8004410:	400204a0 	.word	0x400204a0
 8004414:	400204b8 	.word	0x400204b8
 8004418:	aaaaaaab 	.word	0xaaaaaaab
 800441c:	0800c55c 	.word	0x0800c55c
 8004420:	fffffc00 	.word	0xfffffc00

08004424 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d120      	bne.n	800447a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	2b03      	cmp	r3, #3
 800443e:	d858      	bhi.n	80044f2 <DMA_CheckFifoParam+0xce>
 8004440:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <DMA_CheckFifoParam+0x24>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	08004459 	.word	0x08004459
 800444c:	0800446b 	.word	0x0800446b
 8004450:	08004459 	.word	0x08004459
 8004454:	080044f3 	.word	0x080044f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d048      	beq.n	80044f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004468:	e045      	b.n	80044f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004472:	d142      	bne.n	80044fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004478:	e03f      	b.n	80044fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004482:	d123      	bne.n	80044cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	2b03      	cmp	r3, #3
 800448a:	d838      	bhi.n	80044fe <DMA_CheckFifoParam+0xda>
 800448c:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <DMA_CheckFifoParam+0x70>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044ab 	.word	0x080044ab
 800449c:	080044a5 	.word	0x080044a5
 80044a0:	080044bd 	.word	0x080044bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
        break;
 80044a8:	e030      	b.n	800450c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d025      	beq.n	8004502 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ba:	e022      	b.n	8004502 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044c4:	d11f      	bne.n	8004506 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ca:	e01c      	b.n	8004506 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <DMA_CheckFifoParam+0xb6>
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d003      	beq.n	80044e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044d8:	e018      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
        break;
 80044de:	e015      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
    break;
 80044f0:	e00b      	b.n	800450a <DMA_CheckFifoParam+0xe6>
        break;
 80044f2:	bf00      	nop
 80044f4:	e00a      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        break;
 80044f6:	bf00      	nop
 80044f8:	e008      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        break;
 80044fa:	bf00      	nop
 80044fc:	e006      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        break;
 80044fe:	bf00      	nop
 8004500:	e004      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <DMA_CheckFifoParam+0xe8>
        break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <DMA_CheckFifoParam+0xe8>
    break;
 800450a:	bf00      	nop
    }
  }

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop

0800451c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a38      	ldr	r2, [pc, #224]	@ (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a36      	ldr	r2, [pc, #216]	@ (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a35      	ldr	r2, [pc, #212]	@ (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a33      	ldr	r2, [pc, #204]	@ (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a32      	ldr	r2, [pc, #200]	@ (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	@ (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2f      	ldr	r2, [pc, #188]	@ (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2d      	ldr	r2, [pc, #180]	@ (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01a      	beq.n	80045ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3b08      	subs	r3, #8
 800458c:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4b26      	ldr	r3, [pc, #152]	@ (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a24      	ldr	r2, [pc, #144]	@ (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2201      	movs	r2, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045b8:	e024      	b.n	8004604 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	3b10      	subs	r3, #16
 80045c2:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d806      	bhi.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d902      	bls.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3308      	adds	r3, #8
 80045e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a16      	ldr	r2, [pc, #88]	@ (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	58025408 	.word	0x58025408
 8004614:	5802541c 	.word	0x5802541c
 8004618:	58025430 	.word	0x58025430
 800461c:	58025444 	.word	0x58025444
 8004620:	58025458 	.word	0x58025458
 8004624:	5802546c 	.word	0x5802546c
 8004628:	58025480 	.word	0x58025480
 800462c:	58025494 	.word	0x58025494
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	16009600 	.word	0x16009600
 8004638:	58025880 	.word	0x58025880
 800463c:	aaaaaaab 	.word	0xaaaaaaab
 8004640:	400204b8 	.word	0x400204b8
 8004644:	4002040f 	.word	0x4002040f
 8004648:	10008200 	.word	0x10008200
 800464c:	40020880 	.word	0x40020880

08004650 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d04a      	beq.n	80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d847      	bhi.n	80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a25      	ldr	r2, [pc, #148]	@ (8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a24      	ldr	r2, [pc, #144]	@ (800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01d      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a22      	ldr	r2, [pc, #136]	@ (8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	@ (8004714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a15      	ldr	r2, [pc, #84]	@ (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80046da:	e009      	b.n	80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a11      	ldr	r2, [pc, #68]	@ (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	58025408 	.word	0x58025408
 800470c:	5802541c 	.word	0x5802541c
 8004710:	58025430 	.word	0x58025430
 8004714:	58025444 	.word	0x58025444
 8004718:	58025458 	.word	0x58025458
 800471c:	5802546c 	.word	0x5802546c
 8004720:	58025480 	.word	0x58025480
 8004724:	58025494 	.word	0x58025494
 8004728:	1600963f 	.word	0x1600963f
 800472c:	58025940 	.word	0x58025940
 8004730:	1000823f 	.word	0x1000823f
 8004734:	40020940 	.word	0x40020940

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	@ 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004746:	4b86      	ldr	r3, [pc, #536]	@ (8004960 <HAL_GPIO_Init+0x228>)
 8004748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800474a:	e18c      	b.n	8004a66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2101      	movs	r1, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 817e 	beq.w	8004a60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d005      	beq.n	800477c <HAL_GPIO_Init+0x44>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d130      	bne.n	80047de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047b2:	2201      	movs	r2, #1
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0201 	and.w	r2, r3, #1
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d017      	beq.n	800481a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2203      	movs	r2, #3
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d123      	bne.n	800486e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	08da      	lsrs	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3208      	adds	r2, #8
 800482e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	220f      	movs	r2, #15
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0203 	and.w	r2, r3, #3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80d8 	beq.w	8004a60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004964 <HAL_GPIO_Init+0x22c>)
 80048b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004964 <HAL_GPIO_Init+0x22c>)
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80048c0:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_GPIO_Init+0x22c>)
 80048c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ce:	4a26      	ldr	r2, [pc, #152]	@ (8004968 <HAL_GPIO_Init+0x230>)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	3302      	adds	r3, #2
 80048d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	220f      	movs	r2, #15
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <HAL_GPIO_Init+0x234>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d04a      	beq.n	8004990 <HAL_GPIO_Init+0x258>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <HAL_GPIO_Init+0x238>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02b      	beq.n	800495a <HAL_GPIO_Init+0x222>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <HAL_GPIO_Init+0x23c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d025      	beq.n	8004956 <HAL_GPIO_Init+0x21e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <HAL_GPIO_Init+0x240>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01f      	beq.n	8004952 <HAL_GPIO_Init+0x21a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_GPIO_Init+0x244>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d019      	beq.n	800494e <HAL_GPIO_Init+0x216>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <HAL_GPIO_Init+0x248>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_GPIO_Init+0x212>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <HAL_GPIO_Init+0x24c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00d      	beq.n	8004946 <HAL_GPIO_Init+0x20e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <HAL_GPIO_Init+0x250>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <HAL_GPIO_Init+0x20a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a15      	ldr	r2, [pc, #84]	@ (800498c <HAL_GPIO_Init+0x254>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_GPIO_Init+0x206>
 800493a:	2309      	movs	r3, #9
 800493c:	e029      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 800493e:	230a      	movs	r3, #10
 8004940:	e027      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 8004942:	2307      	movs	r3, #7
 8004944:	e025      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 8004946:	2306      	movs	r3, #6
 8004948:	e023      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 800494a:	2305      	movs	r3, #5
 800494c:	e021      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 800494e:	2304      	movs	r3, #4
 8004950:	e01f      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 8004952:	2303      	movs	r3, #3
 8004954:	e01d      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 8004956:	2302      	movs	r3, #2
 8004958:	e01b      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 800495a:	2301      	movs	r3, #1
 800495c:	e019      	b.n	8004992 <HAL_GPIO_Init+0x25a>
 800495e:	bf00      	nop
 8004960:	58000080 	.word	0x58000080
 8004964:	58024400 	.word	0x58024400
 8004968:	58000400 	.word	0x58000400
 800496c:	58020000 	.word	0x58020000
 8004970:	58020400 	.word	0x58020400
 8004974:	58020800 	.word	0x58020800
 8004978:	58020c00 	.word	0x58020c00
 800497c:	58021000 	.word	0x58021000
 8004980:	58021400 	.word	0x58021400
 8004984:	58021800 	.word	0x58021800
 8004988:	58021c00 	.word	0x58021c00
 800498c:	58022400 	.word	0x58022400
 8004990:	2300      	movs	r3, #0
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	f002 0203 	and.w	r2, r2, #3
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	4093      	lsls	r3, r2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a2:	4938      	ldr	r1, [pc, #224]	@ (8004a84 <HAL_GPIO_Init+0x34c>)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f ae6b 	bne.w	800474c <HAL_GPIO_Init+0x14>
  }
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	3724      	adds	r7, #36	@ 0x24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	58000400 	.word	0x58000400

08004a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
 8004a94:	4613      	mov	r3, r2
 8004a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a98:	787b      	ldrb	r3, [r7, #1]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aa4:	e003      	b.n	8004aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	041a      	lsls	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	619a      	str	r2, [r3, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004acc:	887a      	ldrh	r2, [r7, #2]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43d9      	mvns	r1, r3
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	400b      	ands	r3, r1
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	4603      	mov	r3, r0
 8004af6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f005 fe2d 	bl	800a774 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004b30:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004b36:	f023 0304 	bic.w	r3, r3, #4
 8004b3a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004b42:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004b44:	e000      	b.n	8004b48 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004b46:	bf20      	wfe
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d00a      	beq.n	8004b82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b6c:	4b16      	ldr	r3, [pc, #88]	@ (8004bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e01f      	b.n	8004bbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e01d      	b.n	8004bbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 0207 	bic.w	r2, r3, #7
 8004b8a:	490f      	ldr	r1, [pc, #60]	@ (8004bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b92:	f7fc fe7d 	bl	8001890 <HAL_GetTick>
 8004b96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b98:	e009      	b.n	8004bae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b9a:	f7fc fe79 	bl	8001890 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba8:	d901      	bls.n	8004bae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e007      	b.n	8004bbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bae:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bba:	d1ee      	bne.n	8004b9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	58024800 	.word	0x58024800

08004bcc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
 8004bd0:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	@ 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e3c8      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8087 	beq.w	8004d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfc:	4b88      	ldr	r3, [pc, #544]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c06:	4b86      	ldr	r3, [pc, #536]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d007      	beq.n	8004c22 <HAL_RCC_OscConfig+0x46>
 8004c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c14:	2b18      	cmp	r3, #24
 8004c16:	d110      	bne.n	8004c3a <HAL_RCC_OscConfig+0x5e>
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d10b      	bne.n	8004c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c22:	4b7f      	ldr	r3, [pc, #508]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d06c      	beq.n	8004d08 <HAL_RCC_OscConfig+0x12c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d168      	bne.n	8004d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e3a2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c42:	d106      	bne.n	8004c52 <HAL_RCC_OscConfig+0x76>
 8004c44:	4b76      	ldr	r3, [pc, #472]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a75      	ldr	r2, [pc, #468]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e02e      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x98>
 8004c5a:	4b71      	ldr	r3, [pc, #452]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a70      	ldr	r2, [pc, #448]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b6e      	ldr	r3, [pc, #440]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e01d      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0xbc>
 8004c7e:	4b68      	ldr	r3, [pc, #416]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a67      	ldr	r2, [pc, #412]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b65      	ldr	r3, [pc, #404]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a64      	ldr	r2, [pc, #400]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c98:	4b61      	ldr	r3, [pc, #388]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a60      	ldr	r2, [pc, #384]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fc fdea 	bl	8001890 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fc fde6 	bl	8001890 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	@ 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e356      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0xe4>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fc fdd6 	bl	8001890 <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fc fdd2 	bl	8001890 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	@ 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e342      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cfa:	4b49      	ldr	r3, [pc, #292]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x10c>
 8004d06:	e000      	b.n	8004d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 808c 	beq.w	8004e30 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d18:	4b41      	ldr	r3, [pc, #260]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d22:	4b3f      	ldr	r3, [pc, #252]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCC_OscConfig+0x162>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b18      	cmp	r3, #24
 8004d32:	d137      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c8>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d132      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d3e:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x17a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e314      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d56:	4b32      	ldr	r3, [pc, #200]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0219 	bic.w	r2, r3, #25
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	492f      	ldr	r1, [pc, #188]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fd92 	bl	8001890 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fc fd8e 	bl	8001890 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e2fe      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d82:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	4920      	ldr	r1, [pc, #128]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da2:	e045      	b.n	8004e30 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d026      	beq.n	8004dfa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dac:	4b1c      	ldr	r3, [pc, #112]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 0219 	bic.w	r2, r3, #25
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4919      	ldr	r1, [pc, #100]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fc fd67 	bl	8001890 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fc fd63 	bl	8001890 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e2d3      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	490b      	ldr	r1, [pc, #44]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
 8004df8:	e01a      	b.n	8004e30 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fc fd43 	bl	8001890 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0e:	f7fc fd3f 	bl	8001890 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d903      	bls.n	8004e24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e2af      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
 8004e20:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e24:	4b96      	ldr	r3, [pc, #600]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ee      	bne.n	8004e0e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d06a      	beq.n	8004f12 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3c:	4b90      	ldr	r3, [pc, #576]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e46:	4b8e      	ldr	r3, [pc, #568]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d007      	beq.n	8004e62 <HAL_RCC_OscConfig+0x286>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b18      	cmp	r3, #24
 8004e56:	d11b      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2b4>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d116      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e62:	4b87      	ldr	r3, [pc, #540]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCC_OscConfig+0x29e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b80      	cmp	r3, #128	@ 0x80
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e282      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e7a:	4b81      	ldr	r3, [pc, #516]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	497d      	ldr	r1, [pc, #500]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e8e:	e040      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e98:	4b79      	ldr	r3, [pc, #484]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fcf4 	bl	8001890 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004eac:	f7fc fcf0 	bl	8001890 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e260      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ebe:	4b70      	ldr	r3, [pc, #448]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eca:	4b6d      	ldr	r3, [pc, #436]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	4969      	ldr	r1, [pc, #420]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60cb      	str	r3, [r1, #12]
 8004ede:	e018      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ee0:	4b67      	ldr	r3, [pc, #412]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a66      	ldr	r2, [pc, #408]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fcd0 	bl	8001890 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fccc 	bl	8001890 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e23c      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f06:	4b5e      	ldr	r3, [pc, #376]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d036      	beq.n	8004f8c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f26:	4b56      	ldr	r3, [pc, #344]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2a:	4a55      	ldr	r2, [pc, #340]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f32:	f7fc fcad 	bl	8001890 <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3a:	f7fc fca9 	bl	8001890 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e219      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x35e>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5a:	4b49      	ldr	r3, [pc, #292]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5e:	4a48      	ldr	r2, [pc, #288]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fc fc93 	bl	8001890 <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fc fc8f 	bl	8001890 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1ff      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f80:	4b3f      	ldr	r3, [pc, #252]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d036      	beq.n	8005006 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4b37      	ldr	r3, [pc, #220]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a36      	ldr	r2, [pc, #216]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fa6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fac:	f7fc fc70 	bl	8001890 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb4:	f7fc fc6c 	bl	8001890 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e1dc      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x3d8>
 8004fd2:	e018      	b.n	8005006 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a29      	ldr	r2, [pc, #164]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fe0:	f7fc fc56 	bl	8001890 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe8:	f7fc fc52 	bl	8001890 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1c2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ffa:	4b21      	ldr	r3, [pc, #132]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8086 	beq.w	8005120 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x4a8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <HAL_RCC_OscConfig+0x4a8>)
 800501a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005020:	f7fc fc36 	bl	8001890 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005028:	f7fc fc32 	bl	8001890 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	@ 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1a2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503a:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <HAL_RCC_OscConfig+0x4a8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x480>
 800504e:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a0b      	ldr	r2, [pc, #44]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6713      	str	r3, [r2, #112]	@ 0x70
 800505a:	e032      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4ac>
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a05      	ldr	r2, [pc, #20]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a02      	ldr	r2, [pc, #8]	@ (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f023 0304 	bic.w	r3, r3, #4
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	e021      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
 8005084:	58024800 	.word	0x58024800
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b05      	cmp	r3, #5
 800508e:	d10c      	bne.n	80050aa <HAL_RCC_OscConfig+0x4ce>
 8005090:	4b83      	ldr	r3, [pc, #524]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	4a82      	ldr	r2, [pc, #520]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005096:	f043 0304 	orr.w	r3, r3, #4
 800509a:	6713      	str	r3, [r2, #112]	@ 0x70
 800509c:	4b80      	ldr	r3, [pc, #512]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a0:	4a7f      	ldr	r2, [pc, #508]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a8:	e00b      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 80050aa:	4b7d      	ldr	r3, [pc, #500]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	4a7c      	ldr	r2, [pc, #496]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b6:	4b7a      	ldr	r3, [pc, #488]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	4a79      	ldr	r2, [pc, #484]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050bc:	f023 0304 	bic.w	r3, r3, #4
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d015      	beq.n	80050f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fc fbe1 	bl	8001890 <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fc fbdd 	bl	8001890 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050e8:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ee      	beq.n	80050d2 <HAL_RCC_OscConfig+0x4f6>
 80050f4:	e014      	b.n	8005120 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fbcb 	bl	8001890 <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fbc7 	bl	8001890 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e135      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005114:	4b62      	ldr	r3, [pc, #392]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ee      	bne.n	80050fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 812a 	beq.w	800537e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800512a:	4b5d      	ldr	r3, [pc, #372]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005132:	2b18      	cmp	r3, #24
 8005134:	f000 80ba 	beq.w	80052ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	2b02      	cmp	r3, #2
 800513e:	f040 8095 	bne.w	800526c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b57      	ldr	r3, [pc, #348]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a56      	ldr	r2, [pc, #344]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc fb9f 	bl	8001890 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fc fb9b 	bl	8001890 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e10b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005168:	4b4d      	ldr	r3, [pc, #308]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005174:	4b4a      	ldr	r3, [pc, #296]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005178:	4b4a      	ldr	r3, [pc, #296]	@ (80052a4 <HAL_RCC_OscConfig+0x6c8>)
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	430a      	orrs	r2, r1
 8005188:	4945      	ldr	r1, [pc, #276]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	628b      	str	r3, [r1, #40]	@ 0x28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	3b01      	subs	r3, #1
 8005194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	3b01      	subs	r3, #1
 800519e:	025b      	lsls	r3, r3, #9
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	3b01      	subs	r3, #1
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	3b01      	subs	r3, #1
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051be:	4938      	ldr	r1, [pc, #224]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	4a35      	ldr	r2, [pc, #212]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051d0:	4b33      	ldr	r3, [pc, #204]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d4:	4b34      	ldr	r3, [pc, #208]	@ (80052a8 <HAL_RCC_OscConfig+0x6cc>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051dc:	00d2      	lsls	r2, r2, #3
 80051de:	4930      	ldr	r1, [pc, #192]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051e4:	4b2e      	ldr	r3, [pc, #184]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	f023 020c 	bic.w	r2, r3, #12
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	492b      	ldr	r1, [pc, #172]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051f6:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	f023 0202 	bic.w	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	4927      	ldr	r1, [pc, #156]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005208:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005214:	4b22      	ldr	r3, [pc, #136]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4a21      	ldr	r2, [pc, #132]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005220:	4b1f      	ldr	r3, [pc, #124]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005226:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800522c:	4b1c      	ldr	r3, [pc, #112]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4a1b      	ldr	r2, [pc, #108]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fc fb24 	bl	8001890 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc fb20 	bl	8001890 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e090      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x670>
 800526a:	e088      	b.n	800537e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0b      	ldr	r2, [pc, #44]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc fb0a 	bl	8001890 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fb06 	bl	8001890 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e076      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005292:	4b03      	ldr	r3, [pc, #12]	@ (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x6a4>
 800529e:	e06e      	b.n	800537e <HAL_RCC_OscConfig+0x7a2>
 80052a0:	58024400 	.word	0x58024400
 80052a4:	fffffc0c 	.word	0xfffffc0c
 80052a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052ac:	4b36      	ldr	r3, [pc, #216]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052b2:	4b35      	ldr	r3, [pc, #212]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d031      	beq.n	8005324 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f003 0203 	and.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d12a      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d122      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11a      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	0a5b      	lsrs	r3, r3, #9
 80052f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d111      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d108      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e02b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005328:	4b17      	ldr	r3, [pc, #92]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 800532a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005332:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	d01f      	beq.n	800537e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800533e:	4b12      	ldr	r3, [pc, #72]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a11      	ldr	r2, [pc, #68]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800534a:	f7fc faa1 	bl	8001890 <HAL_GetTick>
 800534e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005350:	bf00      	nop
 8005352:	f7fc fa9d 	bl	8001890 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	4293      	cmp	r3, r2
 800535c:	d0f9      	beq.n	8005352 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800535e:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005362:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <HAL_RCC_OscConfig+0x7b0>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4906      	ldr	r1, [pc, #24]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 800536e:	4313      	orrs	r3, r2
 8005370:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005372:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a04      	ldr	r2, [pc, #16]	@ (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	58024400 	.word	0x58024400
 800538c:	ffff0007 	.word	0xffff0007

08005390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e19c      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b8a      	ldr	r3, [pc, #552]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b87      	ldr	r3, [pc, #540]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	4985      	ldr	r1, [pc, #532]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b83      	ldr	r3, [pc, #524]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e184      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	4b7b      	ldr	r3, [pc, #492]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053f0:	4b78      	ldr	r3, [pc, #480]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	4975      	ldr	r1, [pc, #468]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	4b70      	ldr	r3, [pc, #448]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800541a:	429a      	cmp	r2, r3
 800541c:	d908      	bls.n	8005430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800541e:	4b6d      	ldr	r3, [pc, #436]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	496a      	ldr	r1, [pc, #424]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800542c:	4313      	orrs	r3, r2
 800542e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	4b64      	ldr	r3, [pc, #400]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005448:	429a      	cmp	r2, r3
 800544a:	d908      	bls.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800544c:	4b61      	ldr	r3, [pc, #388]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	495e      	ldr	r1, [pc, #376]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	4b59      	ldr	r3, [pc, #356]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005476:	429a      	cmp	r2, r3
 8005478:	d908      	bls.n	800548c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800547a:	4b56      	ldr	r3, [pc, #344]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	4953      	ldr	r1, [pc, #332]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005488:	4313      	orrs	r3, r2
 800548a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	4b4d      	ldr	r3, [pc, #308]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d908      	bls.n	80054ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b4a      	ldr	r3, [pc, #296]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f023 020f 	bic.w	r2, r3, #15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4947      	ldr	r1, [pc, #284]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d055      	beq.n	8005572 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054c6:	4b43      	ldr	r3, [pc, #268]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4940      	ldr	r1, [pc, #256]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054e0:	4b3c      	ldr	r3, [pc, #240]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0f6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054f8:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d115      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ea      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005510:	4b30      	ldr	r3, [pc, #192]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0de      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005520:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0d6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005530:	4b28      	ldr	r3, [pc, #160]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f023 0207 	bic.w	r2, r3, #7
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4925      	ldr	r1, [pc, #148]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005542:	f7fc f9a5 	bl	8001890 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005548:	e00a      	b.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fc f9a1 	bl	8001890 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e0be      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005560:	4b1c      	ldr	r3, [pc, #112]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	429a      	cmp	r2, r3
 8005570:	d1eb      	bne.n	800554a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	429a      	cmp	r2, r3
 800558c:	d208      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558e:	4b11      	ldr	r3, [pc, #68]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f023 020f 	bic.w	r2, r3, #15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	490e      	ldr	r1, [pc, #56]	@ (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800559c:	4313      	orrs	r3, r2
 800559e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d214      	bcs.n	80055d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	4906      	ldr	r1, [pc, #24]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e086      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
 80055d0:	52002000 	.word	0x52002000
 80055d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b3f      	ldr	r3, [pc, #252]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d208      	bcs.n	8005606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055f4:	4b3c      	ldr	r3, [pc, #240]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4939      	ldr	r1, [pc, #228]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005602:	4313      	orrs	r3, r2
 8005604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	4b34      	ldr	r3, [pc, #208]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800561e:	429a      	cmp	r2, r3
 8005620:	d208      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005622:	4b31      	ldr	r3, [pc, #196]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492e      	ldr	r1, [pc, #184]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005630:	4313      	orrs	r3, r2
 8005632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b28      	ldr	r3, [pc, #160]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800564c:	429a      	cmp	r2, r3
 800564e:	d208      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005650:	4b25      	ldr	r3, [pc, #148]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4922      	ldr	r1, [pc, #136]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800565e:	4313      	orrs	r3, r2
 8005660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800567a:	429a      	cmp	r2, r3
 800567c:	d208      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4917      	ldr	r1, [pc, #92]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800568c:	4313      	orrs	r3, r2
 800568e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005690:	f000 f834 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b14      	ldr	r3, [pc, #80]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4912      	ldr	r1, [pc, #72]	@ (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056ae:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	4a0d      	ldr	r2, [pc, #52]	@ (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <HAL_RCC_ClockConfig+0x360>)
 80056c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c8:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <HAL_RCC_ClockConfig+0x364>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ce:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <HAL_RCC_ClockConfig+0x368>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fc f892 	bl	80017fc <HAL_InitTick>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	0800c54c 	.word	0x0800c54c
 80056f0:	2400007c 	.word	0x2400007c
 80056f4:	24000078 	.word	0x24000078
 80056f8:	24000080 	.word	0x24000080

080056fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	@ 0x24
 8005700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005702:	4bb3      	ldr	r3, [pc, #716]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800570a:	2b18      	cmp	r3, #24
 800570c:	f200 8155 	bhi.w	80059ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800577d 	.word	0x0800577d
 800571c:	080059bb 	.word	0x080059bb
 8005720:	080059bb 	.word	0x080059bb
 8005724:	080059bb 	.word	0x080059bb
 8005728:	080059bb 	.word	0x080059bb
 800572c:	080059bb 	.word	0x080059bb
 8005730:	080059bb 	.word	0x080059bb
 8005734:	080059bb 	.word	0x080059bb
 8005738:	080057a3 	.word	0x080057a3
 800573c:	080059bb 	.word	0x080059bb
 8005740:	080059bb 	.word	0x080059bb
 8005744:	080059bb 	.word	0x080059bb
 8005748:	080059bb 	.word	0x080059bb
 800574c:	080059bb 	.word	0x080059bb
 8005750:	080059bb 	.word	0x080059bb
 8005754:	080059bb 	.word	0x080059bb
 8005758:	080057a9 	.word	0x080057a9
 800575c:	080059bb 	.word	0x080059bb
 8005760:	080059bb 	.word	0x080059bb
 8005764:	080059bb 	.word	0x080059bb
 8005768:	080059bb 	.word	0x080059bb
 800576c:	080059bb 	.word	0x080059bb
 8005770:	080059bb 	.word	0x080059bb
 8005774:	080059bb 	.word	0x080059bb
 8005778:	080057af 	.word	0x080057af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577c:	4b94      	ldr	r3, [pc, #592]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005788:	4b91      	ldr	r3, [pc, #580]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a90      	ldr	r2, [pc, #576]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800579a:	e111      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800579c:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800579e:	61bb      	str	r3, [r7, #24]
      break;
 80057a0:	e10e      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057a2:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a4:	61bb      	str	r3, [r7, #24]
      break;
 80057a6:	e10b      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057a8:	4b8c      	ldr	r3, [pc, #560]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057aa:	61bb      	str	r3, [r7, #24]
      break;
 80057ac:	e108      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ae:	4b88      	ldr	r3, [pc, #544]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057b8:	4b85      	ldr	r3, [pc, #532]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057c4:	4b82      	ldr	r3, [pc, #520]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ce:	4b80      	ldr	r3, [pc, #512]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80e1 	beq.w	80059b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f000 8083 	beq.w	8005900 <HAL_RCC_GetSysClockFreq+0x204>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	f200 80a1 	bhi.w	8005944 <HAL_RCC_GetSysClockFreq+0x248>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x114>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d056      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800580e:	e099      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005810:	4b6f      	ldr	r3, [pc, #444]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02d      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800581c:	4b6c      	ldr	r3, [pc, #432]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	4a6b      	ldr	r2, [pc, #428]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b62      	ldr	r3, [pc, #392]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a02 	vldr	s12, [r7, #8]
 800585a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005876:	e087      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b51      	ldr	r3, [pc, #324]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ba:	e065      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b40      	ldr	r3, [pc, #256]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058fe:	e043      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b2f      	ldr	r3, [pc, #188]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005942:	e021      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b1e      	ldr	r3, [pc, #120]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005992:	3301      	adds	r3, #1
 8005994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ac:	ee17 3a90 	vmov	r3, s15
 80059b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059b2:	e005      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
      break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059ba:	4b07      	ldr	r3, [pc, #28]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059bc:	61bb      	str	r3, [r7, #24]
      break;
 80059be:	bf00      	nop
  }

  return sysclockfreq;
 80059c0:	69bb      	ldr	r3, [r7, #24]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	@ 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
 80059d4:	03d09000 	.word	0x03d09000
 80059d8:	003d0900 	.word	0x003d0900
 80059dc:	007a1200 	.word	0x007a1200
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4af42400 	.word	0x4af42400

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059f6:	f7ff fe81 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b10      	ldr	r3, [pc, #64]	@ (8005a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490f      	ldr	r1, [pc, #60]	@ (8005a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	4a09      	ldr	r2, [pc, #36]	@ (8005a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	4a07      	ldr	r2, [pc, #28]	@ (8005a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a2e:	4a07      	ldr	r2, [pc, #28]	@ (8005a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a34:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	58024400 	.word	0x58024400
 8005a44:	0800c54c 	.word	0x0800c54c
 8005a48:	2400007c 	.word	0x2400007c
 8005a4c:	24000078 	.word	0x24000078

08005a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a54:	f7ff ffcc 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4904      	ldr	r1, [pc, #16]	@ (8005a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	58024400 	.word	0x58024400
 8005a78:	0800c54c 	.word	0x0800c54c

08005a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a80:	f7ff ffb6 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4904      	ldr	r1, [pc, #16]	@ (8005aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	0800c54c 	.word	0x0800c54c

08005aa8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aac:	b0c6      	sub	sp, #280	@ 0x118
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005acc:	2500      	movs	r5, #0
 8005ace:	ea54 0305 	orrs.w	r3, r4, r5
 8005ad2:	d049      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ade:	d02f      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae4:	d828      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aea:	d01a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af0:	d822      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afa:	d007      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005afc:	e01c      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afe:	4bab      	ldr	r3, [pc, #684]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	4aaa      	ldr	r2, [pc, #680]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b0a:	e01a      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	3308      	adds	r3, #8
 8005b12:	2102      	movs	r1, #2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 fc25 	bl	8007364 <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b20:	e00f      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b26:	3328      	adds	r3, #40	@ 0x28
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fccc 	bl	80074c8 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b36:	e004      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b4a:	4b98      	ldr	r3, [pc, #608]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b58:	4a94      	ldr	r2, [pc, #592]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b5e:	e003      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b74:	f04f 0900 	mov.w	r9, #0
 8005b78:	ea58 0309 	orrs.w	r3, r8, r9
 8005b7c:	d047      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d82a      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005ba5 	.word	0x08005ba5
 8005b94:	08005bb3 	.word	0x08005bb3
 8005b98:	08005bc9 	.word	0x08005bc9
 8005b9c:	08005be7 	.word	0x08005be7
 8005ba0:	08005be7 	.word	0x08005be7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba4:	4b81      	ldr	r3, [pc, #516]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	4a80      	ldr	r2, [pc, #512]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb0:	e01a      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fbd2 	bl	8007364 <RCCEx_PLL2_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bc6:	e00f      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	3328      	adds	r3, #40	@ 0x28
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fc79 	bl	80074c8 <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e004      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bf0:	4b6e      	ldr	r3, [pc, #440]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf4:	f023 0107 	bic.w	r1, r3, #7
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfe:	4a6b      	ldr	r2, [pc, #428]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c04:	e003      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c1a:	f04f 0b00 	mov.w	fp, #0
 8005c1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c22:	d05b      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c2c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c30:	d03b      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c36:	d834      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c3c:	d037      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c42:	d82e      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c48:	d033      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c4e:	d828      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c54:	d01a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c5a:	d822      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c66:	e01c      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b50      	ldr	r3, [pc, #320]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c74:	e01e      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fb70 	bl	8007364 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c8a:	e013      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	3328      	adds	r3, #40	@ 0x28
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fc17 	bl	80074c8 <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ccc:	4a37      	ldr	r2, [pc, #220]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d05d      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d08:	d03b      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d0a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d0e:	d834      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d14:	d037      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d1a:	d82e      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d20:	d033      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d26:	d828      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d2c:	d01a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d32:	d822      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d3c:	d007      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d3e:	e01c      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	4a19      	ldr	r2, [pc, #100]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e01e      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d52:	3308      	adds	r3, #8
 8005d54:	2100      	movs	r1, #0
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fb04 	bl	8007364 <RCCEx_PLL2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d62:	e013      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d68:	3328      	adds	r3, #40	@ 0x28
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fbab 	bl	80074c8 <RCCEx_PLL3_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d78:	e008      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d80:	e004      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10d      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005da4:	4a01      	ldr	r2, [pc, #4]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005daa:	e005      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005dc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	d03a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	2b30      	cmp	r3, #48	@ 0x30
 8005de0:	d01f      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005de2:	2b30      	cmp	r3, #48	@ 0x30
 8005de4:	d819      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d00c      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d815      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d019      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d111      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df6:	4baa      	ldr	r3, [pc, #680]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	4aa9      	ldr	r2, [pc, #676]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e02:	e011      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	3308      	adds	r3, #8
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 faa9 	bl	8007364 <RCCEx_PLL2_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e18:	e006      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e20:	e002      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e30:	4b9b      	ldr	r3, [pc, #620]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3e:	4a98      	ldr	r2, [pc, #608]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e40:	430b      	orrs	r3, r1
 8005e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e44:	e003      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	d051      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e78:	d035      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e7e:	d82e      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e84:	d031      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e8a:	d828      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e90:	d01a      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e96:	d822      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea0:	d007      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ea2:	e01c      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	4a7d      	ldr	r2, [pc, #500]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e01c      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fa52 	bl	8007364 <RCCEx_PLL2_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e011      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ecc:	3328      	adds	r3, #40	@ 0x28
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 faf9 	bl	80074c8 <RCCEx_PLL3_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005edc:	e006      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ee4:	e002      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f02:	4a67      	ldr	r2, [pc, #412]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d053      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3c:	d033      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f42:	d82c      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f48:	d02f      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f4e:	d826      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f54:	d02b      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f5a:	d820      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f60:	d012      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f66:	d81a      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d022      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f70:	d115      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f76:	3308      	adds	r3, #8
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f9f2 	bl	8007364 <RCCEx_PLL2_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f86:	e015      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8c:	3328      	adds	r3, #40	@ 0x28
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fa99 	bl	80074c8 <RCCEx_PLL3_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fbc:	4b38      	ldr	r3, [pc, #224]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fca:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fd0:	e003      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ff0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d058      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006006:	d033      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800600c:	d82c      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006012:	d02f      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006018:	d826      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800601a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800601e:	d02b      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006024:	d820      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006030:	d81a      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d022      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800603a:	d115      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	3308      	adds	r3, #8
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f98d 	bl	8007364 <RCCEx_PLL2_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006050:	e015      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	3328      	adds	r3, #40	@ 0x28
 8006058:	2101      	movs	r1, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f001 fa34 	bl	80074c8 <RCCEx_PLL3_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006066:	e00a      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800606e:	e006      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006070:	bf00      	nop
 8006072:	e004      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006074:	bf00      	nop
 8006076:	e002      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800607c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10e      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006096:	4a02      	ldr	r2, [pc, #8]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006098:	430b      	orrs	r3, r1
 800609a:	6593      	str	r3, [r2, #88]	@ 0x58
 800609c:	e006      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	d037      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d6:	d00e      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060dc:	d816      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d018      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e6:	d111      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e8:	4bc4      	ldr	r3, [pc, #784]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	4ac3      	ldr	r2, [pc, #780]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060f4:	e00f      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fa:	3308      	adds	r3, #8
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f930 	bl	8007364 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800610a:	e004      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006112:	e000      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800611e:	4bb7      	ldr	r3, [pc, #732]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006122:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800612c:	4ab3      	ldr	r2, [pc, #716]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800612e:	430b      	orrs	r3, r1
 8006130:	6513      	str	r3, [r2, #80]	@ 0x50
 8006132:	e003      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800614c:	2300      	movs	r3, #0
 800614e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006152:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d039      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006162:	2b03      	cmp	r3, #3
 8006164:	d81c      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006166:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	080061a9 	.word	0x080061a9
 8006170:	0800617d 	.word	0x0800617d
 8006174:	0800618b 	.word	0x0800618b
 8006178:	080061a9 	.word	0x080061a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617c:	4b9f      	ldr	r3, [pc, #636]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4a9e      	ldr	r2, [pc, #632]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006188:	e00f      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	3308      	adds	r3, #8
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f8e6 	bl	8007364 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800619e:	e004      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061a6:	e000      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061b2:	4b92      	ldr	r3, [pc, #584]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b6:	f023 0103 	bic.w	r1, r3, #3
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c0:	4a8e      	ldr	r2, [pc, #568]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c2:	430b      	orrs	r3, r1
 80061c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f000 8099 	beq.w	8006324 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f2:	4b83      	ldr	r3, [pc, #524]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a82      	ldr	r2, [pc, #520]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061fe:	f7fb fb47 	bl	8001890 <HAL_GetTick>
 8006202:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006206:	e00b      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006208:	f7fb fb42 	bl	8001890 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b64      	cmp	r3, #100	@ 0x64
 8006216:	d903      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800621e:	e005      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006220:	4b77      	ldr	r3, [pc, #476]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ed      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800622c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006230:	2b00      	cmp	r3, #0
 8006232:	d173      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006234:	4b71      	ldr	r3, [pc, #452]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006236:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006240:	4053      	eors	r3, r2
 8006242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006246:	2b00      	cmp	r3, #0
 8006248:	d015      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800624a:	4b6c      	ldr	r3, [pc, #432]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006252:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006256:	4b69      	ldr	r3, [pc, #420]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	4a68      	ldr	r2, [pc, #416]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006260:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006262:	4b66      	ldr	r3, [pc, #408]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006266:	4a65      	ldr	r2, [pc, #404]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800626c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800626e:	4a63      	ldr	r2, [pc, #396]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006274:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800627e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006282:	d118      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fb fb04 	bl	8001890 <HAL_GetTick>
 8006288:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628c:	e00d      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fb faff 	bl	8001890 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800629e:	429a      	cmp	r2, r3
 80062a0:	d903      	bls.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80062a8:	e005      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062aa:	4b54      	ldr	r3, [pc, #336]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0eb      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d129      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ce:	d10e      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062d0:	4b4a      	ldr	r3, [pc, #296]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062e0:	091a      	lsrs	r2, r3, #4
 80062e2:	4b48      	ldr	r3, [pc, #288]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	4a45      	ldr	r2, [pc, #276]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6113      	str	r3, [r2, #16]
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062ee:	4b43      	ldr	r3, [pc, #268]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	4a42      	ldr	r2, [pc, #264]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062f8:	6113      	str	r3, [r2, #16]
 80062fa:	4b40      	ldr	r3, [pc, #256]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630a:	4a3c      	ldr	r2, [pc, #240]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800630c:	430b      	orrs	r3, r1
 800630e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006310:	e008      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006312:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006316:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800631a:	e003      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006320:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f002 0301 	and.w	r3, r2, #1
 8006330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800633a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	f000 808f 	beq.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800634c:	2b28      	cmp	r3, #40	@ 0x28
 800634e:	d871      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006350:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800643d 	.word	0x0800643d
 800635c:	08006435 	.word	0x08006435
 8006360:	08006435 	.word	0x08006435
 8006364:	08006435 	.word	0x08006435
 8006368:	08006435 	.word	0x08006435
 800636c:	08006435 	.word	0x08006435
 8006370:	08006435 	.word	0x08006435
 8006374:	08006435 	.word	0x08006435
 8006378:	08006409 	.word	0x08006409
 800637c:	08006435 	.word	0x08006435
 8006380:	08006435 	.word	0x08006435
 8006384:	08006435 	.word	0x08006435
 8006388:	08006435 	.word	0x08006435
 800638c:	08006435 	.word	0x08006435
 8006390:	08006435 	.word	0x08006435
 8006394:	08006435 	.word	0x08006435
 8006398:	0800641f 	.word	0x0800641f
 800639c:	08006435 	.word	0x08006435
 80063a0:	08006435 	.word	0x08006435
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006435 	.word	0x08006435
 80063ac:	08006435 	.word	0x08006435
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006435 	.word	0x08006435
 80063b8:	0800643d 	.word	0x0800643d
 80063bc:	08006435 	.word	0x08006435
 80063c0:	08006435 	.word	0x08006435
 80063c4:	08006435 	.word	0x08006435
 80063c8:	08006435 	.word	0x08006435
 80063cc:	08006435 	.word	0x08006435
 80063d0:	08006435 	.word	0x08006435
 80063d4:	08006435 	.word	0x08006435
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006435 	.word	0x08006435
 80063f4:	08006435 	.word	0x08006435
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	58024400 	.word	0x58024400
 8006400:	58024800 	.word	0x58024800
 8006404:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	3308      	adds	r3, #8
 800640e:	2101      	movs	r1, #1
 8006410:	4618      	mov	r0, r3
 8006412:	f000 ffa7 	bl	8007364 <RCCEx_PLL2_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800641c:	e00f      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006422:	3328      	adds	r3, #40	@ 0x28
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f001 f84e 	bl	80074c8 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006432:	e004      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800643c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006446:	4bbf      	ldr	r3, [pc, #764]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006454:	4abb      	ldr	r2, [pc, #748]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006456:	430b      	orrs	r3, r1
 8006458:	6553      	str	r3, [r2, #84]	@ 0x54
 800645a:	e003      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006460:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f002 0302 	and.w	r3, r2, #2
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800647a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800647e:	460b      	mov	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	d041      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648a:	2b05      	cmp	r3, #5
 800648c:	d824      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064ad 	.word	0x080064ad
 800649c:	080064c3 	.word	0x080064c3
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b0:	3308      	adds	r3, #8
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 ff55 	bl	8007364 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064c0:	e00f      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c6:	3328      	adds	r3, #40	@ 0x28
 80064c8:	2101      	movs	r1, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fffc 	bl	80074c8 <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ea:	4b96      	ldr	r3, [pc, #600]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ee:	f023 0107 	bic.w	r1, r3, #7
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f8:	4a92      	ldr	r2, [pc, #584]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 0304 	and.w	r3, r2, #4
 8006514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800651e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d044      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006530:	2b05      	cmp	r3, #5
 8006532:	d825      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006589 	.word	0x08006589
 8006540:	08006555 	.word	0x08006555
 8006544:	0800656b 	.word	0x0800656b
 8006548:	08006589 	.word	0x08006589
 800654c:	08006589 	.word	0x08006589
 8006550:	08006589 	.word	0x08006589
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	3308      	adds	r3, #8
 800655a:	2101      	movs	r1, #1
 800655c:	4618      	mov	r0, r3
 800655e:	f000 ff01 	bl	8007364 <RCCEx_PLL2_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006568:	e00f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656e:	3328      	adds	r3, #40	@ 0x28
 8006570:	2101      	movs	r1, #1
 8006572:	4618      	mov	r0, r3
 8006574:	f000 ffa8 	bl	80074c8 <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006586:	e000      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006592:	4b6c      	ldr	r3, [pc, #432]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	f023 0107 	bic.w	r1, r3, #7
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a2:	4a68      	ldr	r2, [pc, #416]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f002 0320 	and.w	r3, r2, #32
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d055      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065de:	d033      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e4:	d82c      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d02f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f0:	d826      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065f6:	d02b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065fc:	d820      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006602:	d012      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006608:	d81a      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d022      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800660e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006612:	d115      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	3308      	adds	r3, #8
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fea1 	bl	8007364 <RCCEx_PLL2_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006628:	e015      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	3328      	adds	r3, #40	@ 0x28
 8006630:	2102      	movs	r1, #2
 8006632:	4618      	mov	r0, r3
 8006634:	f000 ff48 	bl	80074c8 <RCCEx_PLL3_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800663e:	e00a      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006648:	bf00      	nop
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800665e:	4b39      	ldr	r3, [pc, #228]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800666e:	4a35      	ldr	r2, [pc, #212]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6553      	str	r3, [r2, #84]	@ 0x54
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800668a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006694:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d058      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066aa:	d033      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066b0:	d82c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b6:	d02f      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066bc:	d826      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c2:	d02b      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c8:	d820      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ce:	d012      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d4:	d81a      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d022      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066de:	d115      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	3308      	adds	r3, #8
 80066e6:	2100      	movs	r1, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fe3b 	bl	8007364 <RCCEx_PLL2_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066f4:	e015      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	3328      	adds	r3, #40	@ 0x28
 80066fc:	2102      	movs	r1, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fee2 	bl	80074c8 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800670a:	e00a      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006712:	e006      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006714:	bf00      	nop
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800673a:	4a02      	ldr	r2, [pc, #8]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800673c:	430b      	orrs	r3, r1
 800673e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006740:	e006      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800674c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800675c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006766:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d055      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006778:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800677c:	d033      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800677e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006782:	d82c      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006788:	d02f      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800678a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800678e:	d826      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006790:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006794:	d02b      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006796:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800679a:	d820      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800679c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067a0:	d012      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067a6:	d81a      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d022      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b0:	d115      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	3308      	adds	r3, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fdd2 	bl	8007364 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067c6:	e015      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	3328      	adds	r3, #40	@ 0x28
 80067ce:	2102      	movs	r1, #2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fe79 	bl	80074c8 <RCCEx_PLL3_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067dc:	e00a      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067e6:	bf00      	nop
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067fc:	4ba0      	ldr	r3, [pc, #640]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800680c:	4a9c      	ldr	r2, [pc, #624]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800680e:	430b      	orrs	r3, r1
 8006810:	6593      	str	r3, [r2, #88]	@ 0x58
 8006812:	e003      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f002 0308 	and.w	r3, r2, #8
 8006828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006832:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d01e      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006848:	d10c      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	3328      	adds	r3, #40	@ 0x28
 8006850:	2102      	movs	r1, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fe38 	bl	80074c8 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006864:	4b86      	ldr	r3, [pc, #536]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006868:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006874:	4a82      	ldr	r2, [pc, #520]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006876:	430b      	orrs	r3, r1
 8006878:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f002 0310 	and.w	r3, r2, #16
 8006886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800688a:	2300      	movs	r3, #0
 800688c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006890:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006894:	460b      	mov	r3, r1
 8006896:	4313      	orrs	r3, r2
 8006898:	d01e      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a6:	d10c      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	3328      	adds	r3, #40	@ 0x28
 80068ae:	2102      	movs	r1, #2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fe09 	bl	80074c8 <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068c2:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068e6:	2300      	movs	r3, #0
 80068e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d03e      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006900:	d022      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006906:	d81b      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d00b      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006912:	e015      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	3308      	adds	r3, #8
 800691a:	2100      	movs	r1, #0
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fd21 	bl	8007364 <RCCEx_PLL2_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006928:	e00f      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692e:	3328      	adds	r3, #40	@ 0x28
 8006930:	2102      	movs	r1, #2
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fdc8 	bl	80074c8 <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800693e:	e004      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006952:	4b4b      	ldr	r3, [pc, #300]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006956:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006962:	4a47      	ldr	r2, [pc, #284]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6593      	str	r3, [r2, #88]	@ 0x58
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800696e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800697e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006980:	2300      	movs	r3, #0
 8006982:	677b      	str	r3, [r7, #116]	@ 0x74
 8006984:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d03b      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800699a:	d01f      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800699c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069a0:	d818      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a6:	d003      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ac:	d007      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069ae:	e011      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b0:	4b33      	ldr	r3, [pc, #204]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	4a32      	ldr	r2, [pc, #200]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069bc:	e00f      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	3328      	adds	r3, #40	@ 0x28
 80069c4:	2101      	movs	r1, #1
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fd7e 	bl	80074c8 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069d2:	e004      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069e6:	4b26      	ldr	r3, [pc, #152]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f6:	4a22      	ldr	r2, [pc, #136]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a14:	2300      	movs	r3, #0
 8006a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d034      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a30:	d007      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a32:	e011      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a34:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	4a11      	ldr	r2, [pc, #68]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a40:	e00e      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	3308      	adds	r3, #8
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc8a 	bl	8007364 <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a76:	4a02      	ldr	r2, [pc, #8]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	3328      	adds	r3, #40	@ 0x28
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fd09 	bl	80074c8 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4313      	orrs	r3, r2
 8006adc:	d036      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae8:	d018      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d811      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af4:	d014      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006afa:	d80b      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d011      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b04:	d106      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b06:	4bb7      	ldr	r3, [pc, #732]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	4ab6      	ldr	r2, [pc, #728]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b12:	e008      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b2e:	4bad      	ldr	r3, [pc, #692]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b3c:	4aa9      	ldr	r2, [pc, #676]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b62:	460b      	mov	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b68:	4b9e      	ldr	r3, [pc, #632]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b76:	4a9b      	ldr	r2, [pc, #620]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b92:	460b      	mov	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b98:	4b92      	ldr	r3, [pc, #584]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ba6:	4a8f      	ldr	r2, [pc, #572]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bba:	2300      	movs	r3, #0
 8006bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bc8:	4b86      	ldr	r3, [pc, #536]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	4a85      	ldr	r2, [pc, #532]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bd2:	6113      	str	r3, [r2, #16]
 8006bd4:	4b83      	ldr	r3, [pc, #524]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd6:	6919      	ldr	r1, [r3, #16]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006be0:	4a80      	ldr	r2, [pc, #512]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c02:	4b78      	ldr	r3, [pc, #480]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c10:	4a74      	ldr	r2, [pc, #464]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c12:	430b      	orrs	r3, r1
 8006c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c32:	4b6c      	ldr	r3, [pc, #432]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c42:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	2100      	movs	r1, #0
 8006c52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d011      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fb79 	bl	8007364 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	2100      	movs	r1, #0
 8006c92:	6239      	str	r1, [r7, #32]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d011      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fb59 	bl	8007364 <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	61b9      	str	r1, [r7, #24]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d011      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce8:	3308      	adds	r3, #8
 8006cea:	2102      	movs	r1, #2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fb39 	bl	8007364 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	2100      	movs	r1, #0
 8006d12:	6139      	str	r1, [r7, #16]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d011      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fbcb 	bl	80074c8 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	2100      	movs	r1, #0
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d011      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	3328      	adds	r3, #40	@ 0x28
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fbab 	bl	80074c8 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	2100      	movs	r1, #0
 8006d92:	6039      	str	r1, [r7, #0]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d011      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	3328      	adds	r3, #40	@ 0x28
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fb8b 	bl	80074c8 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006dc8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400

08006de8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dec:	f7fe fe00 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	4904      	ldr	r1, [pc, #16]	@ (8006e10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	0800c54c 	.word	0x0800c54c

08006e14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	@ 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e1c:	4ba1      	ldr	r3, [pc, #644]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e26:	4b9f      	ldr	r3, [pc, #636]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	0b1b      	lsrs	r3, r3, #12
 8006e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e32:	4b9c      	ldr	r3, [pc, #624]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e3e:	4b99      	ldr	r3, [pc, #612]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8111 	beq.w	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f000 8083 	beq.w	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f200 80a1 	bhi.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d056      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e7e:	e099      	b.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b88      	ldr	r3, [pc, #544]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e8c:	4b85      	ldr	r3, [pc, #532]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	4a84      	ldr	r2, [pc, #528]	@ (80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ee6:	e087      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b6a      	ldr	r3, [pc, #424]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f2a:	e065      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b59      	ldr	r3, [pc, #356]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6e:	e043      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b48      	ldr	r3, [pc, #288]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e021      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b37      	ldr	r3, [pc, #220]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffc:	0a5b      	lsrs	r3, r3, #9
 8006ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800700e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007012:	edd7 6a07 	vldr	s13, [r7, #28]
 8007016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007026:	4b1f      	ldr	r3, [pc, #124]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007040:	edd7 6a07 	vldr	s13, [r7, #28]
 8007044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704c:	ee17 2a90 	vmov	r2, s15
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007054:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	0e1b      	lsrs	r3, r3, #24
 800705a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800706a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800706e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707a:	ee17 2a90 	vmov	r2, s15
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007082:	e008      	b.n	8007096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
}
 8007096:	bf00      	nop
 8007098:	3724      	adds	r7, #36	@ 0x24
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	03d09000 	.word	0x03d09000
 80070ac:	46000000 	.word	0x46000000
 80070b0:	4c742400 	.word	0x4c742400
 80070b4:	4a742400 	.word	0x4a742400
 80070b8:	4af42400 	.word	0x4af42400

080070bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070bc:	b480      	push	{r7}
 80070be:	b089      	sub	sp, #36	@ 0x24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c4:	4ba1      	ldr	r3, [pc, #644]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070ce:	4b9f      	ldr	r3, [pc, #636]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	0d1b      	lsrs	r3, r3, #20
 80070d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070da:	4b9c      	ldr	r3, [pc, #624]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070e6:	4b99      	ldr	r3, [pc, #612]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8111 	beq.w	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b02      	cmp	r3, #2
 800710e:	f000 8083 	beq.w	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b02      	cmp	r3, #2
 8007116:	f200 80a1 	bhi.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d056      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007126:	e099      	b.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007128:	4b88      	ldr	r3, [pc, #544]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d02d      	beq.n	8007190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007134:	4b85      	ldr	r3, [pc, #532]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	4a84      	ldr	r2, [pc, #528]	@ (8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
 8007144:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715e:	4b7b      	ldr	r3, [pc, #492]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007172:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800718e:	e087      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b6a      	ldr	r3, [pc, #424]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d2:	e065      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800735c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b59      	ldr	r3, [pc, #356]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e043      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b48      	ldr	r3, [pc, #288]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e021      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800735c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b37      	ldr	r3, [pc, #220]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072a0:	4b2a      	ldr	r3, [pc, #168]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	0a5b      	lsrs	r3, r3, #9
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072ce:	4b1f      	ldr	r3, [pc, #124]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072fc:	4b13      	ldr	r3, [pc, #76]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	0e1b      	lsrs	r3, r3, #24
 8007302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007316:	edd7 6a07 	vldr	s13, [r7, #28]
 800731a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007322:	ee17 2a90 	vmov	r2, s15
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800732a:	e008      	b.n	800733e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
}
 800733e:	bf00      	nop
 8007340:	3724      	adds	r7, #36	@ 0x24
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400
 8007350:	03d09000 	.word	0x03d09000
 8007354:	46000000 	.word	0x46000000
 8007358:	4c742400 	.word	0x4c742400
 800735c:	4a742400 	.word	0x4a742400
 8007360:	4af42400 	.word	0x4af42400

08007364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007372:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d101      	bne.n	8007382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007382:	4b4f      	ldr	r3, [pc, #316]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4e      	ldr	r2, [pc, #312]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007388:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fa fa7f 	bl	8001890 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007396:	f7fa fa7b 	bl	8001890 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e086      	b.n	80074b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073a8:	4b45      	ldr	r3, [pc, #276]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073b4:	4b42      	ldr	r3, [pc, #264]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	031b      	lsls	r3, r3, #12
 80073c2:	493f      	ldr	r1, [pc, #252]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	b29b      	uxth	r3, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f8:	4931      	ldr	r1, [pc, #196]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073fe:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492d      	ldr	r1, [pc, #180]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007410:	4b2b      	ldr	r3, [pc, #172]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	f023 0220 	bic.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4928      	ldr	r1, [pc, #160]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007422:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007432:	4b24      	ldr	r3, [pc, #144]	@ (80074c4 <RCCEx_PLL2_Config+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69d2      	ldr	r2, [r2, #28]
 800743a:	00d2      	lsls	r2, r2, #3
 800743c:	4920      	ldr	r1, [pc, #128]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007448:	f043 0310 	orr.w	r3, r3, #16
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800745a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e00f      	b.n	8007482 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a14      	ldr	r2, [pc, #80]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007474:	e005      	b.n	8007482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 800747c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007482:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0e      	ldr	r2, [pc, #56]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 8007488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fa f9ff 	bl	8001890 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007496:	f7fa f9fb 	bl	8001890 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <RCCEx_PLL2_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	ffff0007 	.word	0xffff0007

080074c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074d6:	4b53      	ldr	r3, [pc, #332]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d101      	bne.n	80074e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e099      	b.n	800761a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f2:	f7fa f9cd 	bl	8001890 <HAL_GetTick>
 80074f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074f8:	e008      	b.n	800750c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074fa:	f7fa f9c9 	bl	8001890 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e086      	b.n	800761a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800750c:	4b45      	ldr	r3, [pc, #276]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f0      	bne.n	80074fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007518:	4b42      	ldr	r3, [pc, #264]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	051b      	lsls	r3, r3, #20
 8007526:	493f      	ldr	r1, [pc, #252]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007528:	4313      	orrs	r3, r2
 800752a:	628b      	str	r3, [r1, #40]	@ 0x28
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	3b01      	subs	r3, #1
 8007532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	3b01      	subs	r3, #1
 800753c:	025b      	lsls	r3, r3, #9
 800753e:	b29b      	uxth	r3, r3
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	3b01      	subs	r3, #1
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	3b01      	subs	r3, #1
 8007556:	061b      	lsls	r3, r3, #24
 8007558:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800755c:	4931      	ldr	r1, [pc, #196]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007562:	4b30      	ldr	r3, [pc, #192]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	492d      	ldr	r1, [pc, #180]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007574:	4b2b      	ldr	r3, [pc, #172]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	4928      	ldr	r1, [pc, #160]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007582:	4313      	orrs	r3, r2
 8007584:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007586:	4b27      	ldr	r3, [pc, #156]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4a26      	ldr	r2, [pc, #152]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 800758c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007592:	4b24      	ldr	r3, [pc, #144]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 8007594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007596:	4b24      	ldr	r3, [pc, #144]	@ (8007628 <RCCEx_PLL3_Config+0x160>)
 8007598:	4013      	ands	r3, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	69d2      	ldr	r2, [r2, #28]
 800759e:	00d2      	lsls	r2, r2, #3
 80075a0:	4920      	ldr	r1, [pc, #128]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a19      	ldr	r2, [pc, #100]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075c4:	e00f      	b.n	80075e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d106      	bne.n	80075da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075cc:	4b15      	ldr	r3, [pc, #84]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	4a14      	ldr	r2, [pc, #80]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075d8:	e005      	b.n	80075e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075da:	4b12      	ldr	r3, [pc, #72]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f2:	f7fa f94d 	bl	8001890 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075f8:	e008      	b.n	800760c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075fa:	f7fa f949 	bl	8001890 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e006      	b.n	800761a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800760c:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <RCCEx_PLL3_Config+0x15c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0f0      	beq.n	80075fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	58024400 	.word	0x58024400
 8007628:	ffff0007 	.word	0xffff0007

0800762c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d071      	beq.n	8007722 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7f9 fd82 	bl	800115c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b10      	cmp	r3, #16
 800766c:	d050      	beq.n	8007710 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	22ca      	movs	r2, #202	@ 0xca
 8007674:	625a      	str	r2, [r3, #36]	@ 0x24
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2253      	movs	r2, #83	@ 0x53
 800767c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fbce 	bl	8007e20 <RTC_EnterInitMode>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d124      	bne.n	80076d8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6899      	ldr	r1, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	4b24      	ldr	r3, [pc, #144]	@ (800772c <HAL_RTC_Init+0x100>)
 800769a:	400b      	ands	r3, r1
 800769c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6899      	ldr	r1, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	0419      	lsls	r1, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fbda 	bl	8007e88 <RTC_ExitInitMode>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d113      	bne.n	8007706 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0203 	bic.w	r2, r2, #3
 80076ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	22ff      	movs	r2, #255	@ 0xff
 800770c:	625a      	str	r2, [r3, #36]	@ 0x24
 800770e:	e001      	b.n	8007714 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	ff8fffbf 	.word	0xff8fffbf

08007730 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007730:	b590      	push	{r4, r7, lr}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_RTC_SetTime+0x1a>
 8007746:	2302      	movs	r3, #2
 8007748:	e089      	b.n	800785e <HAL_RTC_SetTime+0x12e>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	22ca      	movs	r2, #202	@ 0xca
 8007760:	625a      	str	r2, [r3, #36]	@ 0x24
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2253      	movs	r2, #83	@ 0x53
 8007768:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fb58 	bl	8007e20 <RTC_EnterInitMode>
 8007770:	4603      	mov	r3, r0
 8007772:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d161      	bne.n	800783e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d126      	bne.n	80077ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fbb3 	bl	8007f04 <RTC_ByteToBcd2>
 800779e:	4603      	mov	r3, r0
 80077a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fbac 	bl	8007f04 <RTC_ByteToBcd2>
 80077ac:	4603      	mov	r3, r0
 80077ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	789b      	ldrb	r3, [r3, #2]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fba4 	bl	8007f04 <RTC_ByteToBcd2>
 80077bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e018      	b.n	8007800 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	78db      	ldrb	r3, [r3, #3]
 80077fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <HAL_RTC_SetTime+0x138>)
 8007808:	400b      	ands	r3, r1
 800780a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800781a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	431a      	orrs	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fb27 	bl	8007e88 <RTC_ExitInitMode>
 800783a:	4603      	mov	r3, r0
 800783c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	22ff      	movs	r2, #255	@ 0xff
 8007844:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007846:	7cfb      	ldrb	r3, [r7, #19]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800785c:	7cfb      	ldrb	r3, [r7, #19]
}
 800785e:	4618      	mov	r0, r3
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd90      	pop	{r4, r7, pc}
 8007866:	bf00      	nop
 8007868:	007f7f7f 	.word	0x007f7f7f

0800786c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b22      	ldr	r3, [pc, #136]	@ (8007920 <HAL_RTC_GetTime+0xb4>)
 8007898:	4013      	ands	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	0d9b      	lsrs	r3, r3, #22
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11a      	bne.n	8007916 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fb2d 	bl	8007f44 <RTC_Bcd2ToByte>
 80078ea:	4603      	mov	r3, r0
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fb24 	bl	8007f44 <RTC_Bcd2ToByte>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	789b      	ldrb	r3, [r3, #2]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fb1b 	bl	8007f44 <RTC_Bcd2ToByte>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	007f7f7f 	.word	0x007f7f7f

08007924 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_RTC_SetDate+0x1a>
 800793a:	2302      	movs	r3, #2
 800793c:	e073      	b.n	8007a26 <HAL_RTC_SetDate+0x102>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10e      	bne.n	8007972 <HAL_RTC_SetDate+0x4e>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	f023 0310 	bic.w	r3, r3, #16
 8007968:	b2db      	uxtb	r3, r3
 800796a:	330a      	adds	r3, #10
 800796c:	b2da      	uxtb	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11c      	bne.n	80079b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fac1 	bl	8007f04 <RTC_ByteToBcd2>
 8007982:	4603      	mov	r3, r0
 8007984:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 faba 	bl	8007f04 <RTC_ByteToBcd2>
 8007990:	4603      	mov	r3, r0
 8007992:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007994:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	789b      	ldrb	r3, [r3, #2]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fab2 	bl	8007f04 <RTC_ByteToBcd2>
 80079a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	e00e      	b.n	80079d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	78db      	ldrb	r3, [r3, #3]
 80079b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	22ca      	movs	r2, #202	@ 0xca
 80079d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2253      	movs	r2, #83	@ 0x53
 80079de:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fa1d 	bl	8007e20 <RTC_EnterInitMode>
 80079e6:	4603      	mov	r3, r0
 80079e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079ea:	7cfb      	ldrb	r3, [r7, #19]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	6979      	ldr	r1, [r7, #20]
 80079f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <HAL_RTC_SetDate+0x10c>)
 80079f8:	400b      	ands	r3, r1
 80079fa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fa43 	bl	8007e88 <RTC_ExitInitMode>
 8007a02:	4603      	mov	r3, r0
 8007a04:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	22ff      	movs	r2, #255	@ 0xff
 8007a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a24:	7cfb      	ldrb	r3, [r7, #19]


}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd90      	pop	{r4, r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	00ffff3f 	.word	0x00ffff3f

08007a34 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b21      	ldr	r3, [pc, #132]	@ (8007acc <HAL_RTC_GetDate+0x98>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	0b5b      	lsrs	r3, r3, #13
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11a      	bne.n	8007ac0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fa58 	bl	8007f44 <RTC_Bcd2ToByte>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fa4f 	bl	8007f44 <RTC_Bcd2ToByte>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	789b      	ldrb	r3, [r3, #2]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fa46 	bl	8007f44 <RTC_Bcd2ToByte>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	461a      	mov	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	00ffff3f 	.word	0x00ffff3f

08007ad0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b089      	sub	sp, #36	@ 0x24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_RTC_SetAlarm_IT+0x1a>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e129      	b.n	8007d3e <HAL_RTC_SetAlarm_IT+0x26e>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d137      	bne.n	8007b70 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f9f3 	bl	8007f04 <RTC_ByteToBcd2>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f9ec 	bl	8007f04 <RTC_ByteToBcd2>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b30:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	789b      	ldrb	r3, [r3, #2]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f9e4 	bl	8007f04 <RTC_ByteToBcd2>
 8007b3c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b3e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b48:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f9d6 	bl	8007f04 <RTC_ByteToBcd2>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	e023      	b.n	8007bb8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b90:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	78db      	ldrb	r3, [r3, #3]
 8007b9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ba6:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007ba8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007bae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	22ca      	movs	r2, #202	@ 0xca
 8007bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2253      	movs	r2, #83	@ 0x53
 8007bd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bdc:	d14a      	bne.n	8007c74 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007bfe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c00:	f7f9 fe46 	bl	8001890 <HAL_GetTick>
 8007c04:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c06:	e015      	b.n	8007c34 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c08:	f7f9 fe42 	bl	8001890 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c16:	d90d      	bls.n	8007c34 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	22ff      	movs	r2, #255	@ 0xff
 8007c1e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2203      	movs	r2, #3
 8007c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e084      	b.n	8007d3e <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0e2      	beq.n	8007c08 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c60:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c70:	609a      	str	r2, [r3, #8]
 8007c72:	e049      	b.n	8007d08 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c82:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007c94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c96:	f7f9 fdfb 	bl	8001890 <HAL_GetTick>
 8007c9a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c9c:	e015      	b.n	8007cca <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c9e:	f7f9 fdf7 	bl	8001890 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cac:	d90d      	bls.n	8007cca <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	22ff      	movs	r2, #255	@ 0xff
 8007cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e039      	b.n	8007d3e <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0e2      	beq.n	8007c9e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cf6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d06:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <HAL_RTC_SetAlarm_IT+0x278>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <HAL_RTC_SetAlarm_IT+0x278>)
 8007d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d12:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d22:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	22ff      	movs	r2, #255	@ 0xff
 8007d2a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3724      	adds	r7, #36	@ 0x24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}
 8007d46:	bf00      	nop
 8007d48:	58000080 	.word	0x58000080

08007d4c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007d54:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007d56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d5a:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#else
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d012      	beq.n	8007d90 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007d88:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f002 fd3e 	bl	800a80c <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d012      	beq.n	8007dc4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007dbc:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9ca 	bl	8008158 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	58000080 	.word	0x58000080

08007dd8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e1c <HAL_RTC_WaitForSynchro+0x44>)
 8007de6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007de8:	f7f9 fd52 	bl	8001890 <HAL_GetTick>
 8007dec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dee:	e009      	b.n	8007e04 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007df0:	f7f9 fd4e 	bl	8001890 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dfe:	d901      	bls.n	8007e04 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e007      	b.n	8007e14 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0ee      	beq.n	8007df0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	0003ff5f 	.word	0x0003ff5f

08007e20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d120      	bne.n	8007e7c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e44:	f7f9 fd24 	bl	8001890 <HAL_GetTick>
 8007e48:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e4a:	e00d      	b.n	8007e68 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e4c:	f7f9 fd20 	bl	8001890 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e5a:	d905      	bls.n	8007e68 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2203      	movs	r2, #3
 8007e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <RTC_EnterInitMode+0x5c>
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d1e7      	bne.n	8007e4c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007e94:	4b1a      	ldr	r3, [pc, #104]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	4a19      	ldr	r2, [pc, #100]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e9e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ea0:	4b17      	ldr	r3, [pc, #92]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10c      	bne.n	8007ec6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ff93 	bl	8007dd8 <HAL_RTC_WaitForSynchro>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01e      	beq.n	8007ef6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2203      	movs	r2, #3
 8007ebc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	e017      	b.n	8007ef6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	4a0d      	ldr	r2, [pc, #52]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007ecc:	f023 0320 	bic.w	r3, r3, #32
 8007ed0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff ff80 	bl	8007dd8 <HAL_RTC_WaitForSynchro>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007eea:	4b05      	ldr	r3, [pc, #20]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4a04      	ldr	r2, [pc, #16]	@ (8007f00 <RTC_ExitInitMode+0x78>)
 8007ef0:	f043 0320 	orr.w	r3, r3, #32
 8007ef4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	58004000 	.word	0x58004000

08007f04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007f16:	e005      	b.n	8007f24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	3b0a      	subs	r3, #10
 8007f22:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d8f6      	bhi.n	8007f18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b2db      	uxtb	r3, r3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	091b      	lsrs	r3, r3, #4
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	4413      	add	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e07b      	b.n	800808a <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	22ca      	movs	r2, #202	@ 0xca
 8007fa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2253      	movs	r2, #83	@ 0x53
 8007fb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007fb2:	4b38      	ldr	r3, [pc, #224]	@ (8008094 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4a37      	ldr	r2, [pc, #220]	@ (8008094 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007fb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fbc:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8007fbe:	4b35      	ldr	r3, [pc, #212]	@ (8008094 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d120      	bne.n	800800c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8007fca:	f7f9 fc61 	bl	8001890 <HAL_GetTick>
 8007fce:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007fd0:	e015      	b.n	8007ffe <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fd2:	f7f9 fc5d 	bl	8001890 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fe0:	d90d      	bls.n	8007ffe <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	22ff      	movs	r2, #255	@ 0xff
 8007fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e045      	b.n	800808a <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0e2      	beq.n	8007fd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f023 0307 	bic.w	r3, r3, #7
 8008022:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008034:	4b18      	ldr	r3, [pc, #96]	@ (8008098 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a17      	ldr	r2, [pc, #92]	@ (8008098 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 800803a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800803e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800804a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800804e:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800805e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800806e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	22ff      	movs	r2, #255	@ 0xff
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	58004000 	.word	0x58004000
 8008098:	58000080 	.word	0x58000080

0800809c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_CLEAR_FLAG();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80080a4:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80080a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80080aa:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80080ca:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
  #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
  #else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f80b 	bl	80080e8 <HAL_RTCEx_WakeUpTimerEventCallback>
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	58000080 	.word	0x58000080

080080e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef * hrtc)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3350      	adds	r3, #80	@ 0x50
 800810e:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4413      	add	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3350      	adds	r3, #80	@ 0x50
 800813c:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e042      	b.n	8008204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7f9 fa29 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2224      	movs	r2, #36	@ 0x24
 800819a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fbdc 	bl	8009974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fd6d 	bl	8008c9c <UART_SetConfig>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e01b      	b.n	8008204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fc5b 	bl	8009ab8 <UART_CheckIdleState>
 8008202:	4603      	mov	r3, r0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	@ 0x28
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	4613      	mov	r3, r2
 800821a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008222:	2b20      	cmp	r3, #32
 8008224:	d17b      	bne.n	800831e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_UART_Transmit+0x26>
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e074      	b.n	8008320 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2221      	movs	r2, #33	@ 0x21
 8008242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008246:	f7f9 fb23 	bl	8001890 <HAL_GetTick>
 800824a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008264:	d108      	bne.n	8008278 <HAL_UART_Transmit+0x6c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	e003      	b.n	8008280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008280:	e030      	b.n	80082e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	2180      	movs	r1, #128	@ 0x80
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fcbd 	bl	8009c0c <UART_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e03d      	b.n	8008320 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	3302      	adds	r3, #2
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	e007      	b.n	80082d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3301      	adds	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1c8      	bne.n	8008282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	2140      	movs	r1, #64	@ 0x40
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f001 fc86 	bl	8009c0c <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e006      	b.n	8008320 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008328:	b480      	push	{r7}
 800832a:	b091      	sub	sp, #68	@ 0x44
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833c:	2b20      	cmp	r3, #32
 800833e:	d178      	bne.n	8008432 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Transmit_IT+0x24>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e071      	b.n	8008434 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	88fa      	ldrh	r2, [r7, #6]
 8008362:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2221      	movs	r2, #33	@ 0x21
 8008378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008384:	d12a      	bne.n	80083dc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838e:	d107      	bne.n	80083a0 <HAL_UART_Transmit_IT+0x78>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a29      	ldr	r2, [pc, #164]	@ (8008440 <HAL_UART_Transmit_IT+0x118>)
 800839c:	679a      	str	r2, [r3, #120]	@ 0x78
 800839e:	e002      	b.n	80083a6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a28      	ldr	r2, [pc, #160]	@ (8008444 <HAL_UART_Transmit_IT+0x11c>)
 80083a4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80083c8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <HAL_UART_Transmit_IT+0x7e>
 80083da:	e028      	b.n	800842e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083e4:	d107      	bne.n	80083f6 <HAL_UART_Transmit_IT+0xce>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <HAL_UART_Transmit_IT+0x120>)
 80083f2:	679a      	str	r2, [r3, #120]	@ 0x78
 80083f4:	e002      	b.n	80083fc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a14      	ldr	r2, [pc, #80]	@ (800844c <HAL_UART_Transmit_IT+0x124>)
 80083fa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69f9      	ldr	r1, [r7, #28]
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	61bb      	str	r3, [r7, #24]
   return(result);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	e000      	b.n	8008434 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008432:	2302      	movs	r3, #2
  }
}
 8008434:	4618      	mov	r0, r3
 8008436:	3744      	adds	r7, #68	@ 0x44
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	0800a3f1 	.word	0x0800a3f1
 8008444:	0800a311 	.word	0x0800a311
 8008448:	0800a24f 	.word	0x0800a24f
 800844c:	0800a197 	.word	0x0800a197

08008450 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	@ 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008464:	2b20      	cmp	r3, #32
 8008466:	d137      	bne.n	80084d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Receive_DMA+0x24>
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e030      	b.n	80084da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <HAL_UART_Receive_DMA+0x94>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d01f      	beq.n	80084c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d018      	beq.n	80084c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	613b      	str	r3, [r7, #16]
   return(result);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	69f9      	ldr	r1, [r7, #28]
 80084ba:	6a3a      	ldr	r2, [r7, #32]
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e6      	bne.n	8008496 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	461a      	mov	r2, r3
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f001 fc0a 	bl	8009ce8 <UART_Start_Receive_DMA>
 80084d4:	4603      	mov	r3, r0
 80084d6:	e000      	b.n	80084da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084d8:	2302      	movs	r3, #2
  }
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3728      	adds	r7, #40	@ 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	58000c00 	.word	0x58000c00

080084e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b0ba      	sub	sp, #232	@ 0xe8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800850e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008516:	4013      	ands	r3, r2
 8008518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800851c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11b      	bne.n	800855c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d015      	beq.n	800855c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800853c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8377 	beq.w	8008c40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
      }
      return;
 800855a:	e371      	b.n	8008c40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800855c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8123 	beq.w	80087ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008566:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800856a:	4b8d      	ldr	r3, [pc, #564]	@ (80087a0 <HAL_UART_IRQHandler+0x2b8>)
 800856c:	4013      	ands	r3, r2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008576:	4b8b      	ldr	r3, [pc, #556]	@ (80087a4 <HAL_UART_IRQHandler+0x2bc>)
 8008578:	4013      	ands	r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8116 	beq.w	80087ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d011      	beq.n	80085b0 <HAL_UART_IRQHandler+0xc8>
 800858c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2201      	movs	r2, #1
 800859e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a6:	f043 0201 	orr.w	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d011      	beq.n	80085e0 <HAL_UART_IRQHandler+0xf8>
 80085bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2202      	movs	r2, #2
 80085ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d6:	f043 0204 	orr.w	r2, r3, #4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d011      	beq.n	8008610 <HAL_UART_IRQHandler+0x128>
 80085ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2204      	movs	r2, #4
 80085fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008606:	f043 0202 	orr.w	r2, r3, #2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d017      	beq.n	800864c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800861c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800862c:	4b5c      	ldr	r3, [pc, #368]	@ (80087a0 <HAL_UART_IRQHandler+0x2b8>)
 800862e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2208      	movs	r2, #8
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008642:	f043 0208 	orr.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008654:	2b00      	cmp	r3, #0
 8008656:	d012      	beq.n	800867e <HAL_UART_IRQHandler+0x196>
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00c      	beq.n	800867e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800866c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008674:	f043 0220 	orr.w	r2, r3, #32
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 82dd 	beq.w	8008c44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d013      	beq.n	80086be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d2:	2b40      	cmp	r3, #64	@ 0x40
 80086d4:	d005      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d054      	beq.n	800878c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 fbe8 	bl	8009eb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d146      	bne.n	8008784 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800870c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008722:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800872e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800873a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1d9      	bne.n	80086f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008752:	4a15      	ldr	r2, [pc, #84]	@ (80087a8 <HAL_UART_IRQHandler+0x2c0>)
 8008754:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875c:	4618      	mov	r0, r3
 800875e:	f7fa fa93 	bl	8002c88 <HAL_DMA_Abort_IT>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d019      	beq.n	800879c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008776:	4610      	mov	r0, r2
 8008778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	e00f      	b.n	800879c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa77 	bl	8008c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	e00b      	b.n	800879c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa73 	bl	8008c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800878a:	e007      	b.n	800879c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa6f 	bl	8008c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800879a:	e253      	b.n	8008c44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	bf00      	nop
    return;
 800879e:	e251      	b.n	8008c44 <HAL_UART_IRQHandler+0x75c>
 80087a0:	10000001 	.word	0x10000001
 80087a4:	04000120 	.word	0x04000120
 80087a8:	0800a16b 	.word	0x0800a16b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	f040 81e7 	bne.w	8008b84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 81e0 	beq.w	8008b84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 81d9 	beq.w	8008b84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2210      	movs	r2, #16
 80087d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b40      	cmp	r3, #64	@ 0x40
 80087e6:	f040 8151 	bne.w	8008a8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a96      	ldr	r2, [pc, #600]	@ (8008a4c <HAL_UART_IRQHandler+0x564>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d068      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a93      	ldr	r2, [pc, #588]	@ (8008a50 <HAL_UART_IRQHandler+0x568>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d061      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a91      	ldr	r2, [pc, #580]	@ (8008a54 <HAL_UART_IRQHandler+0x56c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d05a      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a8e      	ldr	r2, [pc, #568]	@ (8008a58 <HAL_UART_IRQHandler+0x570>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d053      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a8c      	ldr	r2, [pc, #560]	@ (8008a5c <HAL_UART_IRQHandler+0x574>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d04c      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a89      	ldr	r2, [pc, #548]	@ (8008a60 <HAL_UART_IRQHandler+0x578>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d045      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a87      	ldr	r2, [pc, #540]	@ (8008a64 <HAL_UART_IRQHandler+0x57c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d03e      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a84      	ldr	r2, [pc, #528]	@ (8008a68 <HAL_UART_IRQHandler+0x580>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d037      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a82      	ldr	r2, [pc, #520]	@ (8008a6c <HAL_UART_IRQHandler+0x584>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d030      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a7f      	ldr	r2, [pc, #508]	@ (8008a70 <HAL_UART_IRQHandler+0x588>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d029      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a7d      	ldr	r2, [pc, #500]	@ (8008a74 <HAL_UART_IRQHandler+0x58c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d022      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a7a      	ldr	r2, [pc, #488]	@ (8008a78 <HAL_UART_IRQHandler+0x590>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01b      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a78      	ldr	r2, [pc, #480]	@ (8008a7c <HAL_UART_IRQHandler+0x594>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d014      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a75      	ldr	r2, [pc, #468]	@ (8008a80 <HAL_UART_IRQHandler+0x598>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00d      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a73      	ldr	r2, [pc, #460]	@ (8008a84 <HAL_UART_IRQHandler+0x59c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d006      	beq.n	80088ca <HAL_UART_IRQHandler+0x3e2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a70      	ldr	r2, [pc, #448]	@ (8008a88 <HAL_UART_IRQHandler+0x5a0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d106      	bne.n	80088d8 <HAL_UART_IRQHandler+0x3f0>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	e005      	b.n	80088e4 <HAL_UART_IRQHandler+0x3fc>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 81ab 	beq.w	8008c48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088fc:	429a      	cmp	r2, r3
 80088fe:	f080 81a3 	bcs.w	8008c48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008908:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008918:	f000 8087 	beq.w	8008a2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800894a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800895e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1da      	bne.n	800891c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800898a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800898e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800899c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e1      	bne.n	8008966 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f8:	f023 0310 	bic.w	r3, r3, #16
 80089fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e4      	bne.n	80089e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f9 fe11 	bl	800264c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f91d 	bl	8008c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a4a:	e0fd      	b.n	8008c48 <HAL_UART_IRQHandler+0x760>
 8008a4c:	40020010 	.word	0x40020010
 8008a50:	40020028 	.word	0x40020028
 8008a54:	40020040 	.word	0x40020040
 8008a58:	40020058 	.word	0x40020058
 8008a5c:	40020070 	.word	0x40020070
 8008a60:	40020088 	.word	0x40020088
 8008a64:	400200a0 	.word	0x400200a0
 8008a68:	400200b8 	.word	0x400200b8
 8008a6c:	40020410 	.word	0x40020410
 8008a70:	40020428 	.word	0x40020428
 8008a74:	40020440 	.word	0x40020440
 8008a78:	40020458 	.word	0x40020458
 8008a7c:	40020470 	.word	0x40020470
 8008a80:	40020488 	.word	0x40020488
 8008a84:	400204a0 	.word	0x400204a0
 8008a88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 80cf 	beq.w	8008c4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80ca 	beq.w	8008c4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8008adc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e4      	bne.n	8008ab8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	623b      	str	r3, [r7, #32]
   return(result);
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	4b55      	ldr	r3, [pc, #340]	@ (8008c58 <HAL_UART_IRQHandler+0x770>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e3      	bne.n	8008aee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	69b9      	ldr	r1, [r7, #24]
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	617b      	str	r3, [r7, #20]
   return(result);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f881 	bl	8008c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b82:	e063      	b.n	8008c4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00e      	beq.n	8008bae <HAL_UART_IRQHandler+0x6c6>
 8008b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 fcc2 	bl	800a530 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bac:	e051      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d014      	beq.n	8008be4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d105      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d03a      	beq.n	8008c50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
    }
    return;
 8008be2:	e035      	b.n	8008c50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <HAL_UART_IRQHandler+0x71c>
 8008bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 fc6c 	bl	800a4da <UART_EndTransmit_IT>
    return;
 8008c02:	e026      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <HAL_UART_IRQHandler+0x73c>
 8008c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fc9b 	bl	800a558 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c22:	e016      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <HAL_UART_IRQHandler+0x76a>
 8008c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	da0c      	bge.n	8008c52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fc83 	bl	800a544 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c3e:	e008      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008c40:	bf00      	nop
 8008c42:	e006      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
    return;
 8008c44:	bf00      	nop
 8008c46:	e004      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008c48:	bf00      	nop
 8008c4a:	e002      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
      return;
 8008c4c:	bf00      	nop
 8008c4e:	e000      	b.n	8008c52 <HAL_UART_IRQHandler+0x76a>
    return;
 8008c50:	bf00      	nop
  }
}
 8008c52:	37e8      	adds	r7, #232	@ 0xe8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	effffffe 	.word	0xeffffffe

08008c5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca0:	b092      	sub	sp, #72	@ 0x48
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	4bbe      	ldr	r3, [pc, #760]	@ (8008fc4 <UART_SetConfig+0x328>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4ab3      	ldr	r2, [pc, #716]	@ (8008fc8 <UART_SetConfig+0x32c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d04:	4313      	orrs	r3, r2
 8008d06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	4baf      	ldr	r3, [pc, #700]	@ (8008fcc <UART_SetConfig+0x330>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	6812      	ldr	r2, [r2, #0]
 8008d16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	f023 010f 	bic.w	r1, r3, #15
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4aa6      	ldr	r2, [pc, #664]	@ (8008fd0 <UART_SetConfig+0x334>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d177      	bne.n	8008e2c <UART_SetConfig+0x190>
 8008d3c:	4ba5      	ldr	r3, [pc, #660]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d44:	2b28      	cmp	r3, #40	@ 0x28
 8008d46:	d86d      	bhi.n	8008e24 <UART_SetConfig+0x188>
 8008d48:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <UART_SetConfig+0xb4>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008df5 	.word	0x08008df5
 8008d54:	08008e25 	.word	0x08008e25
 8008d58:	08008e25 	.word	0x08008e25
 8008d5c:	08008e25 	.word	0x08008e25
 8008d60:	08008e25 	.word	0x08008e25
 8008d64:	08008e25 	.word	0x08008e25
 8008d68:	08008e25 	.word	0x08008e25
 8008d6c:	08008e25 	.word	0x08008e25
 8008d70:	08008dfd 	.word	0x08008dfd
 8008d74:	08008e25 	.word	0x08008e25
 8008d78:	08008e25 	.word	0x08008e25
 8008d7c:	08008e25 	.word	0x08008e25
 8008d80:	08008e25 	.word	0x08008e25
 8008d84:	08008e25 	.word	0x08008e25
 8008d88:	08008e25 	.word	0x08008e25
 8008d8c:	08008e25 	.word	0x08008e25
 8008d90:	08008e05 	.word	0x08008e05
 8008d94:	08008e25 	.word	0x08008e25
 8008d98:	08008e25 	.word	0x08008e25
 8008d9c:	08008e25 	.word	0x08008e25
 8008da0:	08008e25 	.word	0x08008e25
 8008da4:	08008e25 	.word	0x08008e25
 8008da8:	08008e25 	.word	0x08008e25
 8008dac:	08008e25 	.word	0x08008e25
 8008db0:	08008e0d 	.word	0x08008e0d
 8008db4:	08008e25 	.word	0x08008e25
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008e25 	.word	0x08008e25
 8008dc0:	08008e25 	.word	0x08008e25
 8008dc4:	08008e25 	.word	0x08008e25
 8008dc8:	08008e25 	.word	0x08008e25
 8008dcc:	08008e25 	.word	0x08008e25
 8008dd0:	08008e15 	.word	0x08008e15
 8008dd4:	08008e25 	.word	0x08008e25
 8008dd8:	08008e25 	.word	0x08008e25
 8008ddc:	08008e25 	.word	0x08008e25
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e25 	.word	0x08008e25
 8008de8:	08008e25 	.word	0x08008e25
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e326      	b.n	800944a <UART_SetConfig+0x7ae>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e322      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e31e      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e31a      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e14:	2320      	movs	r3, #32
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e316      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e1c:	2340      	movs	r3, #64	@ 0x40
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e312      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e24:	2380      	movs	r3, #128	@ 0x80
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e30e      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a69      	ldr	r2, [pc, #420]	@ (8008fd8 <UART_SetConfig+0x33c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d130      	bne.n	8008e98 <UART_SetConfig+0x1fc>
 8008e36:	4b67      	ldr	r3, [pc, #412]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d826      	bhi.n	8008e90 <UART_SetConfig+0x1f4>
 8008e42:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <UART_SetConfig+0x1ac>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e2f0      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e2ec      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e2e8      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e2e4      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e80:	2320      	movs	r3, #32
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e2e0      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e88:	2340      	movs	r3, #64	@ 0x40
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e2dc      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e2d8      	b.n	800944a <UART_SetConfig+0x7ae>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008fdc <UART_SetConfig+0x340>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d130      	bne.n	8008f04 <UART_SetConfig+0x268>
 8008ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d826      	bhi.n	8008efc <UART_SetConfig+0x260>
 8008eae:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <UART_SetConfig+0x218>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008ed5 	.word	0x08008ed5
 8008ebc:	08008edd 	.word	0x08008edd
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008eed 	.word	0x08008eed
 8008ec8:	08008ef5 	.word	0x08008ef5
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e2ba      	b.n	800944a <UART_SetConfig+0x7ae>
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e2b6      	b.n	800944a <UART_SetConfig+0x7ae>
 8008edc:	2308      	movs	r3, #8
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e2b2      	b.n	800944a <UART_SetConfig+0x7ae>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e2ae      	b.n	800944a <UART_SetConfig+0x7ae>
 8008eec:	2320      	movs	r3, #32
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e2aa      	b.n	800944a <UART_SetConfig+0x7ae>
 8008ef4:	2340      	movs	r3, #64	@ 0x40
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e2a6      	b.n	800944a <UART_SetConfig+0x7ae>
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e2a2      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a35      	ldr	r2, [pc, #212]	@ (8008fe0 <UART_SetConfig+0x344>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d130      	bne.n	8008f70 <UART_SetConfig+0x2d4>
 8008f0e:	4b31      	ldr	r3, [pc, #196]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d826      	bhi.n	8008f68 <UART_SetConfig+0x2cc>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x284>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f39 	.word	0x08008f39
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e284      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e280      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e27c      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e278      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e274      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e270      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f68:	2380      	movs	r3, #128	@ 0x80
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e26c      	b.n	800944a <UART_SetConfig+0x7ae>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe4 <UART_SetConfig+0x348>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d142      	bne.n	8009000 <UART_SetConfig+0x364>
 8008f7a:	4b16      	ldr	r3, [pc, #88]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d838      	bhi.n	8008ff8 <UART_SetConfig+0x35c>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <UART_SetConfig+0x2f0>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e24e      	b.n	800944a <UART_SetConfig+0x7ae>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e24a      	b.n	800944a <UART_SetConfig+0x7ae>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e246      	b.n	800944a <UART_SetConfig+0x7ae>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e242      	b.n	800944a <UART_SetConfig+0x7ae>
 8008fc4:	cfff69f3 	.word	0xcfff69f3
 8008fc8:	58000c00 	.word	0x58000c00
 8008fcc:	11fff4ff 	.word	0x11fff4ff
 8008fd0:	40011000 	.word	0x40011000
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	40004400 	.word	0x40004400
 8008fdc:	40004800 	.word	0x40004800
 8008fe0:	40004c00 	.word	0x40004c00
 8008fe4:	40005000 	.word	0x40005000
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e22c      	b.n	800944a <UART_SetConfig+0x7ae>
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e228      	b.n	800944a <UART_SetConfig+0x7ae>
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e224      	b.n	800944a <UART_SetConfig+0x7ae>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4ab1      	ldr	r2, [pc, #708]	@ (80092cc <UART_SetConfig+0x630>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d176      	bne.n	80090f8 <UART_SetConfig+0x45c>
 800900a:	4bb1      	ldr	r3, [pc, #708]	@ (80092d0 <UART_SetConfig+0x634>)
 800900c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009012:	2b28      	cmp	r3, #40	@ 0x28
 8009014:	d86c      	bhi.n	80090f0 <UART_SetConfig+0x454>
 8009016:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <UART_SetConfig+0x380>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	080090c1 	.word	0x080090c1
 8009020:	080090f1 	.word	0x080090f1
 8009024:	080090f1 	.word	0x080090f1
 8009028:	080090f1 	.word	0x080090f1
 800902c:	080090f1 	.word	0x080090f1
 8009030:	080090f1 	.word	0x080090f1
 8009034:	080090f1 	.word	0x080090f1
 8009038:	080090f1 	.word	0x080090f1
 800903c:	080090c9 	.word	0x080090c9
 8009040:	080090f1 	.word	0x080090f1
 8009044:	080090f1 	.word	0x080090f1
 8009048:	080090f1 	.word	0x080090f1
 800904c:	080090f1 	.word	0x080090f1
 8009050:	080090f1 	.word	0x080090f1
 8009054:	080090f1 	.word	0x080090f1
 8009058:	080090f1 	.word	0x080090f1
 800905c:	080090d1 	.word	0x080090d1
 8009060:	080090f1 	.word	0x080090f1
 8009064:	080090f1 	.word	0x080090f1
 8009068:	080090f1 	.word	0x080090f1
 800906c:	080090f1 	.word	0x080090f1
 8009070:	080090f1 	.word	0x080090f1
 8009074:	080090f1 	.word	0x080090f1
 8009078:	080090f1 	.word	0x080090f1
 800907c:	080090d9 	.word	0x080090d9
 8009080:	080090f1 	.word	0x080090f1
 8009084:	080090f1 	.word	0x080090f1
 8009088:	080090f1 	.word	0x080090f1
 800908c:	080090f1 	.word	0x080090f1
 8009090:	080090f1 	.word	0x080090f1
 8009094:	080090f1 	.word	0x080090f1
 8009098:	080090f1 	.word	0x080090f1
 800909c:	080090e1 	.word	0x080090e1
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	080090f1 	.word	0x080090f1
 80090a8:	080090f1 	.word	0x080090f1
 80090ac:	080090f1 	.word	0x080090f1
 80090b0:	080090f1 	.word	0x080090f1
 80090b4:	080090f1 	.word	0x080090f1
 80090b8:	080090f1 	.word	0x080090f1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e1c0      	b.n	800944a <UART_SetConfig+0x7ae>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e1bc      	b.n	800944a <UART_SetConfig+0x7ae>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e1b8      	b.n	800944a <UART_SetConfig+0x7ae>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e1b4      	b.n	800944a <UART_SetConfig+0x7ae>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e1b0      	b.n	800944a <UART_SetConfig+0x7ae>
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e1ac      	b.n	800944a <UART_SetConfig+0x7ae>
 80090f0:	2380      	movs	r3, #128	@ 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e1a8      	b.n	800944a <UART_SetConfig+0x7ae>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a75      	ldr	r2, [pc, #468]	@ (80092d4 <UART_SetConfig+0x638>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d130      	bne.n	8009164 <UART_SetConfig+0x4c8>
 8009102:	4b73      	ldr	r3, [pc, #460]	@ (80092d0 <UART_SetConfig+0x634>)
 8009104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b05      	cmp	r3, #5
 800910c:	d826      	bhi.n	800915c <UART_SetConfig+0x4c0>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <UART_SetConfig+0x478>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009135 	.word	0x08009135
 800911c:	0800913d 	.word	0x0800913d
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e18a      	b.n	800944a <UART_SetConfig+0x7ae>
 8009134:	2304      	movs	r3, #4
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e186      	b.n	800944a <UART_SetConfig+0x7ae>
 800913c:	2308      	movs	r3, #8
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e182      	b.n	800944a <UART_SetConfig+0x7ae>
 8009144:	2310      	movs	r3, #16
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e17e      	b.n	800944a <UART_SetConfig+0x7ae>
 800914c:	2320      	movs	r3, #32
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e17a      	b.n	800944a <UART_SetConfig+0x7ae>
 8009154:	2340      	movs	r3, #64	@ 0x40
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e176      	b.n	800944a <UART_SetConfig+0x7ae>
 800915c:	2380      	movs	r3, #128	@ 0x80
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e172      	b.n	800944a <UART_SetConfig+0x7ae>
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a5b      	ldr	r2, [pc, #364]	@ (80092d8 <UART_SetConfig+0x63c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d130      	bne.n	80091d0 <UART_SetConfig+0x534>
 800916e:	4b58      	ldr	r3, [pc, #352]	@ (80092d0 <UART_SetConfig+0x634>)
 8009170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b05      	cmp	r3, #5
 8009178:	d826      	bhi.n	80091c8 <UART_SetConfig+0x52c>
 800917a:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0x4e4>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009199 	.word	0x08009199
 8009184:	080091a1 	.word	0x080091a1
 8009188:	080091a9 	.word	0x080091a9
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b9 	.word	0x080091b9
 8009194:	080091c1 	.word	0x080091c1
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e154      	b.n	800944a <UART_SetConfig+0x7ae>
 80091a0:	2304      	movs	r3, #4
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e150      	b.n	800944a <UART_SetConfig+0x7ae>
 80091a8:	2308      	movs	r3, #8
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e14c      	b.n	800944a <UART_SetConfig+0x7ae>
 80091b0:	2310      	movs	r3, #16
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e148      	b.n	800944a <UART_SetConfig+0x7ae>
 80091b8:	2320      	movs	r3, #32
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e144      	b.n	800944a <UART_SetConfig+0x7ae>
 80091c0:	2340      	movs	r3, #64	@ 0x40
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e140      	b.n	800944a <UART_SetConfig+0x7ae>
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e13c      	b.n	800944a <UART_SetConfig+0x7ae>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a41      	ldr	r2, [pc, #260]	@ (80092dc <UART_SetConfig+0x640>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	f040 8082 	bne.w	80092e0 <UART_SetConfig+0x644>
 80091dc:	4b3c      	ldr	r3, [pc, #240]	@ (80092d0 <UART_SetConfig+0x634>)
 80091de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e4:	2b28      	cmp	r3, #40	@ 0x28
 80091e6:	d86d      	bhi.n	80092c4 <UART_SetConfig+0x628>
 80091e8:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <UART_SetConfig+0x554>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009295 	.word	0x08009295
 80091f4:	080092c5 	.word	0x080092c5
 80091f8:	080092c5 	.word	0x080092c5
 80091fc:	080092c5 	.word	0x080092c5
 8009200:	080092c5 	.word	0x080092c5
 8009204:	080092c5 	.word	0x080092c5
 8009208:	080092c5 	.word	0x080092c5
 800920c:	080092c5 	.word	0x080092c5
 8009210:	0800929d 	.word	0x0800929d
 8009214:	080092c5 	.word	0x080092c5
 8009218:	080092c5 	.word	0x080092c5
 800921c:	080092c5 	.word	0x080092c5
 8009220:	080092c5 	.word	0x080092c5
 8009224:	080092c5 	.word	0x080092c5
 8009228:	080092c5 	.word	0x080092c5
 800922c:	080092c5 	.word	0x080092c5
 8009230:	080092a5 	.word	0x080092a5
 8009234:	080092c5 	.word	0x080092c5
 8009238:	080092c5 	.word	0x080092c5
 800923c:	080092c5 	.word	0x080092c5
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092c5 	.word	0x080092c5
 8009248:	080092c5 	.word	0x080092c5
 800924c:	080092c5 	.word	0x080092c5
 8009250:	080092ad 	.word	0x080092ad
 8009254:	080092c5 	.word	0x080092c5
 8009258:	080092c5 	.word	0x080092c5
 800925c:	080092c5 	.word	0x080092c5
 8009260:	080092c5 	.word	0x080092c5
 8009264:	080092c5 	.word	0x080092c5
 8009268:	080092c5 	.word	0x080092c5
 800926c:	080092c5 	.word	0x080092c5
 8009270:	080092b5 	.word	0x080092b5
 8009274:	080092c5 	.word	0x080092c5
 8009278:	080092c5 	.word	0x080092c5
 800927c:	080092c5 	.word	0x080092c5
 8009280:	080092c5 	.word	0x080092c5
 8009284:	080092c5 	.word	0x080092c5
 8009288:	080092c5 	.word	0x080092c5
 800928c:	080092c5 	.word	0x080092c5
 8009290:	080092bd 	.word	0x080092bd
 8009294:	2301      	movs	r3, #1
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e0d6      	b.n	800944a <UART_SetConfig+0x7ae>
 800929c:	2304      	movs	r3, #4
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e0d2      	b.n	800944a <UART_SetConfig+0x7ae>
 80092a4:	2308      	movs	r3, #8
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e0ce      	b.n	800944a <UART_SetConfig+0x7ae>
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e0ca      	b.n	800944a <UART_SetConfig+0x7ae>
 80092b4:	2320      	movs	r3, #32
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ba:	e0c6      	b.n	800944a <UART_SetConfig+0x7ae>
 80092bc:	2340      	movs	r3, #64	@ 0x40
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e0c2      	b.n	800944a <UART_SetConfig+0x7ae>
 80092c4:	2380      	movs	r3, #128	@ 0x80
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e0be      	b.n	800944a <UART_SetConfig+0x7ae>
 80092cc:	40011400 	.word	0x40011400
 80092d0:	58024400 	.word	0x58024400
 80092d4:	40007800 	.word	0x40007800
 80092d8:	40007c00 	.word	0x40007c00
 80092dc:	40011800 	.word	0x40011800
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4aad      	ldr	r2, [pc, #692]	@ (800959c <UART_SetConfig+0x900>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d176      	bne.n	80093d8 <UART_SetConfig+0x73c>
 80092ea:	4bad      	ldr	r3, [pc, #692]	@ (80095a0 <UART_SetConfig+0x904>)
 80092ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092f2:	2b28      	cmp	r3, #40	@ 0x28
 80092f4:	d86c      	bhi.n	80093d0 <UART_SetConfig+0x734>
 80092f6:	a201      	add	r2, pc, #4	@ (adr r2, 80092fc <UART_SetConfig+0x660>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	080093a1 	.word	0x080093a1
 8009300:	080093d1 	.word	0x080093d1
 8009304:	080093d1 	.word	0x080093d1
 8009308:	080093d1 	.word	0x080093d1
 800930c:	080093d1 	.word	0x080093d1
 8009310:	080093d1 	.word	0x080093d1
 8009314:	080093d1 	.word	0x080093d1
 8009318:	080093d1 	.word	0x080093d1
 800931c:	080093a9 	.word	0x080093a9
 8009320:	080093d1 	.word	0x080093d1
 8009324:	080093d1 	.word	0x080093d1
 8009328:	080093d1 	.word	0x080093d1
 800932c:	080093d1 	.word	0x080093d1
 8009330:	080093d1 	.word	0x080093d1
 8009334:	080093d1 	.word	0x080093d1
 8009338:	080093d1 	.word	0x080093d1
 800933c:	080093b1 	.word	0x080093b1
 8009340:	080093d1 	.word	0x080093d1
 8009344:	080093d1 	.word	0x080093d1
 8009348:	080093d1 	.word	0x080093d1
 800934c:	080093d1 	.word	0x080093d1
 8009350:	080093d1 	.word	0x080093d1
 8009354:	080093d1 	.word	0x080093d1
 8009358:	080093d1 	.word	0x080093d1
 800935c:	080093b9 	.word	0x080093b9
 8009360:	080093d1 	.word	0x080093d1
 8009364:	080093d1 	.word	0x080093d1
 8009368:	080093d1 	.word	0x080093d1
 800936c:	080093d1 	.word	0x080093d1
 8009370:	080093d1 	.word	0x080093d1
 8009374:	080093d1 	.word	0x080093d1
 8009378:	080093d1 	.word	0x080093d1
 800937c:	080093c1 	.word	0x080093c1
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080093d1 	.word	0x080093d1
 8009388:	080093d1 	.word	0x080093d1
 800938c:	080093d1 	.word	0x080093d1
 8009390:	080093d1 	.word	0x080093d1
 8009394:	080093d1 	.word	0x080093d1
 8009398:	080093d1 	.word	0x080093d1
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e050      	b.n	800944a <UART_SetConfig+0x7ae>
 80093a8:	2304      	movs	r3, #4
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e04c      	b.n	800944a <UART_SetConfig+0x7ae>
 80093b0:	2308      	movs	r3, #8
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e048      	b.n	800944a <UART_SetConfig+0x7ae>
 80093b8:	2310      	movs	r3, #16
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e044      	b.n	800944a <UART_SetConfig+0x7ae>
 80093c0:	2320      	movs	r3, #32
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e040      	b.n	800944a <UART_SetConfig+0x7ae>
 80093c8:	2340      	movs	r3, #64	@ 0x40
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e03c      	b.n	800944a <UART_SetConfig+0x7ae>
 80093d0:	2380      	movs	r3, #128	@ 0x80
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e038      	b.n	800944a <UART_SetConfig+0x7ae>
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a71      	ldr	r2, [pc, #452]	@ (80095a4 <UART_SetConfig+0x908>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d130      	bne.n	8009444 <UART_SetConfig+0x7a8>
 80093e2:	4b6f      	ldr	r3, [pc, #444]	@ (80095a0 <UART_SetConfig+0x904>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	d826      	bhi.n	800943c <UART_SetConfig+0x7a0>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <UART_SetConfig+0x758>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	0800940d 	.word	0x0800940d
 80093f8:	08009415 	.word	0x08009415
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	08009425 	.word	0x08009425
 8009404:	0800942d 	.word	0x0800942d
 8009408:	08009435 	.word	0x08009435
 800940c:	2302      	movs	r3, #2
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e01a      	b.n	800944a <UART_SetConfig+0x7ae>
 8009414:	2304      	movs	r3, #4
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e016      	b.n	800944a <UART_SetConfig+0x7ae>
 800941c:	2308      	movs	r3, #8
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e012      	b.n	800944a <UART_SetConfig+0x7ae>
 8009424:	2310      	movs	r3, #16
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e00e      	b.n	800944a <UART_SetConfig+0x7ae>
 800942c:	2320      	movs	r3, #32
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e00a      	b.n	800944a <UART_SetConfig+0x7ae>
 8009434:	2340      	movs	r3, #64	@ 0x40
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e006      	b.n	800944a <UART_SetConfig+0x7ae>
 800943c:	2380      	movs	r3, #128	@ 0x80
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e002      	b.n	800944a <UART_SetConfig+0x7ae>
 8009444:	2380      	movs	r3, #128	@ 0x80
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a55      	ldr	r2, [pc, #340]	@ (80095a4 <UART_SetConfig+0x908>)
 8009450:	4293      	cmp	r3, r2
 8009452:	f040 80f8 	bne.w	8009646 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009456:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800945a:	2b20      	cmp	r3, #32
 800945c:	dc46      	bgt.n	80094ec <UART_SetConfig+0x850>
 800945e:	2b02      	cmp	r3, #2
 8009460:	db75      	blt.n	800954e <UART_SetConfig+0x8b2>
 8009462:	3b02      	subs	r3, #2
 8009464:	2b1e      	cmp	r3, #30
 8009466:	d872      	bhi.n	800954e <UART_SetConfig+0x8b2>
 8009468:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <UART_SetConfig+0x7d4>)
 800946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946e:	bf00      	nop
 8009470:	080094f3 	.word	0x080094f3
 8009474:	0800954f 	.word	0x0800954f
 8009478:	080094fb 	.word	0x080094fb
 800947c:	0800954f 	.word	0x0800954f
 8009480:	0800954f 	.word	0x0800954f
 8009484:	0800954f 	.word	0x0800954f
 8009488:	0800950b 	.word	0x0800950b
 800948c:	0800954f 	.word	0x0800954f
 8009490:	0800954f 	.word	0x0800954f
 8009494:	0800954f 	.word	0x0800954f
 8009498:	0800954f 	.word	0x0800954f
 800949c:	0800954f 	.word	0x0800954f
 80094a0:	0800954f 	.word	0x0800954f
 80094a4:	0800954f 	.word	0x0800954f
 80094a8:	0800951b 	.word	0x0800951b
 80094ac:	0800954f 	.word	0x0800954f
 80094b0:	0800954f 	.word	0x0800954f
 80094b4:	0800954f 	.word	0x0800954f
 80094b8:	0800954f 	.word	0x0800954f
 80094bc:	0800954f 	.word	0x0800954f
 80094c0:	0800954f 	.word	0x0800954f
 80094c4:	0800954f 	.word	0x0800954f
 80094c8:	0800954f 	.word	0x0800954f
 80094cc:	0800954f 	.word	0x0800954f
 80094d0:	0800954f 	.word	0x0800954f
 80094d4:	0800954f 	.word	0x0800954f
 80094d8:	0800954f 	.word	0x0800954f
 80094dc:	0800954f 	.word	0x0800954f
 80094e0:	0800954f 	.word	0x0800954f
 80094e4:	0800954f 	.word	0x0800954f
 80094e8:	08009541 	.word	0x08009541
 80094ec:	2b40      	cmp	r3, #64	@ 0x40
 80094ee:	d02a      	beq.n	8009546 <UART_SetConfig+0x8aa>
 80094f0:	e02d      	b.n	800954e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094f2:	f7fd fc79 	bl	8006de8 <HAL_RCCEx_GetD3PCLK1Freq>
 80094f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094f8:	e02f      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd fc88 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009508:	e027      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950a:	f107 0318 	add.w	r3, r7, #24
 800950e:	4618      	mov	r0, r3
 8009510:	f7fd fdd4 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009518:	e01f      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800951a:	4b21      	ldr	r3, [pc, #132]	@ (80095a0 <UART_SetConfig+0x904>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009526:	4b1e      	ldr	r3, [pc, #120]	@ (80095a0 <UART_SetConfig+0x904>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	4a1d      	ldr	r2, [pc, #116]	@ (80095a8 <UART_SetConfig+0x90c>)
 8009532:	fa22 f303 	lsr.w	r3, r2, r3
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009538:	e00f      	b.n	800955a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800953a:	4b1b      	ldr	r3, [pc, #108]	@ (80095a8 <UART_SetConfig+0x90c>)
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800953e:	e00c      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009540:	4b1a      	ldr	r3, [pc, #104]	@ (80095ac <UART_SetConfig+0x910>)
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e009      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	e005      	b.n	800955a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 81ee 	beq.w	800993e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009566:	4a12      	ldr	r2, [pc, #72]	@ (80095b0 <UART_SetConfig+0x914>)
 8009568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800956c:	461a      	mov	r2, r3
 800956e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009570:	fbb3 f3f2 	udiv	r3, r3, r2
 8009574:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	4413      	add	r3, r2
 8009580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009582:	429a      	cmp	r2, r3
 8009584:	d305      	bcc.n	8009592 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800958c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800958e:	429a      	cmp	r2, r3
 8009590:	d910      	bls.n	80095b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009598:	e1d1      	b.n	800993e <UART_SetConfig+0xca2>
 800959a:	bf00      	nop
 800959c:	40011c00 	.word	0x40011c00
 80095a0:	58024400 	.word	0x58024400
 80095a4:	58000c00 	.word	0x58000c00
 80095a8:	03d09000 	.word	0x03d09000
 80095ac:	003d0900 	.word	0x003d0900
 80095b0:	0800c564 	.word	0x0800c564
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b6:	2200      	movs	r2, #0
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	60fa      	str	r2, [r7, #12]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	4ac0      	ldr	r2, [pc, #768]	@ (80098c4 <UART_SetConfig+0xc28>)
 80095c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2200      	movs	r2, #0
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	607a      	str	r2, [r7, #4]
 80095ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095d6:	f7f6 fefb 	bl	80003d0 <__aeabi_uldivmod>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	020b      	lsls	r3, r1, #8
 80095ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095f0:	0202      	lsls	r2, r0, #8
 80095f2:	6979      	ldr	r1, [r7, #20]
 80095f4:	6849      	ldr	r1, [r1, #4]
 80095f6:	0849      	lsrs	r1, r1, #1
 80095f8:	2000      	movs	r0, #0
 80095fa:	460c      	mov	r4, r1
 80095fc:	4605      	mov	r5, r0
 80095fe:	eb12 0804 	adds.w	r8, r2, r4
 8009602:	eb43 0905 	adc.w	r9, r3, r5
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	469a      	mov	sl, r3
 800960e:	4693      	mov	fp, r2
 8009610:	4652      	mov	r2, sl
 8009612:	465b      	mov	r3, fp
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f6 feda 	bl	80003d0 <__aeabi_uldivmod>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4613      	mov	r3, r2
 8009622:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800962a:	d308      	bcc.n	800963e <UART_SetConfig+0x9a2>
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009632:	d204      	bcs.n	800963e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800963a:	60da      	str	r2, [r3, #12]
 800963c:	e17f      	b.n	800993e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009644:	e17b      	b.n	800993e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800964e:	f040 80bd 	bne.w	80097cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009652:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009656:	2b20      	cmp	r3, #32
 8009658:	dc48      	bgt.n	80096ec <UART_SetConfig+0xa50>
 800965a:	2b00      	cmp	r3, #0
 800965c:	db7b      	blt.n	8009756 <UART_SetConfig+0xaba>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d879      	bhi.n	8009756 <UART_SetConfig+0xaba>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <UART_SetConfig+0x9cc>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	080096f3 	.word	0x080096f3
 800966c:	080096fb 	.word	0x080096fb
 8009670:	08009757 	.word	0x08009757
 8009674:	08009757 	.word	0x08009757
 8009678:	08009703 	.word	0x08009703
 800967c:	08009757 	.word	0x08009757
 8009680:	08009757 	.word	0x08009757
 8009684:	08009757 	.word	0x08009757
 8009688:	08009713 	.word	0x08009713
 800968c:	08009757 	.word	0x08009757
 8009690:	08009757 	.word	0x08009757
 8009694:	08009757 	.word	0x08009757
 8009698:	08009757 	.word	0x08009757
 800969c:	08009757 	.word	0x08009757
 80096a0:	08009757 	.word	0x08009757
 80096a4:	08009757 	.word	0x08009757
 80096a8:	08009723 	.word	0x08009723
 80096ac:	08009757 	.word	0x08009757
 80096b0:	08009757 	.word	0x08009757
 80096b4:	08009757 	.word	0x08009757
 80096b8:	08009757 	.word	0x08009757
 80096bc:	08009757 	.word	0x08009757
 80096c0:	08009757 	.word	0x08009757
 80096c4:	08009757 	.word	0x08009757
 80096c8:	08009757 	.word	0x08009757
 80096cc:	08009757 	.word	0x08009757
 80096d0:	08009757 	.word	0x08009757
 80096d4:	08009757 	.word	0x08009757
 80096d8:	08009757 	.word	0x08009757
 80096dc:	08009757 	.word	0x08009757
 80096e0:	08009757 	.word	0x08009757
 80096e4:	08009757 	.word	0x08009757
 80096e8:	08009749 	.word	0x08009749
 80096ec:	2b40      	cmp	r3, #64	@ 0x40
 80096ee:	d02e      	beq.n	800974e <UART_SetConfig+0xab2>
 80096f0:	e031      	b.n	8009756 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f2:	f7fc f9ad 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 80096f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096f8:	e033      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096fa:	f7fc f9bf 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 80096fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009700:	e02f      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd fb84 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800970c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009710:	e027      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd fcd0 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e01f      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009722:	4b69      	ldr	r3, [pc, #420]	@ (80098c8 <UART_SetConfig+0xc2c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d009      	beq.n	8009742 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800972e:	4b66      	ldr	r3, [pc, #408]	@ (80098c8 <UART_SetConfig+0xc2c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	08db      	lsrs	r3, r3, #3
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	4a64      	ldr	r2, [pc, #400]	@ (80098cc <UART_SetConfig+0xc30>)
 800973a:	fa22 f303 	lsr.w	r3, r2, r3
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009740:	e00f      	b.n	8009762 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009742:	4b62      	ldr	r3, [pc, #392]	@ (80098cc <UART_SetConfig+0xc30>)
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009746:	e00c      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009748:	4b61      	ldr	r3, [pc, #388]	@ (80098d0 <UART_SetConfig+0xc34>)
 800974a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974c:	e009      	b.n	8009762 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009754:	e005      	b.n	8009762 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 80ea 	beq.w	800993e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976e:	4a55      	ldr	r2, [pc, #340]	@ (80098c4 <UART_SetConfig+0xc28>)
 8009770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009774:	461a      	mov	r2, r3
 8009776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009778:	fbb3 f3f2 	udiv	r3, r3, r2
 800977c:	005a      	lsls	r2, r3, #1
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	441a      	add	r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	fbb2 f3f3 	udiv	r3, r2, r3
 800978e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d916      	bls.n	80097c4 <UART_SetConfig+0xb28>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800979c:	d212      	bcs.n	80097c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f023 030f 	bic.w	r3, r3, #15
 80097a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097b6:	4313      	orrs	r3, r2
 80097b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80097c0:	60da      	str	r2, [r3, #12]
 80097c2:	e0bc      	b.n	800993e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097ca:	e0b8      	b.n	800993e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	dc4b      	bgt.n	800986c <UART_SetConfig+0xbd0>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f2c0 8087 	blt.w	80098e8 <UART_SetConfig+0xc4c>
 80097da:	2b20      	cmp	r3, #32
 80097dc:	f200 8084 	bhi.w	80098e8 <UART_SetConfig+0xc4c>
 80097e0:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <UART_SetConfig+0xb4c>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	08009873 	.word	0x08009873
 80097ec:	0800987b 	.word	0x0800987b
 80097f0:	080098e9 	.word	0x080098e9
 80097f4:	080098e9 	.word	0x080098e9
 80097f8:	08009883 	.word	0x08009883
 80097fc:	080098e9 	.word	0x080098e9
 8009800:	080098e9 	.word	0x080098e9
 8009804:	080098e9 	.word	0x080098e9
 8009808:	08009893 	.word	0x08009893
 800980c:	080098e9 	.word	0x080098e9
 8009810:	080098e9 	.word	0x080098e9
 8009814:	080098e9 	.word	0x080098e9
 8009818:	080098e9 	.word	0x080098e9
 800981c:	080098e9 	.word	0x080098e9
 8009820:	080098e9 	.word	0x080098e9
 8009824:	080098e9 	.word	0x080098e9
 8009828:	080098a3 	.word	0x080098a3
 800982c:	080098e9 	.word	0x080098e9
 8009830:	080098e9 	.word	0x080098e9
 8009834:	080098e9 	.word	0x080098e9
 8009838:	080098e9 	.word	0x080098e9
 800983c:	080098e9 	.word	0x080098e9
 8009840:	080098e9 	.word	0x080098e9
 8009844:	080098e9 	.word	0x080098e9
 8009848:	080098e9 	.word	0x080098e9
 800984c:	080098e9 	.word	0x080098e9
 8009850:	080098e9 	.word	0x080098e9
 8009854:	080098e9 	.word	0x080098e9
 8009858:	080098e9 	.word	0x080098e9
 800985c:	080098e9 	.word	0x080098e9
 8009860:	080098e9 	.word	0x080098e9
 8009864:	080098e9 	.word	0x080098e9
 8009868:	080098db 	.word	0x080098db
 800986c:	2b40      	cmp	r3, #64	@ 0x40
 800986e:	d037      	beq.n	80098e0 <UART_SetConfig+0xc44>
 8009870:	e03a      	b.n	80098e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009872:	f7fc f8ed 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8009876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009878:	e03c      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800987a:	f7fc f8ff 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 800987e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009880:	e038      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009886:	4618      	mov	r0, r3
 8009888:	f7fd fac4 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009890:	e030      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009892:	f107 0318 	add.w	r3, r7, #24
 8009896:	4618      	mov	r0, r3
 8009898:	f7fd fc10 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a0:	e028      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a2:	4b09      	ldr	r3, [pc, #36]	@ (80098c8 <UART_SetConfig+0xc2c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d012      	beq.n	80098d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098ae:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <UART_SetConfig+0xc2c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	08db      	lsrs	r3, r3, #3
 80098b4:	f003 0303 	and.w	r3, r3, #3
 80098b8:	4a04      	ldr	r2, [pc, #16]	@ (80098cc <UART_SetConfig+0xc30>)
 80098ba:	fa22 f303 	lsr.w	r3, r2, r3
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098c0:	e018      	b.n	80098f4 <UART_SetConfig+0xc58>
 80098c2:	bf00      	nop
 80098c4:	0800c564 	.word	0x0800c564
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80098d4:	4b24      	ldr	r3, [pc, #144]	@ (8009968 <UART_SetConfig+0xccc>)
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d8:	e00c      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098da:	4b24      	ldr	r3, [pc, #144]	@ (800996c <UART_SetConfig+0xcd0>)
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098de:	e009      	b.n	80098f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e6:	e005      	b.n	80098f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098f2:	bf00      	nop
    }

    if (pclk != 0U)
 80098f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d021      	beq.n	800993e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009970 <UART_SetConfig+0xcd4>)
 8009900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009904:	461a      	mov	r2, r3
 8009906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009908:	fbb3 f2f2 	udiv	r2, r3, r2
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	085b      	lsrs	r3, r3, #1
 8009912:	441a      	add	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	fbb2 f3f3 	udiv	r3, r2, r3
 800991c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d909      	bls.n	8009938 <UART_SetConfig+0xc9c>
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800992a:	d205      	bcs.n	8009938 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	b29a      	uxth	r2, r3
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	e002      	b.n	800993e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2201      	movs	r2, #1
 8009942:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2201      	movs	r2, #1
 800994a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2200      	movs	r2, #0
 8009958:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800995a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800995e:	4618      	mov	r0, r3
 8009960:	3748      	adds	r7, #72	@ 0x48
 8009962:	46bd      	mov	sp, r7
 8009964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009968:	03d09000 	.word	0x03d09000
 800996c:	003d0900 	.word	0x003d0900
 8009970:	0800c564 	.word	0x0800c564

08009974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	f003 0308 	and.w	r3, r3, #8
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a72:	d10a      	bne.n	8009a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	605a      	str	r2, [r3, #4]
  }
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b098      	sub	sp, #96	@ 0x60
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac8:	f7f7 fee2 	bl	8001890 <HAL_GetTick>
 8009acc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0308 	and.w	r3, r3, #8
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d12f      	bne.n	8009b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f88e 	bl	8009c0c <UART_WaitOnFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d022      	beq.n	8009b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e6      	bne.n	8009af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e063      	b.n	8009c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d149      	bne.n	8009bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b52:	2200      	movs	r2, #0
 8009b54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f857 	bl	8009c0c <UART_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d03c      	beq.n	8009bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	623b      	str	r3, [r7, #32]
   return(result);
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e6      	bne.n	8009b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bb6:	61fa      	str	r2, [r7, #28]
 8009bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	69b9      	ldr	r1, [r7, #24]
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e012      	b.n	8009c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3758      	adds	r7, #88	@ 0x58
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c1c:	e04f      	b.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c24:	d04b      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c26:	f7f7 fe33 	bl	8001890 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d302      	bcc.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e04e      	b.n	8009cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d037      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b80      	cmp	r3, #128	@ 0x80
 8009c52:	d034      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b40      	cmp	r3, #64	@ 0x40
 8009c58:	d031      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f003 0308 	and.w	r3, r3, #8
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d110      	bne.n	8009c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2208      	movs	r2, #8
 8009c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f921 	bl	8009eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2208      	movs	r2, #8
 8009c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e029      	b.n	8009cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c98:	d111      	bne.n	8009cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f907 	bl	8009eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e00f      	b.n	8009cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	bf0c      	ite	eq
 8009cce:	2301      	moveq	r3, #1
 8009cd0:	2300      	movne	r3, #0
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d0a0      	beq.n	8009c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b096      	sub	sp, #88	@ 0x58
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2222      	movs	r2, #34	@ 0x22
 8009d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02d      	beq.n	8009d7a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d24:	4a40      	ldr	r2, [pc, #256]	@ (8009e28 <UART_Start_Receive_DMA+0x140>)
 8009d26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8009e2c <UART_Start_Receive_DMA+0x144>)
 8009d30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d38:	4a3d      	ldr	r2, [pc, #244]	@ (8009e30 <UART_Start_Receive_DMA+0x148>)
 8009d3a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d42:	2200      	movs	r2, #0
 8009d44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3324      	adds	r3, #36	@ 0x24
 8009d52:	4619      	mov	r1, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d58:	461a      	mov	r2, r3
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	f7f8 fa0c 	bl	8002178 <HAL_DMA_Start_IT>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2210      	movs	r2, #16
 8009d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e051      	b.n	8009e1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d018      	beq.n	8009db4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009da2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e6      	bne.n	8009d82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dd4:	637a      	str	r2, [r7, #52]	@ 0x34
 8009dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e5      	bne.n	8009db4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	613b      	str	r3, [r7, #16]
   return(result);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3308      	adds	r3, #8
 8009e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e08:	623a      	str	r2, [r7, #32]
 8009e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	69f9      	ldr	r1, [r7, #28]
 8009e0e:	6a3a      	ldr	r2, [r7, #32]
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e5      	bne.n	8009de8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3758      	adds	r7, #88	@ 0x58
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	08009f85 	.word	0x08009f85
 8009e2c:	0800a0ad 	.word	0x0800a0ad
 8009e30:	0800a0eb 	.word	0x0800a0eb

08009e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b08f      	sub	sp, #60	@ 0x3c
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e6      	bne.n	8009e3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e8e:	61ba      	str	r2, [r7, #24]
 8009e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e5      	bne.n	8009e6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009eaa:	bf00      	nop
 8009eac:	373c      	adds	r7, #60	@ 0x3c
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b095      	sub	sp, #84	@ 0x54
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e6      	bne.n	8009ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	4b1e      	ldr	r3, [pc, #120]	@ (8009f80 <UART_EndRxTransfer+0xc8>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d118      	bne.n	8009f60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f023 0310 	bic.w	r3, r3, #16
 8009f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	6979      	ldr	r1, [r7, #20]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	613b      	str	r3, [r7, #16]
   return(result);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e6      	bne.n	8009f2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f74:	bf00      	nop
 8009f76:	3754      	adds	r7, #84	@ 0x54
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	effffffe 	.word	0xeffffffe

08009f84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b09c      	sub	sp, #112	@ 0x70
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f9a:	d071      	beq.n	800a080 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e6      	bne.n	8009fa4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ff6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e5      	bne.n	8009fd6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	623b      	str	r3, [r7, #32]
   return(result);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a020:	663b      	str	r3, [r7, #96]	@ 0x60
 800a022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a02a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e5      	bne.n	800a00a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a040:	2220      	movs	r2, #32
 800a042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d118      	bne.n	800a080 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a04e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 0310 	bic.w	r3, r3, #16
 800a062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a06c:	61fb      	str	r3, [r7, #28]
 800a06e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	69b9      	ldr	r1, [r7, #24]
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	617b      	str	r3, [r7, #20]
   return(result);
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a082:	2200      	movs	r2, #0
 800a084:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d107      	bne.n	800a09e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a094:	4619      	mov	r1, r3
 800a096:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a098:	f7fe fdf4 	bl	8008c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a09c:	e002      	b.n	800a0a4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a09e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0a0:	f000 fdc2 	bl	800ac28 <HAL_UART_RxCpltCallback>
}
 800a0a4:	bf00      	nop
 800a0a6:	3770      	adds	r7, #112	@ 0x70
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d109      	bne.n	800a0dc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7fe fdd5 	bl	8008c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0da:	e002      	b.n	800a0e2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7fe fdbd 	bl	8008c5c <HAL_UART_RxHalfCpltCallback>
}
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b086      	sub	sp, #24
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a106:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a112:	2b80      	cmp	r3, #128	@ 0x80
 800a114:	d109      	bne.n	800a12a <UART_DMAError+0x40>
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2b21      	cmp	r3, #33	@ 0x21
 800a11a:	d106      	bne.n	800a12a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a124:	6978      	ldr	r0, [r7, #20]
 800a126:	f7ff fe85 	bl	8009e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a134:	2b40      	cmp	r3, #64	@ 0x40
 800a136:	d109      	bne.n	800a14c <UART_DMAError+0x62>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2b22      	cmp	r3, #34	@ 0x22
 800a13c:	d106      	bne.n	800a14c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2200      	movs	r2, #0
 800a142:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a146:	6978      	ldr	r0, [r7, #20]
 800a148:	f7ff feb6 	bl	8009eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a152:	f043 0210 	orr.w	r2, r3, #16
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a15c:	6978      	ldr	r0, [r7, #20]
 800a15e:	f7fe fd87 	bl	8008c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7fe fd71 	bl	8008c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a196:	b480      	push	{r7}
 800a198:	b08f      	sub	sp, #60	@ 0x3c
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a4:	2b21      	cmp	r3, #33	@ 0x21
 800a1a6:	d14c      	bne.n	800a242 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d132      	bne.n	800a21a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	61bb      	str	r3, [r7, #24]
 800a206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6979      	ldr	r1, [r7, #20]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	613b      	str	r3, [r7, #16]
   return(result);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e6      	bne.n	800a1e6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a218:	e013      	b.n	800a242 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a242:	bf00      	nop
 800a244:	373c      	adds	r7, #60	@ 0x3c
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a24e:	b480      	push	{r7}
 800a250:	b091      	sub	sp, #68	@ 0x44
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a25c:	2b21      	cmp	r3, #33	@ 0x21
 800a25e:	d151      	bne.n	800a304 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d132      	bne.n	800a2d2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	623b      	str	r3, [r7, #32]
   return(result);
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a280:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a28c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e6      	bne.n	800a26c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	61fb      	str	r3, [r7, #28]
 800a2be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	69b9      	ldr	r1, [r7, #24]
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e6      	bne.n	800a29e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a2d0:	e018      	b.n	800a304 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ec:	1c9a      	adds	r2, r3, #2
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a304:	bf00      	nop
 800a306:	3744      	adds	r7, #68	@ 0x44
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a310:	b480      	push	{r7}
 800a312:	b091      	sub	sp, #68	@ 0x44
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a31e:	2b21      	cmp	r3, #33	@ 0x21
 800a320:	d160      	bne.n	800a3e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a328:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a32a:	e057      	b.n	800a3dc <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a332:	b29b      	uxth	r3, r3
 800a334:	2b00      	cmp	r3, #0
 800a336:	d133      	bne.n	800a3a0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3308      	adds	r3, #8
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	623b      	str	r3, [r7, #32]
   return(result);
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a34e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a358:	633a      	str	r2, [r7, #48]	@ 0x30
 800a35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e5      	bne.n	800a338 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	60fb      	str	r3, [r7, #12]
   return(result);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a380:	637b      	str	r3, [r7, #52]	@ 0x34
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	69b9      	ldr	r1, [r7, #24]
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	617b      	str	r3, [r7, #20]
   return(result);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e6      	bne.n	800a36c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a39e:	e021      	b.n	800a3e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d013      	beq.n	800a3d6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a3d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a3dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1a4      	bne.n	800a32c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a3e2:	e7ff      	b.n	800a3e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a3e4:	bf00      	nop
 800a3e6:	3744      	adds	r7, #68	@ 0x44
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b091      	sub	sp, #68	@ 0x44
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3fe:	2b21      	cmp	r3, #33	@ 0x21
 800a400:	d165      	bne.n	800a4ce <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a408:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a40a:	e05c      	b.n	800a4c6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d133      	bne.n	800a480 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3308      	adds	r3, #8
 800a41e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	61fb      	str	r3, [r7, #28]
   return(result);
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a43a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e5      	bne.n	800a418 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	60bb      	str	r3, [r7, #8]
   return(result);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a460:	633b      	str	r3, [r7, #48]	@ 0x30
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6979      	ldr	r1, [r7, #20]
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	613b      	str	r3, [r7, #16]
   return(result);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e6      	bne.n	800a44c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a47e:	e026      	b.n	800a4ce <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d018      	beq.n	800a4c0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4a2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a4c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a4c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d19f      	bne.n	800a40c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a4cc:	e7ff      	b.n	800a4ce <UART_TxISR_16BIT_FIFOEN+0xde>
 800a4ce:	bf00      	nop
 800a4d0:	3744      	adds	r7, #68	@ 0x44
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b088      	sub	sp, #32
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4f6:	61fb      	str	r3, [r7, #28]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	6979      	ldr	r1, [r7, #20]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	613b      	str	r3, [r7, #16]
   return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e6      	bne.n	800a4e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fb90 	bl	800ac48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a528:	bf00      	nop
 800a52a:	3720      	adds	r7, #32
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_UARTEx_DisableFifoMode+0x16>
 800a57e:	2302      	movs	r3, #2
 800a580:	e027      	b.n	800a5d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2224      	movs	r2, #36	@ 0x24
 800a58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d101      	bne.n	800a5f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	e02d      	b.n	800a652 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2224      	movs	r2, #36	@ 0x24
 800a602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0201 	bic.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f850 	bl	800a6d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a66e:	2302      	movs	r3, #2
 800a670:	e02d      	b.n	800a6ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2224      	movs	r2, #36	@ 0x24
 800a67e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0201 	bic.w	r2, r2, #1
 800a698:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f812 	bl	800a6d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d108      	bne.n	800a6fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6f8:	e031      	b.n	800a75e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6fa:	2310      	movs	r3, #16
 800a6fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6fe:	2310      	movs	r3, #16
 800a700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	0e5b      	lsrs	r3, r3, #25
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	0f5b      	lsrs	r3, r3, #29
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	7b3a      	ldrb	r2, [r7, #12]
 800a726:	4911      	ldr	r1, [pc, #68]	@ (800a76c <UARTEx_SetNbDataToProcess+0x94>)
 800a728:	5c8a      	ldrb	r2, [r1, r2]
 800a72a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a72e:	7b3a      	ldrb	r2, [r7, #12]
 800a730:	490f      	ldr	r1, [pc, #60]	@ (800a770 <UARTEx_SetNbDataToProcess+0x98>)
 800a732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a734:	fb93 f3f2 	sdiv	r3, r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	7b7a      	ldrb	r2, [r7, #13]
 800a744:	4909      	ldr	r1, [pc, #36]	@ (800a76c <UARTEx_SetNbDataToProcess+0x94>)
 800a746:	5c8a      	ldrb	r2, [r1, r2]
 800a748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a74c:	7b7a      	ldrb	r2, [r7, #13]
 800a74e:	4908      	ldr	r1, [pc, #32]	@ (800a770 <UARTEx_SetNbDataToProcess+0x98>)
 800a750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a752:	fb93 f3f2 	sdiv	r3, r3, r2
 800a756:	b29a      	uxth	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	0800c57c 	.word	0x0800c57c
 800a770:	0800c584 	.word	0x0800c584

0800a774 <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a77e:	f000 f835 	bl	800a7ec <HAL_ResumeTick>

//	HAL_UART_MspInit(&huart3);

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a782:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <HAL_GPIO_EXTI_Callback+0x34>)
 800a784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a788:	4808      	ldr	r0, [pc, #32]	@ (800a7ac <HAL_GPIO_EXTI_Callback+0x38>)
 800a78a:	f000 fdab 	bl	800b2e4 <sniprintf>
 800a78e:	4603      	mov	r3, r0
 800a790:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a792:	89fa      	ldrh	r2, [r7, #14]
 800a794:	2364      	movs	r3, #100	@ 0x64
 800a796:	4905      	ldr	r1, [pc, #20]	@ (800a7ac <HAL_GPIO_EXTI_Callback+0x38>)
 800a798:	4805      	ldr	r0, [pc, #20]	@ (800a7b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a79a:	f7fd fd37 	bl	800820c <HAL_UART_Transmit>

//	HAL_NVIC_SystemReset();
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800c4f4 	.word	0x0800c4f4
 800a7ac:	24000668 	.word	0x24000668
 800a7b0:	24000558 	.word	0x24000558

0800a7b4 <startLowPowerMode>:
#include "lowPowerMode.h"
#include "uart.h"
#include "realtimeclock.h"

void startLowPowerMode(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
    HAL_SuspendTick();
 800a7b8:	f000 f808 	bl	800a7cc <HAL_SuspendTick>

    HAL_PWREx_ClearPendingEvent();
 800a7bc:	f7fa fa06 	bl	8004bcc <HAL_PWREx_ClearPendingEvent>

    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f7fa f9ae 	bl	8004b24 <HAL_PWR_EnterSLEEPMode>
}
 800a7c8:	bf00      	nop
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a7d0:	4b05      	ldr	r3, [pc, #20]	@ (800a7e8 <HAL_SuspendTick+0x1c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a04      	ldr	r2, [pc, #16]	@ (800a7e8 <HAL_SuspendTick+0x1c>)
 800a7d6:	f023 0302 	bic.w	r3, r3, #2
 800a7da:	6013      	str	r3, [r2, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	e000e010 	.word	0xe000e010

0800a7ec <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a7f0:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <HAL_ResumeTick+0x1c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a04      	ldr	r2, [pc, #16]	@ (800a808 <HAL_ResumeTick+0x1c>)
 800a7f6:	f043 0302 	orr.w	r3, r3, #2
 800a7fa:	6013      	str	r3, [r2, #0]
}
 800a7fc:	bf00      	nop
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	e000e010 	.word	0xe000e010

0800a80c <HAL_RTC_AlarmAEventCallback>:

static uint8_t days_in_month(uint8_t month, uint8_t year);


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a814:	2101      	movs	r1, #1
 800a816:	480f      	ldr	r0, [pc, #60]	@ (800a854 <HAL_RTC_AlarmAEventCallback+0x48>)
 800a818:	f7fa f94f 	bl	8004aba <HAL_GPIO_TogglePin>

	sDateTimeConfig_t dt = {0};
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dt);
 800a828:	f107 0308 	add.w	r3, r7, #8
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 f879 	bl	800a924 <getRTCData>

	add_time(&dt, 0, 0, 5);
 800a832:	f107 0008 	add.w	r0, r7, #8
 800a836:	2305      	movs	r3, #5
 800a838:	2200      	movs	r2, #0
 800a83a:	2100      	movs	r1, #0
 800a83c:	f000 f93a 	bl	800aab4 <add_time>

	setRTCAlarm(&dt);
 800a840:	f107 0308 	add.w	r3, r7, #8
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f89b 	bl	800a980 <setRTCAlarm>

//	startLowPowerMode();
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	58020400 	.word	0x58020400

0800a858 <RTCInit>:

void RTCInit(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a85c:	2101      	movs	r1, #1
 800a85e:	4809      	ldr	r0, [pc, #36]	@ (800a884 <RTCInit+0x2c>)
 800a860:	f7fd fc64 	bl	800812c <HAL_RTCEx_BKUPRead>
 800a864:	4603      	mov	r3, r0
 800a866:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d008      	beq.n	800a880 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a86e:	4806      	ldr	r0, [pc, #24]	@ (800a888 <RTCInit+0x30>)
 800a870:	f000 f810 	bl	800a894 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a874:	2364      	movs	r3, #100	@ 0x64
 800a876:	220d      	movs	r2, #13
 800a878:	4904      	ldr	r1, [pc, #16]	@ (800a88c <RTCInit+0x34>)
 800a87a:	4805      	ldr	r0, [pc, #20]	@ (800a890 <RTCInit+0x38>)
 800a87c:	f7fd fcc6 	bl	800820c <HAL_UART_Transmit>
	}
}
 800a880:	bf00      	nop
 800a882:	bd80      	pop	{r7, pc}
 800a884:	24000530 	.word	0x24000530
 800a888:	24000088 	.word	0x24000088
 800a88c:	0800c508 	.word	0x0800c508
 800a890:	24000558 	.word	0x24000558

0800a894 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	605a      	str	r2, [r3, #4]
 800a8a6:	609a      	str	r2, [r3, #8]
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	789b      	ldrb	r3, [r3, #2]
 800a8bc:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	78db      	ldrb	r3, [r3, #3]
 800a8ce:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	795b      	ldrb	r3, [r3, #5]
 800a8d4:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	791b      	ldrb	r3, [r3, #4]
 800a8da:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	799b      	ldrb	r3, [r3, #6]
 800a8e0:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	480d      	ldr	r0, [pc, #52]	@ (800a920 <setRTCData+0x8c>)
 800a8ec:	f7fc ff20 	bl	8007730 <HAL_RTC_SetTime>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10f      	bne.n	800a916 <setRTCData+0x82>
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4808      	ldr	r0, [pc, #32]	@ (800a920 <setRTCData+0x8c>)
 800a900:	f7fd f810 	bl	8007924 <HAL_RTC_SetDate>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d105      	bne.n	800a916 <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a90a:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a90e:	2101      	movs	r1, #1
 800a910:	4803      	ldr	r0, [pc, #12]	@ (800a920 <setRTCData+0x8c>)
 800a912:	f7fd fbf3 	bl	80080fc <HAL_RTCEx_BKUPWrite>
	}
}
 800a916:	bf00      	nop
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	24000530 	.word	0x24000530

0800a924 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a92c:	f107 0308 	add.w	r3, r7, #8
 800a930:	2200      	movs	r2, #0
 800a932:	4619      	mov	r1, r3
 800a934:	4811      	ldr	r0, [pc, #68]	@ (800a97c <getRTCData+0x58>)
 800a936:	f7fc ff99 	bl	800786c <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a93a:	f107 031c 	add.w	r3, r7, #28
 800a93e:	2200      	movs	r2, #0
 800a940:	4619      	mov	r1, r3
 800a942:	480e      	ldr	r0, [pc, #56]	@ (800a97c <getRTCData+0x58>)
 800a944:	f7fd f876 	bl	8007a34 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a948:	7fba      	ldrb	r2, [r7, #30]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a94e:	7f3a      	ldrb	r2, [r7, #28]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a954:	7f7a      	ldrb	r2, [r7, #29]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a95a:	7ffa      	ldrb	r2, [r7, #31]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a960:	7a3a      	ldrb	r2, [r7, #8]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a966:	7a7a      	ldrb	r2, [r7, #9]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a96c:	7aba      	ldrb	r2, [r7, #10]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	709a      	strb	r2, [r3, #2]
}
 800a972:	bf00      	nop
 800a974:	3720      	adds	r7, #32
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	24000530 	.word	0x24000530

0800a980 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08c      	sub	sp, #48	@ 0x30
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a988:	f107 0308 	add.w	r3, r7, #8
 800a98c:	2228      	movs	r2, #40	@ 0x28
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fd1e 	bl	800b3d2 <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	785b      	ldrb	r3, [r3, #1]
 800a9a0:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	789b      	ldrb	r3, [r3, #2]
 800a9a6:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800a9bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	78db      	ldrb	r3, [r3, #3]
 800a9c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800a9ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4805      	ldr	r0, [pc, #20]	@ (800a9f0 <setRTCAlarm+0x70>)
 800a9da:	f7fd f879 	bl	8007ad0 <HAL_RTC_SetAlarm_IT>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <setRTCAlarm+0x68>
	{
		Error_Handler();
 800a9e4:	f7f6 fb1a 	bl	800101c <Error_Handler>
	}
}
 800a9e8:	bf00      	nop
 800a9ea:	3730      	adds	r7, #48	@ 0x30
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	24000530 	.word	0x24000530

0800a9f4 <is_leap_year>:

static uint8_t is_leap_year(uint8_t year) {
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	71fb      	strb	r3, [r7, #7]
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <is_leap_year+0x2e>
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	4a11      	ldr	r2, [pc, #68]	@ (800aa54 <is_leap_year+0x60>)
 800aa0e:	fba2 1203 	umull	r1, r2, r2, r3
 800aa12:	0952      	lsrs	r2, r2, #5
 800aa14:	2164      	movs	r1, #100	@ 0x64
 800aa16:	fb01 f202 	mul.w	r2, r1, r2
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10d      	bne.n	800aa3e <is_leap_year+0x4a>
 800aa22:	79fa      	ldrb	r2, [r7, #7]
 800aa24:	4b0b      	ldr	r3, [pc, #44]	@ (800aa54 <is_leap_year+0x60>)
 800aa26:	fb83 1302 	smull	r1, r3, r3, r2
 800aa2a:	11d9      	asrs	r1, r3, #7
 800aa2c:	17d3      	asrs	r3, r2, #31
 800aa2e:	1acb      	subs	r3, r1, r3
 800aa30:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800aa34:	fb01 f303 	mul.w	r3, r1, r3
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <is_leap_year+0x4e>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <is_leap_year+0x50>
 800aa42:	2300      	movs	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	51eb851f 	.word	0x51eb851f

0800aa58 <days_in_month>:

static uint8_t days_in_month(uint8_t month, uint8_t year) {
 800aa58:	b5b0      	push	{r4, r5, r7, lr}
 800aa5a:	b08e      	sub	sp, #56	@ 0x38
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	460a      	mov	r2, r1
 800aa62:	71fb      	strb	r3, [r7, #7]
 800aa64:	4613      	mov	r3, r2
 800aa66:	71bb      	strb	r3, [r7, #6]
    int days[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 800aa68:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <days_in_month+0x58>)
 800aa6a:	f107 0408 	add.w	r4, r7, #8
 800aa6e:	461d      	mov	r5, r3
 800aa70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aa7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (month == 2 && is_leap_year(year)) {
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d108      	bne.n	800aa98 <days_in_month+0x40>
 800aa86:	79bb      	ldrb	r3, [r7, #6]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff ffb3 	bl	800a9f4 <is_leap_year>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <days_in_month+0x40>
        return 29;
 800aa94:	231d      	movs	r3, #29
 800aa96:	e007      	b.n	800aaa8 <days_in_month+0x50>
    }
    return days[month - 1];
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	3338      	adds	r3, #56	@ 0x38
 800aaa0:	443b      	add	r3, r7
 800aaa2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800aaa6:	b2db      	uxtb	r3, r3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3738      	adds	r7, #56	@ 0x38
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bdb0      	pop	{r4, r5, r7, pc}
 800aab0:	0800c51c 	.word	0x0800c51c

0800aab4 <add_time>:

void add_time(sDateTimeConfig_t *dt, uint8_t add_hours, uint8_t add_minutes, uint8_t add_seconds) {
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	4608      	mov	r0, r1
 800aabe:	4611      	mov	r1, r2
 800aac0:	461a      	mov	r2, r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	70fb      	strb	r3, [r7, #3]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70bb      	strb	r3, [r7, #2]
 800aaca:	4613      	mov	r3, r2
 800aacc:	707b      	strb	r3, [r7, #1]
    dt->secs += add_seconds;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	789a      	ldrb	r2, [r3, #2]
 800aad2:	787b      	ldrb	r3, [r7, #1]
 800aad4:	4413      	add	r3, r2
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	709a      	strb	r2, [r3, #2]
    if (dt->secs >= 60) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	789b      	ldrb	r3, [r3, #2]
 800aae0:	2b3b      	cmp	r3, #59	@ 0x3b
 800aae2:	d917      	bls.n	800ab14 <add_time+0x60>
        add_minutes += dt->secs / 60;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	789b      	ldrb	r3, [r3, #2]
 800aae8:	4a4d      	ldr	r2, [pc, #308]	@ (800ac20 <add_time+0x16c>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	095b      	lsrs	r3, r3, #5
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	78bb      	ldrb	r3, [r7, #2]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	70bb      	strb	r3, [r7, #2]
        dt->secs %= 60;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	789a      	ldrb	r2, [r3, #2]
 800aafc:	4b48      	ldr	r3, [pc, #288]	@ (800ac20 <add_time+0x16c>)
 800aafe:	fba3 1302 	umull	r1, r3, r3, r2
 800ab02:	0959      	lsrs	r1, r3, #5
 800ab04:	460b      	mov	r3, r1
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	1a5b      	subs	r3, r3, r1
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	709a      	strb	r2, [r3, #2]
    }

    dt->mins += add_minutes;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	785a      	ldrb	r2, [r3, #1]
 800ab18:	78bb      	ldrb	r3, [r7, #2]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	705a      	strb	r2, [r3, #1]
    if (dt->mins >= 60) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	2b3b      	cmp	r3, #59	@ 0x3b
 800ab28:	d917      	bls.n	800ab5a <add_time+0xa6>
        add_hours += dt->mins / 60;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	4a3c      	ldr	r2, [pc, #240]	@ (800ac20 <add_time+0x16c>)
 800ab30:	fba2 2303 	umull	r2, r3, r2, r3
 800ab34:	095b      	lsrs	r3, r3, #5
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	70fb      	strb	r3, [r7, #3]
        dt->mins %= 60;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	785a      	ldrb	r2, [r3, #1]
 800ab42:	4b37      	ldr	r3, [pc, #220]	@ (800ac20 <add_time+0x16c>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	0959      	lsrs	r1, r3, #5
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	1a5b      	subs	r3, r3, r1
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	705a      	strb	r2, [r3, #1]
    }

    dt->hours += add_hours;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	781a      	ldrb	r2, [r3, #0]
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	4413      	add	r3, r2
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	701a      	strb	r2, [r3, #0]
    if (dt->hours >= 24) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b17      	cmp	r3, #23
 800ab6e:	d91a      	bls.n	800aba6 <add_time+0xf2>
        dt->date += dt->hours / 24;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	791a      	ldrb	r2, [r3, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	492a      	ldr	r1, [pc, #168]	@ (800ac24 <add_time+0x170>)
 800ab7a:	fba1 1303 	umull	r1, r3, r1, r3
 800ab7e:	091b      	lsrs	r3, r3, #4
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	4413      	add	r3, r2
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	711a      	strb	r2, [r3, #4]
        dt->hours %= 24;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	4b25      	ldr	r3, [pc, #148]	@ (800ac24 <add_time+0x170>)
 800ab90:	fba3 1302 	umull	r1, r3, r3, r2
 800ab94:	0919      	lsrs	r1, r3, #4
 800ab96:	460b      	mov	r3, r1
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	440b      	add	r3, r1
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	701a      	strb	r2, [r3, #0]
    }

    uint8_t full_year = 2000 + dt->year;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	799b      	ldrb	r3, [r3, #6]
 800abaa:	3b30      	subs	r3, #48	@ 0x30
 800abac:	73fb      	strb	r3, [r7, #15]
    while (dt->date > days_in_month(dt->month, full_year)) {
 800abae:	e025      	b.n	800abfc <add_time+0x148>
        dt->date -= days_in_month(dt->month, full_year);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	795b      	ldrb	r3, [r3, #5]
 800abb4:	7bfa      	ldrb	r2, [r7, #15]
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ff4d 	bl	800aa58 <days_in_month>
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	791b      	ldrb	r3, [r3, #4]
 800abc6:	1a9b      	subs	r3, r3, r2
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	711a      	strb	r2, [r3, #4]
        dt->month++;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	795b      	ldrb	r3, [r3, #5]
 800abd2:	3301      	adds	r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	715a      	strb	r2, [r3, #5]
        if (dt->month > 12) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	795b      	ldrb	r3, [r3, #5]
 800abde:	2b0c      	cmp	r3, #12
 800abe0:	d90c      	bls.n	800abfc <add_time+0x148>
            dt->month = 1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	715a      	strb	r2, [r3, #5]
            dt->year++;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	799b      	ldrb	r3, [r3, #6]
 800abec:	3301      	adds	r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	719a      	strb	r2, [r3, #6]
            full_year = 2000 + dt->year;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	799b      	ldrb	r3, [r3, #6]
 800abf8:	3b30      	subs	r3, #48	@ 0x30
 800abfa:	73fb      	strb	r3, [r7, #15]
    while (dt->date > days_in_month(dt->month, full_year)) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	791c      	ldrb	r4, [r3, #4]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	795b      	ldrb	r3, [r3, #5]
 800ac04:	7bfa      	ldrb	r2, [r7, #15]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff ff25 	bl	800aa58 <days_in_month>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d8cd      	bhi.n	800abb0 <add_time+0xfc>
        }
    }
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	88888889 	.word	0x88888889
 800ac24:	aaaaaaab 	.word	0xaaaaaaab

0800ac28 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800ac30:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <HAL_UART_RxCpltCallback+0x1c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	60fb      	str	r3, [r7, #12]

	fptr();
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4798      	blx	r3
}
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	240006cc 	.word	0x240006cc

0800ac48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800ac64:	4a04      	ldr	r2, [pc, #16]	@ (800ac78 <uartInit+0x1c>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6013      	str	r3, [r2, #0]
}
 800ac6a:	bf00      	nop
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	240006cc 	.word	0x240006cc

0800ac7c <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800ac84:	2201      	movs	r2, #1
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4803      	ldr	r0, [pc, #12]	@ (800ac98 <receptionItrOn+0x1c>)
 800ac8a:	f7fd fbe1 	bl	8008450 <HAL_UART_Receive_DMA>
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	24000558 	.word	0x24000558

0800ac9c <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800aca0:	4b07      	ldr	r3, [pc, #28]	@ (800acc0 <debugRxCallback+0x24>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b0d      	cmp	r3, #13
 800aca6:	d102      	bne.n	800acae <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800aca8:	4b06      	ldr	r3, [pc, #24]	@ (800acc4 <debugRxCallback+0x28>)
 800acaa:	2201      	movs	r2, #1
 800acac:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800acae:	4b06      	ldr	r3, [pc, #24]	@ (800acc8 <debugRxCallback+0x2c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4903      	ldr	r1, [pc, #12]	@ (800acc0 <debugRxCallback+0x24>)
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 f888 	bl	800adca <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800acba:	bf00      	nop
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	240006d0 	.word	0x240006d0
 800acc4:	240006d8 	.word	0x240006d8
 800acc8:	240006d4 	.word	0x240006d4

0800accc <debugUartInit>:
{

}

void debugUartInit(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800acd2:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <debugUartInit+0x30>)
 800acd4:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800acd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad00 <debugUartInit+0x34>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2201      	movs	r2, #1
 800acdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 f839 	bl	800ad58 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ffb8 	bl	800ac5c <uartInit>

	receptionItrOn(&data);
 800acec:	4805      	ldr	r0, [pc, #20]	@ (800ad04 <debugUartInit+0x38>)
 800acee:	f7ff ffc5 	bl	800ac7c <receptionItrOn>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800ac9d 	.word	0x0800ac9d
 800ad00:	240006d4 	.word	0x240006d4
 800ad04:	240006d0 	.word	0x240006d0

0800ad08 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800ad0c:	4b03      	ldr	r3, [pc, #12]	@ (800ad1c <getCmdReceivedFlag+0x14>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	240006d8 	.word	0x240006d8

0800ad20 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800ad2a:	4a04      	ldr	r2, [pc, #16]	@ (800ad3c <setCmdReceivedFlag+0x1c>)
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	7013      	strb	r3, [r2, #0]
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	240006d8 	.word	0x240006d8

0800ad40 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
	return rxBuffer;
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <getRxBuffer+0x14>)
 800ad46:	681b      	ldr	r3, [r3, #0]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	240006d4 	.word	0x240006d4

0800ad58 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	807b      	strh	r3, [r7, #2]
 800ad64:	4613      	mov	r3, r2
 800ad66:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	883a      	ldrh	r2, [r7, #0]
 800ad7c:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	887a      	ldrh	r2, [r7, #2]
 800ad82:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800ad84:	887b      	ldrh	r3, [r7, #2]
 800ad86:	883a      	ldrh	r2, [r7, #0]
 800ad88:	fb02 f303 	mul.w	r3, r2, r3
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 f8ad 	bl	800aeec <malloc>
 800ad92:	4603      	mov	r3, r0
 800ad94:	461a      	mov	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68d8      	ldr	r0, [r3, #12]
 800adac:	887b      	ldrh	r3, [r7, #2]
 800adae:	883a      	ldrh	r2, [r7, #0]
 800adb0:	fb02 f303 	mul.w	r3, r2, r3
 800adb4:	461a      	mov	r2, r3
 800adb6:	2100      	movs	r1, #0
 800adb8:	f000 fb0b 	bl	800b3d2 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800add4:	2303      	movs	r3, #3
 800add6:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	3301      	adds	r3, #1
 800adde:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	889b      	ldrh	r3, [r3, #4]
 800ade4:	89ba      	ldrh	r2, [r7, #12]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d301      	bcc.n	800adee <circularBufferEnqueue+0x24>
    {
        next = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	885b      	ldrh	r3, [r3, #2]
 800adf2:	89ba      	ldrh	r2, [r7, #12]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d02b      	beq.n	800ae50 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	8812      	ldrh	r2, [r2, #0]
 800ae00:	4611      	mov	r1, r2
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	88d2      	ldrh	r2, [r2, #6]
 800ae06:	fb01 f202 	mul.w	r2, r1, r2
 800ae0a:	1898      	adds	r0, r3, r2
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	88db      	ldrh	r3, [r3, #6]
 800ae10:	461a      	mov	r2, r3
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	f000 fbc5 	bl	800b5a2 <memcpy>
 800ae18:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d017      	beq.n	800ae50 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	89ba      	ldrh	r2, [r7, #12]
 800ae24:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800ae26:	2302      	movs	r3, #2
 800ae28:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	889b      	ldrh	r3, [r3, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	8852      	ldrh	r2, [r2, #2]
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	8892      	ldrh	r2, [r2, #4]
 800ae40:	fb93 f1f2 	sdiv	r1, r3, r2
 800ae44:	fb01 f202 	mul.w	r2, r1, r2
 800ae48:	1a9b      	subs	r3, r3, r2
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800ae64:	2305      	movs	r3, #5
 800ae66:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	885a      	ldrh	r2, [r3, #2]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d032      	beq.n	800aeda <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	885b      	ldrh	r3, [r3, #2]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	889b      	ldrh	r3, [r3, #4]
 800ae80:	89ba      	ldrh	r2, [r7, #12]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d301      	bcc.n	800ae8a <circularBufferDequeue+0x30>
        {
            next = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	8852      	ldrh	r2, [r2, #2]
 800ae92:	4611      	mov	r1, r2
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	88d2      	ldrh	r2, [r2, #6]
 800ae98:	fb01 f202 	mul.w	r2, r1, r2
 800ae9c:	1899      	adds	r1, r3, r2
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	461a      	mov	r2, r3
 800aea4:	6838      	ldr	r0, [r7, #0]
 800aea6:	f000 fb7c 	bl	800b5a2 <memcpy>

        cBuff->tail = next;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	89ba      	ldrh	r2, [r7, #12]
 800aeae:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	889b      	ldrh	r3, [r3, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	8852      	ldrh	r2, [r2, #2]
 800aec0:	1a9b      	subs	r3, r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	8892      	ldrh	r2, [r2, #4]
 800aec6:	fb93 f1f2 	sdiv	r1, r3, r2
 800aeca:	fb01 f202 	mul.w	r2, r1, r2
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800aed6:	2304      	movs	r3, #4
 800aed8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <atoi>:
 800aee4:	220a      	movs	r2, #10
 800aee6:	2100      	movs	r1, #0
 800aee8:	f000 b930 	b.w	800b14c <strtol>

0800aeec <malloc>:
 800aeec:	4b02      	ldr	r3, [pc, #8]	@ (800aef8 <malloc+0xc>)
 800aeee:	4601      	mov	r1, r0
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f000 b825 	b.w	800af40 <_malloc_r>
 800aef6:	bf00      	nop
 800aef8:	2400009c 	.word	0x2400009c

0800aefc <sbrk_aligned>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	4e0f      	ldr	r6, [pc, #60]	@ (800af3c <sbrk_aligned+0x40>)
 800af00:	460c      	mov	r4, r1
 800af02:	6831      	ldr	r1, [r6, #0]
 800af04:	4605      	mov	r5, r0
 800af06:	b911      	cbnz	r1, 800af0e <sbrk_aligned+0x12>
 800af08:	f000 fafc 	bl	800b504 <_sbrk_r>
 800af0c:	6030      	str	r0, [r6, #0]
 800af0e:	4621      	mov	r1, r4
 800af10:	4628      	mov	r0, r5
 800af12:	f000 faf7 	bl	800b504 <_sbrk_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d103      	bne.n	800af22 <sbrk_aligned+0x26>
 800af1a:	f04f 34ff 	mov.w	r4, #4294967295
 800af1e:	4620      	mov	r0, r4
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	1cc4      	adds	r4, r0, #3
 800af24:	f024 0403 	bic.w	r4, r4, #3
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d0f8      	beq.n	800af1e <sbrk_aligned+0x22>
 800af2c:	1a21      	subs	r1, r4, r0
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 fae8 	bl	800b504 <_sbrk_r>
 800af34:	3001      	adds	r0, #1
 800af36:	d1f2      	bne.n	800af1e <sbrk_aligned+0x22>
 800af38:	e7ef      	b.n	800af1a <sbrk_aligned+0x1e>
 800af3a:	bf00      	nop
 800af3c:	240006dc 	.word	0x240006dc

0800af40 <_malloc_r>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	1ccd      	adds	r5, r1, #3
 800af46:	f025 0503 	bic.w	r5, r5, #3
 800af4a:	3508      	adds	r5, #8
 800af4c:	2d0c      	cmp	r5, #12
 800af4e:	bf38      	it	cc
 800af50:	250c      	movcc	r5, #12
 800af52:	2d00      	cmp	r5, #0
 800af54:	4606      	mov	r6, r0
 800af56:	db01      	blt.n	800af5c <_malloc_r+0x1c>
 800af58:	42a9      	cmp	r1, r5
 800af5a:	d904      	bls.n	800af66 <_malloc_r+0x26>
 800af5c:	230c      	movs	r3, #12
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	2000      	movs	r0, #0
 800af62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b03c <_malloc_r+0xfc>
 800af6a:	f000 f869 	bl	800b040 <__malloc_lock>
 800af6e:	f8d8 3000 	ldr.w	r3, [r8]
 800af72:	461c      	mov	r4, r3
 800af74:	bb44      	cbnz	r4, 800afc8 <_malloc_r+0x88>
 800af76:	4629      	mov	r1, r5
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff ffbf 	bl	800aefc <sbrk_aligned>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	4604      	mov	r4, r0
 800af82:	d158      	bne.n	800b036 <_malloc_r+0xf6>
 800af84:	f8d8 4000 	ldr.w	r4, [r8]
 800af88:	4627      	mov	r7, r4
 800af8a:	2f00      	cmp	r7, #0
 800af8c:	d143      	bne.n	800b016 <_malloc_r+0xd6>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	d04b      	beq.n	800b02a <_malloc_r+0xea>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	4639      	mov	r1, r7
 800af96:	4630      	mov	r0, r6
 800af98:	eb04 0903 	add.w	r9, r4, r3
 800af9c:	f000 fab2 	bl	800b504 <_sbrk_r>
 800afa0:	4581      	cmp	r9, r0
 800afa2:	d142      	bne.n	800b02a <_malloc_r+0xea>
 800afa4:	6821      	ldr	r1, [r4, #0]
 800afa6:	1a6d      	subs	r5, r5, r1
 800afa8:	4629      	mov	r1, r5
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff ffa6 	bl	800aefc <sbrk_aligned>
 800afb0:	3001      	adds	r0, #1
 800afb2:	d03a      	beq.n	800b02a <_malloc_r+0xea>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	442b      	add	r3, r5
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	f8d8 3000 	ldr.w	r3, [r8]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	bb62      	cbnz	r2, 800b01c <_malloc_r+0xdc>
 800afc2:	f8c8 7000 	str.w	r7, [r8]
 800afc6:	e00f      	b.n	800afe8 <_malloc_r+0xa8>
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	1b52      	subs	r2, r2, r5
 800afcc:	d420      	bmi.n	800b010 <_malloc_r+0xd0>
 800afce:	2a0b      	cmp	r2, #11
 800afd0:	d917      	bls.n	800b002 <_malloc_r+0xc2>
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	6025      	str	r5, [r4, #0]
 800afd8:	bf18      	it	ne
 800afda:	6059      	strne	r1, [r3, #4]
 800afdc:	6863      	ldr	r3, [r4, #4]
 800afde:	bf08      	it	eq
 800afe0:	f8c8 1000 	streq.w	r1, [r8]
 800afe4:	5162      	str	r2, [r4, r5]
 800afe6:	604b      	str	r3, [r1, #4]
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 f82f 	bl	800b04c <__malloc_unlock>
 800afee:	f104 000b 	add.w	r0, r4, #11
 800aff2:	1d23      	adds	r3, r4, #4
 800aff4:	f020 0007 	bic.w	r0, r0, #7
 800aff8:	1ac2      	subs	r2, r0, r3
 800affa:	bf1c      	itt	ne
 800affc:	1a1b      	subne	r3, r3, r0
 800affe:	50a3      	strne	r3, [r4, r2]
 800b000:	e7af      	b.n	800af62 <_malloc_r+0x22>
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	42a3      	cmp	r3, r4
 800b006:	bf0c      	ite	eq
 800b008:	f8c8 2000 	streq.w	r2, [r8]
 800b00c:	605a      	strne	r2, [r3, #4]
 800b00e:	e7eb      	b.n	800afe8 <_malloc_r+0xa8>
 800b010:	4623      	mov	r3, r4
 800b012:	6864      	ldr	r4, [r4, #4]
 800b014:	e7ae      	b.n	800af74 <_malloc_r+0x34>
 800b016:	463c      	mov	r4, r7
 800b018:	687f      	ldr	r7, [r7, #4]
 800b01a:	e7b6      	b.n	800af8a <_malloc_r+0x4a>
 800b01c:	461a      	mov	r2, r3
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	42a3      	cmp	r3, r4
 800b022:	d1fb      	bne.n	800b01c <_malloc_r+0xdc>
 800b024:	2300      	movs	r3, #0
 800b026:	6053      	str	r3, [r2, #4]
 800b028:	e7de      	b.n	800afe8 <_malloc_r+0xa8>
 800b02a:	230c      	movs	r3, #12
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	4630      	mov	r0, r6
 800b030:	f000 f80c 	bl	800b04c <__malloc_unlock>
 800b034:	e794      	b.n	800af60 <_malloc_r+0x20>
 800b036:	6005      	str	r5, [r0, #0]
 800b038:	e7d6      	b.n	800afe8 <_malloc_r+0xa8>
 800b03a:	bf00      	nop
 800b03c:	240006e0 	.word	0x240006e0

0800b040 <__malloc_lock>:
 800b040:	4801      	ldr	r0, [pc, #4]	@ (800b048 <__malloc_lock+0x8>)
 800b042:	f000 baac 	b.w	800b59e <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	24000824 	.word	0x24000824

0800b04c <__malloc_unlock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	@ (800b054 <__malloc_unlock+0x8>)
 800b04e:	f000 baa7 	b.w	800b5a0 <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	24000824 	.word	0x24000824

0800b058 <_strtol_l.constprop.0>:
 800b058:	2b24      	cmp	r3, #36	@ 0x24
 800b05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05e:	4686      	mov	lr, r0
 800b060:	4690      	mov	r8, r2
 800b062:	d801      	bhi.n	800b068 <_strtol_l.constprop.0+0x10>
 800b064:	2b01      	cmp	r3, #1
 800b066:	d106      	bne.n	800b076 <_strtol_l.constprop.0+0x1e>
 800b068:	f000 fa6e 	bl	800b548 <__errno>
 800b06c:	2316      	movs	r3, #22
 800b06e:	6003      	str	r3, [r0, #0]
 800b070:	2000      	movs	r0, #0
 800b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b076:	4834      	ldr	r0, [pc, #208]	@ (800b148 <_strtol_l.constprop.0+0xf0>)
 800b078:	460d      	mov	r5, r1
 800b07a:	462a      	mov	r2, r5
 800b07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b080:	5d06      	ldrb	r6, [r0, r4]
 800b082:	f016 0608 	ands.w	r6, r6, #8
 800b086:	d1f8      	bne.n	800b07a <_strtol_l.constprop.0+0x22>
 800b088:	2c2d      	cmp	r4, #45	@ 0x2d
 800b08a:	d12d      	bne.n	800b0e8 <_strtol_l.constprop.0+0x90>
 800b08c:	782c      	ldrb	r4, [r5, #0]
 800b08e:	2601      	movs	r6, #1
 800b090:	1c95      	adds	r5, r2, #2
 800b092:	f033 0210 	bics.w	r2, r3, #16
 800b096:	d109      	bne.n	800b0ac <_strtol_l.constprop.0+0x54>
 800b098:	2c30      	cmp	r4, #48	@ 0x30
 800b09a:	d12a      	bne.n	800b0f2 <_strtol_l.constprop.0+0x9a>
 800b09c:	782a      	ldrb	r2, [r5, #0]
 800b09e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0a2:	2a58      	cmp	r2, #88	@ 0x58
 800b0a4:	d125      	bne.n	800b0f2 <_strtol_l.constprop.0+0x9a>
 800b0a6:	786c      	ldrb	r4, [r5, #1]
 800b0a8:	2310      	movs	r3, #16
 800b0aa:	3502      	adds	r5, #2
 800b0ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b0b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	fbbc f9f3 	udiv	r9, ip, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b0c4:	2f09      	cmp	r7, #9
 800b0c6:	d81b      	bhi.n	800b100 <_strtol_l.constprop.0+0xa8>
 800b0c8:	463c      	mov	r4, r7
 800b0ca:	42a3      	cmp	r3, r4
 800b0cc:	dd27      	ble.n	800b11e <_strtol_l.constprop.0+0xc6>
 800b0ce:	1c57      	adds	r7, r2, #1
 800b0d0:	d007      	beq.n	800b0e2 <_strtol_l.constprop.0+0x8a>
 800b0d2:	4581      	cmp	r9, r0
 800b0d4:	d320      	bcc.n	800b118 <_strtol_l.constprop.0+0xc0>
 800b0d6:	d101      	bne.n	800b0dc <_strtol_l.constprop.0+0x84>
 800b0d8:	45a2      	cmp	sl, r4
 800b0da:	db1d      	blt.n	800b118 <_strtol_l.constprop.0+0xc0>
 800b0dc:	fb00 4003 	mla	r0, r0, r3, r4
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0e6:	e7eb      	b.n	800b0c0 <_strtol_l.constprop.0+0x68>
 800b0e8:	2c2b      	cmp	r4, #43	@ 0x2b
 800b0ea:	bf04      	itt	eq
 800b0ec:	782c      	ldrbeq	r4, [r5, #0]
 800b0ee:	1c95      	addeq	r5, r2, #2
 800b0f0:	e7cf      	b.n	800b092 <_strtol_l.constprop.0+0x3a>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1da      	bne.n	800b0ac <_strtol_l.constprop.0+0x54>
 800b0f6:	2c30      	cmp	r4, #48	@ 0x30
 800b0f8:	bf0c      	ite	eq
 800b0fa:	2308      	moveq	r3, #8
 800b0fc:	230a      	movne	r3, #10
 800b0fe:	e7d5      	b.n	800b0ac <_strtol_l.constprop.0+0x54>
 800b100:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b104:	2f19      	cmp	r7, #25
 800b106:	d801      	bhi.n	800b10c <_strtol_l.constprop.0+0xb4>
 800b108:	3c37      	subs	r4, #55	@ 0x37
 800b10a:	e7de      	b.n	800b0ca <_strtol_l.constprop.0+0x72>
 800b10c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b110:	2f19      	cmp	r7, #25
 800b112:	d804      	bhi.n	800b11e <_strtol_l.constprop.0+0xc6>
 800b114:	3c57      	subs	r4, #87	@ 0x57
 800b116:	e7d8      	b.n	800b0ca <_strtol_l.constprop.0+0x72>
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	e7e1      	b.n	800b0e2 <_strtol_l.constprop.0+0x8a>
 800b11e:	1c53      	adds	r3, r2, #1
 800b120:	d108      	bne.n	800b134 <_strtol_l.constprop.0+0xdc>
 800b122:	2322      	movs	r3, #34	@ 0x22
 800b124:	f8ce 3000 	str.w	r3, [lr]
 800b128:	4660      	mov	r0, ip
 800b12a:	f1b8 0f00 	cmp.w	r8, #0
 800b12e:	d0a0      	beq.n	800b072 <_strtol_l.constprop.0+0x1a>
 800b130:	1e69      	subs	r1, r5, #1
 800b132:	e006      	b.n	800b142 <_strtol_l.constprop.0+0xea>
 800b134:	b106      	cbz	r6, 800b138 <_strtol_l.constprop.0+0xe0>
 800b136:	4240      	negs	r0, r0
 800b138:	f1b8 0f00 	cmp.w	r8, #0
 800b13c:	d099      	beq.n	800b072 <_strtol_l.constprop.0+0x1a>
 800b13e:	2a00      	cmp	r2, #0
 800b140:	d1f6      	bne.n	800b130 <_strtol_l.constprop.0+0xd8>
 800b142:	f8c8 1000 	str.w	r1, [r8]
 800b146:	e794      	b.n	800b072 <_strtol_l.constprop.0+0x1a>
 800b148:	0800c58d 	.word	0x0800c58d

0800b14c <strtol>:
 800b14c:	4613      	mov	r3, r2
 800b14e:	460a      	mov	r2, r1
 800b150:	4601      	mov	r1, r0
 800b152:	4802      	ldr	r0, [pc, #8]	@ (800b15c <strtol+0x10>)
 800b154:	6800      	ldr	r0, [r0, #0]
 800b156:	f7ff bf7f 	b.w	800b058 <_strtol_l.constprop.0>
 800b15a:	bf00      	nop
 800b15c:	2400009c 	.word	0x2400009c

0800b160 <std>:
 800b160:	2300      	movs	r3, #0
 800b162:	b510      	push	{r4, lr}
 800b164:	4604      	mov	r4, r0
 800b166:	e9c0 3300 	strd	r3, r3, [r0]
 800b16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b16e:	6083      	str	r3, [r0, #8]
 800b170:	8181      	strh	r1, [r0, #12]
 800b172:	6643      	str	r3, [r0, #100]	@ 0x64
 800b174:	81c2      	strh	r2, [r0, #14]
 800b176:	6183      	str	r3, [r0, #24]
 800b178:	4619      	mov	r1, r3
 800b17a:	2208      	movs	r2, #8
 800b17c:	305c      	adds	r0, #92	@ 0x5c
 800b17e:	f000 f928 	bl	800b3d2 <memset>
 800b182:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b8 <std+0x58>)
 800b184:	6263      	str	r3, [r4, #36]	@ 0x24
 800b186:	4b0d      	ldr	r3, [pc, #52]	@ (800b1bc <std+0x5c>)
 800b188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b18a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c0 <std+0x60>)
 800b18c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b18e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <std+0x64>)
 800b190:	6323      	str	r3, [r4, #48]	@ 0x30
 800b192:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c8 <std+0x68>)
 800b194:	6224      	str	r4, [r4, #32]
 800b196:	429c      	cmp	r4, r3
 800b198:	d006      	beq.n	800b1a8 <std+0x48>
 800b19a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b19e:	4294      	cmp	r4, r2
 800b1a0:	d002      	beq.n	800b1a8 <std+0x48>
 800b1a2:	33d0      	adds	r3, #208	@ 0xd0
 800b1a4:	429c      	cmp	r4, r3
 800b1a6:	d105      	bne.n	800b1b4 <std+0x54>
 800b1a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b0:	f000 b9f4 	b.w	800b59c <__retarget_lock_init_recursive>
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	bf00      	nop
 800b1b8:	0800b34d 	.word	0x0800b34d
 800b1bc:	0800b36f 	.word	0x0800b36f
 800b1c0:	0800b3a7 	.word	0x0800b3a7
 800b1c4:	0800b3cb 	.word	0x0800b3cb
 800b1c8:	240006e4 	.word	0x240006e4

0800b1cc <stdio_exit_handler>:
 800b1cc:	4a02      	ldr	r2, [pc, #8]	@ (800b1d8 <stdio_exit_handler+0xc>)
 800b1ce:	4903      	ldr	r1, [pc, #12]	@ (800b1dc <stdio_exit_handler+0x10>)
 800b1d0:	4803      	ldr	r0, [pc, #12]	@ (800b1e0 <stdio_exit_handler+0x14>)
 800b1d2:	f000 b869 	b.w	800b2a8 <_fwalk_sglue>
 800b1d6:	bf00      	nop
 800b1d8:	24000090 	.word	0x24000090
 800b1dc:	0800bd65 	.word	0x0800bd65
 800b1e0:	240000a0 	.word	0x240000a0

0800b1e4 <cleanup_stdio>:
 800b1e4:	6841      	ldr	r1, [r0, #4]
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b218 <cleanup_stdio+0x34>)
 800b1e8:	4299      	cmp	r1, r3
 800b1ea:	b510      	push	{r4, lr}
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	d001      	beq.n	800b1f4 <cleanup_stdio+0x10>
 800b1f0:	f000 fdb8 	bl	800bd64 <_fflush_r>
 800b1f4:	68a1      	ldr	r1, [r4, #8]
 800b1f6:	4b09      	ldr	r3, [pc, #36]	@ (800b21c <cleanup_stdio+0x38>)
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	d002      	beq.n	800b202 <cleanup_stdio+0x1e>
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fdb1 	bl	800bd64 <_fflush_r>
 800b202:	68e1      	ldr	r1, [r4, #12]
 800b204:	4b06      	ldr	r3, [pc, #24]	@ (800b220 <cleanup_stdio+0x3c>)
 800b206:	4299      	cmp	r1, r3
 800b208:	d004      	beq.n	800b214 <cleanup_stdio+0x30>
 800b20a:	4620      	mov	r0, r4
 800b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b210:	f000 bda8 	b.w	800bd64 <_fflush_r>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	240006e4 	.word	0x240006e4
 800b21c:	2400074c 	.word	0x2400074c
 800b220:	240007b4 	.word	0x240007b4

0800b224 <global_stdio_init.part.0>:
 800b224:	b510      	push	{r4, lr}
 800b226:	4b0b      	ldr	r3, [pc, #44]	@ (800b254 <global_stdio_init.part.0+0x30>)
 800b228:	4c0b      	ldr	r4, [pc, #44]	@ (800b258 <global_stdio_init.part.0+0x34>)
 800b22a:	4a0c      	ldr	r2, [pc, #48]	@ (800b25c <global_stdio_init.part.0+0x38>)
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	4620      	mov	r0, r4
 800b230:	2200      	movs	r2, #0
 800b232:	2104      	movs	r1, #4
 800b234:	f7ff ff94 	bl	800b160 <std>
 800b238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b23c:	2201      	movs	r2, #1
 800b23e:	2109      	movs	r1, #9
 800b240:	f7ff ff8e 	bl	800b160 <std>
 800b244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b248:	2202      	movs	r2, #2
 800b24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b24e:	2112      	movs	r1, #18
 800b250:	f7ff bf86 	b.w	800b160 <std>
 800b254:	2400081c 	.word	0x2400081c
 800b258:	240006e4 	.word	0x240006e4
 800b25c:	0800b1cd 	.word	0x0800b1cd

0800b260 <__sfp_lock_acquire>:
 800b260:	4801      	ldr	r0, [pc, #4]	@ (800b268 <__sfp_lock_acquire+0x8>)
 800b262:	f000 b99c 	b.w	800b59e <__retarget_lock_acquire_recursive>
 800b266:	bf00      	nop
 800b268:	24000825 	.word	0x24000825

0800b26c <__sfp_lock_release>:
 800b26c:	4801      	ldr	r0, [pc, #4]	@ (800b274 <__sfp_lock_release+0x8>)
 800b26e:	f000 b997 	b.w	800b5a0 <__retarget_lock_release_recursive>
 800b272:	bf00      	nop
 800b274:	24000825 	.word	0x24000825

0800b278 <__sinit>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	4604      	mov	r4, r0
 800b27c:	f7ff fff0 	bl	800b260 <__sfp_lock_acquire>
 800b280:	6a23      	ldr	r3, [r4, #32]
 800b282:	b11b      	cbz	r3, 800b28c <__sinit+0x14>
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	f7ff bff0 	b.w	800b26c <__sfp_lock_release>
 800b28c:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <__sinit+0x28>)
 800b28e:	6223      	str	r3, [r4, #32]
 800b290:	4b04      	ldr	r3, [pc, #16]	@ (800b2a4 <__sinit+0x2c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1f5      	bne.n	800b284 <__sinit+0xc>
 800b298:	f7ff ffc4 	bl	800b224 <global_stdio_init.part.0>
 800b29c:	e7f2      	b.n	800b284 <__sinit+0xc>
 800b29e:	bf00      	nop
 800b2a0:	0800b1e5 	.word	0x0800b1e5
 800b2a4:	2400081c 	.word	0x2400081c

0800b2a8 <_fwalk_sglue>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	4688      	mov	r8, r1
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	2600      	movs	r6, #0
 800b2b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b2bc:	d505      	bpl.n	800b2ca <_fwalk_sglue+0x22>
 800b2be:	6824      	ldr	r4, [r4, #0]
 800b2c0:	2c00      	cmp	r4, #0
 800b2c2:	d1f7      	bne.n	800b2b4 <_fwalk_sglue+0xc>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ca:	89ab      	ldrh	r3, [r5, #12]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d907      	bls.n	800b2e0 <_fwalk_sglue+0x38>
 800b2d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	d003      	beq.n	800b2e0 <_fwalk_sglue+0x38>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4638      	mov	r0, r7
 800b2dc:	47c0      	blx	r8
 800b2de:	4306      	orrs	r6, r0
 800b2e0:	3568      	adds	r5, #104	@ 0x68
 800b2e2:	e7e9      	b.n	800b2b8 <_fwalk_sglue+0x10>

0800b2e4 <sniprintf>:
 800b2e4:	b40c      	push	{r2, r3}
 800b2e6:	b530      	push	{r4, r5, lr}
 800b2e8:	4b17      	ldr	r3, [pc, #92]	@ (800b348 <sniprintf+0x64>)
 800b2ea:	1e0c      	subs	r4, r1, #0
 800b2ec:	681d      	ldr	r5, [r3, #0]
 800b2ee:	b09d      	sub	sp, #116	@ 0x74
 800b2f0:	da08      	bge.n	800b304 <sniprintf+0x20>
 800b2f2:	238b      	movs	r3, #139	@ 0x8b
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fa:	b01d      	add	sp, #116	@ 0x74
 800b2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b300:	b002      	add	sp, #8
 800b302:	4770      	bx	lr
 800b304:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b308:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b30c:	bf14      	ite	ne
 800b30e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b312:	4623      	moveq	r3, r4
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	9307      	str	r3, [sp, #28]
 800b318:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b31c:	9002      	str	r0, [sp, #8]
 800b31e:	9006      	str	r0, [sp, #24]
 800b320:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b324:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b326:	ab21      	add	r3, sp, #132	@ 0x84
 800b328:	a902      	add	r1, sp, #8
 800b32a:	4628      	mov	r0, r5
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f000 fa0b 	bl	800b748 <_svfiprintf_r>
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	bfbc      	itt	lt
 800b336:	238b      	movlt	r3, #139	@ 0x8b
 800b338:	602b      	strlt	r3, [r5, #0]
 800b33a:	2c00      	cmp	r4, #0
 800b33c:	d0dd      	beq.n	800b2fa <sniprintf+0x16>
 800b33e:	9b02      	ldr	r3, [sp, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
 800b344:	e7d9      	b.n	800b2fa <sniprintf+0x16>
 800b346:	bf00      	nop
 800b348:	2400009c 	.word	0x2400009c

0800b34c <__sread>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	460c      	mov	r4, r1
 800b350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b354:	f000 f8c4 	bl	800b4e0 <_read_r>
 800b358:	2800      	cmp	r0, #0
 800b35a:	bfab      	itete	ge
 800b35c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b35e:	89a3      	ldrhlt	r3, [r4, #12]
 800b360:	181b      	addge	r3, r3, r0
 800b362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b366:	bfac      	ite	ge
 800b368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b36a:	81a3      	strhlt	r3, [r4, #12]
 800b36c:	bd10      	pop	{r4, pc}

0800b36e <__swrite>:
 800b36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b372:	461f      	mov	r7, r3
 800b374:	898b      	ldrh	r3, [r1, #12]
 800b376:	05db      	lsls	r3, r3, #23
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4616      	mov	r6, r2
 800b37e:	d505      	bpl.n	800b38c <__swrite+0x1e>
 800b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b384:	2302      	movs	r3, #2
 800b386:	2200      	movs	r2, #0
 800b388:	f000 f898 	bl	800b4bc <_lseek_r>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	4632      	mov	r2, r6
 800b39a:	463b      	mov	r3, r7
 800b39c:	4628      	mov	r0, r5
 800b39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	f000 b8bf 	b.w	800b524 <_write_r>

0800b3a6 <__sseek>:
 800b3a6:	b510      	push	{r4, lr}
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ae:	f000 f885 	bl	800b4bc <_lseek_r>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	bf15      	itete	ne
 800b3b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3c2:	81a3      	strheq	r3, [r4, #12]
 800b3c4:	bf18      	it	ne
 800b3c6:	81a3      	strhne	r3, [r4, #12]
 800b3c8:	bd10      	pop	{r4, pc}

0800b3ca <__sclose>:
 800b3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ce:	f000 b865 	b.w	800b49c <_close_r>

0800b3d2 <memset>:
 800b3d2:	4402      	add	r2, r0
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d100      	bne.n	800b3dc <memset+0xa>
 800b3da:	4770      	bx	lr
 800b3dc:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e0:	e7f9      	b.n	800b3d6 <memset+0x4>
	...

0800b3e4 <strtok>:
 800b3e4:	4b16      	ldr	r3, [pc, #88]	@ (800b440 <strtok+0x5c>)
 800b3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	681f      	ldr	r7, [r3, #0]
 800b3ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	460e      	mov	r6, r1
 800b3f2:	b9ec      	cbnz	r4, 800b430 <strtok+0x4c>
 800b3f4:	2050      	movs	r0, #80	@ 0x50
 800b3f6:	f7ff fd79 	bl	800aeec <malloc>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6478      	str	r0, [r7, #68]	@ 0x44
 800b3fe:	b920      	cbnz	r0, 800b40a <strtok+0x26>
 800b400:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <strtok+0x60>)
 800b402:	4811      	ldr	r0, [pc, #68]	@ (800b448 <strtok+0x64>)
 800b404:	215b      	movs	r1, #91	@ 0x5b
 800b406:	f000 f8db 	bl	800b5c0 <__assert_func>
 800b40a:	e9c0 4400 	strd	r4, r4, [r0]
 800b40e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b412:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b416:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b41a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b41e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b422:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b426:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b42a:	6184      	str	r4, [r0, #24]
 800b42c:	7704      	strb	r4, [r0, #28]
 800b42e:	6244      	str	r4, [r0, #36]	@ 0x24
 800b430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b432:	4631      	mov	r1, r6
 800b434:	4628      	mov	r0, r5
 800b436:	2301      	movs	r3, #1
 800b438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	f000 b806 	b.w	800b44c <__strtok_r>
 800b440:	2400009c 	.word	0x2400009c
 800b444:	0800c68d 	.word	0x0800c68d
 800b448:	0800c6a4 	.word	0x0800c6a4

0800b44c <__strtok_r>:
 800b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44e:	4604      	mov	r4, r0
 800b450:	b908      	cbnz	r0, 800b456 <__strtok_r+0xa>
 800b452:	6814      	ldr	r4, [r2, #0]
 800b454:	b144      	cbz	r4, 800b468 <__strtok_r+0x1c>
 800b456:	4620      	mov	r0, r4
 800b458:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b45c:	460f      	mov	r7, r1
 800b45e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b462:	b91e      	cbnz	r6, 800b46c <__strtok_r+0x20>
 800b464:	b965      	cbnz	r5, 800b480 <__strtok_r+0x34>
 800b466:	6015      	str	r5, [r2, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	e005      	b.n	800b478 <__strtok_r+0x2c>
 800b46c:	42b5      	cmp	r5, r6
 800b46e:	d1f6      	bne.n	800b45e <__strtok_r+0x12>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f0      	bne.n	800b456 <__strtok_r+0xa>
 800b474:	6014      	str	r4, [r2, #0]
 800b476:	7003      	strb	r3, [r0, #0]
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47a:	461c      	mov	r4, r3
 800b47c:	e00c      	b.n	800b498 <__strtok_r+0x4c>
 800b47e:	b915      	cbnz	r5, 800b486 <__strtok_r+0x3a>
 800b480:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b484:	460e      	mov	r6, r1
 800b486:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b48a:	42ab      	cmp	r3, r5
 800b48c:	d1f7      	bne.n	800b47e <__strtok_r+0x32>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f3      	beq.n	800b47a <__strtok_r+0x2e>
 800b492:	2300      	movs	r3, #0
 800b494:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b498:	6014      	str	r4, [r2, #0]
 800b49a:	e7ed      	b.n	800b478 <__strtok_r+0x2c>

0800b49c <_close_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d06      	ldr	r5, [pc, #24]	@ (800b4b8 <_close_r+0x1c>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	602b      	str	r3, [r5, #0]
 800b4a8:	f7f5 ff70 	bl	800138c <_close>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_close_r+0x1a>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_close_r+0x1a>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	24000820 	.word	0x24000820

0800b4bc <_lseek_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	@ (800b4dc <_lseek_r+0x20>)
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	4608      	mov	r0, r1
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f5 ff85 	bl	80013da <_lseek>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_lseek_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_lseek_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	24000820 	.word	0x24000820

0800b4e0 <_read_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d07      	ldr	r5, [pc, #28]	@ (800b500 <_read_r+0x20>)
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7f5 ff13 	bl	800131a <_read>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_read_r+0x1e>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_read_r+0x1e>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	24000820 	.word	0x24000820

0800b504 <_sbrk_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	@ (800b520 <_sbrk_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f5 ff70 	bl	80013f4 <_sbrk>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_sbrk_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_sbrk_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	24000820 	.word	0x24000820

0800b524 <_write_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d07      	ldr	r5, [pc, #28]	@ (800b544 <_write_r+0x20>)
 800b528:	4604      	mov	r4, r0
 800b52a:	4608      	mov	r0, r1
 800b52c:	4611      	mov	r1, r2
 800b52e:	2200      	movs	r2, #0
 800b530:	602a      	str	r2, [r5, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	f7f5 ff0e 	bl	8001354 <_write>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_write_r+0x1e>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_write_r+0x1e>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	24000820 	.word	0x24000820

0800b548 <__errno>:
 800b548:	4b01      	ldr	r3, [pc, #4]	@ (800b550 <__errno+0x8>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	2400009c 	.word	0x2400009c

0800b554 <__libc_init_array>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4d0d      	ldr	r5, [pc, #52]	@ (800b58c <__libc_init_array+0x38>)
 800b558:	4c0d      	ldr	r4, [pc, #52]	@ (800b590 <__libc_init_array+0x3c>)
 800b55a:	1b64      	subs	r4, r4, r5
 800b55c:	10a4      	asrs	r4, r4, #2
 800b55e:	2600      	movs	r6, #0
 800b560:	42a6      	cmp	r6, r4
 800b562:	d109      	bne.n	800b578 <__libc_init_array+0x24>
 800b564:	4d0b      	ldr	r5, [pc, #44]	@ (800b594 <__libc_init_array+0x40>)
 800b566:	4c0c      	ldr	r4, [pc, #48]	@ (800b598 <__libc_init_array+0x44>)
 800b568:	f000 ff2a 	bl	800c3c0 <_init>
 800b56c:	1b64      	subs	r4, r4, r5
 800b56e:	10a4      	asrs	r4, r4, #2
 800b570:	2600      	movs	r6, #0
 800b572:	42a6      	cmp	r6, r4
 800b574:	d105      	bne.n	800b582 <__libc_init_array+0x2e>
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57c:	4798      	blx	r3
 800b57e:	3601      	adds	r6, #1
 800b580:	e7ee      	b.n	800b560 <__libc_init_array+0xc>
 800b582:	f855 3b04 	ldr.w	r3, [r5], #4
 800b586:	4798      	blx	r3
 800b588:	3601      	adds	r6, #1
 800b58a:	e7f2      	b.n	800b572 <__libc_init_array+0x1e>
 800b58c:	0800c778 	.word	0x0800c778
 800b590:	0800c778 	.word	0x0800c778
 800b594:	0800c778 	.word	0x0800c778
 800b598:	0800c77c 	.word	0x0800c77c

0800b59c <__retarget_lock_init_recursive>:
 800b59c:	4770      	bx	lr

0800b59e <__retarget_lock_acquire_recursive>:
 800b59e:	4770      	bx	lr

0800b5a0 <__retarget_lock_release_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <memcpy>:
 800b5a2:	440a      	add	r2, r1
 800b5a4:	4291      	cmp	r1, r2
 800b5a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5aa:	d100      	bne.n	800b5ae <memcpy+0xc>
 800b5ac:	4770      	bx	lr
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5b8:	4291      	cmp	r1, r2
 800b5ba:	d1f9      	bne.n	800b5b0 <memcpy+0xe>
 800b5bc:	bd10      	pop	{r4, pc}
	...

0800b5c0 <__assert_func>:
 800b5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4b09      	ldr	r3, [pc, #36]	@ (800b5ec <__assert_func+0x2c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	68d8      	ldr	r0, [r3, #12]
 800b5ce:	b954      	cbnz	r4, 800b5e6 <__assert_func+0x26>
 800b5d0:	4b07      	ldr	r3, [pc, #28]	@ (800b5f0 <__assert_func+0x30>)
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5d8:	9100      	str	r1, [sp, #0]
 800b5da:	462b      	mov	r3, r5
 800b5dc:	4905      	ldr	r1, [pc, #20]	@ (800b5f4 <__assert_func+0x34>)
 800b5de:	f000 fbe9 	bl	800bdb4 <fiprintf>
 800b5e2:	f000 fc13 	bl	800be0c <abort>
 800b5e6:	4b04      	ldr	r3, [pc, #16]	@ (800b5f8 <__assert_func+0x38>)
 800b5e8:	e7f4      	b.n	800b5d4 <__assert_func+0x14>
 800b5ea:	bf00      	nop
 800b5ec:	2400009c 	.word	0x2400009c
 800b5f0:	0800c739 	.word	0x0800c739
 800b5f4:	0800c70b 	.word	0x0800c70b
 800b5f8:	0800c6fe 	.word	0x0800c6fe

0800b5fc <_free_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4605      	mov	r5, r0
 800b600:	2900      	cmp	r1, #0
 800b602:	d041      	beq.n	800b688 <_free_r+0x8c>
 800b604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b608:	1f0c      	subs	r4, r1, #4
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfb8      	it	lt
 800b60e:	18e4      	addlt	r4, r4, r3
 800b610:	f7ff fd16 	bl	800b040 <__malloc_lock>
 800b614:	4a1d      	ldr	r2, [pc, #116]	@ (800b68c <_free_r+0x90>)
 800b616:	6813      	ldr	r3, [r2, #0]
 800b618:	b933      	cbnz	r3, 800b628 <_free_r+0x2c>
 800b61a:	6063      	str	r3, [r4, #4]
 800b61c:	6014      	str	r4, [r2, #0]
 800b61e:	4628      	mov	r0, r5
 800b620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b624:	f7ff bd12 	b.w	800b04c <__malloc_unlock>
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d908      	bls.n	800b63e <_free_r+0x42>
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	1821      	adds	r1, r4, r0
 800b630:	428b      	cmp	r3, r1
 800b632:	bf01      	itttt	eq
 800b634:	6819      	ldreq	r1, [r3, #0]
 800b636:	685b      	ldreq	r3, [r3, #4]
 800b638:	1809      	addeq	r1, r1, r0
 800b63a:	6021      	streq	r1, [r4, #0]
 800b63c:	e7ed      	b.n	800b61a <_free_r+0x1e>
 800b63e:	461a      	mov	r2, r3
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	b10b      	cbz	r3, 800b648 <_free_r+0x4c>
 800b644:	42a3      	cmp	r3, r4
 800b646:	d9fa      	bls.n	800b63e <_free_r+0x42>
 800b648:	6811      	ldr	r1, [r2, #0]
 800b64a:	1850      	adds	r0, r2, r1
 800b64c:	42a0      	cmp	r0, r4
 800b64e:	d10b      	bne.n	800b668 <_free_r+0x6c>
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	4401      	add	r1, r0
 800b654:	1850      	adds	r0, r2, r1
 800b656:	4283      	cmp	r3, r0
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	d1e0      	bne.n	800b61e <_free_r+0x22>
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	6053      	str	r3, [r2, #4]
 800b662:	4408      	add	r0, r1
 800b664:	6010      	str	r0, [r2, #0]
 800b666:	e7da      	b.n	800b61e <_free_r+0x22>
 800b668:	d902      	bls.n	800b670 <_free_r+0x74>
 800b66a:	230c      	movs	r3, #12
 800b66c:	602b      	str	r3, [r5, #0]
 800b66e:	e7d6      	b.n	800b61e <_free_r+0x22>
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	1821      	adds	r1, r4, r0
 800b674:	428b      	cmp	r3, r1
 800b676:	bf04      	itt	eq
 800b678:	6819      	ldreq	r1, [r3, #0]
 800b67a:	685b      	ldreq	r3, [r3, #4]
 800b67c:	6063      	str	r3, [r4, #4]
 800b67e:	bf04      	itt	eq
 800b680:	1809      	addeq	r1, r1, r0
 800b682:	6021      	streq	r1, [r4, #0]
 800b684:	6054      	str	r4, [r2, #4]
 800b686:	e7ca      	b.n	800b61e <_free_r+0x22>
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	bf00      	nop
 800b68c:	240006e0 	.word	0x240006e0

0800b690 <__ssputs_r>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	688e      	ldr	r6, [r1, #8]
 800b696:	461f      	mov	r7, r3
 800b698:	42be      	cmp	r6, r7
 800b69a:	680b      	ldr	r3, [r1, #0]
 800b69c:	4682      	mov	sl, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	4690      	mov	r8, r2
 800b6a2:	d82d      	bhi.n	800b700 <__ssputs_r+0x70>
 800b6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6ac:	d026      	beq.n	800b6fc <__ssputs_r+0x6c>
 800b6ae:	6965      	ldr	r5, [r4, #20]
 800b6b0:	6909      	ldr	r1, [r1, #16]
 800b6b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6b6:	eba3 0901 	sub.w	r9, r3, r1
 800b6ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6be:	1c7b      	adds	r3, r7, #1
 800b6c0:	444b      	add	r3, r9
 800b6c2:	106d      	asrs	r5, r5, #1
 800b6c4:	429d      	cmp	r5, r3
 800b6c6:	bf38      	it	cc
 800b6c8:	461d      	movcc	r5, r3
 800b6ca:	0553      	lsls	r3, r2, #21
 800b6cc:	d527      	bpl.n	800b71e <__ssputs_r+0x8e>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f7ff fc36 	bl	800af40 <_malloc_r>
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	b360      	cbz	r0, 800b732 <__ssputs_r+0xa2>
 800b6d8:	6921      	ldr	r1, [r4, #16]
 800b6da:	464a      	mov	r2, r9
 800b6dc:	f7ff ff61 	bl	800b5a2 <memcpy>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	6126      	str	r6, [r4, #16]
 800b6ee:	6165      	str	r5, [r4, #20]
 800b6f0:	444e      	add	r6, r9
 800b6f2:	eba5 0509 	sub.w	r5, r5, r9
 800b6f6:	6026      	str	r6, [r4, #0]
 800b6f8:	60a5      	str	r5, [r4, #8]
 800b6fa:	463e      	mov	r6, r7
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	d900      	bls.n	800b702 <__ssputs_r+0x72>
 800b700:	463e      	mov	r6, r7
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	4632      	mov	r2, r6
 800b706:	4641      	mov	r1, r8
 800b708:	f000 fb66 	bl	800bdd8 <memmove>
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	1b9b      	subs	r3, r3, r6
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	4433      	add	r3, r6
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	2000      	movs	r0, #0
 800b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71e:	462a      	mov	r2, r5
 800b720:	f000 fb7b 	bl	800be1a <_realloc_r>
 800b724:	4606      	mov	r6, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d1e0      	bne.n	800b6ec <__ssputs_r+0x5c>
 800b72a:	6921      	ldr	r1, [r4, #16]
 800b72c:	4650      	mov	r0, sl
 800b72e:	f7ff ff65 	bl	800b5fc <_free_r>
 800b732:	230c      	movs	r3, #12
 800b734:	f8ca 3000 	str.w	r3, [sl]
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	e7e9      	b.n	800b71a <__ssputs_r+0x8a>
	...

0800b748 <_svfiprintf_r>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	4698      	mov	r8, r3
 800b74e:	898b      	ldrh	r3, [r1, #12]
 800b750:	061b      	lsls	r3, r3, #24
 800b752:	b09d      	sub	sp, #116	@ 0x74
 800b754:	4607      	mov	r7, r0
 800b756:	460d      	mov	r5, r1
 800b758:	4614      	mov	r4, r2
 800b75a:	d510      	bpl.n	800b77e <_svfiprintf_r+0x36>
 800b75c:	690b      	ldr	r3, [r1, #16]
 800b75e:	b973      	cbnz	r3, 800b77e <_svfiprintf_r+0x36>
 800b760:	2140      	movs	r1, #64	@ 0x40
 800b762:	f7ff fbed 	bl	800af40 <_malloc_r>
 800b766:	6028      	str	r0, [r5, #0]
 800b768:	6128      	str	r0, [r5, #16]
 800b76a:	b930      	cbnz	r0, 800b77a <_svfiprintf_r+0x32>
 800b76c:	230c      	movs	r3, #12
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	b01d      	add	sp, #116	@ 0x74
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	2340      	movs	r3, #64	@ 0x40
 800b77c:	616b      	str	r3, [r5, #20]
 800b77e:	2300      	movs	r3, #0
 800b780:	9309      	str	r3, [sp, #36]	@ 0x24
 800b782:	2320      	movs	r3, #32
 800b784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b788:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78c:	2330      	movs	r3, #48	@ 0x30
 800b78e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b92c <_svfiprintf_r+0x1e4>
 800b792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b796:	f04f 0901 	mov.w	r9, #1
 800b79a:	4623      	mov	r3, r4
 800b79c:	469a      	mov	sl, r3
 800b79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a2:	b10a      	cbz	r2, 800b7a8 <_svfiprintf_r+0x60>
 800b7a4:	2a25      	cmp	r2, #37	@ 0x25
 800b7a6:	d1f9      	bne.n	800b79c <_svfiprintf_r+0x54>
 800b7a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ac:	d00b      	beq.n	800b7c6 <_svfiprintf_r+0x7e>
 800b7ae:	465b      	mov	r3, fp
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ff6b 	bl	800b690 <__ssputs_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f000 80a7 	beq.w	800b90e <_svfiprintf_r+0x1c6>
 800b7c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c2:	445a      	add	r2, fp
 800b7c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 809f 	beq.w	800b90e <_svfiprintf_r+0x1c6>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7da:	f10a 0a01 	add.w	sl, sl, #1
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	9307      	str	r3, [sp, #28]
 800b7e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e8:	4654      	mov	r4, sl
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f0:	484e      	ldr	r0, [pc, #312]	@ (800b92c <_svfiprintf_r+0x1e4>)
 800b7f2:	f7f4 fd9d 	bl	8000330 <memchr>
 800b7f6:	9a04      	ldr	r2, [sp, #16]
 800b7f8:	b9d8      	cbnz	r0, 800b832 <_svfiprintf_r+0xea>
 800b7fa:	06d0      	lsls	r0, r2, #27
 800b7fc:	bf44      	itt	mi
 800b7fe:	2320      	movmi	r3, #32
 800b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b804:	0711      	lsls	r1, r2, #28
 800b806:	bf44      	itt	mi
 800b808:	232b      	movmi	r3, #43	@ 0x2b
 800b80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80e:	f89a 3000 	ldrb.w	r3, [sl]
 800b812:	2b2a      	cmp	r3, #42	@ 0x2a
 800b814:	d015      	beq.n	800b842 <_svfiprintf_r+0xfa>
 800b816:	9a07      	ldr	r2, [sp, #28]
 800b818:	4654      	mov	r4, sl
 800b81a:	2000      	movs	r0, #0
 800b81c:	f04f 0c0a 	mov.w	ip, #10
 800b820:	4621      	mov	r1, r4
 800b822:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b826:	3b30      	subs	r3, #48	@ 0x30
 800b828:	2b09      	cmp	r3, #9
 800b82a:	d94b      	bls.n	800b8c4 <_svfiprintf_r+0x17c>
 800b82c:	b1b0      	cbz	r0, 800b85c <_svfiprintf_r+0x114>
 800b82e:	9207      	str	r2, [sp, #28]
 800b830:	e014      	b.n	800b85c <_svfiprintf_r+0x114>
 800b832:	eba0 0308 	sub.w	r3, r0, r8
 800b836:	fa09 f303 	lsl.w	r3, r9, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	46a2      	mov	sl, r4
 800b840:	e7d2      	b.n	800b7e8 <_svfiprintf_r+0xa0>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	1d19      	adds	r1, r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	9103      	str	r1, [sp, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfbb      	ittet	lt
 800b84e:	425b      	neglt	r3, r3
 800b850:	f042 0202 	orrlt.w	r2, r2, #2
 800b854:	9307      	strge	r3, [sp, #28]
 800b856:	9307      	strlt	r3, [sp, #28]
 800b858:	bfb8      	it	lt
 800b85a:	9204      	strlt	r2, [sp, #16]
 800b85c:	7823      	ldrb	r3, [r4, #0]
 800b85e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b860:	d10a      	bne.n	800b878 <_svfiprintf_r+0x130>
 800b862:	7863      	ldrb	r3, [r4, #1]
 800b864:	2b2a      	cmp	r3, #42	@ 0x2a
 800b866:	d132      	bne.n	800b8ce <_svfiprintf_r+0x186>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	1d1a      	adds	r2, r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	9203      	str	r2, [sp, #12]
 800b870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b874:	3402      	adds	r4, #2
 800b876:	9305      	str	r3, [sp, #20]
 800b878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b93c <_svfiprintf_r+0x1f4>
 800b87c:	7821      	ldrb	r1, [r4, #0]
 800b87e:	2203      	movs	r2, #3
 800b880:	4650      	mov	r0, sl
 800b882:	f7f4 fd55 	bl	8000330 <memchr>
 800b886:	b138      	cbz	r0, 800b898 <_svfiprintf_r+0x150>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	eba0 000a 	sub.w	r0, r0, sl
 800b88e:	2240      	movs	r2, #64	@ 0x40
 800b890:	4082      	lsls	r2, r0
 800b892:	4313      	orrs	r3, r2
 800b894:	3401      	adds	r4, #1
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89c:	4824      	ldr	r0, [pc, #144]	@ (800b930 <_svfiprintf_r+0x1e8>)
 800b89e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a2:	2206      	movs	r2, #6
 800b8a4:	f7f4 fd44 	bl	8000330 <memchr>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d036      	beq.n	800b91a <_svfiprintf_r+0x1d2>
 800b8ac:	4b21      	ldr	r3, [pc, #132]	@ (800b934 <_svfiprintf_r+0x1ec>)
 800b8ae:	bb1b      	cbnz	r3, 800b8f8 <_svfiprintf_r+0x1b0>
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	3307      	adds	r3, #7
 800b8b4:	f023 0307 	bic.w	r3, r3, #7
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	9303      	str	r3, [sp, #12]
 800b8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8be:	4433      	add	r3, r6
 800b8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c2:	e76a      	b.n	800b79a <_svfiprintf_r+0x52>
 800b8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	e7a8      	b.n	800b820 <_svfiprintf_r+0xd8>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	3401      	adds	r4, #1
 800b8d2:	9305      	str	r3, [sp, #20]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f04f 0c0a 	mov.w	ip, #10
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8e0:	3a30      	subs	r2, #48	@ 0x30
 800b8e2:	2a09      	cmp	r2, #9
 800b8e4:	d903      	bls.n	800b8ee <_svfiprintf_r+0x1a6>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0c6      	beq.n	800b878 <_svfiprintf_r+0x130>
 800b8ea:	9105      	str	r1, [sp, #20]
 800b8ec:	e7c4      	b.n	800b878 <_svfiprintf_r+0x130>
 800b8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e7f0      	b.n	800b8da <_svfiprintf_r+0x192>
 800b8f8:	ab03      	add	r3, sp, #12
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b938 <_svfiprintf_r+0x1f0>)
 800b900:	a904      	add	r1, sp, #16
 800b902:	4638      	mov	r0, r7
 800b904:	f3af 8000 	nop.w
 800b908:	1c42      	adds	r2, r0, #1
 800b90a:	4606      	mov	r6, r0
 800b90c:	d1d6      	bne.n	800b8bc <_svfiprintf_r+0x174>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	065b      	lsls	r3, r3, #25
 800b912:	f53f af2d 	bmi.w	800b770 <_svfiprintf_r+0x28>
 800b916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b918:	e72c      	b.n	800b774 <_svfiprintf_r+0x2c>
 800b91a:	ab03      	add	r3, sp, #12
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	462a      	mov	r2, r5
 800b920:	4b05      	ldr	r3, [pc, #20]	@ (800b938 <_svfiprintf_r+0x1f0>)
 800b922:	a904      	add	r1, sp, #16
 800b924:	4638      	mov	r0, r7
 800b926:	f000 f879 	bl	800ba1c <_printf_i>
 800b92a:	e7ed      	b.n	800b908 <_svfiprintf_r+0x1c0>
 800b92c:	0800c73a 	.word	0x0800c73a
 800b930:	0800c744 	.word	0x0800c744
 800b934:	00000000 	.word	0x00000000
 800b938:	0800b691 	.word	0x0800b691
 800b93c:	0800c740 	.word	0x0800c740

0800b940 <_printf_common>:
 800b940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b944:	4616      	mov	r6, r2
 800b946:	4698      	mov	r8, r3
 800b948:	688a      	ldr	r2, [r1, #8]
 800b94a:	690b      	ldr	r3, [r1, #16]
 800b94c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b950:	4293      	cmp	r3, r2
 800b952:	bfb8      	it	lt
 800b954:	4613      	movlt	r3, r2
 800b956:	6033      	str	r3, [r6, #0]
 800b958:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b95c:	4607      	mov	r7, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	b10a      	cbz	r2, 800b966 <_printf_common+0x26>
 800b962:	3301      	adds	r3, #1
 800b964:	6033      	str	r3, [r6, #0]
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	0699      	lsls	r1, r3, #26
 800b96a:	bf42      	ittt	mi
 800b96c:	6833      	ldrmi	r3, [r6, #0]
 800b96e:	3302      	addmi	r3, #2
 800b970:	6033      	strmi	r3, [r6, #0]
 800b972:	6825      	ldr	r5, [r4, #0]
 800b974:	f015 0506 	ands.w	r5, r5, #6
 800b978:	d106      	bne.n	800b988 <_printf_common+0x48>
 800b97a:	f104 0a19 	add.w	sl, r4, #25
 800b97e:	68e3      	ldr	r3, [r4, #12]
 800b980:	6832      	ldr	r2, [r6, #0]
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	42ab      	cmp	r3, r5
 800b986:	dc26      	bgt.n	800b9d6 <_printf_common+0x96>
 800b988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	3b00      	subs	r3, #0
 800b990:	bf18      	it	ne
 800b992:	2301      	movne	r3, #1
 800b994:	0692      	lsls	r2, r2, #26
 800b996:	d42b      	bmi.n	800b9f0 <_printf_common+0xb0>
 800b998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b99c:	4641      	mov	r1, r8
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c8      	blx	r9
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	d01e      	beq.n	800b9e4 <_printf_common+0xa4>
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	6922      	ldr	r2, [r4, #16]
 800b9aa:	f003 0306 	and.w	r3, r3, #6
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	bf02      	ittt	eq
 800b9b2:	68e5      	ldreq	r5, [r4, #12]
 800b9b4:	6833      	ldreq	r3, [r6, #0]
 800b9b6:	1aed      	subeq	r5, r5, r3
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	bf0c      	ite	eq
 800b9bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9c0:	2500      	movne	r5, #0
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	bfc4      	itt	gt
 800b9c6:	1a9b      	subgt	r3, r3, r2
 800b9c8:	18ed      	addgt	r5, r5, r3
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	341a      	adds	r4, #26
 800b9ce:	42b5      	cmp	r5, r6
 800b9d0:	d11a      	bne.n	800ba08 <_printf_common+0xc8>
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	e008      	b.n	800b9e8 <_printf_common+0xa8>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4641      	mov	r1, r8
 800b9dc:	4638      	mov	r0, r7
 800b9de:	47c8      	blx	r9
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d103      	bne.n	800b9ec <_printf_common+0xac>
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	e7c6      	b.n	800b97e <_printf_common+0x3e>
 800b9f0:	18e1      	adds	r1, r4, r3
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	2030      	movs	r0, #48	@ 0x30
 800b9f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9fa:	4422      	add	r2, r4
 800b9fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba04:	3302      	adds	r3, #2
 800ba06:	e7c7      	b.n	800b998 <_printf_common+0x58>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	4638      	mov	r0, r7
 800ba10:	47c8      	blx	r9
 800ba12:	3001      	adds	r0, #1
 800ba14:	d0e6      	beq.n	800b9e4 <_printf_common+0xa4>
 800ba16:	3601      	adds	r6, #1
 800ba18:	e7d9      	b.n	800b9ce <_printf_common+0x8e>
	...

0800ba1c <_printf_i>:
 800ba1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	7e0f      	ldrb	r7, [r1, #24]
 800ba22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba24:	2f78      	cmp	r7, #120	@ 0x78
 800ba26:	4691      	mov	r9, r2
 800ba28:	4680      	mov	r8, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	469a      	mov	sl, r3
 800ba2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba32:	d807      	bhi.n	800ba44 <_printf_i+0x28>
 800ba34:	2f62      	cmp	r7, #98	@ 0x62
 800ba36:	d80a      	bhi.n	800ba4e <_printf_i+0x32>
 800ba38:	2f00      	cmp	r7, #0
 800ba3a:	f000 80d2 	beq.w	800bbe2 <_printf_i+0x1c6>
 800ba3e:	2f58      	cmp	r7, #88	@ 0x58
 800ba40:	f000 80b9 	beq.w	800bbb6 <_printf_i+0x19a>
 800ba44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba4c:	e03a      	b.n	800bac4 <_printf_i+0xa8>
 800ba4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba52:	2b15      	cmp	r3, #21
 800ba54:	d8f6      	bhi.n	800ba44 <_printf_i+0x28>
 800ba56:	a101      	add	r1, pc, #4	@ (adr r1, 800ba5c <_printf_i+0x40>)
 800ba58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba5c:	0800bab5 	.word	0x0800bab5
 800ba60:	0800bac9 	.word	0x0800bac9
 800ba64:	0800ba45 	.word	0x0800ba45
 800ba68:	0800ba45 	.word	0x0800ba45
 800ba6c:	0800ba45 	.word	0x0800ba45
 800ba70:	0800ba45 	.word	0x0800ba45
 800ba74:	0800bac9 	.word	0x0800bac9
 800ba78:	0800ba45 	.word	0x0800ba45
 800ba7c:	0800ba45 	.word	0x0800ba45
 800ba80:	0800ba45 	.word	0x0800ba45
 800ba84:	0800ba45 	.word	0x0800ba45
 800ba88:	0800bbc9 	.word	0x0800bbc9
 800ba8c:	0800baf3 	.word	0x0800baf3
 800ba90:	0800bb83 	.word	0x0800bb83
 800ba94:	0800ba45 	.word	0x0800ba45
 800ba98:	0800ba45 	.word	0x0800ba45
 800ba9c:	0800bbeb 	.word	0x0800bbeb
 800baa0:	0800ba45 	.word	0x0800ba45
 800baa4:	0800baf3 	.word	0x0800baf3
 800baa8:	0800ba45 	.word	0x0800ba45
 800baac:	0800ba45 	.word	0x0800ba45
 800bab0:	0800bb8b 	.word	0x0800bb8b
 800bab4:	6833      	ldr	r3, [r6, #0]
 800bab6:	1d1a      	adds	r2, r3, #4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6032      	str	r2, [r6, #0]
 800babc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bac0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bac4:	2301      	movs	r3, #1
 800bac6:	e09d      	b.n	800bc04 <_printf_i+0x1e8>
 800bac8:	6833      	ldr	r3, [r6, #0]
 800baca:	6820      	ldr	r0, [r4, #0]
 800bacc:	1d19      	adds	r1, r3, #4
 800bace:	6031      	str	r1, [r6, #0]
 800bad0:	0606      	lsls	r6, r0, #24
 800bad2:	d501      	bpl.n	800bad8 <_printf_i+0xbc>
 800bad4:	681d      	ldr	r5, [r3, #0]
 800bad6:	e003      	b.n	800bae0 <_printf_i+0xc4>
 800bad8:	0645      	lsls	r5, r0, #25
 800bada:	d5fb      	bpl.n	800bad4 <_printf_i+0xb8>
 800badc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	da03      	bge.n	800baec <_printf_i+0xd0>
 800bae4:	232d      	movs	r3, #45	@ 0x2d
 800bae6:	426d      	negs	r5, r5
 800bae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baec:	4859      	ldr	r0, [pc, #356]	@ (800bc54 <_printf_i+0x238>)
 800baee:	230a      	movs	r3, #10
 800baf0:	e011      	b.n	800bb16 <_printf_i+0xfa>
 800baf2:	6821      	ldr	r1, [r4, #0]
 800baf4:	6833      	ldr	r3, [r6, #0]
 800baf6:	0608      	lsls	r0, r1, #24
 800baf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bafc:	d402      	bmi.n	800bb04 <_printf_i+0xe8>
 800bafe:	0649      	lsls	r1, r1, #25
 800bb00:	bf48      	it	mi
 800bb02:	b2ad      	uxthmi	r5, r5
 800bb04:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb06:	4853      	ldr	r0, [pc, #332]	@ (800bc54 <_printf_i+0x238>)
 800bb08:	6033      	str	r3, [r6, #0]
 800bb0a:	bf14      	ite	ne
 800bb0c:	230a      	movne	r3, #10
 800bb0e:	2308      	moveq	r3, #8
 800bb10:	2100      	movs	r1, #0
 800bb12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb16:	6866      	ldr	r6, [r4, #4]
 800bb18:	60a6      	str	r6, [r4, #8]
 800bb1a:	2e00      	cmp	r6, #0
 800bb1c:	bfa2      	ittt	ge
 800bb1e:	6821      	ldrge	r1, [r4, #0]
 800bb20:	f021 0104 	bicge.w	r1, r1, #4
 800bb24:	6021      	strge	r1, [r4, #0]
 800bb26:	b90d      	cbnz	r5, 800bb2c <_printf_i+0x110>
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	d04b      	beq.n	800bbc4 <_printf_i+0x1a8>
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb32:	fb03 5711 	mls	r7, r3, r1, r5
 800bb36:	5dc7      	ldrb	r7, [r0, r7]
 800bb38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb3c:	462f      	mov	r7, r5
 800bb3e:	42bb      	cmp	r3, r7
 800bb40:	460d      	mov	r5, r1
 800bb42:	d9f4      	bls.n	800bb2e <_printf_i+0x112>
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d10b      	bne.n	800bb60 <_printf_i+0x144>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	07df      	lsls	r7, r3, #31
 800bb4c:	d508      	bpl.n	800bb60 <_printf_i+0x144>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	6861      	ldr	r1, [r4, #4]
 800bb52:	4299      	cmp	r1, r3
 800bb54:	bfde      	ittt	le
 800bb56:	2330      	movle	r3, #48	@ 0x30
 800bb58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb60:	1b92      	subs	r2, r2, r6
 800bb62:	6122      	str	r2, [r4, #16]
 800bb64:	f8cd a000 	str.w	sl, [sp]
 800bb68:	464b      	mov	r3, r9
 800bb6a:	aa03      	add	r2, sp, #12
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4640      	mov	r0, r8
 800bb70:	f7ff fee6 	bl	800b940 <_printf_common>
 800bb74:	3001      	adds	r0, #1
 800bb76:	d14a      	bne.n	800bc0e <_printf_i+0x1f2>
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	b004      	add	sp, #16
 800bb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	f043 0320 	orr.w	r3, r3, #32
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	4833      	ldr	r0, [pc, #204]	@ (800bc58 <_printf_i+0x23c>)
 800bb8c:	2778      	movs	r7, #120	@ 0x78
 800bb8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	6831      	ldr	r1, [r6, #0]
 800bb96:	061f      	lsls	r7, r3, #24
 800bb98:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb9c:	d402      	bmi.n	800bba4 <_printf_i+0x188>
 800bb9e:	065f      	lsls	r7, r3, #25
 800bba0:	bf48      	it	mi
 800bba2:	b2ad      	uxthmi	r5, r5
 800bba4:	6031      	str	r1, [r6, #0]
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	bf44      	itt	mi
 800bbaa:	f043 0320 	orrmi.w	r3, r3, #32
 800bbae:	6023      	strmi	r3, [r4, #0]
 800bbb0:	b11d      	cbz	r5, 800bbba <_printf_i+0x19e>
 800bbb2:	2310      	movs	r3, #16
 800bbb4:	e7ac      	b.n	800bb10 <_printf_i+0xf4>
 800bbb6:	4827      	ldr	r0, [pc, #156]	@ (800bc54 <_printf_i+0x238>)
 800bbb8:	e7e9      	b.n	800bb8e <_printf_i+0x172>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	f023 0320 	bic.w	r3, r3, #32
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	e7f6      	b.n	800bbb2 <_printf_i+0x196>
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	e7bd      	b.n	800bb44 <_printf_i+0x128>
 800bbc8:	6833      	ldr	r3, [r6, #0]
 800bbca:	6825      	ldr	r5, [r4, #0]
 800bbcc:	6961      	ldr	r1, [r4, #20]
 800bbce:	1d18      	adds	r0, r3, #4
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	062e      	lsls	r6, r5, #24
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	d501      	bpl.n	800bbdc <_printf_i+0x1c0>
 800bbd8:	6019      	str	r1, [r3, #0]
 800bbda:	e002      	b.n	800bbe2 <_printf_i+0x1c6>
 800bbdc:	0668      	lsls	r0, r5, #25
 800bbde:	d5fb      	bpl.n	800bbd8 <_printf_i+0x1bc>
 800bbe0:	8019      	strh	r1, [r3, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	4616      	mov	r6, r2
 800bbe8:	e7bc      	b.n	800bb64 <_printf_i+0x148>
 800bbea:	6833      	ldr	r3, [r6, #0]
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	6032      	str	r2, [r6, #0]
 800bbf0:	681e      	ldr	r6, [r3, #0]
 800bbf2:	6862      	ldr	r2, [r4, #4]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f7f4 fb9a 	bl	8000330 <memchr>
 800bbfc:	b108      	cbz	r0, 800bc02 <_printf_i+0x1e6>
 800bbfe:	1b80      	subs	r0, r0, r6
 800bc00:	6060      	str	r0, [r4, #4]
 800bc02:	6863      	ldr	r3, [r4, #4]
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	2300      	movs	r3, #0
 800bc08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc0c:	e7aa      	b.n	800bb64 <_printf_i+0x148>
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	4632      	mov	r2, r6
 800bc12:	4649      	mov	r1, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	47d0      	blx	sl
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d0ad      	beq.n	800bb78 <_printf_i+0x15c>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	079b      	lsls	r3, r3, #30
 800bc20:	d413      	bmi.n	800bc4a <_printf_i+0x22e>
 800bc22:	68e0      	ldr	r0, [r4, #12]
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	4298      	cmp	r0, r3
 800bc28:	bfb8      	it	lt
 800bc2a:	4618      	movlt	r0, r3
 800bc2c:	e7a6      	b.n	800bb7c <_printf_i+0x160>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	4632      	mov	r2, r6
 800bc32:	4649      	mov	r1, r9
 800bc34:	4640      	mov	r0, r8
 800bc36:	47d0      	blx	sl
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d09d      	beq.n	800bb78 <_printf_i+0x15c>
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	68e3      	ldr	r3, [r4, #12]
 800bc40:	9903      	ldr	r1, [sp, #12]
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	dcf2      	bgt.n	800bc2e <_printf_i+0x212>
 800bc48:	e7eb      	b.n	800bc22 <_printf_i+0x206>
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	f104 0619 	add.w	r6, r4, #25
 800bc50:	e7f5      	b.n	800bc3e <_printf_i+0x222>
 800bc52:	bf00      	nop
 800bc54:	0800c74b 	.word	0x0800c74b
 800bc58:	0800c75c 	.word	0x0800c75c

0800bc5c <__sflush_r>:
 800bc5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc64:	0716      	lsls	r6, r2, #28
 800bc66:	4605      	mov	r5, r0
 800bc68:	460c      	mov	r4, r1
 800bc6a:	d454      	bmi.n	800bd16 <__sflush_r+0xba>
 800bc6c:	684b      	ldr	r3, [r1, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	dc02      	bgt.n	800bc78 <__sflush_r+0x1c>
 800bc72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	dd48      	ble.n	800bd0a <__sflush_r+0xae>
 800bc78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc7a:	2e00      	cmp	r6, #0
 800bc7c:	d045      	beq.n	800bd0a <__sflush_r+0xae>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc84:	682f      	ldr	r7, [r5, #0]
 800bc86:	6a21      	ldr	r1, [r4, #32]
 800bc88:	602b      	str	r3, [r5, #0]
 800bc8a:	d030      	beq.n	800bcee <__sflush_r+0x92>
 800bc8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	0759      	lsls	r1, r3, #29
 800bc92:	d505      	bpl.n	800bca0 <__sflush_r+0x44>
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	1ad2      	subs	r2, r2, r3
 800bc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc9a:	b10b      	cbz	r3, 800bca0 <__sflush_r+0x44>
 800bc9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	2300      	movs	r3, #0
 800bca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bca4:	6a21      	ldr	r1, [r4, #32]
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b0      	blx	r6
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	d106      	bne.n	800bcbe <__sflush_r+0x62>
 800bcb0:	6829      	ldr	r1, [r5, #0]
 800bcb2:	291d      	cmp	r1, #29
 800bcb4:	d82b      	bhi.n	800bd0e <__sflush_r+0xb2>
 800bcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd60 <__sflush_r+0x104>)
 800bcb8:	410a      	asrs	r2, r1
 800bcba:	07d6      	lsls	r6, r2, #31
 800bcbc:	d427      	bmi.n	800bd0e <__sflush_r+0xb2>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	6062      	str	r2, [r4, #4]
 800bcc2:	04d9      	lsls	r1, r3, #19
 800bcc4:	6922      	ldr	r2, [r4, #16]
 800bcc6:	6022      	str	r2, [r4, #0]
 800bcc8:	d504      	bpl.n	800bcd4 <__sflush_r+0x78>
 800bcca:	1c42      	adds	r2, r0, #1
 800bccc:	d101      	bne.n	800bcd2 <__sflush_r+0x76>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	b903      	cbnz	r3, 800bcd4 <__sflush_r+0x78>
 800bcd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcd6:	602f      	str	r7, [r5, #0]
 800bcd8:	b1b9      	cbz	r1, 800bd0a <__sflush_r+0xae>
 800bcda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcde:	4299      	cmp	r1, r3
 800bce0:	d002      	beq.n	800bce8 <__sflush_r+0x8c>
 800bce2:	4628      	mov	r0, r5
 800bce4:	f7ff fc8a 	bl	800b5fc <_free_r>
 800bce8:	2300      	movs	r3, #0
 800bcea:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcec:	e00d      	b.n	800bd0a <__sflush_r+0xae>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	47b0      	blx	r6
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	1c50      	adds	r0, r2, #1
 800bcf8:	d1c9      	bne.n	800bc8e <__sflush_r+0x32>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0c6      	beq.n	800bc8e <__sflush_r+0x32>
 800bd00:	2b1d      	cmp	r3, #29
 800bd02:	d001      	beq.n	800bd08 <__sflush_r+0xac>
 800bd04:	2b16      	cmp	r3, #22
 800bd06:	d11e      	bne.n	800bd46 <__sflush_r+0xea>
 800bd08:	602f      	str	r7, [r5, #0]
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e022      	b.n	800bd54 <__sflush_r+0xf8>
 800bd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd12:	b21b      	sxth	r3, r3
 800bd14:	e01b      	b.n	800bd4e <__sflush_r+0xf2>
 800bd16:	690f      	ldr	r7, [r1, #16]
 800bd18:	2f00      	cmp	r7, #0
 800bd1a:	d0f6      	beq.n	800bd0a <__sflush_r+0xae>
 800bd1c:	0793      	lsls	r3, r2, #30
 800bd1e:	680e      	ldr	r6, [r1, #0]
 800bd20:	bf08      	it	eq
 800bd22:	694b      	ldreq	r3, [r1, #20]
 800bd24:	600f      	str	r7, [r1, #0]
 800bd26:	bf18      	it	ne
 800bd28:	2300      	movne	r3, #0
 800bd2a:	eba6 0807 	sub.w	r8, r6, r7
 800bd2e:	608b      	str	r3, [r1, #8]
 800bd30:	f1b8 0f00 	cmp.w	r8, #0
 800bd34:	dde9      	ble.n	800bd0a <__sflush_r+0xae>
 800bd36:	6a21      	ldr	r1, [r4, #32]
 800bd38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd3a:	4643      	mov	r3, r8
 800bd3c:	463a      	mov	r2, r7
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b0      	blx	r6
 800bd42:	2800      	cmp	r0, #0
 800bd44:	dc08      	bgt.n	800bd58 <__sflush_r+0xfc>
 800bd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd58:	4407      	add	r7, r0
 800bd5a:	eba8 0800 	sub.w	r8, r8, r0
 800bd5e:	e7e7      	b.n	800bd30 <__sflush_r+0xd4>
 800bd60:	dfbffffe 	.word	0xdfbffffe

0800bd64 <_fflush_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	690b      	ldr	r3, [r1, #16]
 800bd68:	4605      	mov	r5, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	b913      	cbnz	r3, 800bd74 <_fflush_r+0x10>
 800bd6e:	2500      	movs	r5, #0
 800bd70:	4628      	mov	r0, r5
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	b118      	cbz	r0, 800bd7e <_fflush_r+0x1a>
 800bd76:	6a03      	ldr	r3, [r0, #32]
 800bd78:	b90b      	cbnz	r3, 800bd7e <_fflush_r+0x1a>
 800bd7a:	f7ff fa7d 	bl	800b278 <__sinit>
 800bd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0f3      	beq.n	800bd6e <_fflush_r+0xa>
 800bd86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd88:	07d0      	lsls	r0, r2, #31
 800bd8a:	d404      	bmi.n	800bd96 <_fflush_r+0x32>
 800bd8c:	0599      	lsls	r1, r3, #22
 800bd8e:	d402      	bmi.n	800bd96 <_fflush_r+0x32>
 800bd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd92:	f7ff fc04 	bl	800b59e <__retarget_lock_acquire_recursive>
 800bd96:	4628      	mov	r0, r5
 800bd98:	4621      	mov	r1, r4
 800bd9a:	f7ff ff5f 	bl	800bc5c <__sflush_r>
 800bd9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bda0:	07da      	lsls	r2, r3, #31
 800bda2:	4605      	mov	r5, r0
 800bda4:	d4e4      	bmi.n	800bd70 <_fflush_r+0xc>
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	059b      	lsls	r3, r3, #22
 800bdaa:	d4e1      	bmi.n	800bd70 <_fflush_r+0xc>
 800bdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdae:	f7ff fbf7 	bl	800b5a0 <__retarget_lock_release_recursive>
 800bdb2:	e7dd      	b.n	800bd70 <_fflush_r+0xc>

0800bdb4 <fiprintf>:
 800bdb4:	b40e      	push	{r1, r2, r3}
 800bdb6:	b503      	push	{r0, r1, lr}
 800bdb8:	4601      	mov	r1, r0
 800bdba:	ab03      	add	r3, sp, #12
 800bdbc:	4805      	ldr	r0, [pc, #20]	@ (800bdd4 <fiprintf+0x20>)
 800bdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc2:	6800      	ldr	r0, [r0, #0]
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	f000 f87f 	bl	800bec8 <_vfiprintf_r>
 800bdca:	b002      	add	sp, #8
 800bdcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd0:	b003      	add	sp, #12
 800bdd2:	4770      	bx	lr
 800bdd4:	2400009c 	.word	0x2400009c

0800bdd8 <memmove>:
 800bdd8:	4288      	cmp	r0, r1
 800bdda:	b510      	push	{r4, lr}
 800bddc:	eb01 0402 	add.w	r4, r1, r2
 800bde0:	d902      	bls.n	800bde8 <memmove+0x10>
 800bde2:	4284      	cmp	r4, r0
 800bde4:	4623      	mov	r3, r4
 800bde6:	d807      	bhi.n	800bdf8 <memmove+0x20>
 800bde8:	1e43      	subs	r3, r0, #1
 800bdea:	42a1      	cmp	r1, r4
 800bdec:	d008      	beq.n	800be00 <memmove+0x28>
 800bdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdf6:	e7f8      	b.n	800bdea <memmove+0x12>
 800bdf8:	4402      	add	r2, r0
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	428a      	cmp	r2, r1
 800bdfe:	d100      	bne.n	800be02 <memmove+0x2a>
 800be00:	bd10      	pop	{r4, pc}
 800be02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be0a:	e7f7      	b.n	800bdfc <memmove+0x24>

0800be0c <abort>:
 800be0c:	b508      	push	{r3, lr}
 800be0e:	2006      	movs	r0, #6
 800be10:	f000 fa2e 	bl	800c270 <raise>
 800be14:	2001      	movs	r0, #1
 800be16:	f7f5 fa75 	bl	8001304 <_exit>

0800be1a <_realloc_r>:
 800be1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1e:	4680      	mov	r8, r0
 800be20:	4615      	mov	r5, r2
 800be22:	460c      	mov	r4, r1
 800be24:	b921      	cbnz	r1, 800be30 <_realloc_r+0x16>
 800be26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2a:	4611      	mov	r1, r2
 800be2c:	f7ff b888 	b.w	800af40 <_malloc_r>
 800be30:	b92a      	cbnz	r2, 800be3e <_realloc_r+0x24>
 800be32:	f7ff fbe3 	bl	800b5fc <_free_r>
 800be36:	2400      	movs	r4, #0
 800be38:	4620      	mov	r0, r4
 800be3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be3e:	f000 fa33 	bl	800c2a8 <_malloc_usable_size_r>
 800be42:	4285      	cmp	r5, r0
 800be44:	4606      	mov	r6, r0
 800be46:	d802      	bhi.n	800be4e <_realloc_r+0x34>
 800be48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be4c:	d8f4      	bhi.n	800be38 <_realloc_r+0x1e>
 800be4e:	4629      	mov	r1, r5
 800be50:	4640      	mov	r0, r8
 800be52:	f7ff f875 	bl	800af40 <_malloc_r>
 800be56:	4607      	mov	r7, r0
 800be58:	2800      	cmp	r0, #0
 800be5a:	d0ec      	beq.n	800be36 <_realloc_r+0x1c>
 800be5c:	42b5      	cmp	r5, r6
 800be5e:	462a      	mov	r2, r5
 800be60:	4621      	mov	r1, r4
 800be62:	bf28      	it	cs
 800be64:	4632      	movcs	r2, r6
 800be66:	f7ff fb9c 	bl	800b5a2 <memcpy>
 800be6a:	4621      	mov	r1, r4
 800be6c:	4640      	mov	r0, r8
 800be6e:	f7ff fbc5 	bl	800b5fc <_free_r>
 800be72:	463c      	mov	r4, r7
 800be74:	e7e0      	b.n	800be38 <_realloc_r+0x1e>

0800be76 <__sfputc_r>:
 800be76:	6893      	ldr	r3, [r2, #8]
 800be78:	3b01      	subs	r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	b410      	push	{r4}
 800be7e:	6093      	str	r3, [r2, #8]
 800be80:	da08      	bge.n	800be94 <__sfputc_r+0x1e>
 800be82:	6994      	ldr	r4, [r2, #24]
 800be84:	42a3      	cmp	r3, r4
 800be86:	db01      	blt.n	800be8c <__sfputc_r+0x16>
 800be88:	290a      	cmp	r1, #10
 800be8a:	d103      	bne.n	800be94 <__sfputc_r+0x1e>
 800be8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be90:	f000 b932 	b.w	800c0f8 <__swbuf_r>
 800be94:	6813      	ldr	r3, [r2, #0]
 800be96:	1c58      	adds	r0, r3, #1
 800be98:	6010      	str	r0, [r2, #0]
 800be9a:	7019      	strb	r1, [r3, #0]
 800be9c:	4608      	mov	r0, r1
 800be9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <__sfputs_r>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	4614      	mov	r4, r2
 800beac:	18d5      	adds	r5, r2, r3
 800beae:	42ac      	cmp	r4, r5
 800beb0:	d101      	bne.n	800beb6 <__sfputs_r+0x12>
 800beb2:	2000      	movs	r0, #0
 800beb4:	e007      	b.n	800bec6 <__sfputs_r+0x22>
 800beb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beba:	463a      	mov	r2, r7
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7ff ffda 	bl	800be76 <__sfputc_r>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d1f3      	bne.n	800beae <__sfputs_r+0xa>
 800bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bec8 <_vfiprintf_r>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	460d      	mov	r5, r1
 800bece:	b09d      	sub	sp, #116	@ 0x74
 800bed0:	4614      	mov	r4, r2
 800bed2:	4698      	mov	r8, r3
 800bed4:	4606      	mov	r6, r0
 800bed6:	b118      	cbz	r0, 800bee0 <_vfiprintf_r+0x18>
 800bed8:	6a03      	ldr	r3, [r0, #32]
 800beda:	b90b      	cbnz	r3, 800bee0 <_vfiprintf_r+0x18>
 800bedc:	f7ff f9cc 	bl	800b278 <__sinit>
 800bee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bee2:	07d9      	lsls	r1, r3, #31
 800bee4:	d405      	bmi.n	800bef2 <_vfiprintf_r+0x2a>
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	059a      	lsls	r2, r3, #22
 800beea:	d402      	bmi.n	800bef2 <_vfiprintf_r+0x2a>
 800beec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beee:	f7ff fb56 	bl	800b59e <__retarget_lock_acquire_recursive>
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	071b      	lsls	r3, r3, #28
 800bef6:	d501      	bpl.n	800befc <_vfiprintf_r+0x34>
 800bef8:	692b      	ldr	r3, [r5, #16]
 800befa:	b99b      	cbnz	r3, 800bf24 <_vfiprintf_r+0x5c>
 800befc:	4629      	mov	r1, r5
 800befe:	4630      	mov	r0, r6
 800bf00:	f000 f938 	bl	800c174 <__swsetup_r>
 800bf04:	b170      	cbz	r0, 800bf24 <_vfiprintf_r+0x5c>
 800bf06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf08:	07dc      	lsls	r4, r3, #31
 800bf0a:	d504      	bpl.n	800bf16 <_vfiprintf_r+0x4e>
 800bf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf10:	b01d      	add	sp, #116	@ 0x74
 800bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	0598      	lsls	r0, r3, #22
 800bf1a:	d4f7      	bmi.n	800bf0c <_vfiprintf_r+0x44>
 800bf1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf1e:	f7ff fb3f 	bl	800b5a0 <__retarget_lock_release_recursive>
 800bf22:	e7f3      	b.n	800bf0c <_vfiprintf_r+0x44>
 800bf24:	2300      	movs	r3, #0
 800bf26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf28:	2320      	movs	r3, #32
 800bf2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf32:	2330      	movs	r3, #48	@ 0x30
 800bf34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c0e4 <_vfiprintf_r+0x21c>
 800bf38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf3c:	f04f 0901 	mov.w	r9, #1
 800bf40:	4623      	mov	r3, r4
 800bf42:	469a      	mov	sl, r3
 800bf44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf48:	b10a      	cbz	r2, 800bf4e <_vfiprintf_r+0x86>
 800bf4a:	2a25      	cmp	r2, #37	@ 0x25
 800bf4c:	d1f9      	bne.n	800bf42 <_vfiprintf_r+0x7a>
 800bf4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf52:	d00b      	beq.n	800bf6c <_vfiprintf_r+0xa4>
 800bf54:	465b      	mov	r3, fp
 800bf56:	4622      	mov	r2, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ffa2 	bl	800bea4 <__sfputs_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	f000 80a7 	beq.w	800c0b4 <_vfiprintf_r+0x1ec>
 800bf66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf68:	445a      	add	r2, fp
 800bf6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 809f 	beq.w	800c0b4 <_vfiprintf_r+0x1ec>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf80:	f10a 0a01 	add.w	sl, sl, #1
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2205      	movs	r2, #5
 800bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf96:	4853      	ldr	r0, [pc, #332]	@ (800c0e4 <_vfiprintf_r+0x21c>)
 800bf98:	f7f4 f9ca 	bl	8000330 <memchr>
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	b9d8      	cbnz	r0, 800bfd8 <_vfiprintf_r+0x110>
 800bfa0:	06d1      	lsls	r1, r2, #27
 800bfa2:	bf44      	itt	mi
 800bfa4:	2320      	movmi	r3, #32
 800bfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfaa:	0713      	lsls	r3, r2, #28
 800bfac:	bf44      	itt	mi
 800bfae:	232b      	movmi	r3, #43	@ 0x2b
 800bfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfba:	d015      	beq.n	800bfe8 <_vfiprintf_r+0x120>
 800bfbc:	9a07      	ldr	r2, [sp, #28]
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f04f 0c0a 	mov.w	ip, #10
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfcc:	3b30      	subs	r3, #48	@ 0x30
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d94b      	bls.n	800c06a <_vfiprintf_r+0x1a2>
 800bfd2:	b1b0      	cbz	r0, 800c002 <_vfiprintf_r+0x13a>
 800bfd4:	9207      	str	r2, [sp, #28]
 800bfd6:	e014      	b.n	800c002 <_vfiprintf_r+0x13a>
 800bfd8:	eba0 0308 	sub.w	r3, r0, r8
 800bfdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	46a2      	mov	sl, r4
 800bfe6:	e7d2      	b.n	800bf8e <_vfiprintf_r+0xc6>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	1d19      	adds	r1, r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9103      	str	r1, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bfbb      	ittet	lt
 800bff4:	425b      	neglt	r3, r3
 800bff6:	f042 0202 	orrlt.w	r2, r2, #2
 800bffa:	9307      	strge	r3, [sp, #28]
 800bffc:	9307      	strlt	r3, [sp, #28]
 800bffe:	bfb8      	it	lt
 800c000:	9204      	strlt	r2, [sp, #16]
 800c002:	7823      	ldrb	r3, [r4, #0]
 800c004:	2b2e      	cmp	r3, #46	@ 0x2e
 800c006:	d10a      	bne.n	800c01e <_vfiprintf_r+0x156>
 800c008:	7863      	ldrb	r3, [r4, #1]
 800c00a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c00c:	d132      	bne.n	800c074 <_vfiprintf_r+0x1ac>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	1d1a      	adds	r2, r3, #4
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	9203      	str	r2, [sp, #12]
 800c016:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c01a:	3402      	adds	r4, #2
 800c01c:	9305      	str	r3, [sp, #20]
 800c01e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0f4 <_vfiprintf_r+0x22c>
 800c022:	7821      	ldrb	r1, [r4, #0]
 800c024:	2203      	movs	r2, #3
 800c026:	4650      	mov	r0, sl
 800c028:	f7f4 f982 	bl	8000330 <memchr>
 800c02c:	b138      	cbz	r0, 800c03e <_vfiprintf_r+0x176>
 800c02e:	9b04      	ldr	r3, [sp, #16]
 800c030:	eba0 000a 	sub.w	r0, r0, sl
 800c034:	2240      	movs	r2, #64	@ 0x40
 800c036:	4082      	lsls	r2, r0
 800c038:	4313      	orrs	r3, r2
 800c03a:	3401      	adds	r4, #1
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c042:	4829      	ldr	r0, [pc, #164]	@ (800c0e8 <_vfiprintf_r+0x220>)
 800c044:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c048:	2206      	movs	r2, #6
 800c04a:	f7f4 f971 	bl	8000330 <memchr>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d03f      	beq.n	800c0d2 <_vfiprintf_r+0x20a>
 800c052:	4b26      	ldr	r3, [pc, #152]	@ (800c0ec <_vfiprintf_r+0x224>)
 800c054:	bb1b      	cbnz	r3, 800c09e <_vfiprintf_r+0x1d6>
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	3307      	adds	r3, #7
 800c05a:	f023 0307 	bic.w	r3, r3, #7
 800c05e:	3308      	adds	r3, #8
 800c060:	9303      	str	r3, [sp, #12]
 800c062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c064:	443b      	add	r3, r7
 800c066:	9309      	str	r3, [sp, #36]	@ 0x24
 800c068:	e76a      	b.n	800bf40 <_vfiprintf_r+0x78>
 800c06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c06e:	460c      	mov	r4, r1
 800c070:	2001      	movs	r0, #1
 800c072:	e7a8      	b.n	800bfc6 <_vfiprintf_r+0xfe>
 800c074:	2300      	movs	r3, #0
 800c076:	3401      	adds	r4, #1
 800c078:	9305      	str	r3, [sp, #20]
 800c07a:	4619      	mov	r1, r3
 800c07c:	f04f 0c0a 	mov.w	ip, #10
 800c080:	4620      	mov	r0, r4
 800c082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c086:	3a30      	subs	r2, #48	@ 0x30
 800c088:	2a09      	cmp	r2, #9
 800c08a:	d903      	bls.n	800c094 <_vfiprintf_r+0x1cc>
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0c6      	beq.n	800c01e <_vfiprintf_r+0x156>
 800c090:	9105      	str	r1, [sp, #20]
 800c092:	e7c4      	b.n	800c01e <_vfiprintf_r+0x156>
 800c094:	fb0c 2101 	mla	r1, ip, r1, r2
 800c098:	4604      	mov	r4, r0
 800c09a:	2301      	movs	r3, #1
 800c09c:	e7f0      	b.n	800c080 <_vfiprintf_r+0x1b8>
 800c09e:	ab03      	add	r3, sp, #12
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	462a      	mov	r2, r5
 800c0a4:	4b12      	ldr	r3, [pc, #72]	@ (800c0f0 <_vfiprintf_r+0x228>)
 800c0a6:	a904      	add	r1, sp, #16
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f3af 8000 	nop.w
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	1c78      	adds	r0, r7, #1
 800c0b2:	d1d6      	bne.n	800c062 <_vfiprintf_r+0x19a>
 800c0b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0b6:	07d9      	lsls	r1, r3, #31
 800c0b8:	d405      	bmi.n	800c0c6 <_vfiprintf_r+0x1fe>
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	059a      	lsls	r2, r3, #22
 800c0be:	d402      	bmi.n	800c0c6 <_vfiprintf_r+0x1fe>
 800c0c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0c2:	f7ff fa6d 	bl	800b5a0 <__retarget_lock_release_recursive>
 800c0c6:	89ab      	ldrh	r3, [r5, #12]
 800c0c8:	065b      	lsls	r3, r3, #25
 800c0ca:	f53f af1f 	bmi.w	800bf0c <_vfiprintf_r+0x44>
 800c0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0d0:	e71e      	b.n	800bf10 <_vfiprintf_r+0x48>
 800c0d2:	ab03      	add	r3, sp, #12
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	462a      	mov	r2, r5
 800c0d8:	4b05      	ldr	r3, [pc, #20]	@ (800c0f0 <_vfiprintf_r+0x228>)
 800c0da:	a904      	add	r1, sp, #16
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7ff fc9d 	bl	800ba1c <_printf_i>
 800c0e2:	e7e4      	b.n	800c0ae <_vfiprintf_r+0x1e6>
 800c0e4:	0800c73a 	.word	0x0800c73a
 800c0e8:	0800c744 	.word	0x0800c744
 800c0ec:	00000000 	.word	0x00000000
 800c0f0:	0800bea5 	.word	0x0800bea5
 800c0f4:	0800c740 	.word	0x0800c740

0800c0f8 <__swbuf_r>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	460e      	mov	r6, r1
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	4605      	mov	r5, r0
 800c100:	b118      	cbz	r0, 800c10a <__swbuf_r+0x12>
 800c102:	6a03      	ldr	r3, [r0, #32]
 800c104:	b90b      	cbnz	r3, 800c10a <__swbuf_r+0x12>
 800c106:	f7ff f8b7 	bl	800b278 <__sinit>
 800c10a:	69a3      	ldr	r3, [r4, #24]
 800c10c:	60a3      	str	r3, [r4, #8]
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	071a      	lsls	r2, r3, #28
 800c112:	d501      	bpl.n	800c118 <__swbuf_r+0x20>
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	b943      	cbnz	r3, 800c12a <__swbuf_r+0x32>
 800c118:	4621      	mov	r1, r4
 800c11a:	4628      	mov	r0, r5
 800c11c:	f000 f82a 	bl	800c174 <__swsetup_r>
 800c120:	b118      	cbz	r0, 800c12a <__swbuf_r+0x32>
 800c122:	f04f 37ff 	mov.w	r7, #4294967295
 800c126:	4638      	mov	r0, r7
 800c128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	6922      	ldr	r2, [r4, #16]
 800c12e:	1a98      	subs	r0, r3, r2
 800c130:	6963      	ldr	r3, [r4, #20]
 800c132:	b2f6      	uxtb	r6, r6
 800c134:	4283      	cmp	r3, r0
 800c136:	4637      	mov	r7, r6
 800c138:	dc05      	bgt.n	800c146 <__swbuf_r+0x4e>
 800c13a:	4621      	mov	r1, r4
 800c13c:	4628      	mov	r0, r5
 800c13e:	f7ff fe11 	bl	800bd64 <_fflush_r>
 800c142:	2800      	cmp	r0, #0
 800c144:	d1ed      	bne.n	800c122 <__swbuf_r+0x2a>
 800c146:	68a3      	ldr	r3, [r4, #8]
 800c148:	3b01      	subs	r3, #1
 800c14a:	60a3      	str	r3, [r4, #8]
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	6022      	str	r2, [r4, #0]
 800c152:	701e      	strb	r6, [r3, #0]
 800c154:	6962      	ldr	r2, [r4, #20]
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	429a      	cmp	r2, r3
 800c15a:	d004      	beq.n	800c166 <__swbuf_r+0x6e>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	07db      	lsls	r3, r3, #31
 800c160:	d5e1      	bpl.n	800c126 <__swbuf_r+0x2e>
 800c162:	2e0a      	cmp	r6, #10
 800c164:	d1df      	bne.n	800c126 <__swbuf_r+0x2e>
 800c166:	4621      	mov	r1, r4
 800c168:	4628      	mov	r0, r5
 800c16a:	f7ff fdfb 	bl	800bd64 <_fflush_r>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d0d9      	beq.n	800c126 <__swbuf_r+0x2e>
 800c172:	e7d6      	b.n	800c122 <__swbuf_r+0x2a>

0800c174 <__swsetup_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4b29      	ldr	r3, [pc, #164]	@ (800c21c <__swsetup_r+0xa8>)
 800c178:	4605      	mov	r5, r0
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	460c      	mov	r4, r1
 800c17e:	b118      	cbz	r0, 800c188 <__swsetup_r+0x14>
 800c180:	6a03      	ldr	r3, [r0, #32]
 800c182:	b90b      	cbnz	r3, 800c188 <__swsetup_r+0x14>
 800c184:	f7ff f878 	bl	800b278 <__sinit>
 800c188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18c:	0719      	lsls	r1, r3, #28
 800c18e:	d422      	bmi.n	800c1d6 <__swsetup_r+0x62>
 800c190:	06da      	lsls	r2, r3, #27
 800c192:	d407      	bmi.n	800c1a4 <__swsetup_r+0x30>
 800c194:	2209      	movs	r2, #9
 800c196:	602a      	str	r2, [r5, #0]
 800c198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	e033      	b.n	800c20c <__swsetup_r+0x98>
 800c1a4:	0758      	lsls	r0, r3, #29
 800c1a6:	d512      	bpl.n	800c1ce <__swsetup_r+0x5a>
 800c1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1aa:	b141      	cbz	r1, 800c1be <__swsetup_r+0x4a>
 800c1ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1b0:	4299      	cmp	r1, r3
 800c1b2:	d002      	beq.n	800c1ba <__swsetup_r+0x46>
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f7ff fa21 	bl	800b5fc <_free_r>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1c4:	81a3      	strh	r3, [r4, #12]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	6063      	str	r3, [r4, #4]
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f043 0308 	orr.w	r3, r3, #8
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	6923      	ldr	r3, [r4, #16]
 800c1d8:	b94b      	cbnz	r3, 800c1ee <__swsetup_r+0x7a>
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1e4:	d003      	beq.n	800c1ee <__swsetup_r+0x7a>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f000 f88b 	bl	800c304 <__smakebuf_r>
 800c1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f2:	f013 0201 	ands.w	r2, r3, #1
 800c1f6:	d00a      	beq.n	800c20e <__swsetup_r+0x9a>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	60a2      	str	r2, [r4, #8]
 800c1fc:	6962      	ldr	r2, [r4, #20]
 800c1fe:	4252      	negs	r2, r2
 800c200:	61a2      	str	r2, [r4, #24]
 800c202:	6922      	ldr	r2, [r4, #16]
 800c204:	b942      	cbnz	r2, 800c218 <__swsetup_r+0xa4>
 800c206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c20a:	d1c5      	bne.n	800c198 <__swsetup_r+0x24>
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	0799      	lsls	r1, r3, #30
 800c210:	bf58      	it	pl
 800c212:	6962      	ldrpl	r2, [r4, #20]
 800c214:	60a2      	str	r2, [r4, #8]
 800c216:	e7f4      	b.n	800c202 <__swsetup_r+0x8e>
 800c218:	2000      	movs	r0, #0
 800c21a:	e7f7      	b.n	800c20c <__swsetup_r+0x98>
 800c21c:	2400009c 	.word	0x2400009c

0800c220 <_raise_r>:
 800c220:	291f      	cmp	r1, #31
 800c222:	b538      	push	{r3, r4, r5, lr}
 800c224:	4605      	mov	r5, r0
 800c226:	460c      	mov	r4, r1
 800c228:	d904      	bls.n	800c234 <_raise_r+0x14>
 800c22a:	2316      	movs	r3, #22
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	f04f 30ff 	mov.w	r0, #4294967295
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c236:	b112      	cbz	r2, 800c23e <_raise_r+0x1e>
 800c238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c23c:	b94b      	cbnz	r3, 800c252 <_raise_r+0x32>
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 f830 	bl	800c2a4 <_getpid_r>
 800c244:	4622      	mov	r2, r4
 800c246:	4601      	mov	r1, r0
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24e:	f000 b817 	b.w	800c280 <_kill_r>
 800c252:	2b01      	cmp	r3, #1
 800c254:	d00a      	beq.n	800c26c <_raise_r+0x4c>
 800c256:	1c59      	adds	r1, r3, #1
 800c258:	d103      	bne.n	800c262 <_raise_r+0x42>
 800c25a:	2316      	movs	r3, #22
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	2001      	movs	r0, #1
 800c260:	e7e7      	b.n	800c232 <_raise_r+0x12>
 800c262:	2100      	movs	r1, #0
 800c264:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c268:	4620      	mov	r0, r4
 800c26a:	4798      	blx	r3
 800c26c:	2000      	movs	r0, #0
 800c26e:	e7e0      	b.n	800c232 <_raise_r+0x12>

0800c270 <raise>:
 800c270:	4b02      	ldr	r3, [pc, #8]	@ (800c27c <raise+0xc>)
 800c272:	4601      	mov	r1, r0
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f7ff bfd3 	b.w	800c220 <_raise_r>
 800c27a:	bf00      	nop
 800c27c:	2400009c 	.word	0x2400009c

0800c280 <_kill_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	@ (800c2a0 <_kill_r+0x20>)
 800c284:	2300      	movs	r3, #0
 800c286:	4604      	mov	r4, r0
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f7f5 f829 	bl	80012e4 <_kill>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	d102      	bne.n	800c29c <_kill_r+0x1c>
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	b103      	cbz	r3, 800c29c <_kill_r+0x1c>
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	bf00      	nop
 800c2a0:	24000820 	.word	0x24000820

0800c2a4 <_getpid_r>:
 800c2a4:	f7f5 b816 	b.w	80012d4 <_getpid>

0800c2a8 <_malloc_usable_size_r>:
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f18      	subs	r0, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfbc      	itt	lt
 800c2b2:	580b      	ldrlt	r3, [r1, r0]
 800c2b4:	18c0      	addlt	r0, r0, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <__swhatbuf_r>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	b096      	sub	sp, #88	@ 0x58
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	461e      	mov	r6, r3
 800c2c8:	da0d      	bge.n	800c2e6 <__swhatbuf_r+0x2e>
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c2d0:	f04f 0100 	mov.w	r1, #0
 800c2d4:	bf14      	ite	ne
 800c2d6:	2340      	movne	r3, #64	@ 0x40
 800c2d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c2dc:	2000      	movs	r0, #0
 800c2de:	6031      	str	r1, [r6, #0]
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	b016      	add	sp, #88	@ 0x58
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}
 800c2e6:	466a      	mov	r2, sp
 800c2e8:	f000 f848 	bl	800c37c <_fstat_r>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	dbec      	blt.n	800c2ca <__swhatbuf_r+0x12>
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2fa:	4259      	negs	r1, r3
 800c2fc:	4159      	adcs	r1, r3
 800c2fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c302:	e7eb      	b.n	800c2dc <__swhatbuf_r+0x24>

0800c304 <__smakebuf_r>:
 800c304:	898b      	ldrh	r3, [r1, #12]
 800c306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c308:	079d      	lsls	r5, r3, #30
 800c30a:	4606      	mov	r6, r0
 800c30c:	460c      	mov	r4, r1
 800c30e:	d507      	bpl.n	800c320 <__smakebuf_r+0x1c>
 800c310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	2301      	movs	r3, #1
 800c31a:	6163      	str	r3, [r4, #20]
 800c31c:	b003      	add	sp, #12
 800c31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c320:	ab01      	add	r3, sp, #4
 800c322:	466a      	mov	r2, sp
 800c324:	f7ff ffc8 	bl	800c2b8 <__swhatbuf_r>
 800c328:	9f00      	ldr	r7, [sp, #0]
 800c32a:	4605      	mov	r5, r0
 800c32c:	4639      	mov	r1, r7
 800c32e:	4630      	mov	r0, r6
 800c330:	f7fe fe06 	bl	800af40 <_malloc_r>
 800c334:	b948      	cbnz	r0, 800c34a <__smakebuf_r+0x46>
 800c336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33a:	059a      	lsls	r2, r3, #22
 800c33c:	d4ee      	bmi.n	800c31c <__smakebuf_r+0x18>
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	f043 0302 	orr.w	r3, r3, #2
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	e7e2      	b.n	800c310 <__smakebuf_r+0xc>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	6020      	str	r0, [r4, #0]
 800c34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	9b01      	ldr	r3, [sp, #4]
 800c356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c35a:	b15b      	cbz	r3, 800c374 <__smakebuf_r+0x70>
 800c35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f81d 	bl	800c3a0 <_isatty_r>
 800c366:	b128      	cbz	r0, 800c374 <__smakebuf_r+0x70>
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	f043 0301 	orr.w	r3, r3, #1
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	431d      	orrs	r5, r3
 800c378:	81a5      	strh	r5, [r4, #12]
 800c37a:	e7cf      	b.n	800c31c <__smakebuf_r+0x18>

0800c37c <_fstat_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d07      	ldr	r5, [pc, #28]	@ (800c39c <_fstat_r+0x20>)
 800c380:	2300      	movs	r3, #0
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	4611      	mov	r1, r2
 800c388:	602b      	str	r3, [r5, #0]
 800c38a:	f7f5 f80b 	bl	80013a4 <_fstat>
 800c38e:	1c43      	adds	r3, r0, #1
 800c390:	d102      	bne.n	800c398 <_fstat_r+0x1c>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	b103      	cbz	r3, 800c398 <_fstat_r+0x1c>
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	bf00      	nop
 800c39c:	24000820 	.word	0x24000820

0800c3a0 <_isatty_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4d06      	ldr	r5, [pc, #24]	@ (800c3bc <_isatty_r+0x1c>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f5 f80a 	bl	80013c4 <_isatty>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_isatty_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_isatty_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	24000820 	.word	0x24000820

0800c3c0 <_init>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr

0800c3cc <_fini>:
 800c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ce:	bf00      	nop
 800c3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d2:	bc08      	pop	{r3}
 800c3d4:	469e      	mov	lr, r3
 800c3d6:	4770      	bx	lr


lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b90c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800bbdc  0800bbdc  0000cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bee0  0800bee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d4  24000000  0800bee8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000073c  240000d4  0800bfbc  0000d0d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000810  0800bfbc  0000d810  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d0d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c59  00000000  00000000  0000d102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000393d  00000000  00000000  00025d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00029698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c57  00000000  00000000  0002a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000361f9  00000000  00000000  0002b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c3b0  00000000  00000000  00061550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149b83  00000000  00000000  0007d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c7483  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb4  00000000  00000000  001c74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001cc07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d4 	.word	0x240000d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bbc4 	.word	0x0800bbc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d8 	.word	0x240000d8
 800030c:	0800bbc4 	.word	0x0800bbc4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f009 ff1f 	bl	800a50c <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f009 ff1b 	bl	800a524 <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fa6f 	bl	800abd6 <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fa69 	bl	800abd6 <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	240002f0 	.word	0x240002f0
 8000710:	240000f0 	.word	0x240000f0

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f009 ff00 	bl	800a544 <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f009 ff87 	bl	800a65e <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	240000f0 	.word	0x240000f0

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fa32 	bl	800abe8 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fa25 	bl	800abe8 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a f932 	bl	800aae8 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fa2f 	bl	8007cf4 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	2400003c 	.word	0x2400003c
 80008a4:	0800bbf8 	.word	0x0800bbf8
 80008a8:	240000f0 	.word	0x240000f0
 80008ac:	240002f0 	.word	0x240002f0
 80008b0:	24000318 	.word	0x24000318
 80008b4:	0800bbfc 	.word	0x0800bbfc
 80008b8:	0800bc10 	.word	0x0800bc10
 80008bc:	24000540 	.word	0x24000540

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 fd78 	bl	800a3d0 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	4619      	mov	r1, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	460b      	mov	r3, r1
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <getDateTime+0x54>)
 80008f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f00a f8f7 	bl	800aae8 <sniprintf>
 80008fa:	4603      	mov	r3, r0
 80008fc:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80008fe:	8afa      	ldrh	r2, [r7, #22]
 8000900:	2364      	movs	r3, #100	@ 0x64
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <getDateTime+0x58>)
 8000906:	f007 f9f5 	bl	8007cf4 <HAL_UART_Transmit>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800bc14 	.word	0x0800bc14
 8000918:	24000540 	.word	0x24000540

0800091c <setTime>:

static void setTime(char ** args, char *response)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000926:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <setTime+0xa0>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	823b      	strh	r3, [r7, #16]
 800092c:	2300      	movs	r3, #0
 800092e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f8c3 2003 	str.w	r2, [r3, #3]

    char *token = strtok(args[2], ",");
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3308      	adds	r3, #8
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	491e      	ldr	r1, [pc, #120]	@ (80009c0 <setTime+0xa4>)
 8000948:	4618      	mov	r0, r3
 800094a:	f00a f94d 	bl	800abe8 <strtok>
 800094e:	61b8      	str	r0, [r7, #24]


    while (token != NULL && tokenIdx < 3)
 8000950:	e011      	b.n	8000976 <setTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000952:	69b8      	ldr	r0, [r7, #24]
 8000954:	f009 fec8 	bl	800a6e8 <atoi>
 8000958:	4602      	mov	r2, r0
 800095a:	7ffb      	ldrb	r3, [r7, #31]
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	3320      	adds	r3, #32
 8000960:	443b      	add	r3, r7
 8000962:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	3301      	adds	r3, #1
 800096a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ",");
 800096c:	4914      	ldr	r1, [pc, #80]	@ (80009c0 <setTime+0xa4>)
 800096e:	2000      	movs	r0, #0
 8000970:	f00a f93a 	bl	800abe8 <strtok>
 8000974:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <setTime+0x66>
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d9e7      	bls.n	8000952 <setTime+0x36>
    }

    dateTime.hours = dateTimeArray[0];
 8000982:	7c3b      	ldrb	r3, [r7, #16]
 8000984:	723b      	strb	r3, [r7, #8]
    dateTime.mins = dateTimeArray[1];
 8000986:	7c7b      	ldrb	r3, [r7, #17]
 8000988:	727b      	strb	r3, [r7, #9]
    dateTime.secs = dateTimeArray[2];
 800098a:	7cbb      	ldrb	r3, [r7, #18]
 800098c:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4618      	mov	r0, r3
 8000994:	f009 fcca 	bl	800a32c <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <setTime+0xa8>)
 800099a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f00a f8a2 	bl	800aae8 <sniprintf>
 80009a4:	4603      	mov	r3, r0
 80009a6:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80009a8:	8afa      	ldrh	r2, [r7, #22]
 80009aa:	2364      	movs	r3, #100	@ 0x64
 80009ac:	6839      	ldr	r1, [r7, #0]
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <setTime+0xac>)
 80009b0:	f007 f9a0 	bl	8007cf4 <HAL_UART_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0800bc40 	.word	0x0800bc40
 80009c0:	0800bc2c 	.word	0x0800bc2c
 80009c4:	0800bc30 	.word	0x0800bc30
 80009c8:	24000540 	.word	0x24000540

080009cc <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <setCSleep+0x34>)
 80009d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f00a f883 	bl	800aae8 <sniprintf>
 80009e2:	4603      	mov	r3, r0
 80009e4:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80009e6:	89fa      	ldrh	r2, [r7, #14]
 80009e8:	2364      	movs	r3, #100	@ 0x64
 80009ea:	6839      	ldr	r1, [r7, #0]
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <setCSleep+0x38>)
 80009ee:	f007 f981 	bl	8007cf4 <HAL_UART_Transmit>

	startLowPowerMode();
 80009f2:	f009 fc53 	bl	800a29c <startLowPowerMode>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800bc44 	.word	0x0800bc44
 8000a04:	24000540 	.word	0x24000540

08000a08 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	debugUartInit();
 8000a0c:	f009 fd60 	bl	800a4d0 <debugUartInit>

	RTCInit();
 8000a10:	f009 fc6e 	bl	800a2f0 <RTCInit>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000a14:	2210      	movs	r2, #16
 8000a16:	4903      	ldr	r1, [pc, #12]	@ (8000a24 <systemInit+0x1c>)
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <systemInit+0x20>)
 8000a1a:	f007 f9f9 	bl	8007e10 <HAL_UART_Transmit_IT>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800bc64 	.word	0x0800bc64
 8000a28:	24000540 	.word	0x24000540

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	200b      	movs	r0, #11
 8000a56:	f000 feba 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a5a:	200b      	movs	r0, #11
 8000a5c:	f000 fed1 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58024400 	.word	0x58024400

08000a6c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b90      	ldr	r3, [pc, #576]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a8e      	ldr	r2, [pc, #568]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b88      	ldr	r3, [pc, #544]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a87      	ldr	r2, [pc, #540]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b84      	ldr	r3, [pc, #528]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b81      	ldr	r3, [pc, #516]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b7d      	ldr	r3, [pc, #500]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b79      	ldr	r3, [pc, #484]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a78      	ldr	r2, [pc, #480]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b75      	ldr	r3, [pc, #468]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b72      	ldr	r3, [pc, #456]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a70      	ldr	r2, [pc, #448]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b6a      	ldr	r3, [pc, #424]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a69      	ldr	r2, [pc, #420]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b66      	ldr	r3, [pc, #408]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b63      	ldr	r3, [pc, #396]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a61      	ldr	r2, [pc, #388]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b5a:	485b      	ldr	r0, [pc, #364]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000b5c:	f003 fe4c 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b66:	4859      	ldr	r0, [pc, #356]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000b68:	f003 fe46 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4857      	ldr	r0, [pc, #348]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000b72:	f003 fe41 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4851      	ldr	r0, [pc, #324]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000b8e:	f003 fc8b 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b92:	2332      	movs	r3, #50	@ 0x32
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4849      	ldr	r0, [pc, #292]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000bae:	f003 fc7b 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb2:	2386      	movs	r3, #134	@ 0x86
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4842      	ldr	r0, [pc, #264]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000bce:	f003 fc6b 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bd2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4837      	ldr	r0, [pc, #220]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000bec:	f003 fc5c 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	482e      	ldr	r0, [pc, #184]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000c0e:	f003 fc4b 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4828      	ldr	r0, [pc, #160]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000c2c:	f003 fc3c 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000c46:	f003 fc2f 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000c68:	f003 fc1e 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000c8a:	f003 fc0d 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000ca6:	f003 fbff 	bl	80044a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2028      	movs	r0, #40	@ 0x28
 8000cb0:	f000 fd8d 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb4:	2028      	movs	r0, #40	@ 0x28
 8000cb6:	f000 fda4 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	@ 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58020c00 	.word	0x58020c00
 8000cd0:	58021000 	.word	0x58021000
 8000cd4:	58020800 	.word	0x58020800
 8000cd8:	58020000 	.word	0x58020000
 8000cdc:	58021800 	.word	0x58021800

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fc06 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f80e 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f7ff febe 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf0:	f7ff fe9c 	bl	8000a2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cf4:	f000 fae4 	bl	80012c0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000cf8:	f000 f87c 	bl	8000df4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000cfc:	f7ff fe84 	bl	8000a08 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000d00:	f7ff fcde 	bl	80006c0 <debugCLITask>
 8000d04:	e7fc      	b.n	8000d00 <main+0x20>
	...

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09c      	sub	sp, #112	@ 0x70
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	224c      	movs	r2, #76	@ 0x4c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f009 ff5d 	bl	800abd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 ff57 	bl	800abd6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f003 fdb3 	bl	8004894 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d4a:	bf00      	nop
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d58:	d1f8      	bne.n	8000d4c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d74:	f240 1313 	movw	r3, #275	@ 0x113
 8000d78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d86:	2304      	movs	r3, #4
 8000d88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fdb6 	bl	8004908 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000da2:	f000 f821 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	233f      	movs	r3, #63	@ 0x3f
 8000da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db2:	2308      	movs	r3, #8
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dba:	2340      	movs	r3, #64	@ 0x40
 8000dbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dc4:	2340      	movs	r3, #64	@ 0x40
 8000dc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2103      	movs	r1, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 f975 	bl	80050bc <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dd8:	f000 f806 	bl	8000de8 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3770      	adds	r7, #112	@ 0x70
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58024800 	.word	0x58024800

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2228      	movs	r2, #40	@ 0x28
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f009 fede 	bl	800abd6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f10 <MX_RTC_Init+0x11c>)
 8000e1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e26:	4b39      	ldr	r3, [pc, #228]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e28:	227f      	movs	r2, #127	@ 0x7f
 8000e2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e2e:	22ff      	movs	r2, #255	@ 0xff
 8000e30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e32:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e38:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e3e:	4b33      	ldr	r3, [pc, #204]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e44:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e4a:	4830      	ldr	r0, [pc, #192]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e4c:	f006 fa84 	bl	8007358 <HAL_RTC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e56:	f7ff ffc7 	bl	8000de8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4823      	ldr	r0, [pc, #140]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000e7e:	f006 faed 	bl	800745c <HAL_RTC_SetTime>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000e88:	f7ff ffae 	bl	8000de8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ea4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000eae:	f006 fbcf 	bl	8007650 <HAL_RTC_SetDate>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000eb8:	f7ff ff96 	bl	8000de8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <MX_RTC_Init+0x118>)
 8000ef4:	f006 fc82 	bl	80077fc <HAL_RTC_SetAlarm>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000efe:	f7ff ff73 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000518 	.word	0x24000518
 8000f10:	58004000 	.word	0x58004000

08000f14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b0      	sub	sp, #192	@ 0xc0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	22b8      	movs	r2, #184	@ 0xb8
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f009 fe56 	bl	800abd6 <memset>
  if(rtcHandle->Instance==RTC)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_RTC_MspInit+0x5c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d119      	bne.n	8000f68 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fc41 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000f58:	f7ff ff46 	bl	8000de8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_RTC_MspInit+0x60>)
 8000f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_RTC_MspInit+0x60>)
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f66:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	37c0      	adds	r7, #192	@ 0xc0
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58004000 	.word	0x58004000
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_MspInit+0x30>)
 8000f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58024400 	.word	0x58024400

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 fae9 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <DMA1_Stream0_IRQHandler+0x10>)
 8001012:	f001 ff37 	bl	8002e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	240005d4 	.word	0x240005d4

08001020 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART3_IRQHandler+0x10>)
 8001026:	f006 ffd3 	bl	8007fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000540 	.word	0x24000540

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001038:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800103c:	f003 fbf5 	bl	800482a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_kill>:

int _kill(int pid, int sig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105e:	f009 fe75 	bl	800ad4c <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
  return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_exit>:

void _exit (int status)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe7 	bl	8001054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <_exit+0x12>

0800108a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00a      	b.n	80010b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109c:	f3af 8000 	nop.w
 80010a0:	4601      	mov	r1, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	60ba      	str	r2, [r7, #8]
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf0      	blt.n	800109c <_read+0x12>
  }

  return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e009      	b.n	80010ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf1      	blt.n	80010d6 <_write+0x12>
  }
  return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_close>:

int _close(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001124:	605a      	str	r2, [r3, #4]
  return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_isatty>:

int _isatty(int file)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f009 fdda 	bl	800ad4c <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24050000 	.word	0x24050000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	2400053c 	.word	0x2400053c
 80011cc:	24000810 	.word	0x24000810

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <SystemInit+0xd0>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a31      	ldr	r2, [pc, #196]	@ (80012a0 <SystemInit+0xd0>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <SystemInit+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d807      	bhi.n	8001200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f0:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <SystemInit+0xd4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <SystemInit+0xd4>)
 80011fa:	f043 0307 	orr.w	r3, r3, #7
 80011fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <SystemInit+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <SystemInit+0xd8>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <SystemInit+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemInit+0xd8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4924      	ldr	r1, [pc, #144]	@ (80012a8 <SystemInit+0xd8>)
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SystemInit+0xdc>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <SystemInit+0xd4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <SystemInit+0xd4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <SystemInit+0xd4>)
 8001234:	f043 0307 	orr.w	r3, r3, #7
 8001238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <SystemInit+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <SystemInit+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <SystemInit+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <SystemInit+0xd8>)
 800124e:	4a18      	ldr	r2, [pc, #96]	@ (80012b0 <SystemInit+0xe0>)
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <SystemInit+0xd8>)
 8001254:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <SystemInit+0xe4>)
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <SystemInit+0xd8>)
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <SystemInit+0xe8>)
 800125c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <SystemInit+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <SystemInit+0xd8>)
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <SystemInit+0xe8>)
 8001268:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SystemInit+0xd8>)
 800126c:	2200      	movs	r2, #0
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <SystemInit+0xd8>)
 8001272:	4a11      	ldr	r2, [pc, #68]	@ (80012b8 <SystemInit+0xe8>)
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SystemInit+0xd8>)
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <SystemInit+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <SystemInit+0xd8>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <SystemInit+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <SystemInit+0xec>)
 8001290:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001294:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	52002000 	.word	0x52002000
 80012a8:	58024400 	.word	0x58024400
 80012ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80012b0:	02020200 	.word	0x02020200
 80012b4:	01ff0000 	.word	0x01ff0000
 80012b8:	01010280 	.word	0x01010280
 80012bc:	52004000 	.word	0x52004000

080012c0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <MX_USART3_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800130a:	f006 fca3 	bl	8007c54 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f7ff fd68 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800131c:	f008 fed3 	bl	800a0c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f7ff fd5f 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800132e:	f008 ff08 	bl	800a142 <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f7ff fd56 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART3_UART_Init+0x90>)
 800133e:	f008 fe89 	bl	800a054 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f7ff fd4e 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000540 	.word	0x24000540
 8001354:	40004800 	.word	0x40004800

08001358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0b8      	sub	sp, #224	@ 0xe0
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	22b8      	movs	r2, #184	@ 0xb8
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f009 fc2c 	bl	800abd6 <memset>
  if(uartHandle->Instance==USART3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a42      	ldr	r2, [pc, #264]	@ (800148c <HAL_UART_MspInit+0x134>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d17d      	bne.n	8001484 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001388:	f04f 0202 	mov.w	r2, #2
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fa18 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013aa:	f7ff fd1d 	bl	8000de8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b4:	4a36      	ldr	r2, [pc, #216]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013be:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_UART_MspInit+0x138>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001404:	2307      	movs	r3, #7
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800140e:	4619      	mov	r1, r3
 8001410:	4820      	ldr	r0, [pc, #128]	@ (8001494 <HAL_UART_MspInit+0x13c>)
 8001412:	f003 f849 	bl	80044a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001418:	4a20      	ldr	r2, [pc, #128]	@ (800149c <HAL_UART_MspInit+0x144>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800141e:	222d      	movs	r2, #45	@ 0x2d
 8001420:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001448:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001456:	4810      	ldr	r0, [pc, #64]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001458:	f000 f9ee 	bl	8001838 <HAL_DMA_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001462:	f7ff fcc1 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_UART_MspInit+0x140>)
 800146a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_UART_MspInit+0x140>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2027      	movs	r0, #39	@ 0x27
 800147a:	f000 f9a8 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800147e:	2027      	movs	r0, #39	@ 0x27
 8001480:	f000 f9bf 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37e0      	adds	r7, #224	@ 0xe0
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004800 	.word	0x40004800
 8001490:	58024400 	.word	0x58024400
 8001494:	58020c00 	.word	0x58020c00
 8001498:	240005d4 	.word	0x240005d4
 800149c:	40020010 	.word	0x40020010

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a4:	f7ff fe94 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f009 fc43 	bl	800ad58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fc05 	bl	8000ce0 <main>
  bx  lr
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e0:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 80014e4:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 80014e8:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80014ec:	24000810 	.word	0x24000810

080014f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC3_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f95c 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001500:	f003 ff92 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_Init+0x68>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	4913      	ldr	r1, [pc, #76]	@ (8001560 <HAL_Init+0x6c>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <HAL_Init+0x6c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_Init+0x70>)
 8001536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_Init+0x74>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f814 	bl	800156c <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e002      	b.n	8001554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800154e:	f7ff fd13 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	58024400 	.word	0x58024400
 8001560:	0800bcb4 	.word	0x0800bcb4
 8001564:	24000064 	.word	0x24000064
 8001568:	24000060 	.word	0x24000060

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_InitTick+0x60>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e021      	b.n	80015c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_InitTick+0x64>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_InitTick+0x60>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f941 	bl	800181e <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f90b 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_InitTick+0x68>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2400006c 	.word	0x2400006c
 80015d0:	24000060 	.word	0x24000060
 80015d4:	24000068 	.word	0x24000068

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2400006c 	.word	0x2400006c
 80015fc:	2400064c 	.word	0x2400064c

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	2400064c 	.word	0x2400064c

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff fede 	bl	8001600 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e312      	b.n	8001e76 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a66      	ldr	r2, [pc, #408]	@ (80019f0 <HAL_DMA_Init+0x1b8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d04a      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a65      	ldr	r2, [pc, #404]	@ (80019f4 <HAL_DMA_Init+0x1bc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d045      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a63      	ldr	r2, [pc, #396]	@ (80019f8 <HAL_DMA_Init+0x1c0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d040      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a62      	ldr	r2, [pc, #392]	@ (80019fc <HAL_DMA_Init+0x1c4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d03b      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <HAL_DMA_Init+0x1c8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d036      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5f      	ldr	r2, [pc, #380]	@ (8001a04 <HAL_DMA_Init+0x1cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d031      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	@ (8001a08 <HAL_DMA_Init+0x1d0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d02c      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <HAL_DMA_Init+0x1d4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d027      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a10 <HAL_DMA_Init+0x1d8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d022      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a59      	ldr	r2, [pc, #356]	@ (8001a14 <HAL_DMA_Init+0x1dc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d01d      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a57      	ldr	r2, [pc, #348]	@ (8001a18 <HAL_DMA_Init+0x1e0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d018      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	@ (8001a1c <HAL_DMA_Init+0x1e4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a54      	ldr	r2, [pc, #336]	@ (8001a20 <HAL_DMA_Init+0x1e8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00e      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a53      	ldr	r2, [pc, #332]	@ (8001a24 <HAL_DMA_Init+0x1ec>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d009      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a51      	ldr	r2, [pc, #324]	@ (8001a28 <HAL_DMA_Init+0x1f0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Init+0xb8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a50      	ldr	r2, [pc, #320]	@ (8001a2c <HAL_DMA_Init+0x1f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0xbc>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_DMA_Init+0xbe>
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 813c 	beq.w	8001b74 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <HAL_DMA_Init+0x1b8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d04a      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a36      	ldr	r2, [pc, #216]	@ (80019f4 <HAL_DMA_Init+0x1bc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d045      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_DMA_Init+0x1c0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d040      	beq.n	80019ac <HAL_DMA_Init+0x174>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a33      	ldr	r2, [pc, #204]	@ (80019fc <HAL_DMA_Init+0x1c4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d03b      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a31      	ldr	r2, [pc, #196]	@ (8001a00 <HAL_DMA_Init+0x1c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d036      	beq.n	80019ac <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a30      	ldr	r2, [pc, #192]	@ (8001a04 <HAL_DMA_Init+0x1cc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d031      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <HAL_DMA_Init+0x1d0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02c      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2d      	ldr	r2, [pc, #180]	@ (8001a0c <HAL_DMA_Init+0x1d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d027      	beq.n	80019ac <HAL_DMA_Init+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2b      	ldr	r2, [pc, #172]	@ (8001a10 <HAL_DMA_Init+0x1d8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d022      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a14 <HAL_DMA_Init+0x1dc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d01d      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <HAL_DMA_Init+0x1e0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d018      	beq.n	80019ac <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a27      	ldr	r2, [pc, #156]	@ (8001a1c <HAL_DMA_Init+0x1e4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a25      	ldr	r2, [pc, #148]	@ (8001a20 <HAL_DMA_Init+0x1e8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00e      	beq.n	80019ac <HAL_DMA_Init+0x174>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <HAL_DMA_Init+0x1ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_DMA_Init+0x174>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <HAL_DMA_Init+0x1f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_DMA_Init+0x174>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <HAL_DMA_Init+0x1f4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <HAL_DMA_Init+0x186>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <HAL_DMA_Init+0x196>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019ce:	e02f      	b.n	8001a30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d0:	f7ff fe16 	bl	8001600 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d928      	bls.n	8001a30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e242      	b.n	8001e76 <HAL_DMA_Init+0x63e>
 80019f0:	40020010 	.word	0x40020010
 80019f4:	40020028 	.word	0x40020028
 80019f8:	40020040 	.word	0x40020040
 80019fc:	40020058 	.word	0x40020058
 8001a00:	40020070 	.word	0x40020070
 8001a04:	40020088 	.word	0x40020088
 8001a08:	400200a0 	.word	0x400200a0
 8001a0c:	400200b8 	.word	0x400200b8
 8001a10:	40020410 	.word	0x40020410
 8001a14:	40020428 	.word	0x40020428
 8001a18:	40020440 	.word	0x40020440
 8001a1c:	40020458 	.word	0x40020458
 8001a20:	40020470 	.word	0x40020470
 8001a24:	40020488 	.word	0x40020488
 8001a28:	400204a0 	.word	0x400204a0
 8001a2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1c8      	bne.n	80019d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4b83      	ldr	r3, [pc, #524]	@ (8001c58 <HAL_DMA_Init+0x420>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d107      	bne.n	8001a94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b28      	cmp	r3, #40	@ 0x28
 8001a9a:	d903      	bls.n	8001aa4 <HAL_DMA_Init+0x26c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aa2:	d91f      	bls.n	8001ae4 <HAL_DMA_Init+0x2ac>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aaa:	d903      	bls.n	8001ab4 <HAL_DMA_Init+0x27c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b42      	cmp	r3, #66	@ 0x42
 8001ab2:	d917      	bls.n	8001ae4 <HAL_DMA_Init+0x2ac>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b46      	cmp	r3, #70	@ 0x46
 8001aba:	d903      	bls.n	8001ac4 <HAL_DMA_Init+0x28c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b48      	cmp	r3, #72	@ 0x48
 8001ac2:	d90f      	bls.n	8001ae4 <HAL_DMA_Init+0x2ac>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001aca:	d903      	bls.n	8001ad4 <HAL_DMA_Init+0x29c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b52      	cmp	r3, #82	@ 0x52
 8001ad2:	d907      	bls.n	8001ae4 <HAL_DMA_Init+0x2ac>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b73      	cmp	r3, #115	@ 0x73
 8001ada:	d905      	bls.n	8001ae8 <HAL_DMA_Init+0x2b0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b77      	cmp	r3, #119	@ 0x77
 8001ae2:	d801      	bhi.n	8001ae8 <HAL_DMA_Init+0x2b0>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_DMA_Init+0x2b2>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001af4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f023 0307 	bic.w	r3, r3, #7
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d117      	bne.n	8001b50 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f002 fb2e 	bl	8004194 <DMA_CheckFifoParam>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2240      	movs	r2, #64	@ 0x40
 8001b42:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e192      	b.n	8001e76 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f002 fa69 	bl	8004030 <DMA_CalcBaseAndBitshift>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	223f      	movs	r2, #63	@ 0x3f
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e0c8      	b.n	8001d06 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	@ (8001c5c <HAL_DMA_Init+0x424>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d022      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <HAL_DMA_Init+0x428>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d01d      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a35      	ldr	r2, [pc, #212]	@ (8001c64 <HAL_DMA_Init+0x42c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d018      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a34      	ldr	r2, [pc, #208]	@ (8001c68 <HAL_DMA_Init+0x430>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <HAL_DMA_Init+0x434>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <HAL_DMA_Init+0x438>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d009      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <HAL_DMA_Init+0x43c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_DMA_Init+0x38c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <HAL_DMA_Init+0x440>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x390>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_DMA_Init+0x392>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8092 	beq.w	8001cf4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_DMA_Init+0x424>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d021      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <HAL_DMA_Init+0x428>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01c      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <HAL_DMA_Init+0x42c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d017      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_DMA_Init+0x430>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d012      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_DMA_Init+0x434>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <HAL_DMA_Init+0x438>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d008      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a18      	ldr	r2, [pc, #96]	@ (8001c74 <HAL_DMA_Init+0x43c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <HAL_DMA_Init+0x3e6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_DMA_Init+0x440>)
 8001c1c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_DMA_Init+0x444>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b40      	cmp	r3, #64	@ 0x40
 8001c44:	d01c      	beq.n	8001c80 <HAL_DMA_Init+0x448>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b80      	cmp	r3, #128	@ 0x80
 8001c4c:	d102      	bne.n	8001c54 <HAL_DMA_Init+0x41c>
 8001c4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c52:	e016      	b.n	8001c82 <HAL_DMA_Init+0x44a>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e014      	b.n	8001c82 <HAL_DMA_Init+0x44a>
 8001c58:	fe10803f 	.word	0xfe10803f
 8001c5c:	58025408 	.word	0x58025408
 8001c60:	5802541c 	.word	0x5802541c
 8001c64:	58025430 	.word	0x58025430
 8001c68:	58025444 	.word	0x58025444
 8001c6c:	58025458 	.word	0x58025458
 8001c70:	5802546c 	.word	0x5802546c
 8001c74:	58025480 	.word	0x58025480
 8001c78:	58025494 	.word	0x58025494
 8001c7c:	fffe000f 	.word	0xfffe000f
 8001c80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68d2      	ldr	r2, [r2, #12]
 8001c86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001e80 <HAL_DMA_Init+0x648>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a6e      	ldr	r2, [pc, #440]	@ (8001e84 <HAL_DMA_Init+0x64c>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f002 f9a9 	bl	8004030 <DMA_CalcBaseAndBitshift>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e008      	b.n	8001d06 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	@ 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0b7      	b.n	8001e76 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001e88 <HAL_DMA_Init+0x650>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d072      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	@ (8001e8c <HAL_DMA_Init+0x654>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001e90 <HAL_DMA_Init+0x658>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d068      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5a      	ldr	r2, [pc, #360]	@ (8001e94 <HAL_DMA_Init+0x65c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d063      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a59      	ldr	r2, [pc, #356]	@ (8001e98 <HAL_DMA_Init+0x660>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a57      	ldr	r2, [pc, #348]	@ (8001e9c <HAL_DMA_Init+0x664>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d059      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a56      	ldr	r2, [pc, #344]	@ (8001ea0 <HAL_DMA_Init+0x668>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d054      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a54      	ldr	r2, [pc, #336]	@ (8001ea4 <HAL_DMA_Init+0x66c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d04f      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ea8 <HAL_DMA_Init+0x670>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04a      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a51      	ldr	r2, [pc, #324]	@ (8001eac <HAL_DMA_Init+0x674>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d045      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a50      	ldr	r2, [pc, #320]	@ (8001eb0 <HAL_DMA_Init+0x678>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d040      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <HAL_DMA_Init+0x67c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d03b      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb8 <HAL_DMA_Init+0x680>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d036      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ebc <HAL_DMA_Init+0x684>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec0 <HAL_DMA_Init+0x688>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d02c      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a48      	ldr	r2, [pc, #288]	@ (8001ec4 <HAL_DMA_Init+0x68c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d027      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a47      	ldr	r2, [pc, #284]	@ (8001ec8 <HAL_DMA_Init+0x690>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a45      	ldr	r2, [pc, #276]	@ (8001ecc <HAL_DMA_Init+0x694>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a44      	ldr	r2, [pc, #272]	@ (8001ed0 <HAL_DMA_Init+0x698>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d018      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	@ (8001ed4 <HAL_DMA_Init+0x69c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a41      	ldr	r2, [pc, #260]	@ (8001ed8 <HAL_DMA_Init+0x6a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8001edc <HAL_DMA_Init+0x6a4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee0 <HAL_DMA_Init+0x6a8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Init+0x5be>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee4 <HAL_DMA_Init+0x6ac>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_DMA_Init+0x5c2>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_DMA_Init+0x5c4>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f002 fa43 	bl	800428c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b80      	cmp	r3, #128	@ 0x80
 8001e0c:	d102      	bne.n	8001e14 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_DMA_Init+0x61c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d80c      	bhi.n	8001e54 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f002 fac0 	bl	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e008      	b.n	8001e66 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	a7fdabf8 	.word	0xa7fdabf8
 8001e84:	cccccccd 	.word	0xcccccccd
 8001e88:	40020010 	.word	0x40020010
 8001e8c:	40020028 	.word	0x40020028
 8001e90:	40020040 	.word	0x40020040
 8001e94:	40020058 	.word	0x40020058
 8001e98:	40020070 	.word	0x40020070
 8001e9c:	40020088 	.word	0x40020088
 8001ea0:	400200a0 	.word	0x400200a0
 8001ea4:	400200b8 	.word	0x400200b8
 8001ea8:	40020410 	.word	0x40020410
 8001eac:	40020428 	.word	0x40020428
 8001eb0:	40020440 	.word	0x40020440
 8001eb4:	40020458 	.word	0x40020458
 8001eb8:	40020470 	.word	0x40020470
 8001ebc:	40020488 	.word	0x40020488
 8001ec0:	400204a0 	.word	0x400204a0
 8001ec4:	400204b8 	.word	0x400204b8
 8001ec8:	58025408 	.word	0x58025408
 8001ecc:	5802541c 	.word	0x5802541c
 8001ed0:	58025430 	.word	0x58025430
 8001ed4:	58025444 	.word	0x58025444
 8001ed8:	58025458 	.word	0x58025458
 8001edc:	5802546c 	.word	0x5802546c
 8001ee0:	58025480 	.word	0x58025480
 8001ee4:	58025494 	.word	0x58025494

08001ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e226      	b.n	8002352 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Start_IT+0x2a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e21f      	b.n	8002352 <HAL_DMA_Start_IT+0x46a>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	f040 820a 	bne.w	800233c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a68      	ldr	r2, [pc, #416]	@ (80020dc <HAL_DMA_Start_IT+0x1f4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04a      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <HAL_DMA_Start_IT+0x1f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d045      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a65      	ldr	r2, [pc, #404]	@ (80020e4 <HAL_DMA_Start_IT+0x1fc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d040      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a63      	ldr	r2, [pc, #396]	@ (80020e8 <HAL_DMA_Start_IT+0x200>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d03b      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a62      	ldr	r2, [pc, #392]	@ (80020ec <HAL_DMA_Start_IT+0x204>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <HAL_DMA_Start_IT+0x208>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d031      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5f      	ldr	r2, [pc, #380]	@ (80020f4 <HAL_DMA_Start_IT+0x20c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d02c      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5d      	ldr	r2, [pc, #372]	@ (80020f8 <HAL_DMA_Start_IT+0x210>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d027      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80020fc <HAL_DMA_Start_IT+0x214>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5a      	ldr	r2, [pc, #360]	@ (8002100 <HAL_DMA_Start_IT+0x218>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a59      	ldr	r2, [pc, #356]	@ (8002104 <HAL_DMA_Start_IT+0x21c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a57      	ldr	r2, [pc, #348]	@ (8002108 <HAL_DMA_Start_IT+0x220>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a56      	ldr	r2, [pc, #344]	@ (800210c <HAL_DMA_Start_IT+0x224>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	@ (8002110 <HAL_DMA_Start_IT+0x228>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	@ (8002114 <HAL_DMA_Start_IT+0x22c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Start_IT+0xee>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	@ (8002118 <HAL_DMA_Start_IT+0x230>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <HAL_DMA_Start_IT+0x100>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e007      	b.n	8001ff8 <HAL_DMA_Start_IT+0x110>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f001 fe6a 	bl	8003cd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a34      	ldr	r2, [pc, #208]	@ (80020dc <HAL_DMA_Start_IT+0x1f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d04a      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <HAL_DMA_Start_IT+0x1f8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d045      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a31      	ldr	r2, [pc, #196]	@ (80020e4 <HAL_DMA_Start_IT+0x1fc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d040      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a30      	ldr	r2, [pc, #192]	@ (80020e8 <HAL_DMA_Start_IT+0x200>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d03b      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <HAL_DMA_Start_IT+0x204>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d036      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <HAL_DMA_Start_IT+0x208>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d031      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2b      	ldr	r2, [pc, #172]	@ (80020f4 <HAL_DMA_Start_IT+0x20c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02c      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2a      	ldr	r2, [pc, #168]	@ (80020f8 <HAL_DMA_Start_IT+0x210>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d027      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a28      	ldr	r2, [pc, #160]	@ (80020fc <HAL_DMA_Start_IT+0x214>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d022      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a27      	ldr	r2, [pc, #156]	@ (8002100 <HAL_DMA_Start_IT+0x218>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d01d      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <HAL_DMA_Start_IT+0x21c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	@ (8002108 <HAL_DMA_Start_IT+0x220>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	@ (800210c <HAL_DMA_Start_IT+0x224>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_DMA_Start_IT+0x228>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	@ (8002114 <HAL_DMA_Start_IT+0x22c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Start_IT+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_DMA_Start_IT+0x230>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_DMA_Start_IT+0x1c0>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_DMA_Start_IT+0x1c2>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d036      	beq.n	800211c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 021e 	bic.w	r2, r3, #30
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0216 	orr.w	r2, r2, #22
 80020c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03e      	beq.n	8002148 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0208 	orr.w	r2, r2, #8
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e035      	b.n	8002148 <HAL_DMA_Start_IT+0x260>
 80020dc:	40020010 	.word	0x40020010
 80020e0:	40020028 	.word	0x40020028
 80020e4:	40020040 	.word	0x40020040
 80020e8:	40020058 	.word	0x40020058
 80020ec:	40020070 	.word	0x40020070
 80020f0:	40020088 	.word	0x40020088
 80020f4:	400200a0 	.word	0x400200a0
 80020f8:	400200b8 	.word	0x400200b8
 80020fc:	40020410 	.word	0x40020410
 8002100:	40020428 	.word	0x40020428
 8002104:	40020440 	.word	0x40020440
 8002108:	40020458 	.word	0x40020458
 800210c:	40020470 	.word	0x40020470
 8002110:	40020488 	.word	0x40020488
 8002114:	400204a0 	.word	0x400204a0
 8002118:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 020e 	bic.w	r2, r3, #14
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 020a 	orr.w	r2, r2, #10
 800212e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0204 	orr.w	r2, r2, #4
 8002146:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a83      	ldr	r2, [pc, #524]	@ (800235c <HAL_DMA_Start_IT+0x474>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d072      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a82      	ldr	r2, [pc, #520]	@ (8002360 <HAL_DMA_Start_IT+0x478>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d06d      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a80      	ldr	r2, [pc, #512]	@ (8002364 <HAL_DMA_Start_IT+0x47c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d068      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7f      	ldr	r2, [pc, #508]	@ (8002368 <HAL_DMA_Start_IT+0x480>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d063      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7d      	ldr	r2, [pc, #500]	@ (800236c <HAL_DMA_Start_IT+0x484>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d05e      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7c      	ldr	r2, [pc, #496]	@ (8002370 <HAL_DMA_Start_IT+0x488>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d059      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7a      	ldr	r2, [pc, #488]	@ (8002374 <HAL_DMA_Start_IT+0x48c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d054      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a79      	ldr	r2, [pc, #484]	@ (8002378 <HAL_DMA_Start_IT+0x490>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04f      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a77      	ldr	r2, [pc, #476]	@ (800237c <HAL_DMA_Start_IT+0x494>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a76      	ldr	r2, [pc, #472]	@ (8002380 <HAL_DMA_Start_IT+0x498>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d045      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a74      	ldr	r2, [pc, #464]	@ (8002384 <HAL_DMA_Start_IT+0x49c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d040      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a73      	ldr	r2, [pc, #460]	@ (8002388 <HAL_DMA_Start_IT+0x4a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d03b      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a71      	ldr	r2, [pc, #452]	@ (800238c <HAL_DMA_Start_IT+0x4a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d036      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a70      	ldr	r2, [pc, #448]	@ (8002390 <HAL_DMA_Start_IT+0x4a8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002394 <HAL_DMA_Start_IT+0x4ac>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02c      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002398 <HAL_DMA_Start_IT+0x4b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6b      	ldr	r2, [pc, #428]	@ (800239c <HAL_DMA_Start_IT+0x4b4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d022      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6a      	ldr	r2, [pc, #424]	@ (80023a0 <HAL_DMA_Start_IT+0x4b8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01d      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a68      	ldr	r2, [pc, #416]	@ (80023a4 <HAL_DMA_Start_IT+0x4bc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_DMA_Start_IT+0x4c0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a65      	ldr	r2, [pc, #404]	@ (80023ac <HAL_DMA_Start_IT+0x4c4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a64      	ldr	r2, [pc, #400]	@ (80023b0 <HAL_DMA_Start_IT+0x4c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a62      	ldr	r2, [pc, #392]	@ (80023b4 <HAL_DMA_Start_IT+0x4cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Start_IT+0x350>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a61      	ldr	r2, [pc, #388]	@ (80023b8 <HAL_DMA_Start_IT+0x4d0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_DMA_Start_IT+0x354>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_DMA_Start_IT+0x356>
 800223c:	2300      	movs	r3, #0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01a      	beq.n	8002278 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800225e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002276:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a37      	ldr	r2, [pc, #220]	@ (800235c <HAL_DMA_Start_IT+0x474>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d04a      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a36      	ldr	r2, [pc, #216]	@ (8002360 <HAL_DMA_Start_IT+0x478>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d045      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_DMA_Start_IT+0x47c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d040      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <HAL_DMA_Start_IT+0x480>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d03b      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a31      	ldr	r2, [pc, #196]	@ (800236c <HAL_DMA_Start_IT+0x484>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d036      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a30      	ldr	r2, [pc, #192]	@ (8002370 <HAL_DMA_Start_IT+0x488>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d031      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_DMA_Start_IT+0x48c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02c      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <HAL_DMA_Start_IT+0x490>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d027      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2b      	ldr	r2, [pc, #172]	@ (800237c <HAL_DMA_Start_IT+0x494>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d022      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002380 <HAL_DMA_Start_IT+0x498>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01d      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_DMA_Start_IT+0x49c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d018      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_DMA_Start_IT+0x4a0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	@ (800238c <HAL_DMA_Start_IT+0x4a4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00e      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <HAL_DMA_Start_IT+0x4a8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a22      	ldr	r2, [pc, #136]	@ (8002394 <HAL_DMA_Start_IT+0x4ac>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Start_IT+0x430>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	@ (8002398 <HAL_DMA_Start_IT+0x4b0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <HAL_DMA_Start_IT+0x442>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e012      	b.n	8002350 <HAL_DMA_Start_IT+0x468>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e009      	b.n	8002350 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40020010 	.word	0x40020010
 8002360:	40020028 	.word	0x40020028
 8002364:	40020040 	.word	0x40020040
 8002368:	40020058 	.word	0x40020058
 800236c:	40020070 	.word	0x40020070
 8002370:	40020088 	.word	0x40020088
 8002374:	400200a0 	.word	0x400200a0
 8002378:	400200b8 	.word	0x400200b8
 800237c:	40020410 	.word	0x40020410
 8002380:	40020428 	.word	0x40020428
 8002384:	40020440 	.word	0x40020440
 8002388:	40020458 	.word	0x40020458
 800238c:	40020470 	.word	0x40020470
 8002390:	40020488 	.word	0x40020488
 8002394:	400204a0 	.word	0x400204a0
 8002398:	400204b8 	.word	0x400204b8
 800239c:	58025408 	.word	0x58025408
 80023a0:	5802541c 	.word	0x5802541c
 80023a4:	58025430 	.word	0x58025430
 80023a8:	58025444 	.word	0x58025444
 80023ac:	58025458 	.word	0x58025458
 80023b0:	5802546c 	.word	0x5802546c
 80023b4:	58025480 	.word	0x58025480
 80023b8:	58025494 	.word	0x58025494

080023bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff f91c 	bl	8001600 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e2dc      	b.n	800298e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2280      	movs	r2, #128	@ 0x80
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e2cd      	b.n	800298e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a76      	ldr	r2, [pc, #472]	@ (80025d0 <HAL_DMA_Abort+0x214>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04a      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a74      	ldr	r2, [pc, #464]	@ (80025d4 <HAL_DMA_Abort+0x218>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d045      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a73      	ldr	r2, [pc, #460]	@ (80025d8 <HAL_DMA_Abort+0x21c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a71      	ldr	r2, [pc, #452]	@ (80025dc <HAL_DMA_Abort+0x220>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03b      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a70      	ldr	r2, [pc, #448]	@ (80025e0 <HAL_DMA_Abort+0x224>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a6e      	ldr	r2, [pc, #440]	@ (80025e4 <HAL_DMA_Abort+0x228>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6d      	ldr	r2, [pc, #436]	@ (80025e8 <HAL_DMA_Abort+0x22c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d02c      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6b      	ldr	r2, [pc, #428]	@ (80025ec <HAL_DMA_Abort+0x230>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d027      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6a      	ldr	r2, [pc, #424]	@ (80025f0 <HAL_DMA_Abort+0x234>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a68      	ldr	r2, [pc, #416]	@ (80025f4 <HAL_DMA_Abort+0x238>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a67      	ldr	r2, [pc, #412]	@ (80025f8 <HAL_DMA_Abort+0x23c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a65      	ldr	r2, [pc, #404]	@ (80025fc <HAL_DMA_Abort+0x240>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a64      	ldr	r2, [pc, #400]	@ (8002600 <HAL_DMA_Abort+0x244>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a62      	ldr	r2, [pc, #392]	@ (8002604 <HAL_DMA_Abort+0x248>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a61      	ldr	r2, [pc, #388]	@ (8002608 <HAL_DMA_Abort+0x24c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Abort+0xd6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5f      	ldr	r2, [pc, #380]	@ (800260c <HAL_DMA_Abort+0x250>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Abort+0xda>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_DMA_Abort+0xdc>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 021e 	bic.w	r2, r2, #30
 80024aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e00a      	b.n	80024da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 020e 	bic.w	r2, r2, #14
 80024d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3c      	ldr	r2, [pc, #240]	@ (80025d0 <HAL_DMA_Abort+0x214>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d072      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3a      	ldr	r2, [pc, #232]	@ (80025d4 <HAL_DMA_Abort+0x218>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d06d      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a39      	ldr	r2, [pc, #228]	@ (80025d8 <HAL_DMA_Abort+0x21c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d068      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a37      	ldr	r2, [pc, #220]	@ (80025dc <HAL_DMA_Abort+0x220>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d063      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a36      	ldr	r2, [pc, #216]	@ (80025e0 <HAL_DMA_Abort+0x224>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d05e      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a34      	ldr	r2, [pc, #208]	@ (80025e4 <HAL_DMA_Abort+0x228>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d059      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a33      	ldr	r2, [pc, #204]	@ (80025e8 <HAL_DMA_Abort+0x22c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d054      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a31      	ldr	r2, [pc, #196]	@ (80025ec <HAL_DMA_Abort+0x230>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d04f      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a30      	ldr	r2, [pc, #192]	@ (80025f0 <HAL_DMA_Abort+0x234>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d04a      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2e      	ldr	r2, [pc, #184]	@ (80025f4 <HAL_DMA_Abort+0x238>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d045      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_DMA_Abort+0x23c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d040      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2b      	ldr	r2, [pc, #172]	@ (80025fc <HAL_DMA_Abort+0x240>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d03b      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_DMA_Abort+0x244>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d036      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a28      	ldr	r2, [pc, #160]	@ (8002604 <HAL_DMA_Abort+0x248>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d031      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_DMA_Abort+0x24c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d02c      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	@ (800260c <HAL_DMA_Abort+0x250>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d027      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <HAL_DMA_Abort+0x254>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a22      	ldr	r2, [pc, #136]	@ (8002614 <HAL_DMA_Abort+0x258>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01d      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <HAL_DMA_Abort+0x25c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d018      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_DMA_Abort+0x260>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <HAL_DMA_Abort+0x264>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002624 <HAL_DMA_Abort+0x268>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_DMA_Abort+0x26c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_DMA_Abort+0x270>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d132      	bne.n	8002630 <HAL_DMA_Abort+0x274>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e031      	b.n	8002632 <HAL_DMA_Abort+0x276>
 80025ce:	bf00      	nop
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002644:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6d      	ldr	r2, [pc, #436]	@ (8002800 <HAL_DMA_Abort+0x444>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04a      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6b      	ldr	r2, [pc, #428]	@ (8002804 <HAL_DMA_Abort+0x448>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d045      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6a      	ldr	r2, [pc, #424]	@ (8002808 <HAL_DMA_Abort+0x44c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a68      	ldr	r2, [pc, #416]	@ (800280c <HAL_DMA_Abort+0x450>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d03b      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a67      	ldr	r2, [pc, #412]	@ (8002810 <HAL_DMA_Abort+0x454>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d036      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_DMA_Abort+0x458>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a64      	ldr	r2, [pc, #400]	@ (8002818 <HAL_DMA_Abort+0x45c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02c      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a62      	ldr	r2, [pc, #392]	@ (800281c <HAL_DMA_Abort+0x460>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d027      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a61      	ldr	r2, [pc, #388]	@ (8002820 <HAL_DMA_Abort+0x464>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002824 <HAL_DMA_Abort+0x468>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002828 <HAL_DMA_Abort+0x46c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5c      	ldr	r2, [pc, #368]	@ (800282c <HAL_DMA_Abort+0x470>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_DMA_Abort+0x474>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a59      	ldr	r2, [pc, #356]	@ (8002834 <HAL_DMA_Abort+0x478>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <HAL_DMA_Abort+0x47c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_Abort+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_DMA_Abort+0x480>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <HAL_DMA_Abort+0x33c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_DMA_Abort+0x34c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002708:	e013      	b.n	8002732 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270a:	f7fe ff79 	bl	8001600 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b05      	cmp	r3, #5
 8002716:	d90c      	bls.n	8002732 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e12d      	b.n	800298e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2f      	ldr	r2, [pc, #188]	@ (8002800 <HAL_DMA_Abort+0x444>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d04a      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_DMA_Abort+0x448>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d045      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2c      	ldr	r2, [pc, #176]	@ (8002808 <HAL_DMA_Abort+0x44c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d040      	beq.n	80027de <HAL_DMA_Abort+0x422>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_DMA_Abort+0x450>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d03b      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_DMA_Abort+0x454>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d036      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <HAL_DMA_Abort+0x458>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d031      	beq.n	80027de <HAL_DMA_Abort+0x422>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a26      	ldr	r2, [pc, #152]	@ (8002818 <HAL_DMA_Abort+0x45c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d02c      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_DMA_Abort+0x460>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d027      	beq.n	80027de <HAL_DMA_Abort+0x422>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <HAL_DMA_Abort+0x464>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <HAL_DMA_Abort+0x422>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_DMA_Abort+0x468>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01d      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <HAL_DMA_Abort+0x46c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d018      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_DMA_Abort+0x470>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_DMA_Abort+0x474>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_DMA_Abort+0x478>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002838 <HAL_DMA_Abort+0x47c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_DMA_Abort+0x422>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	@ (800283c <HAL_DMA_Abort+0x480>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_DMA_Abort+0x426>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_DMA_Abort+0x428>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d02b      	beq.n	8002840 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	223f      	movs	r2, #63	@ 0x3f
 80027f8:	409a      	lsls	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	e02a      	b.n	8002856 <HAL_DMA_Abort+0x49a>
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2201      	movs	r2, #1
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4f      	ldr	r2, [pc, #316]	@ (8002998 <HAL_DMA_Abort+0x5dc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d072      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_DMA_Abort+0x5e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d06d      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <HAL_DMA_Abort+0x5e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d068      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_DMA_Abort+0x5e8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d063      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a49      	ldr	r2, [pc, #292]	@ (80029a8 <HAL_DMA_Abort+0x5ec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d05e      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a47      	ldr	r2, [pc, #284]	@ (80029ac <HAL_DMA_Abort+0x5f0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d059      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a46      	ldr	r2, [pc, #280]	@ (80029b0 <HAL_DMA_Abort+0x5f4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d054      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a44      	ldr	r2, [pc, #272]	@ (80029b4 <HAL_DMA_Abort+0x5f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d04f      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a43      	ldr	r2, [pc, #268]	@ (80029b8 <HAL_DMA_Abort+0x5fc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04a      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a41      	ldr	r2, [pc, #260]	@ (80029bc <HAL_DMA_Abort+0x600>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d045      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a40      	ldr	r2, [pc, #256]	@ (80029c0 <HAL_DMA_Abort+0x604>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3e      	ldr	r2, [pc, #248]	@ (80029c4 <HAL_DMA_Abort+0x608>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03b      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	@ (80029c8 <HAL_DMA_Abort+0x60c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d036      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3b      	ldr	r2, [pc, #236]	@ (80029cc <HAL_DMA_Abort+0x610>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3a      	ldr	r2, [pc, #232]	@ (80029d0 <HAL_DMA_Abort+0x614>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	@ (80029d4 <HAL_DMA_Abort+0x618>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <HAL_DMA_Abort+0x61c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <HAL_DMA_Abort+0x620>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_DMA_Abort+0x624>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a32      	ldr	r2, [pc, #200]	@ (80029e4 <HAL_DMA_Abort+0x628>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <HAL_DMA_Abort+0x62c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2f      	ldr	r2, [pc, #188]	@ (80029ec <HAL_DMA_Abort+0x630>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <HAL_DMA_Abort+0x634>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2c      	ldr	r2, [pc, #176]	@ (80029f4 <HAL_DMA_Abort+0x638>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_DMA_Abort+0x58e>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_DMA_Abort+0x590>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002958:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002970:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800297a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020010 	.word	0x40020010
 800299c:	40020028 	.word	0x40020028
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40020058 	.word	0x40020058
 80029a8:	40020070 	.word	0x40020070
 80029ac:	40020088 	.word	0x40020088
 80029b0:	400200a0 	.word	0x400200a0
 80029b4:	400200b8 	.word	0x400200b8
 80029b8:	40020410 	.word	0x40020410
 80029bc:	40020428 	.word	0x40020428
 80029c0:	40020440 	.word	0x40020440
 80029c4:	40020458 	.word	0x40020458
 80029c8:	40020470 	.word	0x40020470
 80029cc:	40020488 	.word	0x40020488
 80029d0:	400204a0 	.word	0x400204a0
 80029d4:	400204b8 	.word	0x400204b8
 80029d8:	58025408 	.word	0x58025408
 80029dc:	5802541c 	.word	0x5802541c
 80029e0:	58025430 	.word	0x58025430
 80029e4:	58025444 	.word	0x58025444
 80029e8:	58025458 	.word	0x58025458
 80029ec:	5802546c 	.word	0x5802546c
 80029f0:	58025480 	.word	0x58025480
 80029f4:	58025494 	.word	0x58025494

080029f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e237      	b.n	8002e7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e22c      	b.n	8002e7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5c      	ldr	r2, [pc, #368]	@ (8002b98 <HAL_DMA_Abort_IT+0x1a0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d04a      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b9c <HAL_DMA_Abort_IT+0x1a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d045      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a59      	ldr	r2, [pc, #356]	@ (8002ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d040      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a58      	ldr	r2, [pc, #352]	@ (8002ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d03b      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a55      	ldr	r2, [pc, #340]	@ (8002bac <HAL_DMA_Abort_IT+0x1b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d031      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a53      	ldr	r2, [pc, #332]	@ (8002bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02c      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d027      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a50      	ldr	r2, [pc, #320]	@ (8002bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bbc <HAL_DMA_Abort_IT+0x1c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01d      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d018      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a49      	ldr	r2, [pc, #292]	@ (8002bcc <HAL_DMA_Abort_IT+0x1d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a47      	ldr	r2, [pc, #284]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xc8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a46      	ldr	r2, [pc, #280]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_DMA_Abort_IT+0xcc>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xce>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8086 	beq.w	8002bd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8002b98 <HAL_DMA_Abort_IT+0x1a0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04a      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <HAL_DMA_Abort_IT+0x1a4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d045      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d040      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d03b      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a29      	ldr	r2, [pc, #164]	@ (8002ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d036      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a28      	ldr	r2, [pc, #160]	@ (8002bac <HAL_DMA_Abort_IT+0x1b4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a26      	ldr	r2, [pc, #152]	@ (8002bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d027      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a23      	ldr	r2, [pc, #140]	@ (8002bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d022      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a22      	ldr	r2, [pc, #136]	@ (8002bbc <HAL_DMA_Abort_IT+0x1c4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01d      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d018      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <HAL_DMA_Abort_IT+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x17c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <HAL_DMA_Abort_IT+0x18e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e178      	b.n	8002e78 <HAL_DMA_Abort_IT+0x480>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e16f      	b.n	8002e78 <HAL_DMA_Abort_IT+0x480>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 020e 	bic.w	r2, r2, #14
 8002be6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6c      	ldr	r2, [pc, #432]	@ (8002da0 <HAL_DMA_Abort_IT+0x3a8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8002da4 <HAL_DMA_Abort_IT+0x3ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a69      	ldr	r2, [pc, #420]	@ (8002da8 <HAL_DMA_Abort_IT+0x3b0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a68      	ldr	r2, [pc, #416]	@ (8002dac <HAL_DMA_Abort_IT+0x3b4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a66      	ldr	r2, [pc, #408]	@ (8002db0 <HAL_DMA_Abort_IT+0x3b8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_DMA_Abort_IT+0x3bc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a63      	ldr	r2, [pc, #396]	@ (8002db8 <HAL_DMA_Abort_IT+0x3c0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a62      	ldr	r2, [pc, #392]	@ (8002dbc <HAL_DMA_Abort_IT+0x3c4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a60      	ldr	r2, [pc, #384]	@ (8002dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dcc <HAL_DMA_Abort_IT+0x3d4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a59      	ldr	r2, [pc, #356]	@ (8002dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x290>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a56      	ldr	r2, [pc, #344]	@ (8002ddc <HAL_DMA_Abort_IT+0x3e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_Abort_IT+0x2a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <HAL_DMA_Abort_IT+0x2b2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3c      	ldr	r2, [pc, #240]	@ (8002da0 <HAL_DMA_Abort_IT+0x3a8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d072      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002da4 <HAL_DMA_Abort_IT+0x3ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d06d      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	@ (8002da8 <HAL_DMA_Abort_IT+0x3b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d068      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a37      	ldr	r2, [pc, #220]	@ (8002dac <HAL_DMA_Abort_IT+0x3b4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d063      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a36      	ldr	r2, [pc, #216]	@ (8002db0 <HAL_DMA_Abort_IT+0x3b8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d05e      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a34      	ldr	r2, [pc, #208]	@ (8002db4 <HAL_DMA_Abort_IT+0x3bc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d059      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	@ (8002db8 <HAL_DMA_Abort_IT+0x3c0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d054      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	@ (8002dbc <HAL_DMA_Abort_IT+0x3c4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d04f      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a30      	ldr	r2, [pc, #192]	@ (8002dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dcc <HAL_DMA_Abort_IT+0x3d4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a28      	ldr	r2, [pc, #160]	@ (8002dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a25      	ldr	r2, [pc, #148]	@ (8002ddc <HAL_DMA_Abort_IT+0x3e4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <HAL_DMA_Abort_IT+0x3e8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a22      	ldr	r2, [pc, #136]	@ (8002de4 <HAL_DMA_Abort_IT+0x3ec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a21      	ldr	r2, [pc, #132]	@ (8002de8 <HAL_DMA_Abort_IT+0x3f0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <HAL_DMA_Abort_IT+0x3f4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_DMA_Abort_IT+0x3f8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	@ (8002df4 <HAL_DMA_Abort_IT+0x3fc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <HAL_DMA_Abort_IT+0x400>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	@ (8002dfc <HAL_DMA_Abort_IT+0x404>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d132      	bne.n	8002e00 <HAL_DMA_Abort_IT+0x408>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e031      	b.n	8002e02 <HAL_DMA_Abort_IT+0x40a>
 8002d9e:	bf00      	nop
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	58025408 	.word	0x58025408
 8002de4:	5802541c 	.word	0x5802541c
 8002de8:	58025430 	.word	0x58025430
 8002dec:	58025444 	.word	0x58025444
 8002df0:	58025458 	.word	0x58025458
 8002df4:	5802546c 	.word	0x5802546c
 8002df8:	58025480 	.word	0x58025480
 8002dfc:	58025494 	.word	0x58025494
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d028      	beq.n	8002e58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop

08002e84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e90:	4b67      	ldr	r3, [pc, #412]	@ (8003030 <HAL_DMA_IRQHandler+0x1ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a67      	ldr	r2, [pc, #412]	@ (8003034 <HAL_DMA_IRQHandler+0x1b0>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_DMA_IRQHandler+0x1b4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800303c <HAL_DMA_IRQHandler+0x1b8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5c      	ldr	r2, [pc, #368]	@ (8003040 <HAL_DMA_IRQHandler+0x1bc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5a      	ldr	r2, [pc, #360]	@ (8003044 <HAL_DMA_IRQHandler+0x1c0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a59      	ldr	r2, [pc, #356]	@ (8003048 <HAL_DMA_IRQHandler+0x1c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a57      	ldr	r2, [pc, #348]	@ (800304c <HAL_DMA_IRQHandler+0x1c8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a56      	ldr	r2, [pc, #344]	@ (8003050 <HAL_DMA_IRQHandler+0x1cc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a54      	ldr	r2, [pc, #336]	@ (8003054 <HAL_DMA_IRQHandler+0x1d0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a53      	ldr	r2, [pc, #332]	@ (8003058 <HAL_DMA_IRQHandler+0x1d4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a51      	ldr	r2, [pc, #324]	@ (800305c <HAL_DMA_IRQHandler+0x1d8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a50      	ldr	r2, [pc, #320]	@ (8003060 <HAL_DMA_IRQHandler+0x1dc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	@ (8003064 <HAL_DMA_IRQHandler+0x1e0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4d      	ldr	r2, [pc, #308]	@ (8003068 <HAL_DMA_IRQHandler+0x1e4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800306c <HAL_DMA_IRQHandler+0x1e8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4a      	ldr	r2, [pc, #296]	@ (8003070 <HAL_DMA_IRQHandler+0x1ec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a48      	ldr	r2, [pc, #288]	@ (8003074 <HAL_DMA_IRQHandler+0x1f0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_DMA_IRQHandler+0xd6>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_DMA_IRQHandler+0xd8>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 842b 	beq.w	80037b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a2 	beq.w	80030bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003038 <HAL_DMA_IRQHandler+0x1b4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <HAL_DMA_IRQHandler+0x1b8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d045      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2b      	ldr	r2, [pc, #172]	@ (8003040 <HAL_DMA_IRQHandler+0x1bc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003044 <HAL_DMA_IRQHandler+0x1c0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a28      	ldr	r2, [pc, #160]	@ (8003048 <HAL_DMA_IRQHandler+0x1c4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d036      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a27      	ldr	r2, [pc, #156]	@ (800304c <HAL_DMA_IRQHandler+0x1c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a25      	ldr	r2, [pc, #148]	@ (8003050 <HAL_DMA_IRQHandler+0x1cc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02c      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <HAL_DMA_IRQHandler+0x1d0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d027      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	@ (8003058 <HAL_DMA_IRQHandler+0x1d4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a21      	ldr	r2, [pc, #132]	@ (800305c <HAL_DMA_IRQHandler+0x1d8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <HAL_DMA_IRQHandler+0x1dc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <HAL_DMA_IRQHandler+0x1e0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <HAL_DMA_IRQHandler+0x1e4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <HAL_DMA_IRQHandler+0x1e8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_DMA_IRQHandler+0x1ec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_IRQHandler+0x194>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <HAL_DMA_IRQHandler+0x1f0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d12f      	bne.n	8003078 <HAL_DMA_IRQHandler+0x1f4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e02e      	b.n	800308c <HAL_DMA_IRQHandler+0x208>
 800302e:	bf00      	nop
 8003030:	24000060 	.word	0x24000060
 8003034:	1b4e81b5 	.word	0x1b4e81b5
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2208      	movs	r2, #8
 80030aa:	409a      	lsls	r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06e      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a69      	ldr	r2, [pc, #420]	@ (800327c <HAL_DMA_IRQHandler+0x3f8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04a      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	@ (8003280 <HAL_DMA_IRQHandler+0x3fc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d045      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a66      	ldr	r2, [pc, #408]	@ (8003284 <HAL_DMA_IRQHandler+0x400>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a64      	ldr	r2, [pc, #400]	@ (8003288 <HAL_DMA_IRQHandler+0x404>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a63      	ldr	r2, [pc, #396]	@ (800328c <HAL_DMA_IRQHandler+0x408>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a61      	ldr	r2, [pc, #388]	@ (8003290 <HAL_DMA_IRQHandler+0x40c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a60      	ldr	r2, [pc, #384]	@ (8003294 <HAL_DMA_IRQHandler+0x410>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02c      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5e      	ldr	r2, [pc, #376]	@ (8003298 <HAL_DMA_IRQHandler+0x414>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d027      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5d      	ldr	r2, [pc, #372]	@ (800329c <HAL_DMA_IRQHandler+0x418>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5b      	ldr	r2, [pc, #364]	@ (80032a0 <HAL_DMA_IRQHandler+0x41c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5a      	ldr	r2, [pc, #360]	@ (80032a4 <HAL_DMA_IRQHandler+0x420>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a58      	ldr	r2, [pc, #352]	@ (80032a8 <HAL_DMA_IRQHandler+0x424>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a57      	ldr	r2, [pc, #348]	@ (80032ac <HAL_DMA_IRQHandler+0x428>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a55      	ldr	r2, [pc, #340]	@ (80032b0 <HAL_DMA_IRQHandler+0x42c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a54      	ldr	r2, [pc, #336]	@ (80032b4 <HAL_DMA_IRQHandler+0x430>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a52      	ldr	r2, [pc, #328]	@ (80032b8 <HAL_DMA_IRQHandler+0x434>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10a      	bne.n	8003188 <HAL_DMA_IRQHandler+0x304>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e003      	b.n	8003190 <HAL_DMA_IRQHandler+0x30c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0202 	orr.w	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2204      	movs	r2, #4
 80031ba:	409a      	lsls	r2, r3
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 808f 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2c      	ldr	r2, [pc, #176]	@ (800327c <HAL_DMA_IRQHandler+0x3f8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04a      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_DMA_IRQHandler+0x3fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d045      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a29      	ldr	r2, [pc, #164]	@ (8003284 <HAL_DMA_IRQHandler+0x400>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d040      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_DMA_IRQHandler+0x404>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03b      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_DMA_IRQHandler+0x408>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d036      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a24      	ldr	r2, [pc, #144]	@ (8003290 <HAL_DMA_IRQHandler+0x40c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d031      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_DMA_IRQHandler+0x410>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02c      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a21      	ldr	r2, [pc, #132]	@ (8003298 <HAL_DMA_IRQHandler+0x414>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d027      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a20      	ldr	r2, [pc, #128]	@ (800329c <HAL_DMA_IRQHandler+0x418>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_DMA_IRQHandler+0x41c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_DMA_IRQHandler+0x420>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <HAL_DMA_IRQHandler+0x424>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1a      	ldr	r2, [pc, #104]	@ (80032ac <HAL_DMA_IRQHandler+0x428>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <HAL_DMA_IRQHandler+0x42c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_DMA_IRQHandler+0x430>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_IRQHandler+0x3e2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <HAL_DMA_IRQHandler+0x434>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12a      	bne.n	80032bc <HAL_DMA_IRQHandler+0x438>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e023      	b.n	80032c4 <HAL_DMA_IRQHandler+0x440>
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2210      	movs	r2, #16
 80032ee:	409a      	lsls	r2, r3
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a6 	beq.w	8003446 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a85      	ldr	r2, [pc, #532]	@ (8003514 <HAL_DMA_IRQHandler+0x690>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04a      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a83      	ldr	r2, [pc, #524]	@ (8003518 <HAL_DMA_IRQHandler+0x694>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d045      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a82      	ldr	r2, [pc, #520]	@ (800351c <HAL_DMA_IRQHandler+0x698>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d040      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a80      	ldr	r2, [pc, #512]	@ (8003520 <HAL_DMA_IRQHandler+0x69c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d03b      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7f      	ldr	r2, [pc, #508]	@ (8003524 <HAL_DMA_IRQHandler+0x6a0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d036      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7d      	ldr	r2, [pc, #500]	@ (8003528 <HAL_DMA_IRQHandler+0x6a4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7c      	ldr	r2, [pc, #496]	@ (800352c <HAL_DMA_IRQHandler+0x6a8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d02c      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7a      	ldr	r2, [pc, #488]	@ (8003530 <HAL_DMA_IRQHandler+0x6ac>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d027      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a79      	ldr	r2, [pc, #484]	@ (8003534 <HAL_DMA_IRQHandler+0x6b0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a77      	ldr	r2, [pc, #476]	@ (8003538 <HAL_DMA_IRQHandler+0x6b4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a76      	ldr	r2, [pc, #472]	@ (800353c <HAL_DMA_IRQHandler+0x6b8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a74      	ldr	r2, [pc, #464]	@ (8003540 <HAL_DMA_IRQHandler+0x6bc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a73      	ldr	r2, [pc, #460]	@ (8003544 <HAL_DMA_IRQHandler+0x6c0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a71      	ldr	r2, [pc, #452]	@ (8003548 <HAL_DMA_IRQHandler+0x6c4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a70      	ldr	r2, [pc, #448]	@ (800354c <HAL_DMA_IRQHandler+0x6c8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_DMA_IRQHandler+0x516>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6e      	ldr	r2, [pc, #440]	@ (8003550 <HAL_DMA_IRQHandler+0x6cc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10a      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x52c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e009      	b.n	80033c4 <HAL_DMA_IRQHandler+0x540>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d03e      	beq.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2210      	movs	r2, #16
 80033d2:	409a      	lsls	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d108      	bne.n	8003406 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d024      	beq.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e01f      	b.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01b      	beq.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
 8003416:	e016      	b.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0208 	bic.w	r2, r2, #8
 8003434:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2220      	movs	r2, #32
 8003450:	409a      	lsls	r2, r3
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8110 	beq.w	800367c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2c      	ldr	r2, [pc, #176]	@ (8003514 <HAL_DMA_IRQHandler+0x690>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d04a      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <HAL_DMA_IRQHandler+0x694>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d045      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a29      	ldr	r2, [pc, #164]	@ (800351c <HAL_DMA_IRQHandler+0x698>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d040      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a28      	ldr	r2, [pc, #160]	@ (8003520 <HAL_DMA_IRQHandler+0x69c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d03b      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a26      	ldr	r2, [pc, #152]	@ (8003524 <HAL_DMA_IRQHandler+0x6a0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d036      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a25      	ldr	r2, [pc, #148]	@ (8003528 <HAL_DMA_IRQHandler+0x6a4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d031      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	@ (800352c <HAL_DMA_IRQHandler+0x6a8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02c      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <HAL_DMA_IRQHandler+0x6ac>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d027      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a20      	ldr	r2, [pc, #128]	@ (8003534 <HAL_DMA_IRQHandler+0x6b0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d022      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <HAL_DMA_IRQHandler+0x6b4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01d      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_DMA_IRQHandler+0x6b8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d018      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_DMA_IRQHandler+0x6bc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_DMA_IRQHandler+0x6c0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a19      	ldr	r2, [pc, #100]	@ (8003548 <HAL_DMA_IRQHandler+0x6c4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a17      	ldr	r2, [pc, #92]	@ (800354c <HAL_DMA_IRQHandler+0x6c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_IRQHandler+0x678>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_DMA_IRQHandler+0x6cc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d12b      	bne.n	8003554 <HAL_DMA_IRQHandler+0x6d0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e02a      	b.n	8003568 <HAL_DMA_IRQHandler+0x6e4>
 8003512:	bf00      	nop
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8087 	beq.w	800367c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2220      	movs	r2, #32
 8003578:	409a      	lsls	r2, r3
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b04      	cmp	r3, #4
 8003588:	d139      	bne.n	80035fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0216 	bic.w	r2, r2, #22
 8003598:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_DMA_IRQHandler+0x736>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0208 	bic.w	r2, r2, #8
 80035c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	223f      	movs	r2, #63	@ 0x3f
 80035d4:	409a      	lsls	r2, r3
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 834a 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
          }
          return;
 80035fc:	e344      	b.n	8003c88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d018      	beq.n	800363e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02c      	beq.n	800367c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
 800362a:	e027      	b.n	800367c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d023      	beq.n	800367c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e01e      	b.n	800367c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0210 	bic.w	r2, r2, #16
 800365a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8306 	beq.w	8003c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8088 	beq.w	80037a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2204      	movs	r2, #4
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7a      	ldr	r2, [pc, #488]	@ (800388c <HAL_DMA_IRQHandler+0xa08>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04a      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a79      	ldr	r2, [pc, #484]	@ (8003890 <HAL_DMA_IRQHandler+0xa0c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d045      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a77      	ldr	r2, [pc, #476]	@ (8003894 <HAL_DMA_IRQHandler+0xa10>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d040      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a76      	ldr	r2, [pc, #472]	@ (8003898 <HAL_DMA_IRQHandler+0xa14>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a74      	ldr	r2, [pc, #464]	@ (800389c <HAL_DMA_IRQHandler+0xa18>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d036      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	@ (80038a0 <HAL_DMA_IRQHandler+0xa1c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d031      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a71      	ldr	r2, [pc, #452]	@ (80038a4 <HAL_DMA_IRQHandler+0xa20>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a70      	ldr	r2, [pc, #448]	@ (80038a8 <HAL_DMA_IRQHandler+0xa24>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d027      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	@ (80038ac <HAL_DMA_IRQHandler+0xa28>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	@ (80038b0 <HAL_DMA_IRQHandler+0xa2c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6b      	ldr	r2, [pc, #428]	@ (80038b4 <HAL_DMA_IRQHandler+0xa30>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6a      	ldr	r2, [pc, #424]	@ (80038b8 <HAL_DMA_IRQHandler+0xa34>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_DMA_IRQHandler+0xa38>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a67      	ldr	r2, [pc, #412]	@ (80038c0 <HAL_DMA_IRQHandler+0xa3c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	@ (80038c4 <HAL_DMA_IRQHandler+0xa40>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_DMA_IRQHandler+0x8b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a64      	ldr	r2, [pc, #400]	@ (80038c8 <HAL_DMA_IRQHandler+0xa44>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <HAL_DMA_IRQHandler+0x8ca>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e007      	b.n	800375e <HAL_DMA_IRQHandler+0x8da>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3301      	adds	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003766:	429a      	cmp	r2, r3
 8003768:	d307      	bcc.n	800377a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f2      	bne.n	800375e <HAL_DMA_IRQHandler+0x8da>
 8003778:	e000      	b.n	800377c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800377a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003792:	e003      	b.n	800379c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8272 	beq.w	8003c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
 80037b6:	e26c      	b.n	8003c92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a43      	ldr	r2, [pc, #268]	@ (80038cc <HAL_DMA_IRQHandler+0xa48>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a42      	ldr	r2, [pc, #264]	@ (80038d0 <HAL_DMA_IRQHandler+0xa4c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a40      	ldr	r2, [pc, #256]	@ (80038d4 <HAL_DMA_IRQHandler+0xa50>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a3f      	ldr	r2, [pc, #252]	@ (80038d8 <HAL_DMA_IRQHandler+0xa54>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a3d      	ldr	r2, [pc, #244]	@ (80038dc <HAL_DMA_IRQHandler+0xa58>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <HAL_DMA_IRQHandler+0xa5c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3a      	ldr	r2, [pc, #232]	@ (80038e4 <HAL_DMA_IRQHandler+0xa60>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_IRQHandler+0x984>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a39      	ldr	r2, [pc, #228]	@ (80038e8 <HAL_DMA_IRQHandler+0xa64>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_DMA_IRQHandler+0x988>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_DMA_IRQHandler+0x98a>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 823f 	beq.w	8003c92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2204      	movs	r2, #4
 8003826:	409a      	lsls	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80cd 	beq.w	80039cc <HAL_DMA_IRQHandler+0xb48>
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80c7 	beq.w	80039cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2204      	movs	r2, #4
 8003848:	409a      	lsls	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d049      	beq.n	80038ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8210 	beq.w	8003c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003874:	e20a      	b.n	8003c8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8206 	beq.w	8003c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003888:	e200      	b.n	8003c8c <HAL_DMA_IRQHandler+0xe08>
 800388a:	bf00      	nop
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	58025408 	.word	0x58025408
 80038d0:	5802541c 	.word	0x5802541c
 80038d4:	58025430 	.word	0x58025430
 80038d8:	58025444 	.word	0x58025444
 80038dc:	58025458 	.word	0x58025458
 80038e0:	5802546c 	.word	0x5802546c
 80038e4:	58025480 	.word	0x58025480
 80038e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d160      	bne.n	80039b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7f      	ldr	r2, [pc, #508]	@ (8003af8 <HAL_DMA_IRQHandler+0xc74>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d04a      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a7d      	ldr	r2, [pc, #500]	@ (8003afc <HAL_DMA_IRQHandler+0xc78>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d045      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b00 <HAL_DMA_IRQHandler+0xc7c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d040      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a7a      	ldr	r2, [pc, #488]	@ (8003b04 <HAL_DMA_IRQHandler+0xc80>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d03b      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a79      	ldr	r2, [pc, #484]	@ (8003b08 <HAL_DMA_IRQHandler+0xc84>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d036      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a77      	ldr	r2, [pc, #476]	@ (8003b0c <HAL_DMA_IRQHandler+0xc88>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d031      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a76      	ldr	r2, [pc, #472]	@ (8003b10 <HAL_DMA_IRQHandler+0xc8c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d02c      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a74      	ldr	r2, [pc, #464]	@ (8003b14 <HAL_DMA_IRQHandler+0xc90>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d027      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	@ (8003b18 <HAL_DMA_IRQHandler+0xc94>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a71      	ldr	r2, [pc, #452]	@ (8003b1c <HAL_DMA_IRQHandler+0xc98>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01d      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a70      	ldr	r2, [pc, #448]	@ (8003b20 <HAL_DMA_IRQHandler+0xc9c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6e      	ldr	r2, [pc, #440]	@ (8003b24 <HAL_DMA_IRQHandler+0xca0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6d      	ldr	r2, [pc, #436]	@ (8003b28 <HAL_DMA_IRQHandler+0xca4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b2c <HAL_DMA_IRQHandler+0xca8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6a      	ldr	r2, [pc, #424]	@ (8003b30 <HAL_DMA_IRQHandler+0xcac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_DMA_IRQHandler+0xb12>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	@ (8003b34 <HAL_DMA_IRQHandler+0xcb0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <HAL_DMA_IRQHandler+0xb24>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0208 	bic.w	r2, r2, #8
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_DMA_IRQHandler+0xb34>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8165 	beq.w	8003c8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	e15f      	b.n	8003c8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2202      	movs	r2, #2
 80039d6:	409a      	lsls	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80c5 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xce8>
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80bf 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2202      	movs	r2, #2
 80039f8:	409a      	lsls	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 813a 	beq.w	8003c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a24:	e134      	b.n	8003c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8130 	beq.w	8003c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a38:	e12a      	b.n	8003c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8089 	bne.w	8003b58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <HAL_DMA_IRQHandler+0xc74>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a29      	ldr	r2, [pc, #164]	@ (8003afc <HAL_DMA_IRQHandler+0xc78>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <HAL_DMA_IRQHandler+0xc7c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a26      	ldr	r2, [pc, #152]	@ (8003b04 <HAL_DMA_IRQHandler+0xc80>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a25      	ldr	r2, [pc, #148]	@ (8003b08 <HAL_DMA_IRQHandler+0xc84>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	@ (8003b0c <HAL_DMA_IRQHandler+0xc88>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a22      	ldr	r2, [pc, #136]	@ (8003b10 <HAL_DMA_IRQHandler+0xc8c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a20      	ldr	r2, [pc, #128]	@ (8003b14 <HAL_DMA_IRQHandler+0xc90>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_DMA_IRQHandler+0xc94>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <HAL_DMA_IRQHandler+0xc98>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	@ (8003b20 <HAL_DMA_IRQHandler+0xc9c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <HAL_DMA_IRQHandler+0xca0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	@ (8003b28 <HAL_DMA_IRQHandler+0xca4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a17      	ldr	r2, [pc, #92]	@ (8003b2c <HAL_DMA_IRQHandler+0xca8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <HAL_DMA_IRQHandler+0xcac>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xc62>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a14      	ldr	r2, [pc, #80]	@ (8003b34 <HAL_DMA_IRQHandler+0xcb0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d128      	bne.n	8003b38 <HAL_DMA_IRQHandler+0xcb4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0214 	bic.w	r2, r2, #20
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e027      	b.n	8003b48 <HAL_DMA_IRQHandler+0xcc4>
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020028 	.word	0x40020028
 8003b00:	40020040 	.word	0x40020040
 8003b04:	40020058 	.word	0x40020058
 8003b08:	40020070 	.word	0x40020070
 8003b0c:	40020088 	.word	0x40020088
 8003b10:	400200a0 	.word	0x400200a0
 8003b14:	400200b8 	.word	0x400200b8
 8003b18:	40020410 	.word	0x40020410
 8003b1c:	40020428 	.word	0x40020428
 8003b20:	40020440 	.word	0x40020440
 8003b24:	40020458 	.word	0x40020458
 8003b28:	40020470 	.word	0x40020470
 8003b2c:	40020488 	.word	0x40020488
 8003b30:	400204a0 	.word	0x400204a0
 8003b34:	400204b8 	.word	0x400204b8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 020a 	bic.w	r2, r2, #10
 8003b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8097 	beq.w	8003c90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b6a:	e091      	b.n	8003c90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2208      	movs	r2, #8
 8003b76:	409a      	lsls	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8088 	beq.w	8003c92 <HAL_DMA_IRQHandler+0xe0e>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8082 	beq.w	8003c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a41      	ldr	r2, [pc, #260]	@ (8003c98 <HAL_DMA_IRQHandler+0xe14>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c9c <HAL_DMA_IRQHandler+0xe18>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca4 <HAL_DMA_IRQHandler+0xe20>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <HAL_DMA_IRQHandler+0xe24>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a39      	ldr	r2, [pc, #228]	@ (8003cac <HAL_DMA_IRQHandler+0xe28>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_DMA_IRQHandler+0xe2c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a36      	ldr	r2, [pc, #216]	@ (8003cb4 <HAL_DMA_IRQHandler+0xe30>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a35      	ldr	r2, [pc, #212]	@ (8003cb8 <HAL_DMA_IRQHandler+0xe34>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a33      	ldr	r2, [pc, #204]	@ (8003cbc <HAL_DMA_IRQHandler+0xe38>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a32      	ldr	r2, [pc, #200]	@ (8003cc0 <HAL_DMA_IRQHandler+0xe3c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a30      	ldr	r2, [pc, #192]	@ (8003cc4 <HAL_DMA_IRQHandler+0xe40>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc8 <HAL_DMA_IRQHandler+0xe44>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2d      	ldr	r2, [pc, #180]	@ (8003ccc <HAL_DMA_IRQHandler+0xe48>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd0 <HAL_DMA_IRQHandler+0xe4c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xdaa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd4 <HAL_DMA_IRQHandler+0xe50>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <HAL_DMA_IRQHandler+0xdbc>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 021c 	bic.w	r2, r2, #28
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e007      	b.n	8003c50 <HAL_DMA_IRQHandler+0xdcc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2201      	movs	r2, #1
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	e004      	b.n	8003c92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c88:	bf00      	nop
 8003c8a:	e002      	b.n	8003c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c92:	3728      	adds	r7, #40	@ 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40020010 	.word	0x40020010
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	40020040 	.word	0x40020040
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	40020070 	.word	0x40020070
 8003cac:	40020088 	.word	0x40020088
 8003cb0:	400200a0 	.word	0x400200a0
 8003cb4:	400200b8 	.word	0x400200b8
 8003cb8:	40020410 	.word	0x40020410
 8003cbc:	40020428 	.word	0x40020428
 8003cc0:	40020440 	.word	0x40020440
 8003cc4:	40020458 	.word	0x40020458
 8003cc8:	40020470 	.word	0x40020470
 8003ccc:	40020488 	.word	0x40020488
 8003cd0:	400204a0 	.word	0x400204a0
 8003cd4:	400204b8 	.word	0x400204b8

08003cd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef4 <DMA_SetConfig+0x21c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d072      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef8 <DMA_SetConfig+0x220>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d06d      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <DMA_SetConfig+0x224>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d068      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7a      	ldr	r2, [pc, #488]	@ (8003f00 <DMA_SetConfig+0x228>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d063      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a79      	ldr	r2, [pc, #484]	@ (8003f04 <DMA_SetConfig+0x22c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d05e      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a77      	ldr	r2, [pc, #476]	@ (8003f08 <DMA_SetConfig+0x230>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d059      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a76      	ldr	r2, [pc, #472]	@ (8003f0c <DMA_SetConfig+0x234>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d054      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a74      	ldr	r2, [pc, #464]	@ (8003f10 <DMA_SetConfig+0x238>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d04f      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a73      	ldr	r2, [pc, #460]	@ (8003f14 <DMA_SetConfig+0x23c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d04a      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a71      	ldr	r2, [pc, #452]	@ (8003f18 <DMA_SetConfig+0x240>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d045      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a70      	ldr	r2, [pc, #448]	@ (8003f1c <DMA_SetConfig+0x244>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d040      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6e      	ldr	r2, [pc, #440]	@ (8003f20 <DMA_SetConfig+0x248>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d03b      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f24 <DMA_SetConfig+0x24c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d036      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <DMA_SetConfig+0x250>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <DMA_SetConfig+0x254>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d02c      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <DMA_SetConfig+0x258>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d027      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a67      	ldr	r2, [pc, #412]	@ (8003f34 <DMA_SetConfig+0x25c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <DMA_SetConfig+0x260>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <DMA_SetConfig+0x264>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a62      	ldr	r2, [pc, #392]	@ (8003f40 <DMA_SetConfig+0x268>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	@ (8003f44 <DMA_SetConfig+0x26c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f48 <DMA_SetConfig+0x270>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <DMA_SetConfig+0x274>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <DMA_SetConfig+0x10a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f50 <DMA_SetConfig+0x278>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <DMA_SetConfig+0x10e>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <DMA_SetConfig+0x110>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003df4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a39      	ldr	r2, [pc, #228]	@ (8003ef4 <DMA_SetConfig+0x21c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a38      	ldr	r2, [pc, #224]	@ (8003ef8 <DMA_SetConfig+0x220>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a36      	ldr	r2, [pc, #216]	@ (8003efc <DMA_SetConfig+0x224>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a35      	ldr	r2, [pc, #212]	@ (8003f00 <DMA_SetConfig+0x228>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a33      	ldr	r2, [pc, #204]	@ (8003f04 <DMA_SetConfig+0x22c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a32      	ldr	r2, [pc, #200]	@ (8003f08 <DMA_SetConfig+0x230>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a30      	ldr	r2, [pc, #192]	@ (8003f0c <DMA_SetConfig+0x234>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	@ (8003f10 <DMA_SetConfig+0x238>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <DMA_SetConfig+0x23c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <DMA_SetConfig+0x240>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <DMA_SetConfig+0x244>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <DMA_SetConfig+0x248>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <DMA_SetConfig+0x24c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a26      	ldr	r2, [pc, #152]	@ (8003f28 <DMA_SetConfig+0x250>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <DMA_SetConfig+0x254>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <DMA_SetConfig+0x1d0>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <DMA_SetConfig+0x258>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <DMA_SetConfig+0x1d4>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <DMA_SetConfig+0x1d6>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d059      	beq.n	8003f66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	223f      	movs	r2, #63	@ 0x3f
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b40      	cmp	r3, #64	@ 0x40
 8003ee0:	d138      	bne.n	8003f54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ef2:	e086      	b.n	8004002 <DMA_SetConfig+0x32a>
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8
 8003f34:	58025408 	.word	0x58025408
 8003f38:	5802541c 	.word	0x5802541c
 8003f3c:	58025430 	.word	0x58025430
 8003f40:	58025444 	.word	0x58025444
 8003f44:	58025458 	.word	0x58025458
 8003f48:	5802546c 	.word	0x5802546c
 8003f4c:	58025480 	.word	0x58025480
 8003f50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
}
 8003f64:	e04d      	b.n	8004002 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a29      	ldr	r2, [pc, #164]	@ (8004010 <DMA_SetConfig+0x338>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a27      	ldr	r2, [pc, #156]	@ (8004014 <DMA_SetConfig+0x33c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a26      	ldr	r2, [pc, #152]	@ (8004018 <DMA_SetConfig+0x340>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a24      	ldr	r2, [pc, #144]	@ (800401c <DMA_SetConfig+0x344>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a23      	ldr	r2, [pc, #140]	@ (8004020 <DMA_SetConfig+0x348>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <DMA_SetConfig+0x34c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <DMA_SetConfig+0x350>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <DMA_SetConfig+0x2de>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800402c <DMA_SetConfig+0x354>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <DMA_SetConfig+0x2e2>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <DMA_SetConfig+0x2e4>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d108      	bne.n	8003ff2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	60da      	str	r2, [r3, #12]
}
 8003ff0:	e007      	b.n	8004002 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	58025408 	.word	0x58025408
 8004014:	5802541c 	.word	0x5802541c
 8004018:	58025430 	.word	0x58025430
 800401c:	58025444 	.word	0x58025444
 8004020:	58025458 	.word	0x58025458
 8004024:	5802546c 	.word	0x5802546c
 8004028:	58025480 	.word	0x58025480
 800402c:	58025494 	.word	0x58025494

08004030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a42      	ldr	r2, [pc, #264]	@ (8004148 <DMA_CalcBaseAndBitshift+0x118>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	@ (800414c <DMA_CalcBaseAndBitshift+0x11c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3f      	ldr	r2, [pc, #252]	@ (8004150 <DMA_CalcBaseAndBitshift+0x120>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3e      	ldr	r2, [pc, #248]	@ (8004154 <DMA_CalcBaseAndBitshift+0x124>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <DMA_CalcBaseAndBitshift+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3b      	ldr	r2, [pc, #236]	@ (800415c <DMA_CalcBaseAndBitshift+0x12c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a39      	ldr	r2, [pc, #228]	@ (8004160 <DMA_CalcBaseAndBitshift+0x130>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a38      	ldr	r2, [pc, #224]	@ (8004164 <DMA_CalcBaseAndBitshift+0x134>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a36      	ldr	r2, [pc, #216]	@ (8004168 <DMA_CalcBaseAndBitshift+0x138>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a35      	ldr	r2, [pc, #212]	@ (800416c <DMA_CalcBaseAndBitshift+0x13c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <DMA_CalcBaseAndBitshift+0x140>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a32      	ldr	r2, [pc, #200]	@ (8004174 <DMA_CalcBaseAndBitshift+0x144>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <DMA_CalcBaseAndBitshift+0x148>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2f      	ldr	r2, [pc, #188]	@ (800417c <DMA_CalcBaseAndBitshift+0x14c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <DMA_CalcBaseAndBitshift+0x150>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xa8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004184 <DMA_CalcBaseAndBitshift+0x154>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <DMA_CalcBaseAndBitshift+0xac>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <DMA_CalcBaseAndBitshift+0xae>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d024      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3b10      	subs	r3, #16
 80040ea:	4a27      	ldr	r2, [pc, #156]	@ (8004188 <DMA_CalcBaseAndBitshift+0x158>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	4a24      	ldr	r2, [pc, #144]	@ (800418c <DMA_CalcBaseAndBitshift+0x15c>)
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d908      	bls.n	800411c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <DMA_CalcBaseAndBitshift+0x160>)
 8004112:	4013      	ands	r3, r2
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	659a      	str	r2, [r3, #88]	@ 0x58
 800411a:	e00d      	b.n	8004138 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <DMA_CalcBaseAndBitshift+0x160>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6593      	str	r3, [r2, #88]	@ 0x58
 800412a:	e005      	b.n	8004138 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40020010 	.word	0x40020010
 800414c:	40020028 	.word	0x40020028
 8004150:	40020040 	.word	0x40020040
 8004154:	40020058 	.word	0x40020058
 8004158:	40020070 	.word	0x40020070
 800415c:	40020088 	.word	0x40020088
 8004160:	400200a0 	.word	0x400200a0
 8004164:	400200b8 	.word	0x400200b8
 8004168:	40020410 	.word	0x40020410
 800416c:	40020428 	.word	0x40020428
 8004170:	40020440 	.word	0x40020440
 8004174:	40020458 	.word	0x40020458
 8004178:	40020470 	.word	0x40020470
 800417c:	40020488 	.word	0x40020488
 8004180:	400204a0 	.word	0x400204a0
 8004184:	400204b8 	.word	0x400204b8
 8004188:	aaaaaaab 	.word	0xaaaaaaab
 800418c:	0800bcc4 	.word	0x0800bcc4
 8004190:	fffffc00 	.word	0xfffffc00

08004194 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d120      	bne.n	80041ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d858      	bhi.n	8004262 <DMA_CheckFifoParam+0xce>
 80041b0:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <DMA_CheckFifoParam+0x24>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041db 	.word	0x080041db
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	08004263 	.word	0x08004263
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d048      	beq.n	8004266 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041d8:	e045      	b.n	8004266 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041e2:	d142      	bne.n	800426a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e8:	e03f      	b.n	800426a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f2:	d123      	bne.n	800423c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d838      	bhi.n	800426e <DMA_CheckFifoParam+0xda>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <DMA_CheckFifoParam+0x70>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	0800421b 	.word	0x0800421b
 800420c:	08004215 	.word	0x08004215
 8004210:	0800422d 	.word	0x0800422d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
        break;
 8004218:	e030      	b.n	800427c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d025      	beq.n	8004272 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800422a:	e022      	b.n	8004272 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800423a:	e01c      	b.n	8004276 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	2b02      	cmp	r3, #2
 8004242:	d902      	bls.n	800424a <DMA_CheckFifoParam+0xb6>
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004248:	e018      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
        break;
 800424e:	e015      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
    break;
 8004260:	e00b      	b.n	800427a <DMA_CheckFifoParam+0xe6>
        break;
 8004262:	bf00      	nop
 8004264:	e00a      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        break;
 8004266:	bf00      	nop
 8004268:	e008      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        break;
 800426a:	bf00      	nop
 800426c:	e006      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <DMA_CheckFifoParam+0xe8>
        break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <DMA_CheckFifoParam+0xe8>
    break;
 800427a:	bf00      	nop
    }
  }

  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a38      	ldr	r2, [pc, #224]	@ (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a36      	ldr	r2, [pc, #216]	@ (8004384 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a35      	ldr	r2, [pc, #212]	@ (8004388 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a33      	ldr	r2, [pc, #204]	@ (800438c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a32      	ldr	r2, [pc, #200]	@ (8004390 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a30      	ldr	r2, [pc, #192]	@ (8004394 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01a      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3b08      	subs	r3, #8
 80042fc:	4a28      	ldr	r2, [pc, #160]	@ (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a24      	ldr	r2, [pc, #144]	@ (80043a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004318:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004328:	e024      	b.n	8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3b10      	subs	r3, #16
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d806      	bhi.n	8004352 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3308      	adds	r3, #8
 8004350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a16      	ldr	r2, [pc, #88]	@ (80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004364:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	58025408 	.word	0x58025408
 8004384:	5802541c 	.word	0x5802541c
 8004388:	58025430 	.word	0x58025430
 800438c:	58025444 	.word	0x58025444
 8004390:	58025458 	.word	0x58025458
 8004394:	5802546c 	.word	0x5802546c
 8004398:	58025480 	.word	0x58025480
 800439c:	58025494 	.word	0x58025494
 80043a0:	cccccccd 	.word	0xcccccccd
 80043a4:	16009600 	.word	0x16009600
 80043a8:	58025880 	.word	0x58025880
 80043ac:	aaaaaaab 	.word	0xaaaaaaab
 80043b0:	400204b8 	.word	0x400204b8
 80043b4:	4002040f 	.word	0x4002040f
 80043b8:	10008200 	.word	0x10008200
 80043bc:	40020880 	.word	0x40020880

080043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04a      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d847      	bhi.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a25      	ldr	r2, [pc, #148]	@ (8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a24      	ldr	r2, [pc, #144]	@ (800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	@ (8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1c      	ldr	r2, [pc, #112]	@ (8004490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1b      	ldr	r2, [pc, #108]	@ (8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a15      	ldr	r2, [pc, #84]	@ (800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004448:	671a      	str	r2, [r3, #112]	@ 0x70
 800444a:	e009      	b.n	8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800445e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3b01      	subs	r3, #1
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	58025408 	.word	0x58025408
 800447c:	5802541c 	.word	0x5802541c
 8004480:	58025430 	.word	0x58025430
 8004484:	58025444 	.word	0x58025444
 8004488:	58025458 	.word	0x58025458
 800448c:	5802546c 	.word	0x5802546c
 8004490:	58025480 	.word	0x58025480
 8004494:	58025494 	.word	0x58025494
 8004498:	1600963f 	.word	0x1600963f
 800449c:	58025940 	.word	0x58025940
 80044a0:	1000823f 	.word	0x1000823f
 80044a4:	40020940 	.word	0x40020940

080044a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	@ 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044b6:	4b86      	ldr	r3, [pc, #536]	@ (80046d0 <HAL_GPIO_Init+0x228>)
 80044b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ba:	e18c      	b.n	80047d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 817e 	beq.w	80047d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d005      	beq.n	80044ec <HAL_GPIO_Init+0x44>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d130      	bne.n	800454e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004522:	2201      	movs	r2, #1
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0201 	and.w	r2, r3, #1
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d017      	beq.n	800458a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d123      	bne.n	80045de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	08da      	lsrs	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3208      	adds	r2, #8
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0203 	and.w	r2, r3, #3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80d8 	beq.w	80047d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004620:	4b2c      	ldr	r3, [pc, #176]	@ (80046d4 <HAL_GPIO_Init+0x22c>)
 8004622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004626:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <HAL_GPIO_Init+0x22c>)
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004630:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <HAL_GPIO_Init+0x22c>)
 8004632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463e:	4a26      	ldr	r2, [pc, #152]	@ (80046d8 <HAL_GPIO_Init+0x230>)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <HAL_GPIO_Init+0x234>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d04a      	beq.n	8004700 <HAL_GPIO_Init+0x258>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <HAL_GPIO_Init+0x238>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <HAL_GPIO_Init+0x222>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <HAL_GPIO_Init+0x23c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d025      	beq.n	80046c6 <HAL_GPIO_Init+0x21e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <HAL_GPIO_Init+0x240>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <HAL_GPIO_Init+0x21a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_GPIO_Init+0x244>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d019      	beq.n	80046be <HAL_GPIO_Init+0x216>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_GPIO_Init+0x248>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0x212>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <HAL_GPIO_Init+0x24c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00d      	beq.n	80046b6 <HAL_GPIO_Init+0x20e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a16      	ldr	r2, [pc, #88]	@ (80046f8 <HAL_GPIO_Init+0x250>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x20a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <HAL_GPIO_Init+0x254>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_GPIO_Init+0x206>
 80046aa:	2309      	movs	r3, #9
 80046ac:	e029      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046ae:	230a      	movs	r3, #10
 80046b0:	e027      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046b2:	2307      	movs	r3, #7
 80046b4:	e025      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046b6:	2306      	movs	r3, #6
 80046b8:	e023      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046ba:	2305      	movs	r3, #5
 80046bc:	e021      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046be:	2304      	movs	r3, #4
 80046c0:	e01f      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e01d      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e01b      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e019      	b.n	8004702 <HAL_GPIO_Init+0x25a>
 80046ce:	bf00      	nop
 80046d0:	58000080 	.word	0x58000080
 80046d4:	58024400 	.word	0x58024400
 80046d8:	58000400 	.word	0x58000400
 80046dc:	58020000 	.word	0x58020000
 80046e0:	58020400 	.word	0x58020400
 80046e4:	58020800 	.word	0x58020800
 80046e8:	58020c00 	.word	0x58020c00
 80046ec:	58021000 	.word	0x58021000
 80046f0:	58021400 	.word	0x58021400
 80046f4:	58021800 	.word	0x58021800
 80046f8:	58021c00 	.word	0x58021c00
 80046fc:	58022400 	.word	0x58022400
 8004700:	2300      	movs	r3, #0
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	f002 0203 	and.w	r2, r2, #3
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	4093      	lsls	r3, r2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004712:	4938      	ldr	r1, [pc, #224]	@ (80047f4 <HAL_GPIO_Init+0x34c>)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f ae6b 	bne.w	80044bc <HAL_GPIO_Init+0x14>
  }
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	3724      	adds	r7, #36	@ 0x24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	58000400 	.word	0x58000400

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	4603      	mov	r3, r0
 8004832:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004838:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	4618      	mov	r0, r3
 8004852:	f005 fd03 	bl	800a25c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <HAL_PWR_EnterSLEEPMode+0x30>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800487e:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004880:	e000      	b.n	8004884 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004882:	bf20      	wfe
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800489c:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_PWREx_ConfigSupply+0x70>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d00a      	beq.n	80048be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048a8:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <HAL_PWREx_ConfigSupply+0x70>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e01f      	b.n	80048fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e01d      	b.n	80048fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048be:	4b11      	ldr	r3, [pc, #68]	@ (8004904 <HAL_PWREx_ConfigSupply+0x70>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 0207 	bic.w	r2, r3, #7
 80048c6:	490f      	ldr	r1, [pc, #60]	@ (8004904 <HAL_PWREx_ConfigSupply+0x70>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048ce:	f7fc fe97 	bl	8001600 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048d4:	e009      	b.n	80048ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d6:	f7fc fe93 	bl	8001600 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048e4:	d901      	bls.n	80048ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e007      	b.n	80048fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_PWREx_ConfigSupply+0x70>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f6:	d1ee      	bne.n	80048d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	58024800 	.word	0x58024800

08004908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	@ 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e3c8      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004928:	4b88      	ldr	r3, [pc, #544]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004932:	4b86      	ldr	r3, [pc, #536]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	2b10      	cmp	r3, #16
 800493c:	d007      	beq.n	800494e <HAL_RCC_OscConfig+0x46>
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	2b18      	cmp	r3, #24
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0x5e>
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d10b      	bne.n	8004966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d06c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x12c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d168      	bne.n	8004a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e3a2      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x76>
 8004970:	4b76      	ldr	r3, [pc, #472]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a75      	ldr	r2, [pc, #468]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x98>
 8004986:	4b71      	ldr	r3, [pc, #452]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a70      	ldr	r2, [pc, #448]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b6e      	ldr	r3, [pc, #440]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6d      	ldr	r2, [pc, #436]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004998:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0xbc>
 80049aa:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a67      	ldr	r2, [pc, #412]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b65      	ldr	r3, [pc, #404]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a64      	ldr	r2, [pc, #400]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 80049c4:	4b61      	ldr	r3, [pc, #388]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a60      	ldr	r2, [pc, #384]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fc fe0c 	bl	8001600 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fc fe08 	bl	8001600 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	@ 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e356      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049fe:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xe4>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc fdf8 	bl	8001600 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fc fdf4 	bl	8001600 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	@ 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e342      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a26:	4b49      	ldr	r3, [pc, #292]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x10c>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 808c 	beq.w	8004b5c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b41      	ldr	r3, [pc, #260]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_RCC_OscConfig+0x162>
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b18      	cmp	r3, #24
 8004a5e:	d137      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1c8>
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d132      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6a:	4b38      	ldr	r3, [pc, #224]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e314      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a82:	4b32      	ldr	r3, [pc, #200]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 0219 	bic.w	r2, r3, #25
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	492f      	ldr	r1, [pc, #188]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc fdb4 	bl	8001600 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9c:	f7fc fdb0 	bl	8001600 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e2fe      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aae:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	4920      	ldr	r1, [pc, #128]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ace:	e045      	b.n	8004b5c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d026      	beq.n	8004b26 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 0219 	bic.w	r2, r3, #25
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4919      	ldr	r1, [pc, #100]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fc fd89 	bl	8001600 <HAL_GetTick>
 8004aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fc fd85 	bl	8001600 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e2d3      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b04:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	490b      	ldr	r1, [pc, #44]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	e01a      	b.n	8004b5c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a08      	ldr	r2, [pc, #32]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fc fd65 	bl	8001600 <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fc fd61 	bl	8001600 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d903      	bls.n	8004b50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e2af      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
 8004b4c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b50:	4b96      	ldr	r3, [pc, #600]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1ee      	bne.n	8004b3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d06a      	beq.n	8004c3e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b68:	4b90      	ldr	r3, [pc, #576]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b70:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b72:	4b8e      	ldr	r3, [pc, #568]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d007      	beq.n	8004b8e <HAL_RCC_OscConfig+0x286>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b18      	cmp	r3, #24
 8004b82:	d11b      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2b4>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b8e:	4b87      	ldr	r3, [pc, #540]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x29e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e282      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ba6:	4b81      	ldr	r3, [pc, #516]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	497d      	ldr	r1, [pc, #500]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bba:	e040      	b.n	8004c3e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d023      	beq.n	8004c0c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bc4:	4b79      	ldr	r3, [pc, #484]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a78      	ldr	r2, [pc, #480]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fc fd16 	bl	8001600 <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bd8:	f7fc fd12 	bl	8001600 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e260      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bea:	4b70      	ldr	r3, [pc, #448]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	4969      	ldr	r1, [pc, #420]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]
 8004c0a:	e018      	b.n	8004c3e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c0c:	4b67      	ldr	r3, [pc, #412]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a66      	ldr	r2, [pc, #408]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fc fcf2 	bl	8001600 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c20:	f7fc fcee 	bl	8001600 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e23c      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c32:	4b5e      	ldr	r3, [pc, #376]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d036      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c52:	4b56      	ldr	r3, [pc, #344]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c56:	4a55      	ldr	r2, [pc, #340]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fc fccf 	bl	8001600 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c66:	f7fc fccb 	bl	8001600 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e219      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c78:	4b4c      	ldr	r3, [pc, #304]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x35e>
 8004c84:	e018      	b.n	8004cb8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c86:	4b49      	ldr	r3, [pc, #292]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8a:	4a48      	ldr	r2, [pc, #288]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fc fcb5 	bl	8001600 <HAL_GetTick>
 8004c96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9a:	f7fc fcb1 	bl	8001600 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e1ff      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cac:	4b3f      	ldr	r3, [pc, #252]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d036      	beq.n	8004d32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d019      	beq.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ccc:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a36      	ldr	r2, [pc, #216]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cd8:	f7fc fc92 	bl	8001600 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce0:	f7fc fc8e 	bl	8001600 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1dc      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x3d8>
 8004cfe:	e018      	b.n	8004d32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d00:	4b2a      	ldr	r3, [pc, #168]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d0c:	f7fc fc78 	bl	8001600 <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d14:	f7fc fc74 	bl	8001600 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1c2      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d26:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8086 	beq.w	8004e4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d40:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x4a8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	@ (8004db0 <HAL_RCC_OscConfig+0x4a8>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d4c:	f7fc fc58 	bl	8001600 <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d54:	f7fc fc54 	bl	8001600 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1a2      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <HAL_RCC_OscConfig+0x4a8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d106      	bne.n	8004d88 <HAL_RCC_OscConfig+0x480>
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d86:	e032      	b.n	8004dee <HAL_RCC_OscConfig+0x4e6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d111      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4ac>
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d94:	4a05      	ldr	r2, [pc, #20]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9c:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da0:	4a02      	ldr	r2, [pc, #8]	@ (8004dac <HAL_RCC_OscConfig+0x4a4>)
 8004da2:	f023 0304 	bic.w	r3, r3, #4
 8004da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da8:	e021      	b.n	8004dee <HAL_RCC_OscConfig+0x4e6>
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	58024800 	.word	0x58024800
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d10c      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4ce>
 8004dbc:	4b83      	ldr	r3, [pc, #524]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc0:	4a82      	ldr	r2, [pc, #520]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc8:	4b80      	ldr	r3, [pc, #512]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dcc:	4a7f      	ldr	r2, [pc, #508]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd4:	e00b      	b.n	8004dee <HAL_RCC_OscConfig+0x4e6>
 8004dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dda:	4a7c      	ldr	r2, [pc, #496]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de6:	4a79      	ldr	r2, [pc, #484]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d015      	beq.n	8004e22 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fc fc03 	bl	8001600 <HAL_GetTick>
 8004dfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fc fbff 	bl	8001600 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e14b      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e14:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ee      	beq.n	8004dfe <HAL_RCC_OscConfig+0x4f6>
 8004e20:	e014      	b.n	8004e4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fc fbed 	bl	8001600 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fc fbe9 	bl	8001600 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e135      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e40:	4b62      	ldr	r3, [pc, #392]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 812a 	beq.w	80050aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e56:	4b5d      	ldr	r3, [pc, #372]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5e:	2b18      	cmp	r3, #24
 8004e60:	f000 80ba 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	f040 8095 	bne.w	8004f98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6e:	4b57      	ldr	r3, [pc, #348]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a56      	ldr	r2, [pc, #344]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fbc1 	bl	8001600 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fc fbbd 	bl	8001600 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e10b      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e94:	4b4d      	ldr	r3, [pc, #308]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_RCC_OscConfig+0x6c8>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	4945      	ldr	r1, [pc, #276]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	025b      	lsls	r3, r3, #9
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004eea:	4938      	ldr	r1, [pc, #224]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ef0:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	4a35      	ldr	r2, [pc, #212]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004efc:	4b33      	ldr	r3, [pc, #204]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f00:	4b34      	ldr	r3, [pc, #208]	@ (8004fd4 <HAL_RCC_OscConfig+0x6cc>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f08:	00d2      	lsls	r2, r2, #3
 8004f0a:	4930      	ldr	r1, [pc, #192]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f10:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	f023 020c 	bic.w	r2, r3, #12
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	492b      	ldr	r1, [pc, #172]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f22:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	f023 0202 	bic.w	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	4927      	ldr	r1, [pc, #156]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f34:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	4a24      	ldr	r2, [pc, #144]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f40:	4b22      	ldr	r3, [pc, #136]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f58:	4b1c      	ldr	r3, [pc, #112]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fc fb46 	bl	8001600 <HAL_GetTick>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fc fb42 	bl	8001600 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e090      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f8a:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x670>
 8004f96:	e088      	b.n	80050aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fb2c 	bl	8001600 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fc fb28 	bl	8001600 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e076      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fbe:	4b03      	ldr	r3, [pc, #12]	@ (8004fcc <HAL_RCC_OscConfig+0x6c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x6a4>
 8004fca:	e06e      	b.n	80050aa <HAL_RCC_OscConfig+0x7a2>
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	fffffc0c 	.word	0xfffffc0c
 8004fd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fd8:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fde:	4b35      	ldr	r3, [pc, #212]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d031      	beq.n	8005050 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d12a      	bne.n	8005050 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d122      	bne.n	8005050 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d11a      	bne.n	8005050 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	0a5b      	lsrs	r3, r3, #9
 800501e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d111      	bne.n	8005050 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d108      	bne.n	8005050 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	0e1b      	lsrs	r3, r3, #24
 8005042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e02b      	b.n	80050ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 8005056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800505e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d01f      	beq.n	80050aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800506a:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005076:	f7fc fac3 	bl	8001600 <HAL_GetTick>
 800507a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800507c:	bf00      	nop
 800507e:	f7fc fabf 	bl	8001600 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	4293      	cmp	r3, r2
 8005088:	d0f9      	beq.n	800507e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 800508c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_RCC_OscConfig+0x7b0>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005096:	00d2      	lsls	r2, r2, #3
 8005098:	4906      	ldr	r1, [pc, #24]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 800509a:	4313      	orrs	r3, r2
 800509c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800509e:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	4a04      	ldr	r2, [pc, #16]	@ (80050b4 <HAL_RCC_OscConfig+0x7ac>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3730      	adds	r7, #48	@ 0x30
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	58024400 	.word	0x58024400
 80050b8:	ffff0007 	.word	0xffff0007

080050bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e19c      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b8a      	ldr	r3, [pc, #552]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d910      	bls.n	8005100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b87      	ldr	r3, [pc, #540]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 020f 	bic.w	r2, r3, #15
 80050e6:	4985      	ldr	r1, [pc, #532]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b83      	ldr	r3, [pc, #524]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e184      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	4b7b      	ldr	r3, [pc, #492]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005118:	429a      	cmp	r2, r3
 800511a:	d908      	bls.n	800512e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800511c:	4b78      	ldr	r3, [pc, #480]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	4975      	ldr	r1, [pc, #468]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800512a:	4313      	orrs	r3, r2
 800512c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	4b70      	ldr	r3, [pc, #448]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005146:	429a      	cmp	r2, r3
 8005148:	d908      	bls.n	800515c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800514a:	4b6d      	ldr	r3, [pc, #436]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	496a      	ldr	r1, [pc, #424]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005158:	4313      	orrs	r3, r2
 800515a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005174:	429a      	cmp	r2, r3
 8005176:	d908      	bls.n	800518a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005178:	4b61      	ldr	r3, [pc, #388]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	495e      	ldr	r1, [pc, #376]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	4b59      	ldr	r3, [pc, #356]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051a6:	4b56      	ldr	r3, [pc, #344]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4953      	ldr	r1, [pc, #332]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f023 020f 	bic.w	r2, r3, #15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4947      	ldr	r1, [pc, #284]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d055      	beq.n	800529e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051f2:	4b43      	ldr	r3, [pc, #268]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	4940      	ldr	r1, [pc, #256]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005200:	4313      	orrs	r3, r2
 8005202:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d107      	bne.n	800521c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800520c:	4b3c      	ldr	r3, [pc, #240]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d121      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0f6      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005224:	4b36      	ldr	r3, [pc, #216]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d115      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0ea      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d107      	bne.n	800524c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800523c:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0de      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800524c:	4b2c      	ldr	r3, [pc, #176]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0d6      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800525c:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4925      	ldr	r1, [pc, #148]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800526a:	4313      	orrs	r3, r2
 800526c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fc f9c7 	bl	8001600 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005274:	e00a      	b.n	800528c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005276:	f7fc f9c3 	bl	8001600 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0be      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	429a      	cmp	r2, r3
 800529c:	d1eb      	bne.n	8005276 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d010      	beq.n	80052cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d208      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ba:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	490e      	ldr	r1, [pc, #56]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052cc:	4b0b      	ldr	r3, [pc, #44]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d214      	bcs.n	8005304 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 020f 	bic.w	r2, r3, #15
 80052e2:	4906      	ldr	r1, [pc, #24]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e086      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
 80052fc:	52002000 	.word	0x52002000
 8005300:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531c:	429a      	cmp	r2, r3
 800531e:	d208      	bcs.n	8005332 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005320:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4939      	ldr	r1, [pc, #228]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800532e:	4313      	orrs	r3, r2
 8005330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	4b34      	ldr	r3, [pc, #208]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800534a:	429a      	cmp	r2, r3
 800534c:	d208      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800534e:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	492e      	ldr	r1, [pc, #184]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800535c:	4313      	orrs	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	4922      	ldr	r1, [pc, #136]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800538a:	4313      	orrs	r3, r2
 800538c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d208      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4917      	ldr	r1, [pc, #92]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053bc:	f000 f834 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4912      	ldr	r1, [pc, #72]	@ (8005418 <HAL_RCC_ClockConfig+0x35c>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <HAL_RCC_ClockConfig+0x35c>)
 80053e4:	5cd3      	ldrb	r3, [r2, r3]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	4a0a      	ldr	r2, [pc, #40]	@ (800541c <HAL_RCC_ClockConfig+0x360>)
 80053f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x364>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCC_ClockConfig+0x368>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fc f8b4 	bl	800156c <HAL_InitTick>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	0800bcb4 	.word	0x0800bcb4
 800541c:	24000064 	.word	0x24000064
 8005420:	24000060 	.word	0x24000060
 8005424:	24000068 	.word	0x24000068

08005428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	@ 0x24
 800542c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800542e:	4bb3      	ldr	r3, [pc, #716]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005436:	2b18      	cmp	r3, #24
 8005438:	f200 8155 	bhi.w	80056e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800543c:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	080054a9 	.word	0x080054a9
 8005448:	080056e7 	.word	0x080056e7
 800544c:	080056e7 	.word	0x080056e7
 8005450:	080056e7 	.word	0x080056e7
 8005454:	080056e7 	.word	0x080056e7
 8005458:	080056e7 	.word	0x080056e7
 800545c:	080056e7 	.word	0x080056e7
 8005460:	080056e7 	.word	0x080056e7
 8005464:	080054cf 	.word	0x080054cf
 8005468:	080056e7 	.word	0x080056e7
 800546c:	080056e7 	.word	0x080056e7
 8005470:	080056e7 	.word	0x080056e7
 8005474:	080056e7 	.word	0x080056e7
 8005478:	080056e7 	.word	0x080056e7
 800547c:	080056e7 	.word	0x080056e7
 8005480:	080056e7 	.word	0x080056e7
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080056e7 	.word	0x080056e7
 800548c:	080056e7 	.word	0x080056e7
 8005490:	080056e7 	.word	0x080056e7
 8005494:	080056e7 	.word	0x080056e7
 8005498:	080056e7 	.word	0x080056e7
 800549c:	080056e7 	.word	0x080056e7
 80054a0:	080056e7 	.word	0x080056e7
 80054a4:	080054db 	.word	0x080054db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b94      	ldr	r3, [pc, #592]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b91      	ldr	r3, [pc, #580]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a90      	ldr	r2, [pc, #576]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054c6:	e111      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054ca:	61bb      	str	r3, [r7, #24]
      break;
 80054cc:	e10e      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054d0:	61bb      	str	r3, [r7, #24]
      break;
 80054d2:	e10b      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054d6:	61bb      	str	r3, [r7, #24]
      break;
 80054d8:	e108      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054da:	4b88      	ldr	r3, [pc, #544]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054e4:	4b85      	ldr	r3, [pc, #532]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054f0:	4b82      	ldr	r3, [pc, #520]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054fa:	4b80      	ldr	r3, [pc, #512]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	08db      	lsrs	r3, r3, #3
 8005500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80e1 	beq.w	80056e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b02      	cmp	r3, #2
 8005522:	f000 8083 	beq.w	800562c <HAL_RCC_GetSysClockFreq+0x204>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b02      	cmp	r3, #2
 800552a:	f200 80a1 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x248>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x114>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d056      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800553a:	e099      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553c:	4b6f      	ldr	r3, [pc, #444]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02d      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005548:	4b6c      	ldr	r3, [pc, #432]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	4a6b      	ldr	r2, [pc, #428]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b62      	ldr	r3, [pc, #392]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a02 	vldr	s12, [r7, #8]
 8005586:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055a2:	e087      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005710 <HAL_RCC_GetSysClockFreq+0x2e8>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b51      	ldr	r3, [pc, #324]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055e6:	e065      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005714 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b40      	ldr	r3, [pc, #256]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a02 	vldr	s12, [r7, #8]
 800560e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800562a:	e043      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	4b2f      	ldr	r3, [pc, #188]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005652:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800566e:	e021      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005692:	ed97 6a02 	vldr	s12, [r7, #8]
 8005696:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 800569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056be:	3301      	adds	r3, #1
 80056c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 3a90 	vmov	r3, s15
 80056dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056de:	e005      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
      break;
 80056e4:	e002      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056e6:	4b07      	ldr	r3, [pc, #28]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056e8:	61bb      	str	r3, [r7, #24]
      break;
 80056ea:	bf00      	nop
  }

  return sysclockfreq;
 80056ec:	69bb      	ldr	r3, [r7, #24]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	@ 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	03d09000 	.word	0x03d09000
 8005704:	003d0900 	.word	0x003d0900
 8005708:	007a1200 	.word	0x007a1200
 800570c:	46000000 	.word	0x46000000
 8005710:	4c742400 	.word	0x4c742400
 8005714:	4a742400 	.word	0x4a742400
 8005718:	4af42400 	.word	0x4af42400

0800571c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005722:	f7ff fe81 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 8005726:	4602      	mov	r2, r0
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <HAL_RCC_GetHCLKFreq+0x50>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	490f      	ldr	r1, [pc, #60]	@ (8005770 <HAL_RCC_GetHCLKFreq+0x54>)
 8005734:	5ccb      	ldrb	r3, [r1, r3]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <HAL_RCC_GetHCLKFreq+0x50>)
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <HAL_RCC_GetHCLKFreq+0x54>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <HAL_RCC_GetHCLKFreq+0x58>)
 8005758:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800575a:	4a07      	ldr	r2, [pc, #28]	@ (8005778 <HAL_RCC_GetHCLKFreq+0x5c>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005760:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <HAL_RCC_GetHCLKFreq+0x58>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	58024400 	.word	0x58024400
 8005770:	0800bcb4 	.word	0x0800bcb4
 8005774:	24000064 	.word	0x24000064
 8005778:	24000060 	.word	0x24000060

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005780:	f7ff ffcc 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4904      	ldr	r1, [pc, #16]	@ (80057a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	58024400 	.word	0x58024400
 80057a4:	0800bcb4 	.word	0x0800bcb4

080057a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80057ac:	f7ff ffb6 	bl	800571c <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4904      	ldr	r1, [pc, #16]	@ (80057d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	58024400 	.word	0x58024400
 80057d0:	0800bcb4 	.word	0x0800bcb4

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d8:	b0c6      	sub	sp, #280	@ 0x118
 80057da:	af00      	add	r7, sp, #0
 80057dc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80057f8:	2500      	movs	r5, #0
 80057fa:	ea54 0305 	orrs.w	r3, r4, r5
 80057fe:	d049      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005806:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800580a:	d02f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800580c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005810:	d828      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005812:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005816:	d01a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005818:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581c:	d822      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005826:	d007      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005828:	e01c      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4bab      	ldr	r3, [pc, #684]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800582c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582e:	4aaa      	ldr	r2, [pc, #680]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005836:	e01a      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	3308      	adds	r3, #8
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f001 fc25 	bl	8007090 <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800584c:	e00f      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005852:	3328      	adds	r3, #40	@ 0x28
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fccc 	bl	80071f4 <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005862:	e004      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005876:	4b98      	ldr	r3, [pc, #608]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005884:	4a94      	ldr	r2, [pc, #592]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6513      	str	r3, [r2, #80]	@ 0x50
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80058a0:	f04f 0900 	mov.w	r9, #0
 80058a4:	ea58 0309 	orrs.w	r3, r8, r9
 80058a8:	d047      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d82a      	bhi.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058b4:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058d1 	.word	0x080058d1
 80058c0:	080058df 	.word	0x080058df
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	08005913 	.word	0x08005913
 80058cc:	08005913 	.word	0x08005913
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b81      	ldr	r3, [pc, #516]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a80      	ldr	r2, [pc, #512]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058dc:	e01a      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	3308      	adds	r3, #8
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fbd2 	bl	8007090 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f2:	e00f      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	3328      	adds	r3, #40	@ 0x28
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fc79 	bl	80071f4 <RCCEx_PLL3_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800591c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005920:	f023 0107 	bic.w	r1, r3, #7
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005946:	f04f 0b00 	mov.w	fp, #0
 800594a:	ea5a 030b 	orrs.w	r3, sl, fp
 800594e:	d05b      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005954:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005958:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800595c:	d03b      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800595e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005962:	d834      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005964:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005968:	d037      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800596a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800596e:	d82e      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005970:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005974:	d033      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005976:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800597a:	d828      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800597c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005980:	d01a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005986:	d822      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800598c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005990:	d007      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005992:	e01c      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005994:	4b50      	ldr	r3, [pc, #320]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	4a4f      	ldr	r2, [pc, #316]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800599a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a0:	e01e      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a6:	3308      	adds	r3, #8
 80059a8:	2100      	movs	r1, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 fb70 	bl	8007090 <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059b6:	e013      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	3328      	adds	r3, #40	@ 0x28
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fc17 	bl	80071f4 <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059cc:	e008      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059d4:	e004      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059f8:	4a37      	ldr	r2, [pc, #220]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059fa:	430b      	orrs	r3, r1
 80059fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d05d      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a30:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a34:	d03b      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005a36:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a3a:	d834      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a40:	d037      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a46:	d82e      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a4c:	d033      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005a4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a52:	d828      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a58:	d01a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a5e:	d822      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a68:	d007      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a6a:	e01c      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a78:	e01e      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fb04 	bl	8007090 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e013      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	3328      	adds	r3, #40	@ 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fbab 	bl	80071f4 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005aac:	e004      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10d      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ad0:	4a01      	ldr	r2, [pc, #4]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005af0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005afa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d03a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d01f      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005b0e:	2b30      	cmp	r3, #48	@ 0x30
 8005b10:	d819      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d00c      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d815      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d111      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b22:	4baa      	ldr	r3, [pc, #680]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	4aa9      	ldr	r2, [pc, #676]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b2e:	e011      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b34:	3308      	adds	r3, #8
 8005b36:	2102      	movs	r1, #2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 faa9 	bl	8007090 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b44:	e006      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b4c:	e002      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b5c:	4b9b      	ldr	r3, [pc, #620]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6a:	4a98      	ldr	r2, [pc, #608]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b70:	e003      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b94:	460b      	mov	r3, r1
 8005b96:	4313      	orrs	r3, r2
 8005b98:	d051      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba4:	d035      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005baa:	d82e      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005bac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb0:	d031      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005bb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb6:	d828      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bbc:	d01a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc2:	d822      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bcc:	d007      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005bce:	e01c      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	4a7d      	ldr	r2, [pc, #500]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	3308      	adds	r3, #8
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fa52 	bl	8007090 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bf2:	e011      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	3328      	adds	r3, #40	@ 0x28
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 faf9 	bl	80071f4 <RCCEx_PLL3_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c08:	e006      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c10:	e002      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c20:	4b6a      	ldr	r3, [pc, #424]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2e:	4a67      	ldr	r2, [pc, #412]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	d053      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c68:	d033      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005c6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c6e:	d82c      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c74:	d02f      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005c76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c7a:	d826      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c80:	d02b      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005c82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c86:	d820      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c8c:	d012      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c92:	d81a      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d022      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9c:	d115      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f9f2 	bl	8007090 <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cb2:	e015      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	3328      	adds	r3, #40	@ 0x28
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fa99 	bl	80071f4 <RCCEx_PLL3_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cc8:	e00a      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cd0:	e006      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cd2:	bf00      	nop
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ce8:	4b38      	ldr	r3, [pc, #224]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	4a35      	ldr	r2, [pc, #212]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d1c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d058      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d32:	d033      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d38:	d82c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d44:	d826      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d50:	d820      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d56:	d012      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d5c:	d81a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d022      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d66:	d115      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f98d 	bl	8007090 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e015      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	3328      	adds	r3, #40	@ 0x28
 8005d84:	2101      	movs	r1, #1
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fa34 	bl	80071f4 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d92:	e00a      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d9a:	e006      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e004      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005da0:	bf00      	nop
 8005da2:	e002      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10e      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005db2:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc2:	4a02      	ldr	r2, [pc, #8]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005dca:	bf00      	nop
 8005dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005dee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d037      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e02:	d00e      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e08:	d816      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e12:	d111      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e14:	4bc4      	ldr	r3, [pc, #784]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	4ac3      	ldr	r2, [pc, #780]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e20:	e00f      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	3308      	adds	r3, #8
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f930 	bl	8007090 <RCCEx_PLL2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e4a:	4bb7      	ldr	r3, [pc, #732]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e58:	4ab3      	ldr	r2, [pc, #716]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e82:	460b      	mov	r3, r1
 8005e84:	4313      	orrs	r3, r2
 8005e86:	d039      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d81c      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ed5 	.word	0x08005ed5
 8005e9c:	08005ea9 	.word	0x08005ea9
 8005ea0:	08005eb7 	.word	0x08005eb7
 8005ea4:	08005ed5 	.word	0x08005ed5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4b9f      	ldr	r3, [pc, #636]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	4a9e      	ldr	r2, [pc, #632]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005eb4:	e00f      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eba:	3308      	adds	r3, #8
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 f8e6 	bl	8007090 <RCCEx_PLL2_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005eca:	e004      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ede:	4b92      	ldr	r3, [pc, #584]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee2:	f023 0103 	bic.w	r1, r3, #3
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eec:	4a8e      	ldr	r2, [pc, #568]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ef2:	e003      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f000 8099 	beq.w	8006050 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f1e:	4b83      	ldr	r3, [pc, #524]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a82      	ldr	r2, [pc, #520]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f2a:	f7fb fb69 	bl	8001600 <HAL_GetTick>
 8005f2e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f32:	e00b      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f34:	f7fb fb64 	bl	8001600 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b64      	cmp	r3, #100	@ 0x64
 8005f42:	d903      	bls.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f4a:	e005      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4c:	4b77      	ldr	r3, [pc, #476]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0ed      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d173      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f60:	4b71      	ldr	r3, [pc, #452]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f6c:	4053      	eors	r3, r2
 8005f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d015      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f76:	4b6c      	ldr	r3, [pc, #432]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f82:	4b69      	ldr	r3, [pc, #420]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f86:	4a68      	ldr	r2, [pc, #416]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f8e:	4b66      	ldr	r3, [pc, #408]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f92:	4a65      	ldr	r2, [pc, #404]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f9a:	4a63      	ldr	r2, [pc, #396]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fa0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fae:	d118      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fb fb26 	bl	8001600 <HAL_GetTick>
 8005fb4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fb8:	e00d      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fba:	f7fb fb21 	bl	8001600 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d903      	bls.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005fd4:	e005      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fd6:	4b54      	ldr	r3, [pc, #336]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0eb      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d129      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ffa:	d10e      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800600c:	091a      	lsrs	r2, r3, #4
 800600e:	4b48      	ldr	r3, [pc, #288]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006010:	4013      	ands	r3, r2
 8006012:	4a45      	ldr	r2, [pc, #276]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6113      	str	r3, [r2, #16]
 8006018:	e005      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800601a:	4b43      	ldr	r3, [pc, #268]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4a42      	ldr	r2, [pc, #264]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006020:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	4b40      	ldr	r3, [pc, #256]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006028:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006036:	4a3c      	ldr	r2, [pc, #240]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6713      	str	r3, [r2, #112]	@ 0x70
 800603c:	e008      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800603e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006042:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f002 0301 	and.w	r3, r2, #1
 800605c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006066:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	f000 808f 	beq.w	8006190 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006078:	2b28      	cmp	r3, #40	@ 0x28
 800607a:	d871      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800607c:	a201      	add	r2, pc, #4	@ (adr r2, 8006084 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	08006169 	.word	0x08006169
 8006088:	08006161 	.word	0x08006161
 800608c:	08006161 	.word	0x08006161
 8006090:	08006161 	.word	0x08006161
 8006094:	08006161 	.word	0x08006161
 8006098:	08006161 	.word	0x08006161
 800609c:	08006161 	.word	0x08006161
 80060a0:	08006161 	.word	0x08006161
 80060a4:	08006135 	.word	0x08006135
 80060a8:	08006161 	.word	0x08006161
 80060ac:	08006161 	.word	0x08006161
 80060b0:	08006161 	.word	0x08006161
 80060b4:	08006161 	.word	0x08006161
 80060b8:	08006161 	.word	0x08006161
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006161 	.word	0x08006161
 80060c4:	0800614b 	.word	0x0800614b
 80060c8:	08006161 	.word	0x08006161
 80060cc:	08006161 	.word	0x08006161
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006161 	.word	0x08006161
 80060d8:	08006161 	.word	0x08006161
 80060dc:	08006161 	.word	0x08006161
 80060e0:	08006161 	.word	0x08006161
 80060e4:	08006169 	.word	0x08006169
 80060e8:	08006161 	.word	0x08006161
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006161 	.word	0x08006161
 80060f4:	08006161 	.word	0x08006161
 80060f8:	08006161 	.word	0x08006161
 80060fc:	08006161 	.word	0x08006161
 8006100:	08006161 	.word	0x08006161
 8006104:	08006169 	.word	0x08006169
 8006108:	08006161 	.word	0x08006161
 800610c:	08006161 	.word	0x08006161
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006161 	.word	0x08006161
 800611c:	08006161 	.word	0x08006161
 8006120:	08006161 	.word	0x08006161
 8006124:	08006169 	.word	0x08006169
 8006128:	58024400 	.word	0x58024400
 800612c:	58024800 	.word	0x58024800
 8006130:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006138:	3308      	adds	r3, #8
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f000 ffa7 	bl	8007090 <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006148:	e00f      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614e:	3328      	adds	r3, #40	@ 0x28
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f001 f84e 	bl	80071f4 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006172:	4bbf      	ldr	r3, [pc, #764]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006180:	4abb      	ldr	r2, [pc, #748]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006182:	430b      	orrs	r3, r1
 8006184:	6553      	str	r3, [r2, #84]	@ 0x54
 8006186:	e003      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800618c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f002 0302 	and.w	r3, r2, #2
 800619c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	d041      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d824      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	0800620d 	.word	0x0800620d
 80061c4:	080061d9 	.word	0x080061d9
 80061c8:	080061ef 	.word	0x080061ef
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800620d 	.word	0x0800620d
 80061d4:	0800620d 	.word	0x0800620d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	3308      	adds	r3, #8
 80061de:	2101      	movs	r1, #1
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 ff55 	bl	8007090 <RCCEx_PLL2_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061ec:	e00f      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	3328      	adds	r3, #40	@ 0x28
 80061f4:	2101      	movs	r1, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fffc 	bl	80071f4 <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006216:	4b96      	ldr	r3, [pc, #600]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	f023 0107 	bic.w	r1, r3, #7
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006224:	4a92      	ldr	r2, [pc, #584]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006226:	430b      	orrs	r3, r1
 8006228:	6553      	str	r3, [r2, #84]	@ 0x54
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f002 0304 	and.w	r3, r2, #4
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800624a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d044      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625c:	2b05      	cmp	r3, #5
 800625e:	d825      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006260:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	080062b5 	.word	0x080062b5
 800626c:	08006281 	.word	0x08006281
 8006270:	08006297 	.word	0x08006297
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062b5 	.word	0x080062b5
 800627c:	080062b5 	.word	0x080062b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	3308      	adds	r3, #8
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ff01 	bl	8007090 <RCCEx_PLL2_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006294:	e00f      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	3328      	adds	r3, #40	@ 0x28
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 ffa8 	bl	80071f4 <RCCEx_PLL3_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062be:	4b6c      	ldr	r3, [pc, #432]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c2:	f023 0107 	bic.w	r1, r3, #7
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	4a68      	ldr	r2, [pc, #416]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f002 0320 	and.w	r3, r2, #32
 80062ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d055      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800630a:	d033      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800630c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006310:	d82c      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	d02f      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631c:	d826      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800631e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006322:	d02b      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006324:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006328:	d820      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800632a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800632e:	d012      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006334:	d81a      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d022      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800633a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800633e:	d115      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	3308      	adds	r3, #8
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fea1 	bl	8007090 <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006354:	e015      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635a:	3328      	adds	r3, #40	@ 0x28
 800635c:	2102      	movs	r1, #2
 800635e:	4618      	mov	r0, r3
 8006360:	f000 ff48 	bl	80071f4 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800636a:	e00a      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006374:	bf00      	nop
 8006376:	e004      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006378:	bf00      	nop
 800637a:	e002      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800639a:	4a35      	ldr	r2, [pc, #212]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800639c:	430b      	orrs	r3, r1
 800639e:	6553      	str	r3, [r2, #84]	@ 0x54
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d058      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063d6:	d033      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80063d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063dc:	d82c      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e2:	d02f      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e8:	d826      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ee:	d02b      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80063f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063f4:	d820      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063fa:	d012      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006400:	d81a      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d022      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640a:	d115      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006410:	3308      	adds	r3, #8
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fe3b 	bl	8007090 <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006420:	e015      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	3328      	adds	r3, #40	@ 0x28
 8006428:	2102      	movs	r1, #2
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fee2 	bl	80071f4 <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006436:	e00a      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800643e:	e006      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006440:	bf00      	nop
 8006442:	e004      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10e      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006466:	4a02      	ldr	r2, [pc, #8]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006468:	430b      	orrs	r3, r1
 800646a:	6593      	str	r3, [r2, #88]	@ 0x58
 800646c:	e006      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800646e:	bf00      	nop
 8006470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006492:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d055      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064a8:	d033      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80064aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064ae:	d82c      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b4:	d02f      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80064b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ba:	d826      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064c0:	d02b      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80064c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064c6:	d820      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064cc:	d012      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80064ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d2:	d81a      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d022      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064dc:	d115      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	3308      	adds	r3, #8
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fdd2 	bl	8007090 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064f2:	e015      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	3328      	adds	r3, #40	@ 0x28
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fe79 	bl	80071f4 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006508:	e00a      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006510:	e006      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006512:	bf00      	nop
 8006514:	e004      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006516:	bf00      	nop
 8006518:	e002      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800651a:	bf00      	nop
 800651c:	e000      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800651e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006528:	4ba0      	ldr	r3, [pc, #640]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006534:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006538:	4a9c      	ldr	r2, [pc, #624]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800653a:	430b      	orrs	r3, r1
 800653c:	6593      	str	r3, [r2, #88]	@ 0x58
 800653e:	e003      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f002 0308 	and.w	r3, r2, #8
 8006554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800655e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d01e      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006574:	d10c      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2102      	movs	r1, #2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fe38 	bl	80071f4 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006590:	4b86      	ldr	r3, [pc, #536]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006594:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a0:	4a82      	ldr	r2, [pc, #520]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f002 0310 	and.w	r3, r2, #16
 80065b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065c0:	460b      	mov	r3, r1
 80065c2:	4313      	orrs	r3, r2
 80065c4:	d01e      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d2:	d10c      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	3328      	adds	r3, #40	@ 0x28
 80065da:	2102      	movs	r1, #2
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fe09 	bl	80071f4 <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065ee:	4b6f      	ldr	r3, [pc, #444]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065fe:	4a6b      	ldr	r2, [pc, #428]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006612:	2300      	movs	r3, #0
 8006614:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006616:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	d03e      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800662c:	d022      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800662e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006632:	d81b      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663c:	d00b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800663e:	e015      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	3308      	adds	r3, #8
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fd21 	bl	8007090 <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006654:	e00f      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	3328      	adds	r3, #40	@ 0x28
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fdc8 	bl	80071f4 <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800667e:	4b4b      	ldr	r3, [pc, #300]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006682:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800668e:	4a47      	ldr	r2, [pc, #284]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006690:	430b      	orrs	r3, r1
 8006692:	6593      	str	r3, [r2, #88]	@ 0x58
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800669a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80066ac:	2300      	movs	r3, #0
 80066ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80066b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066c6:	d01f      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80066c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066cc:	d818      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066d2:	d003      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80066d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066d8:	d007      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80066da:	e011      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066dc:	4b33      	ldr	r3, [pc, #204]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	4a32      	ldr	r2, [pc, #200]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066e8:	e00f      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	3328      	adds	r3, #40	@ 0x28
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd7e 	bl	80071f4 <RCCEx_PLL3_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006712:	4b26      	ldr	r3, [pc, #152]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006716:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006722:	4a22      	ldr	r2, [pc, #136]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6553      	str	r3, [r2, #84]	@ 0x54
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800672e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800673e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006740:	2300      	movs	r3, #0
 8006742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006744:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006748:	460b      	mov	r3, r1
 800674a:	4313      	orrs	r3, r2
 800674c:	d034      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800675c:	d007      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800675e:	e011      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4b12      	ldr	r3, [pc, #72]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	4a11      	ldr	r2, [pc, #68]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800676c:	e00e      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006772:	3308      	adds	r3, #8
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc8a 	bl	8007090 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006782:	e003      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800678a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006794:	4b05      	ldr	r3, [pc, #20]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006798:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a2:	4a02      	ldr	r2, [pc, #8]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067a4:	430b      	orrs	r3, r1
 80067a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80067aa:	bf00      	nop
 80067ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067c6:	2300      	movs	r3, #0
 80067c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80067ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067ce:	460b      	mov	r3, r1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	d00c      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	3328      	adds	r3, #40	@ 0x28
 80067da:	2102      	movs	r1, #2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fd09 	bl	80071f4 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067fc:	2300      	movs	r3, #0
 80067fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006800:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006804:	460b      	mov	r3, r1
 8006806:	4313      	orrs	r3, r2
 8006808:	d036      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006814:	d018      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800681a:	d811      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800681c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006820:	d014      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006826:	d80b      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800682c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006832:	4bb7      	ldr	r3, [pc, #732]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	4ab6      	ldr	r2, [pc, #728]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800683e:	e008      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006846:	e004      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006848:	bf00      	nop
 800684a:	e002      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800685a:	4bad      	ldr	r3, [pc, #692]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006868:	4aa9      	ldr	r2, [pc, #676]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800686a:	430b      	orrs	r3, r1
 800686c:	6553      	str	r3, [r2, #84]	@ 0x54
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006884:	653b      	str	r3, [r7, #80]	@ 0x50
 8006886:	2300      	movs	r3, #0
 8006888:	657b      	str	r3, [r7, #84]	@ 0x54
 800688a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006894:	4b9e      	ldr	r3, [pc, #632]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006898:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	4a9b      	ldr	r2, [pc, #620]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b6:	2300      	movs	r3, #0
 80068b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d009      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068c4:	4b92      	ldr	r3, [pc, #584]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068d2:	4a8f      	ldr	r2, [pc, #572]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e6:	2300      	movs	r3, #0
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068f4:	4b86      	ldr	r3, [pc, #536]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	4a85      	ldr	r2, [pc, #532]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068fe:	6113      	str	r3, [r2, #16]
 8006900:	4b83      	ldr	r3, [pc, #524]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006902:	6919      	ldr	r1, [r3, #16]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800690c:	4a80      	ldr	r2, [pc, #512]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800690e:	430b      	orrs	r3, r1
 8006910:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006924:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d009      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800692e:	4b78      	ldr	r3, [pc, #480]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	4a74      	ldr	r2, [pc, #464]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800693e:	430b      	orrs	r3, r1
 8006940:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800694e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006950:	2300      	movs	r3, #0
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
 8006954:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800695e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	4a68      	ldr	r2, [pc, #416]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	2100      	movs	r1, #0
 800697e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006986:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d011      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	3308      	adds	r3, #8
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fb79 	bl	8007090 <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	2100      	movs	r1, #0
 80069be:	6239      	str	r1, [r7, #32]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d011      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	3308      	adds	r3, #8
 80069d6:	2101      	movs	r1, #1
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fb59 	bl	8007090 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	2100      	movs	r1, #0
 80069fe:	61b9      	str	r1, [r7, #24]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d011      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	3308      	adds	r3, #8
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fb39 	bl	8007090 <RCCEx_PLL2_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6139      	str	r1, [r7, #16]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d011      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	3328      	adds	r3, #40	@ 0x28
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fbcb 	bl	80071f4 <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	d011      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	3328      	adds	r3, #40	@ 0x28
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fbab 	bl	80071f4 <RCCEx_PLL3_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	2100      	movs	r1, #0
 8006abe:	6039      	str	r1, [r7, #0]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	607b      	str	r3, [r7, #4]
 8006ac6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d011      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	3328      	adds	r3, #40	@ 0x28
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fb8b 	bl	80071f4 <RCCEx_PLL3_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006af4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400

08006b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b18:	f7fe fe00 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	@ (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	0800bcb4 	.word	0x0800bcb4

08006b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b52:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	0b1b      	lsrs	r3, r3, #12
 8006b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4af42400 	.word	0x4af42400

08006de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	@ 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	@ 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4af42400 	.word	0x4af42400

08007090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800709e:	4b53      	ldr	r3, [pc, #332]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d101      	bne.n	80070ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e099      	b.n	80071e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070ae:	4b4f      	ldr	r3, [pc, #316]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4e      	ldr	r2, [pc, #312]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ba:	f7fa faa1 	bl	8001600 <HAL_GetTick>
 80070be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070c0:	e008      	b.n	80070d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070c2:	f7fa fa9d 	bl	8001600 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e086      	b.n	80071e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d4:	4b45      	ldr	r3, [pc, #276]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f0      	bne.n	80070c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070e0:	4b42      	ldr	r3, [pc, #264]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	031b      	lsls	r3, r3, #12
 80070ee:	493f      	ldr	r1, [pc, #252]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	3b01      	subs	r3, #1
 8007104:	025b      	lsls	r3, r3, #9
 8007106:	b29b      	uxth	r3, r3
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	3b01      	subs	r3, #1
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	3b01      	subs	r3, #1
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007124:	4931      	ldr	r1, [pc, #196]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800712a:	4b30      	ldr	r3, [pc, #192]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	492d      	ldr	r1, [pc, #180]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800713c:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	f023 0220 	bic.w	r2, r3, #32
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	4928      	ldr	r1, [pc, #160]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800714e:	4b27      	ldr	r3, [pc, #156]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	4a26      	ldr	r2, [pc, #152]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007154:	f023 0310 	bic.w	r3, r3, #16
 8007158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800715a:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800715c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800715e:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <RCCEx_PLL2_Config+0x160>)
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	69d2      	ldr	r2, [r2, #28]
 8007166:	00d2      	lsls	r2, r2, #3
 8007168:	4920      	ldr	r1, [pc, #128]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	4a1e      	ldr	r2, [pc, #120]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007174:	f043 0310 	orr.w	r3, r3, #16
 8007178:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007180:	4b1a      	ldr	r3, [pc, #104]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	4a19      	ldr	r2, [pc, #100]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007186:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800718a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800718c:	e00f      	b.n	80071ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d106      	bne.n	80071a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007194:	4b15      	ldr	r3, [pc, #84]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	4a14      	ldr	r2, [pc, #80]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 800719a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800719e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071a0:	e005      	b.n	80071ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071a2:	4b12      	ldr	r3, [pc, #72]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	4a11      	ldr	r2, [pc, #68]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80071a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071ae:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a0e      	ldr	r2, [pc, #56]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80071b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ba:	f7fa fa21 	bl	8001600 <HAL_GetTick>
 80071be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071c0:	e008      	b.n	80071d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071c2:	f7fa fa1d 	bl	8001600 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e006      	b.n	80071e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d4:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <RCCEx_PLL2_Config+0x15c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f0      	beq.n	80071c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
 80071f0:	ffff0007 	.word	0xffff0007

080071f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007202:	4b53      	ldr	r3, [pc, #332]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	2b03      	cmp	r3, #3
 800720c:	d101      	bne.n	8007212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e099      	b.n	8007346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007212:	4b4f      	ldr	r3, [pc, #316]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a4e      	ldr	r2, [pc, #312]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800721c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721e:	f7fa f9ef 	bl	8001600 <HAL_GetTick>
 8007222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007224:	e008      	b.n	8007238 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007226:	f7fa f9eb 	bl	8001600 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e086      	b.n	8007346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007238:	4b45      	ldr	r3, [pc, #276]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f0      	bne.n	8007226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007244:	4b42      	ldr	r3, [pc, #264]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007248:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	051b      	lsls	r3, r3, #20
 8007252:	493f      	ldr	r1, [pc, #252]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007254:	4313      	orrs	r3, r2
 8007256:	628b      	str	r3, [r1, #40]	@ 0x28
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	3b01      	subs	r3, #1
 800725e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	3b01      	subs	r3, #1
 8007268:	025b      	lsls	r3, r3, #9
 800726a:	b29b      	uxth	r3, r3
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	3b01      	subs	r3, #1
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	3b01      	subs	r3, #1
 8007282:	061b      	lsls	r3, r3, #24
 8007284:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007288:	4931      	ldr	r1, [pc, #196]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 800728a:	4313      	orrs	r3, r2
 800728c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800728e:	4b30      	ldr	r3, [pc, #192]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	492d      	ldr	r1, [pc, #180]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 800729c:	4313      	orrs	r3, r2
 800729e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	4928      	ldr	r1, [pc, #160]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072b2:	4b27      	ldr	r3, [pc, #156]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	4a26      	ldr	r2, [pc, #152]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072be:	4b24      	ldr	r3, [pc, #144]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c2:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <RCCEx_PLL3_Config+0x160>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	69d2      	ldr	r2, [r2, #28]
 80072ca:	00d2      	lsls	r2, r2, #3
 80072cc:	4920      	ldr	r1, [pc, #128]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	4a19      	ldr	r2, [pc, #100]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072f0:	e00f      	b.n	8007312 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d106      	bne.n	8007306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072f8:	4b15      	ldr	r3, [pc, #84]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	4a14      	ldr	r2, [pc, #80]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 80072fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007304:	e005      	b.n	8007312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007306:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	4a11      	ldr	r2, [pc, #68]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 800730c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007310:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007312:	4b0f      	ldr	r3, [pc, #60]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a0e      	ldr	r2, [pc, #56]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800731c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731e:	f7fa f96f 	bl	8001600 <HAL_GetTick>
 8007322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007324:	e008      	b.n	8007338 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007326:	f7fa f96b 	bl	8001600 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e006      	b.n	8007346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <RCCEx_PLL3_Config+0x15c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	58024400 	.word	0x58024400
 8007354:	ffff0007 	.word	0xffff0007

08007358 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d071      	beq.n	800744e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7f9 fdc8 	bl	8000f14 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	d050      	beq.n	800743c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	22ca      	movs	r2, #202	@ 0xca
 80073a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2253      	movs	r2, #83	@ 0x53
 80073a8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fb78 	bl	8007aa0 <RTC_EnterInitMode>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d124      	bne.n	8007404 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6899      	ldr	r1, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <HAL_RTC_Init+0x100>)
 80073c6:	400b      	ands	r3, r1
 80073c8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6899      	ldr	r1, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	0419      	lsls	r1, r3, #16
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fb84 	bl	8007b08 <RTC_ExitInitMode>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d113      	bne.n	8007432 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0203 	bic.w	r2, r2, #3
 8007418:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	22ff      	movs	r2, #255	@ 0xff
 8007438:	625a      	str	r2, [r3, #36]	@ 0x24
 800743a:	e001      	b.n	8007440 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	ff8fffbf 	.word	0xff8fffbf

0800745c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_RTC_SetTime+0x1a>
 8007472:	2302      	movs	r3, #2
 8007474:	e089      	b.n	800758a <HAL_RTC_SetTime+0x12e>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	22ca      	movs	r2, #202	@ 0xca
 800748c:	625a      	str	r2, [r3, #36]	@ 0x24
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2253      	movs	r2, #83	@ 0x53
 8007494:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fb02 	bl	8007aa0 <RTC_EnterInitMode>
 800749c:	4603      	mov	r3, r0
 800749e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80074a0:	7cfb      	ldrb	r3, [r7, #19]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d161      	bne.n	800756a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d126      	bne.n	80074fa <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fb5d 	bl	8007b84 <RTC_ByteToBcd2>
 80074ca:	4603      	mov	r3, r0
 80074cc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fb56 	bl	8007b84 <RTC_ByteToBcd2>
 80074d8:	4603      	mov	r3, r0
 80074da:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074dc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	789b      	ldrb	r3, [r3, #2]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fb4e 	bl	8007b84 <RTC_ByteToBcd2>
 80074e8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80074ea:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	78db      	ldrb	r3, [r3, #3]
 80074f2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e018      	b.n	800752c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800751a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007520:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	78db      	ldrb	r3, [r3, #3]
 8007526:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <HAL_RTC_SetTime+0x138>)
 8007534:	400b      	ands	r3, r1
 8007536:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007546:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6899      	ldr	r1, [r3, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	431a      	orrs	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fad1 	bl	8007b08 <RTC_ExitInitMode>
 8007566:	4603      	mov	r3, r0
 8007568:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	22ff      	movs	r2, #255	@ 0xff
 8007570:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007588:	7cfb      	ldrb	r3, [r7, #19]
}
 800758a:	4618      	mov	r0, r3
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	bd90      	pop	{r4, r7, pc}
 8007592:	bf00      	nop
 8007594:	007f7f7f 	.word	0x007f7f7f

08007598 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b22      	ldr	r3, [pc, #136]	@ (800764c <HAL_RTC_GetTime+0xb4>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	0d9b      	lsrs	r3, r3, #22
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	b2da      	uxtb	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d11a      	bne.n	8007642 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fad7 	bl	8007bc4 <RTC_Bcd2ToByte>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 face 	bl	8007bc4 <RTC_Bcd2ToByte>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	789b      	ldrb	r3, [r3, #2]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fac5 	bl	8007bc4 <RTC_Bcd2ToByte>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	007f7f7f 	.word	0x007f7f7f

08007650 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_RTC_SetDate+0x1a>
 8007666:	2302      	movs	r3, #2
 8007668:	e073      	b.n	8007752 <HAL_RTC_SetDate+0x102>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10e      	bne.n	800769e <HAL_RTC_SetDate+0x4e>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	f023 0310 	bic.w	r3, r3, #16
 8007694:	b2db      	uxtb	r3, r3
 8007696:	330a      	adds	r3, #10
 8007698:	b2da      	uxtb	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11c      	bne.n	80076de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fa6b 	bl	8007b84 <RTC_ByteToBcd2>
 80076ae:	4603      	mov	r3, r0
 80076b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fa64 	bl	8007b84 <RTC_ByteToBcd2>
 80076bc:	4603      	mov	r3, r0
 80076be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	789b      	ldrb	r3, [r3, #2]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fa5c 	bl	8007b84 <RTC_ByteToBcd2>
 80076cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80076ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e00e      	b.n	80076fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80076ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80076f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	22ca      	movs	r2, #202	@ 0xca
 8007702:	625a      	str	r2, [r3, #36]	@ 0x24
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2253      	movs	r2, #83	@ 0x53
 800770a:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f9c7 	bl	8007aa0 <RTC_EnterInitMode>
 8007712:	4603      	mov	r3, r0
 8007714:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007716:	7cfb      	ldrb	r3, [r7, #19]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	6979      	ldr	r1, [r7, #20]
 8007722:	4b0e      	ldr	r3, [pc, #56]	@ (800775c <HAL_RTC_SetDate+0x10c>)
 8007724:	400b      	ands	r3, r1
 8007726:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f9ed 	bl	8007b08 <RTC_ExitInitMode>
 800772e:	4603      	mov	r3, r0
 8007730:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	22ff      	movs	r2, #255	@ 0xff
 8007738:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800773a:	7cfb      	ldrb	r3, [r7, #19]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007750:	7cfb      	ldrb	r3, [r7, #19]


}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd90      	pop	{r4, r7, pc}
 800775a:	bf00      	nop
 800775c:	00ffff3f 	.word	0x00ffff3f

08007760 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	4b21      	ldr	r3, [pc, #132]	@ (80077f8 <HAL_RTC_GetDate+0x98>)
 8007774:	4013      	ands	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	0c1b      	lsrs	r3, r3, #16
 800777c:	b2da      	uxtb	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	0b5b      	lsrs	r3, r3, #13
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d11a      	bne.n	80077ec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	78db      	ldrb	r3, [r3, #3]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa02 	bl	8007bc4 <RTC_Bcd2ToByte>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 f9f9 	bl	8007bc4 <RTC_Bcd2ToByte>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	789b      	ldrb	r3, [r3, #2]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f9f0 	bl	8007bc4 <RTC_Bcd2ToByte>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	00ffff3f 	.word	0x00ffff3f

080077fc <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b089      	sub	sp, #36	@ 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_RTC_SetAlarm+0x1a>
 8007812:	2302      	movs	r3, #2
 8007814:	e11b      	b.n	8007a4e <HAL_RTC_SetAlarm+0x252>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d137      	bne.n	800789c <HAL_RTC_SetAlarm+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f99d 	bl	8007b84 <RTC_ByteToBcd2>
 800784a:	4603      	mov	r3, r0
 800784c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f996 	bl	8007b84 <RTC_ByteToBcd2>
 8007858:	4603      	mov	r3, r0
 800785a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800785c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	789b      	ldrb	r3, [r3, #2]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f98e 	bl	8007b84 <RTC_ByteToBcd2>
 8007868:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800786a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	78db      	ldrb	r3, [r3, #3]
 8007872:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007874:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f980 	bl	8007b84 <RTC_ByteToBcd2>
 8007884:	4603      	mov	r3, r0
 8007886:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007888:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007890:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007896:	4313      	orrs	r3, r2
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e023      	b.n	80078e4 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80078bc:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80078c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 80078ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 80078d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 80078da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	22ca      	movs	r2, #202	@ 0xca
 80078f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2253      	movs	r2, #83	@ 0x53
 80078fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007908:	d14a      	bne.n	80079a0 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007918:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800792a:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800793a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800793c:	f7f9 fe60 	bl	8001600 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007942:	e015      	b.n	8007970 <HAL_RTC_SetAlarm+0x174>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007944:	f7f9 fe5c 	bl	8001600 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007952:	d90d      	bls.n	8007970 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	22ff      	movs	r2, #255	@ 0xff
 800795a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2203      	movs	r2, #3
 8007960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e06e      	b.n	8007a4e <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0e2      	beq.n	8007944 <HAL_RTC_SetAlarm+0x148>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	e049      	b.n	8007a34 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079ae:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80079c0:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079d0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80079d2:	f7f9 fe15 	bl	8001600 <HAL_GetTick>
 80079d6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80079d8:	e015      	b.n	8007a06 <HAL_RTC_SetAlarm+0x20a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079da:	f7f9 fe11 	bl	8001600 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079e8:	d90d      	bls.n	8007a06 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	22ff      	movs	r2, #255	@ 0xff
 80079f0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2203      	movs	r2, #3
 80079f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e023      	b.n	8007a4e <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0e2      	beq.n	80079da <HAL_RTC_SetAlarm+0x1de>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	22ff      	movs	r2, #255	@ 0xff
 8007a3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3724      	adds	r7, #36	@ 0x24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd90      	pop	{r4, r7, pc}
	...

08007a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0d      	ldr	r2, [pc, #52]	@ (8007a9c <HAL_RTC_WaitForSynchro+0x44>)
 8007a66:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007a68:	f7f9 fdca 	bl	8001600 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a6e:	e009      	b.n	8007a84 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a70:	f7f9 fdc6 	bl	8001600 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a7e:	d901      	bls.n	8007a84 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e007      	b.n	8007a94 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0ee      	beq.n	8007a70 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	0003ff5f 	.word	0x0003ff5f

08007aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d120      	bne.n	8007afc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ac4:	f7f9 fd9c 	bl	8001600 <HAL_GetTick>
 8007ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007aca:	e00d      	b.n	8007ae8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007acc:	f7f9 fd98 	bl	8001600 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ada:	d905      	bls.n	8007ae8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <RTC_EnterInitMode+0x5c>
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d1e7      	bne.n	8007acc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4a19      	ldr	r2, [pc, #100]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b1e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b20:	4b17      	ldr	r3, [pc, #92]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10c      	bne.n	8007b46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff93 	bl	8007a58 <HAL_RTC_WaitForSynchro>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e017      	b.n	8007b76 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b46:	4b0e      	ldr	r3, [pc, #56]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b4c:	f023 0320 	bic.w	r3, r3, #32
 8007b50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff80 	bl	8007a58 <HAL_RTC_WaitForSynchro>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2203      	movs	r2, #3
 8007b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b6a:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	4a04      	ldr	r2, [pc, #16]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b70:	f043 0320 	orr.w	r3, r3, #32
 8007b74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	58004000 	.word	0x58004000

08007b84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007b96:	e005      	b.n	8007ba4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	3b0a      	subs	r3, #10
 8007ba2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d8f6      	bhi.n	8007b98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b2db      	uxtb	r3, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	4413      	add	r3, r2
 8007bea:	b2db      	uxtb	r3, r3
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3350      	adds	r3, #80	@ 0x50
 8007c0a:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4413      	add	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3350      	adds	r3, #80	@ 0x50
 8007c38:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e042      	b.n	8007cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7f9 fb6d 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2224      	movs	r2, #36	@ 0x24
 8007c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fbdc 	bl	800945c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd6d 	bl	8008784 <UART_SetConfig>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e01b      	b.n	8007cec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fc5b 	bl	80095a0 <UART_CheckIdleState>
 8007cea:	4603      	mov	r3, r0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	@ 0x28
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d17b      	bne.n	8007e06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_UART_Transmit+0x26>
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e074      	b.n	8007e08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2221      	movs	r2, #33	@ 0x21
 8007d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2e:	f7f9 fc67 	bl	8001600 <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	88fa      	ldrh	r2, [r7, #6]
 8007d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4c:	d108      	bne.n	8007d60 <HAL_UART_Transmit+0x6c>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	e003      	b.n	8007d68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d68:	e030      	b.n	8007dcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2180      	movs	r1, #128	@ 0x80
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 fcbd 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e03d      	b.n	8007e08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007da0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	3302      	adds	r3, #2
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	e007      	b.n	8007dba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	3301      	adds	r3, #1
 8007db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1c8      	bne.n	8007d6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2200      	movs	r2, #0
 8007de0:	2140      	movs	r1, #64	@ 0x40
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f001 fc86 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e006      	b.n	8007e08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e000      	b.n	8007e08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
  }
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b091      	sub	sp, #68	@ 0x44
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d178      	bne.n	8007f1a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_UART_Transmit_IT+0x24>
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e071      	b.n	8007f1c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2221      	movs	r2, #33	@ 0x21
 8007e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6c:	d12a      	bne.n	8007ec4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e76:	d107      	bne.n	8007e88 <HAL_UART_Transmit_IT+0x78>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a29      	ldr	r2, [pc, #164]	@ (8007f28 <HAL_UART_Transmit_IT+0x118>)
 8007e84:	679a      	str	r2, [r3, #120]	@ 0x78
 8007e86:	e002      	b.n	8007e8e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a28      	ldr	r2, [pc, #160]	@ (8007f2c <HAL_UART_Transmit_IT+0x11c>)
 8007e8c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eae:	637a      	str	r2, [r7, #52]	@ 0x34
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <HAL_UART_Transmit_IT+0x7e>
 8007ec2:	e028      	b.n	8007f16 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ecc:	d107      	bne.n	8007ede <HAL_UART_Transmit_IT+0xce>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	@ (8007f30 <HAL_UART_Transmit_IT+0x120>)
 8007eda:	679a      	str	r2, [r3, #120]	@ 0x78
 8007edc:	e002      	b.n	8007ee4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4a14      	ldr	r2, [pc, #80]	@ (8007f34 <HAL_UART_Transmit_IT+0x124>)
 8007ee2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	69f9      	ldr	r1, [r7, #28]
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e6      	bne.n	8007ee4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3744      	adds	r7, #68	@ 0x44
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	08009ed9 	.word	0x08009ed9
 8007f2c:	08009df9 	.word	0x08009df9
 8007f30:	08009d37 	.word	0x08009d37
 8007f34:	08009c7f 	.word	0x08009c7f

08007f38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	@ 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d137      	bne.n	8007fc0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_UART_Receive_DMA+0x24>
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e030      	b.n	8007fc2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a18      	ldr	r2, [pc, #96]	@ (8007fcc <HAL_UART_Receive_DMA+0x94>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d01f      	beq.n	8007fb0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d018      	beq.n	8007fb0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	623b      	str	r3, [r7, #32]
 8007f9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	69f9      	ldr	r1, [r7, #28]
 8007fa2:	6a3a      	ldr	r2, [r7, #32]
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e6      	bne.n	8007f7e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f001 fc0a 	bl	80097d0 <UART_Start_Receive_DMA>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3728      	adds	r7, #40	@ 0x28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	58000c00 	.word	0x58000c00

08007fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ffa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ffe:	4013      	ands	r3, r2
 8008000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11b      	bne.n	8008044 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800800c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d015      	beq.n	8008044 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d105      	bne.n	8008030 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8377 	beq.w	8008728 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
      }
      return;
 8008042:	e371      	b.n	8008728 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8123 	beq.w	8008294 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800804e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008052:	4b8d      	ldr	r3, [pc, #564]	@ (8008288 <HAL_UART_IRQHandler+0x2b8>)
 8008054:	4013      	ands	r3, r2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800805a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800805e:	4b8b      	ldr	r3, [pc, #556]	@ (800828c <HAL_UART_IRQHandler+0x2bc>)
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8116 	beq.w	8008294 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d011      	beq.n	8008098 <HAL_UART_IRQHandler+0xc8>
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	f043 0201 	orr.w	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d011      	beq.n	80080c8 <HAL_UART_IRQHandler+0xf8>
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2202      	movs	r2, #2
 80080b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080be:	f043 0204 	orr.w	r2, r3, #4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d011      	beq.n	80080f8 <HAL_UART_IRQHandler+0x128>
 80080d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2204      	movs	r2, #4
 80080e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ee:	f043 0202 	orr.w	r2, r3, #2
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d017      	beq.n	8008134 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008110:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008114:	4b5c      	ldr	r3, [pc, #368]	@ (8008288 <HAL_UART_IRQHandler+0x2b8>)
 8008116:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2208      	movs	r2, #8
 8008122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812a:	f043 0208 	orr.w	r2, r3, #8
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800813c:	2b00      	cmp	r3, #0
 800813e:	d012      	beq.n	8008166 <HAL_UART_IRQHandler+0x196>
 8008140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 82dd 	beq.w	800872c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d013      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800817e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800818a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800818e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b40      	cmp	r3, #64	@ 0x40
 80081bc:	d005      	beq.n	80081ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d054      	beq.n	8008274 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fbe8 	bl	80099a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081da:	2b40      	cmp	r3, #64	@ 0x40
 80081dc:	d146      	bne.n	800826c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800820a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800820e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1d9      	bne.n	80081de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008230:	2b00      	cmp	r3, #0
 8008232:	d017      	beq.n	8008264 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800823a:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <HAL_UART_IRQHandler+0x2c0>)
 800823c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008244:	4618      	mov	r0, r3
 8008246:	f7fa fbd7 	bl	80029f8 <HAL_DMA_Abort_IT>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d019      	beq.n	8008284 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800825e:	4610      	mov	r0, r2
 8008260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008262:	e00f      	b.n	8008284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa77 	bl	8008758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826a:	e00b      	b.n	8008284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa73 	bl	8008758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008272:	e007      	b.n	8008284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa6f 	bl	8008758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008282:	e253      	b.n	800872c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	bf00      	nop
    return;
 8008286:	e251      	b.n	800872c <HAL_UART_IRQHandler+0x75c>
 8008288:	10000001 	.word	0x10000001
 800828c:	04000120 	.word	0x04000120
 8008290:	08009c53 	.word	0x08009c53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008298:	2b01      	cmp	r3, #1
 800829a:	f040 81e7 	bne.w	800866c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 81e0 	beq.w	800866c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 81d9 	beq.w	800866c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2210      	movs	r2, #16
 80082c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082cc:	2b40      	cmp	r3, #64	@ 0x40
 80082ce:	f040 8151 	bne.w	8008574 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a96      	ldr	r2, [pc, #600]	@ (8008534 <HAL_UART_IRQHandler+0x564>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d068      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a93      	ldr	r2, [pc, #588]	@ (8008538 <HAL_UART_IRQHandler+0x568>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d061      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a91      	ldr	r2, [pc, #580]	@ (800853c <HAL_UART_IRQHandler+0x56c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d05a      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a8e      	ldr	r2, [pc, #568]	@ (8008540 <HAL_UART_IRQHandler+0x570>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d053      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a8c      	ldr	r2, [pc, #560]	@ (8008544 <HAL_UART_IRQHandler+0x574>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d04c      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a89      	ldr	r2, [pc, #548]	@ (8008548 <HAL_UART_IRQHandler+0x578>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d045      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a87      	ldr	r2, [pc, #540]	@ (800854c <HAL_UART_IRQHandler+0x57c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d03e      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a84      	ldr	r2, [pc, #528]	@ (8008550 <HAL_UART_IRQHandler+0x580>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d037      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a82      	ldr	r2, [pc, #520]	@ (8008554 <HAL_UART_IRQHandler+0x584>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d030      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a7f      	ldr	r2, [pc, #508]	@ (8008558 <HAL_UART_IRQHandler+0x588>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d029      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a7d      	ldr	r2, [pc, #500]	@ (800855c <HAL_UART_IRQHandler+0x58c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a7a      	ldr	r2, [pc, #488]	@ (8008560 <HAL_UART_IRQHandler+0x590>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01b      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a78      	ldr	r2, [pc, #480]	@ (8008564 <HAL_UART_IRQHandler+0x594>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d014      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a75      	ldr	r2, [pc, #468]	@ (8008568 <HAL_UART_IRQHandler+0x598>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00d      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a73      	ldr	r2, [pc, #460]	@ (800856c <HAL_UART_IRQHandler+0x59c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d006      	beq.n	80083b2 <HAL_UART_IRQHandler+0x3e2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a70      	ldr	r2, [pc, #448]	@ (8008570 <HAL_UART_IRQHandler+0x5a0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d106      	bne.n	80083c0 <HAL_UART_IRQHandler+0x3f0>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	e005      	b.n	80083cc <HAL_UART_IRQHandler+0x3fc>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 81ab 	beq.w	8008730 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f080 81a3 	bcs.w	8008730 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008400:	f000 8087 	beq.w	8008512 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800841c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008432:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800843a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1da      	bne.n	8008404 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800845e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008472:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800847a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e1      	bne.n	800844e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800849a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800849c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e3      	bne.n	800848a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e0:	f023 0310 	bic.w	r3, r3, #16
 80084e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800850c:	4618      	mov	r0, r3
 800850e:	f7f9 ff55 	bl	80023bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008524:	b29b      	uxth	r3, r3
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	b29b      	uxth	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f91d 	bl	800876c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008532:	e0fd      	b.n	8008730 <HAL_UART_IRQHandler+0x760>
 8008534:	40020010 	.word	0x40020010
 8008538:	40020028 	.word	0x40020028
 800853c:	40020040 	.word	0x40020040
 8008540:	40020058 	.word	0x40020058
 8008544:	40020070 	.word	0x40020070
 8008548:	40020088 	.word	0x40020088
 800854c:	400200a0 	.word	0x400200a0
 8008550:	400200b8 	.word	0x400200b8
 8008554:	40020410 	.word	0x40020410
 8008558:	40020428 	.word	0x40020428
 800855c:	40020440 	.word	0x40020440
 8008560:	40020458 	.word	0x40020458
 8008564:	40020470 	.word	0x40020470
 8008568:	40020488 	.word	0x40020488
 800856c:	400204a0 	.word	0x400204a0
 8008570:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008580:	b29b      	uxth	r3, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 80cf 	beq.w	8008734 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80ca 	beq.w	8008734 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e4      	bne.n	80085a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3308      	adds	r3, #8
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	623b      	str	r3, [r7, #32]
   return(result);
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	4b55      	ldr	r3, [pc, #340]	@ (8008740 <HAL_UART_IRQHandler+0x770>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3308      	adds	r3, #8
 80085f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80085fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e3      	bne.n	80085d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0310 	bic.w	r3, r3, #16
 8008636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	617b      	str	r3, [r7, #20]
   return(result);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800865e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f881 	bl	800876c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800866a:	e063      	b.n	8008734 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00e      	beq.n	8008696 <HAL_UART_IRQHandler+0x6c6>
 8008678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800867c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800868c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fcc2 	bl	800a018 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008694:	e051      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d014      	beq.n	80086cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d008      	beq.n	80086cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d03a      	beq.n	8008738 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
    }
    return;
 80086ca:	e035      	b.n	8008738 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <HAL_UART_IRQHandler+0x71c>
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fc6c 	bl	8009fc2 <UART_EndTransmit_IT>
    return;
 80086ea:	e026      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d009      	beq.n	800870c <HAL_UART_IRQHandler+0x73c>
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 fc9b 	bl	800a040 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800870a:	e016      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800870c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d010      	beq.n	800873a <HAL_UART_IRQHandler+0x76a>
 8008718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871c:	2b00      	cmp	r3, #0
 800871e:	da0c      	bge.n	800873a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fc83 	bl	800a02c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008726:	e008      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
      return;
 8008728:	bf00      	nop
 800872a:	e006      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
    return;
 800872c:	bf00      	nop
 800872e:	e004      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
      return;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
      return;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_UART_IRQHandler+0x76a>
    return;
 8008738:	bf00      	nop
  }
}
 800873a:	37e8      	adds	r7, #232	@ 0xe8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	effffffe 	.word	0xeffffffe

08008744 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008788:	b092      	sub	sp, #72	@ 0x48
 800878a:	af00      	add	r7, sp, #0
 800878c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	431a      	orrs	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4bbe      	ldr	r3, [pc, #760]	@ (8008aac <UART_SetConfig+0x328>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087bc:	430b      	orrs	r3, r1
 80087be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4ab3      	ldr	r2, [pc, #716]	@ (8008ab0 <UART_SetConfig+0x32c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ec:	4313      	orrs	r3, r2
 80087ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	4baf      	ldr	r3, [pc, #700]	@ (8008ab4 <UART_SetConfig+0x330>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008800:	430b      	orrs	r3, r1
 8008802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	f023 010f 	bic.w	r1, r3, #15
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4aa6      	ldr	r2, [pc, #664]	@ (8008ab8 <UART_SetConfig+0x334>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d177      	bne.n	8008914 <UART_SetConfig+0x190>
 8008824:	4ba5      	ldr	r3, [pc, #660]	@ (8008abc <UART_SetConfig+0x338>)
 8008826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800882c:	2b28      	cmp	r3, #40	@ 0x28
 800882e:	d86d      	bhi.n	800890c <UART_SetConfig+0x188>
 8008830:	a201      	add	r2, pc, #4	@ (adr r2, 8008838 <UART_SetConfig+0xb4>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	080088dd 	.word	0x080088dd
 800883c:	0800890d 	.word	0x0800890d
 8008840:	0800890d 	.word	0x0800890d
 8008844:	0800890d 	.word	0x0800890d
 8008848:	0800890d 	.word	0x0800890d
 800884c:	0800890d 	.word	0x0800890d
 8008850:	0800890d 	.word	0x0800890d
 8008854:	0800890d 	.word	0x0800890d
 8008858:	080088e5 	.word	0x080088e5
 800885c:	0800890d 	.word	0x0800890d
 8008860:	0800890d 	.word	0x0800890d
 8008864:	0800890d 	.word	0x0800890d
 8008868:	0800890d 	.word	0x0800890d
 800886c:	0800890d 	.word	0x0800890d
 8008870:	0800890d 	.word	0x0800890d
 8008874:	0800890d 	.word	0x0800890d
 8008878:	080088ed 	.word	0x080088ed
 800887c:	0800890d 	.word	0x0800890d
 8008880:	0800890d 	.word	0x0800890d
 8008884:	0800890d 	.word	0x0800890d
 8008888:	0800890d 	.word	0x0800890d
 800888c:	0800890d 	.word	0x0800890d
 8008890:	0800890d 	.word	0x0800890d
 8008894:	0800890d 	.word	0x0800890d
 8008898:	080088f5 	.word	0x080088f5
 800889c:	0800890d 	.word	0x0800890d
 80088a0:	0800890d 	.word	0x0800890d
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	0800890d 	.word	0x0800890d
 80088ac:	0800890d 	.word	0x0800890d
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	0800890d 	.word	0x0800890d
 80088b8:	080088fd 	.word	0x080088fd
 80088bc:	0800890d 	.word	0x0800890d
 80088c0:	0800890d 	.word	0x0800890d
 80088c4:	0800890d 	.word	0x0800890d
 80088c8:	0800890d 	.word	0x0800890d
 80088cc:	0800890d 	.word	0x0800890d
 80088d0:	0800890d 	.word	0x0800890d
 80088d4:	0800890d 	.word	0x0800890d
 80088d8:	08008905 	.word	0x08008905
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e326      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e322      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e31e      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e31a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e316      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008904:	2340      	movs	r3, #64	@ 0x40
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e312      	b.n	8008f32 <UART_SetConfig+0x7ae>
 800890c:	2380      	movs	r3, #128	@ 0x80
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e30e      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a69      	ldr	r2, [pc, #420]	@ (8008ac0 <UART_SetConfig+0x33c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d130      	bne.n	8008980 <UART_SetConfig+0x1fc>
 800891e:	4b67      	ldr	r3, [pc, #412]	@ (8008abc <UART_SetConfig+0x338>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b05      	cmp	r3, #5
 8008928:	d826      	bhi.n	8008978 <UART_SetConfig+0x1f4>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <UART_SetConfig+0x1ac>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008949 	.word	0x08008949
 8008934:	08008951 	.word	0x08008951
 8008938:	08008959 	.word	0x08008959
 800893c:	08008961 	.word	0x08008961
 8008940:	08008969 	.word	0x08008969
 8008944:	08008971 	.word	0x08008971
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e2f0      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008950:	2304      	movs	r3, #4
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e2ec      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008958:	2308      	movs	r3, #8
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e2e8      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e2e4      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008968:	2320      	movs	r3, #32
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e2e0      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008970:	2340      	movs	r3, #64	@ 0x40
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e2dc      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008978:	2380      	movs	r3, #128	@ 0x80
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e2d8      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a4f      	ldr	r2, [pc, #316]	@ (8008ac4 <UART_SetConfig+0x340>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d130      	bne.n	80089ec <UART_SetConfig+0x268>
 800898a:	4b4c      	ldr	r3, [pc, #304]	@ (8008abc <UART_SetConfig+0x338>)
 800898c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b05      	cmp	r3, #5
 8008994:	d826      	bhi.n	80089e4 <UART_SetConfig+0x260>
 8008996:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <UART_SetConfig+0x218>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089b5 	.word	0x080089b5
 80089a0:	080089bd 	.word	0x080089bd
 80089a4:	080089c5 	.word	0x080089c5
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	2300      	movs	r3, #0
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e2ba      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089bc:	2304      	movs	r3, #4
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e2b6      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089c4:	2308      	movs	r3, #8
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e2b2      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e2ae      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089d4:	2320      	movs	r3, #32
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e2aa      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089dc:	2340      	movs	r3, #64	@ 0x40
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e2a6      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089e4:	2380      	movs	r3, #128	@ 0x80
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e2a2      	b.n	8008f32 <UART_SetConfig+0x7ae>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a35      	ldr	r2, [pc, #212]	@ (8008ac8 <UART_SetConfig+0x344>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d130      	bne.n	8008a58 <UART_SetConfig+0x2d4>
 80089f6:	4b31      	ldr	r3, [pc, #196]	@ (8008abc <UART_SetConfig+0x338>)
 80089f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	d826      	bhi.n	8008a50 <UART_SetConfig+0x2cc>
 8008a02:	a201      	add	r2, pc, #4	@ (adr r2, 8008a08 <UART_SetConfig+0x284>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a21 	.word	0x08008a21
 8008a0c:	08008a29 	.word	0x08008a29
 8008a10:	08008a31 	.word	0x08008a31
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a49 	.word	0x08008a49
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e284      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e280      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e27c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e278      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a40:	2320      	movs	r3, #32
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e274      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a48:	2340      	movs	r3, #64	@ 0x40
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e270      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a50:	2380      	movs	r3, #128	@ 0x80
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e26c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008acc <UART_SetConfig+0x348>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d142      	bne.n	8008ae8 <UART_SetConfig+0x364>
 8008a62:	4b16      	ldr	r3, [pc, #88]	@ (8008abc <UART_SetConfig+0x338>)
 8008a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	d838      	bhi.n	8008ae0 <UART_SetConfig+0x35c>
 8008a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <UART_SetConfig+0x2f0>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008a8d 	.word	0x08008a8d
 8008a78:	08008a95 	.word	0x08008a95
 8008a7c:	08008a9d 	.word	0x08008a9d
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a92:	e24e      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a94:	2304      	movs	r3, #4
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e24a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e246      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e242      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008aac:	cfff69f3 	.word	0xcfff69f3
 8008ab0:	58000c00 	.word	0x58000c00
 8008ab4:	11fff4ff 	.word	0x11fff4ff
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	40004400 	.word	0x40004400
 8008ac4:	40004800 	.word	0x40004800
 8008ac8:	40004c00 	.word	0x40004c00
 8008acc:	40005000 	.word	0x40005000
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad6:	e22c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ad8:	2340      	movs	r3, #64	@ 0x40
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ade:	e228      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ae0:	2380      	movs	r3, #128	@ 0x80
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae6:	e224      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4ab1      	ldr	r2, [pc, #708]	@ (8008db4 <UART_SetConfig+0x630>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d176      	bne.n	8008be0 <UART_SetConfig+0x45c>
 8008af2:	4bb1      	ldr	r3, [pc, #708]	@ (8008db8 <UART_SetConfig+0x634>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008afa:	2b28      	cmp	r3, #40	@ 0x28
 8008afc:	d86c      	bhi.n	8008bd8 <UART_SetConfig+0x454>
 8008afe:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <UART_SetConfig+0x380>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008ba9 	.word	0x08008ba9
 8008b08:	08008bd9 	.word	0x08008bd9
 8008b0c:	08008bd9 	.word	0x08008bd9
 8008b10:	08008bd9 	.word	0x08008bd9
 8008b14:	08008bd9 	.word	0x08008bd9
 8008b18:	08008bd9 	.word	0x08008bd9
 8008b1c:	08008bd9 	.word	0x08008bd9
 8008b20:	08008bd9 	.word	0x08008bd9
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bd9 	.word	0x08008bd9
 8008b2c:	08008bd9 	.word	0x08008bd9
 8008b30:	08008bd9 	.word	0x08008bd9
 8008b34:	08008bd9 	.word	0x08008bd9
 8008b38:	08008bd9 	.word	0x08008bd9
 8008b3c:	08008bd9 	.word	0x08008bd9
 8008b40:	08008bd9 	.word	0x08008bd9
 8008b44:	08008bb9 	.word	0x08008bb9
 8008b48:	08008bd9 	.word	0x08008bd9
 8008b4c:	08008bd9 	.word	0x08008bd9
 8008b50:	08008bd9 	.word	0x08008bd9
 8008b54:	08008bd9 	.word	0x08008bd9
 8008b58:	08008bd9 	.word	0x08008bd9
 8008b5c:	08008bd9 	.word	0x08008bd9
 8008b60:	08008bd9 	.word	0x08008bd9
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bd9 	.word	0x08008bd9
 8008b6c:	08008bd9 	.word	0x08008bd9
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008bd9 	.word	0x08008bd9
 8008b78:	08008bd9 	.word	0x08008bd9
 8008b7c:	08008bd9 	.word	0x08008bd9
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bc9 	.word	0x08008bc9
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	08008bd9 	.word	0x08008bd9
 8008b90:	08008bd9 	.word	0x08008bd9
 8008b94:	08008bd9 	.word	0x08008bd9
 8008b98:	08008bd9 	.word	0x08008bd9
 8008b9c:	08008bd9 	.word	0x08008bd9
 8008ba0:	08008bd9 	.word	0x08008bd9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e1c0      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e1bc      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e1b8      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e1b4      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e1b0      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bd0:	2340      	movs	r3, #64	@ 0x40
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e1ac      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008bd8:	2380      	movs	r3, #128	@ 0x80
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e1a8      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a75      	ldr	r2, [pc, #468]	@ (8008dbc <UART_SetConfig+0x638>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d130      	bne.n	8008c4c <UART_SetConfig+0x4c8>
 8008bea:	4b73      	ldr	r3, [pc, #460]	@ (8008db8 <UART_SetConfig+0x634>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d826      	bhi.n	8008c44 <UART_SetConfig+0x4c0>
 8008bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <UART_SetConfig+0x478>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e18a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e186      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e182      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e17e      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e17a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c3c:	2340      	movs	r3, #64	@ 0x40
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e176      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c44:	2380      	movs	r3, #128	@ 0x80
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e172      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a5b      	ldr	r2, [pc, #364]	@ (8008dc0 <UART_SetConfig+0x63c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x534>
 8008c56:	4b58      	ldr	r3, [pc, #352]	@ (8008db8 <UART_SetConfig+0x634>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x52c>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <UART_SetConfig+0x4e4>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e154      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e150      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e14c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e148      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e144      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ca8:	2340      	movs	r3, #64	@ 0x40
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e140      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008cb0:	2380      	movs	r3, #128	@ 0x80
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e13c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a41      	ldr	r2, [pc, #260]	@ (8008dc4 <UART_SetConfig+0x640>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f040 8082 	bne.w	8008dc8 <UART_SetConfig+0x644>
 8008cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8008db8 <UART_SetConfig+0x634>)
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ccc:	2b28      	cmp	r3, #40	@ 0x28
 8008cce:	d86d      	bhi.n	8008dac <UART_SetConfig+0x628>
 8008cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <UART_SetConfig+0x554>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d7d 	.word	0x08008d7d
 8008cdc:	08008dad 	.word	0x08008dad
 8008ce0:	08008dad 	.word	0x08008dad
 8008ce4:	08008dad 	.word	0x08008dad
 8008ce8:	08008dad 	.word	0x08008dad
 8008cec:	08008dad 	.word	0x08008dad
 8008cf0:	08008dad 	.word	0x08008dad
 8008cf4:	08008dad 	.word	0x08008dad
 8008cf8:	08008d85 	.word	0x08008d85
 8008cfc:	08008dad 	.word	0x08008dad
 8008d00:	08008dad 	.word	0x08008dad
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008dad 	.word	0x08008dad
 8008d0c:	08008dad 	.word	0x08008dad
 8008d10:	08008dad 	.word	0x08008dad
 8008d14:	08008dad 	.word	0x08008dad
 8008d18:	08008d8d 	.word	0x08008d8d
 8008d1c:	08008dad 	.word	0x08008dad
 8008d20:	08008dad 	.word	0x08008dad
 8008d24:	08008dad 	.word	0x08008dad
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008dad 	.word	0x08008dad
 8008d30:	08008dad 	.word	0x08008dad
 8008d34:	08008dad 	.word	0x08008dad
 8008d38:	08008d95 	.word	0x08008d95
 8008d3c:	08008dad 	.word	0x08008dad
 8008d40:	08008dad 	.word	0x08008dad
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008dad 	.word	0x08008dad
 8008d50:	08008dad 	.word	0x08008dad
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	08008d9d 	.word	0x08008d9d
 8008d5c:	08008dad 	.word	0x08008dad
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008dad 	.word	0x08008dad
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008dad 	.word	0x08008dad
 8008d74:	08008dad 	.word	0x08008dad
 8008d78:	08008da5 	.word	0x08008da5
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e0d6      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008d84:	2304      	movs	r3, #4
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e0d2      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008d8c:	2308      	movs	r3, #8
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e0ce      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008d94:	2310      	movs	r3, #16
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e0ca      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e0c6      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008da4:	2340      	movs	r3, #64	@ 0x40
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e0c2      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db2:	e0be      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008db4:	40011400 	.word	0x40011400
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	40007800 	.word	0x40007800
 8008dc0:	40007c00 	.word	0x40007c00
 8008dc4:	40011800 	.word	0x40011800
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4aad      	ldr	r2, [pc, #692]	@ (8009084 <UART_SetConfig+0x900>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d176      	bne.n	8008ec0 <UART_SetConfig+0x73c>
 8008dd2:	4bad      	ldr	r3, [pc, #692]	@ (8009088 <UART_SetConfig+0x904>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dda:	2b28      	cmp	r3, #40	@ 0x28
 8008ddc:	d86c      	bhi.n	8008eb8 <UART_SetConfig+0x734>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <UART_SetConfig+0x660>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e89 	.word	0x08008e89
 8008de8:	08008eb9 	.word	0x08008eb9
 8008dec:	08008eb9 	.word	0x08008eb9
 8008df0:	08008eb9 	.word	0x08008eb9
 8008df4:	08008eb9 	.word	0x08008eb9
 8008df8:	08008eb9 	.word	0x08008eb9
 8008dfc:	08008eb9 	.word	0x08008eb9
 8008e00:	08008eb9 	.word	0x08008eb9
 8008e04:	08008e91 	.word	0x08008e91
 8008e08:	08008eb9 	.word	0x08008eb9
 8008e0c:	08008eb9 	.word	0x08008eb9
 8008e10:	08008eb9 	.word	0x08008eb9
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008eb9 	.word	0x08008eb9
 8008e1c:	08008eb9 	.word	0x08008eb9
 8008e20:	08008eb9 	.word	0x08008eb9
 8008e24:	08008e99 	.word	0x08008e99
 8008e28:	08008eb9 	.word	0x08008eb9
 8008e2c:	08008eb9 	.word	0x08008eb9
 8008e30:	08008eb9 	.word	0x08008eb9
 8008e34:	08008eb9 	.word	0x08008eb9
 8008e38:	08008eb9 	.word	0x08008eb9
 8008e3c:	08008eb9 	.word	0x08008eb9
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008eb9 	.word	0x08008eb9
 8008e4c:	08008eb9 	.word	0x08008eb9
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008eb9 	.word	0x08008eb9
 8008e58:	08008eb9 	.word	0x08008eb9
 8008e5c:	08008eb9 	.word	0x08008eb9
 8008e60:	08008eb9 	.word	0x08008eb9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008eb9 	.word	0x08008eb9
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008eb9 	.word	0x08008eb9
 8008e78:	08008eb9 	.word	0x08008eb9
 8008e7c:	08008eb9 	.word	0x08008eb9
 8008e80:	08008eb9 	.word	0x08008eb9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e050      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e04c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e048      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e044      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e040      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008eb0:	2340      	movs	r3, #64	@ 0x40
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e03c      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e038      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a71      	ldr	r2, [pc, #452]	@ (800908c <UART_SetConfig+0x908>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d130      	bne.n	8008f2c <UART_SetConfig+0x7a8>
 8008eca:	4b6f      	ldr	r3, [pc, #444]	@ (8009088 <UART_SetConfig+0x904>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d826      	bhi.n	8008f24 <UART_SetConfig+0x7a0>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <UART_SetConfig+0x758>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008efd 	.word	0x08008efd
 8008ee4:	08008f05 	.word	0x08008f05
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e01a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e016      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e012      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e00e      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f14:	2320      	movs	r3, #32
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e00a      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e006      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f24:	2380      	movs	r3, #128	@ 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e002      	b.n	8008f32 <UART_SetConfig+0x7ae>
 8008f2c:	2380      	movs	r3, #128	@ 0x80
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a55      	ldr	r2, [pc, #340]	@ (800908c <UART_SetConfig+0x908>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	f040 80f8 	bne.w	800912e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	dc46      	bgt.n	8008fd4 <UART_SetConfig+0x850>
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	db75      	blt.n	8009036 <UART_SetConfig+0x8b2>
 8008f4a:	3b02      	subs	r3, #2
 8008f4c:	2b1e      	cmp	r3, #30
 8008f4e:	d872      	bhi.n	8009036 <UART_SetConfig+0x8b2>
 8008f50:	a201      	add	r2, pc, #4	@ (adr r2, 8008f58 <UART_SetConfig+0x7d4>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008fdb 	.word	0x08008fdb
 8008f5c:	08009037 	.word	0x08009037
 8008f60:	08008fe3 	.word	0x08008fe3
 8008f64:	08009037 	.word	0x08009037
 8008f68:	08009037 	.word	0x08009037
 8008f6c:	08009037 	.word	0x08009037
 8008f70:	08008ff3 	.word	0x08008ff3
 8008f74:	08009037 	.word	0x08009037
 8008f78:	08009037 	.word	0x08009037
 8008f7c:	08009037 	.word	0x08009037
 8008f80:	08009037 	.word	0x08009037
 8008f84:	08009037 	.word	0x08009037
 8008f88:	08009037 	.word	0x08009037
 8008f8c:	08009037 	.word	0x08009037
 8008f90:	08009003 	.word	0x08009003
 8008f94:	08009037 	.word	0x08009037
 8008f98:	08009037 	.word	0x08009037
 8008f9c:	08009037 	.word	0x08009037
 8008fa0:	08009037 	.word	0x08009037
 8008fa4:	08009037 	.word	0x08009037
 8008fa8:	08009037 	.word	0x08009037
 8008fac:	08009037 	.word	0x08009037
 8008fb0:	08009037 	.word	0x08009037
 8008fb4:	08009037 	.word	0x08009037
 8008fb8:	08009037 	.word	0x08009037
 8008fbc:	08009037 	.word	0x08009037
 8008fc0:	08009037 	.word	0x08009037
 8008fc4:	08009037 	.word	0x08009037
 8008fc8:	08009037 	.word	0x08009037
 8008fcc:	08009037 	.word	0x08009037
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d02a      	beq.n	800902e <UART_SetConfig+0x8aa>
 8008fd8:	e02d      	b.n	8009036 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fda:	f7fd fd9b 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fe0:	e02f      	b.n	8009042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fd fdaa 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff0:	e027      	b.n	8009042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff2:	f107 0318 	add.w	r3, r7, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fef6 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009000:	e01f      	b.n	8009042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009002:	4b21      	ldr	r3, [pc, #132]	@ (8009088 <UART_SetConfig+0x904>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800900e:	4b1e      	ldr	r3, [pc, #120]	@ (8009088 <UART_SetConfig+0x904>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	4a1d      	ldr	r2, [pc, #116]	@ (8009090 <UART_SetConfig+0x90c>)
 800901a:	fa22 f303 	lsr.w	r3, r2, r3
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009020:	e00f      	b.n	8009042 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009022:	4b1b      	ldr	r3, [pc, #108]	@ (8009090 <UART_SetConfig+0x90c>)
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009026:	e00c      	b.n	8009042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <UART_SetConfig+0x910>)
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902c:	e009      	b.n	8009042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	e005      	b.n	8009042 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 81ee 	beq.w	8009426 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904e:	4a12      	ldr	r2, [pc, #72]	@ (8009098 <UART_SetConfig+0x914>)
 8009050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009054:	461a      	mov	r2, r3
 8009056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009058:	fbb3 f3f2 	udiv	r3, r3, r2
 800905c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800906a:	429a      	cmp	r2, r3
 800906c:	d305      	bcc.n	800907a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009076:	429a      	cmp	r2, r3
 8009078:	d910      	bls.n	800909c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009080:	e1d1      	b.n	8009426 <UART_SetConfig+0xca2>
 8009082:	bf00      	nop
 8009084:	40011c00 	.word	0x40011c00
 8009088:	58024400 	.word	0x58024400
 800908c:	58000c00 	.word	0x58000c00
 8009090:	03d09000 	.word	0x03d09000
 8009094:	003d0900 	.word	0x003d0900
 8009098:	0800bccc 	.word	0x0800bccc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800909c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909e:	2200      	movs	r2, #0
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	60fa      	str	r2, [r7, #12]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	4ac0      	ldr	r2, [pc, #768]	@ (80093ac <UART_SetConfig+0xc28>)
 80090aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2200      	movs	r2, #0
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090be:	f7f7 f987 	bl	80003d0 <__aeabi_uldivmod>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	020b      	lsls	r3, r1, #8
 80090d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090d8:	0202      	lsls	r2, r0, #8
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	6849      	ldr	r1, [r1, #4]
 80090de:	0849      	lsrs	r1, r1, #1
 80090e0:	2000      	movs	r0, #0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4605      	mov	r5, r0
 80090e6:	eb12 0804 	adds.w	r8, r2, r4
 80090ea:	eb43 0905 	adc.w	r9, r3, r5
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	469a      	mov	sl, r3
 80090f6:	4693      	mov	fp, r2
 80090f8:	4652      	mov	r2, sl
 80090fa:	465b      	mov	r3, fp
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	f7f7 f966 	bl	80003d0 <__aeabi_uldivmod>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4613      	mov	r3, r2
 800910a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009112:	d308      	bcc.n	8009126 <UART_SetConfig+0x9a2>
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800911a:	d204      	bcs.n	8009126 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009122:	60da      	str	r2, [r3, #12]
 8009124:	e17f      	b.n	8009426 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800912c:	e17b      	b.n	8009426 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009136:	f040 80bd 	bne.w	80092b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800913a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800913e:	2b20      	cmp	r3, #32
 8009140:	dc48      	bgt.n	80091d4 <UART_SetConfig+0xa50>
 8009142:	2b00      	cmp	r3, #0
 8009144:	db7b      	blt.n	800923e <UART_SetConfig+0xaba>
 8009146:	2b20      	cmp	r3, #32
 8009148:	d879      	bhi.n	800923e <UART_SetConfig+0xaba>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <UART_SetConfig+0x9cc>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	080091db 	.word	0x080091db
 8009154:	080091e3 	.word	0x080091e3
 8009158:	0800923f 	.word	0x0800923f
 800915c:	0800923f 	.word	0x0800923f
 8009160:	080091eb 	.word	0x080091eb
 8009164:	0800923f 	.word	0x0800923f
 8009168:	0800923f 	.word	0x0800923f
 800916c:	0800923f 	.word	0x0800923f
 8009170:	080091fb 	.word	0x080091fb
 8009174:	0800923f 	.word	0x0800923f
 8009178:	0800923f 	.word	0x0800923f
 800917c:	0800923f 	.word	0x0800923f
 8009180:	0800923f 	.word	0x0800923f
 8009184:	0800923f 	.word	0x0800923f
 8009188:	0800923f 	.word	0x0800923f
 800918c:	0800923f 	.word	0x0800923f
 8009190:	0800920b 	.word	0x0800920b
 8009194:	0800923f 	.word	0x0800923f
 8009198:	0800923f 	.word	0x0800923f
 800919c:	0800923f 	.word	0x0800923f
 80091a0:	0800923f 	.word	0x0800923f
 80091a4:	0800923f 	.word	0x0800923f
 80091a8:	0800923f 	.word	0x0800923f
 80091ac:	0800923f 	.word	0x0800923f
 80091b0:	0800923f 	.word	0x0800923f
 80091b4:	0800923f 	.word	0x0800923f
 80091b8:	0800923f 	.word	0x0800923f
 80091bc:	0800923f 	.word	0x0800923f
 80091c0:	0800923f 	.word	0x0800923f
 80091c4:	0800923f 	.word	0x0800923f
 80091c8:	0800923f 	.word	0x0800923f
 80091cc:	0800923f 	.word	0x0800923f
 80091d0:	08009231 	.word	0x08009231
 80091d4:	2b40      	cmp	r3, #64	@ 0x40
 80091d6:	d02e      	beq.n	8009236 <UART_SetConfig+0xab2>
 80091d8:	e031      	b.n	800923e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091da:	f7fc facf 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80091de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091e0:	e033      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e2:	f7fc fae1 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 80091e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091e8:	e02f      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fd fca6 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	e027      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091fa:	f107 0318 	add.w	r3, r7, #24
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fd fdf2 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009208:	e01f      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800920a:	4b69      	ldr	r3, [pc, #420]	@ (80093b0 <UART_SetConfig+0xc2c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009216:	4b66      	ldr	r3, [pc, #408]	@ (80093b0 <UART_SetConfig+0xc2c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	08db      	lsrs	r3, r3, #3
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	4a64      	ldr	r2, [pc, #400]	@ (80093b4 <UART_SetConfig+0xc30>)
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009228:	e00f      	b.n	800924a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800922a:	4b62      	ldr	r3, [pc, #392]	@ (80093b4 <UART_SetConfig+0xc30>)
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922e:	e00c      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009230:	4b61      	ldr	r3, [pc, #388]	@ (80093b8 <UART_SetConfig+0xc34>)
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e009      	b.n	800924a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923c:	e005      	b.n	800924a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80ea 	beq.w	8009426 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009256:	4a55      	ldr	r2, [pc, #340]	@ (80093ac <UART_SetConfig+0xc28>)
 8009258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925c:	461a      	mov	r2, r3
 800925e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009260:	fbb3 f3f2 	udiv	r3, r3, r2
 8009264:	005a      	lsls	r2, r3, #1
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	441a      	add	r2, r3
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	fbb2 f3f3 	udiv	r3, r2, r3
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d916      	bls.n	80092ac <UART_SetConfig+0xb28>
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009284:	d212      	bcs.n	80092ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	b29b      	uxth	r3, r3
 800928a:	f023 030f 	bic.w	r3, r3, #15
 800928e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	b29b      	uxth	r3, r3
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	b29a      	uxth	r2, r3
 800929c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800929e:	4313      	orrs	r3, r2
 80092a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	e0bc      	b.n	8009426 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092b2:	e0b8      	b.n	8009426 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	dc4b      	bgt.n	8009354 <UART_SetConfig+0xbd0>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f2c0 8087 	blt.w	80093d0 <UART_SetConfig+0xc4c>
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	f200 8084 	bhi.w	80093d0 <UART_SetConfig+0xc4c>
 80092c8:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <UART_SetConfig+0xb4c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	0800935b 	.word	0x0800935b
 80092d4:	08009363 	.word	0x08009363
 80092d8:	080093d1 	.word	0x080093d1
 80092dc:	080093d1 	.word	0x080093d1
 80092e0:	0800936b 	.word	0x0800936b
 80092e4:	080093d1 	.word	0x080093d1
 80092e8:	080093d1 	.word	0x080093d1
 80092ec:	080093d1 	.word	0x080093d1
 80092f0:	0800937b 	.word	0x0800937b
 80092f4:	080093d1 	.word	0x080093d1
 80092f8:	080093d1 	.word	0x080093d1
 80092fc:	080093d1 	.word	0x080093d1
 8009300:	080093d1 	.word	0x080093d1
 8009304:	080093d1 	.word	0x080093d1
 8009308:	080093d1 	.word	0x080093d1
 800930c:	080093d1 	.word	0x080093d1
 8009310:	0800938b 	.word	0x0800938b
 8009314:	080093d1 	.word	0x080093d1
 8009318:	080093d1 	.word	0x080093d1
 800931c:	080093d1 	.word	0x080093d1
 8009320:	080093d1 	.word	0x080093d1
 8009324:	080093d1 	.word	0x080093d1
 8009328:	080093d1 	.word	0x080093d1
 800932c:	080093d1 	.word	0x080093d1
 8009330:	080093d1 	.word	0x080093d1
 8009334:	080093d1 	.word	0x080093d1
 8009338:	080093d1 	.word	0x080093d1
 800933c:	080093d1 	.word	0x080093d1
 8009340:	080093d1 	.word	0x080093d1
 8009344:	080093d1 	.word	0x080093d1
 8009348:	080093d1 	.word	0x080093d1
 800934c:	080093d1 	.word	0x080093d1
 8009350:	080093c3 	.word	0x080093c3
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d037      	beq.n	80093c8 <UART_SetConfig+0xc44>
 8009358:	e03a      	b.n	80093d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800935a:	f7fc fa0f 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 800935e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009360:	e03c      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009362:	f7fc fa21 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8009366:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009368:	e038      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd fbe6 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009378:	e030      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800937a:	f107 0318 	add.w	r3, r7, #24
 800937e:	4618      	mov	r0, r3
 8009380:	f7fd fd32 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009388:	e028      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800938a:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <UART_SetConfig+0xc2c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d012      	beq.n	80093bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009396:	4b06      	ldr	r3, [pc, #24]	@ (80093b0 <UART_SetConfig+0xc2c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	08db      	lsrs	r3, r3, #3
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	4a04      	ldr	r2, [pc, #16]	@ (80093b4 <UART_SetConfig+0xc30>)
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093a8:	e018      	b.n	80093dc <UART_SetConfig+0xc58>
 80093aa:	bf00      	nop
 80093ac:	0800bccc 	.word	0x0800bccc
 80093b0:	58024400 	.word	0x58024400
 80093b4:	03d09000 	.word	0x03d09000
 80093b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80093bc:	4b24      	ldr	r3, [pc, #144]	@ (8009450 <UART_SetConfig+0xccc>)
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c0:	e00c      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093c2:	4b24      	ldr	r3, [pc, #144]	@ (8009454 <UART_SetConfig+0xcd0>)
 80093c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c6:	e009      	b.n	80093dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ce:	e005      	b.n	80093dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093da:	bf00      	nop
    }

    if (pclk != 0U)
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d021      	beq.n	8009426 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009458 <UART_SetConfig+0xcd4>)
 80093e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	441a      	add	r2, r3
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	fbb2 f3f3 	udiv	r3, r2, r3
 8009404:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009408:	2b0f      	cmp	r3, #15
 800940a:	d909      	bls.n	8009420 <UART_SetConfig+0xc9c>
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009412:	d205      	bcs.n	8009420 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	b29a      	uxth	r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60da      	str	r2, [r3, #12]
 800941e:	e002      	b.n	8009426 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2201      	movs	r2, #1
 800942a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2201      	movs	r2, #1
 8009432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2200      	movs	r2, #0
 800943a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2200      	movs	r2, #0
 8009440:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009442:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009446:	4618      	mov	r0, r3
 8009448:	3748      	adds	r7, #72	@ 0x48
 800944a:	46bd      	mov	sp, r7
 800944c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009450:	03d09000 	.word	0x03d09000
 8009454:	003d0900 	.word	0x003d0900
 8009458:	0800bccc 	.word	0x0800bccc

0800945c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00a      	beq.n	80094ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800955a:	d10a      	bne.n	8009572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b098      	sub	sp, #96	@ 0x60
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095b0:	f7f8 f826 	bl	8001600 <HAL_GetTick>
 80095b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d12f      	bne.n	8009624 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095cc:	2200      	movs	r2, #0
 80095ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f88e 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d022      	beq.n	8009624 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800960a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e063      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b04      	cmp	r3, #4
 8009630:	d149      	bne.n	80096c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009632:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963a:	2200      	movs	r2, #0
 800963c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f857 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d03c      	beq.n	80096c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	623b      	str	r3, [r7, #32]
   return(result);
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800966a:	633b      	str	r3, [r7, #48]	@ 0x30
 800966c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e6      	bne.n	800964c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	60fb      	str	r3, [r7, #12]
   return(result);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969e:	61fa      	str	r2, [r7, #28]
 80096a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	617b      	str	r3, [r7, #20]
   return(result);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e012      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3758      	adds	r7, #88	@ 0x58
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4613      	mov	r3, r2
 8009702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009704:	e04f      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d04b      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970e:	f7f7 ff77 	bl	8001600 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <UART_WaitOnFlagUntilTimeout+0x30>
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e04e      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d037      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b80      	cmp	r3, #128	@ 0x80
 800973a:	d034      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d031      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d110      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f921 	bl	80099a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2208      	movs	r2, #8
 8009762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e029      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800977c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009780:	d111      	bne.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800978a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f907 	bl	80099a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e00f      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	bf0c      	ite	eq
 80097b6:	2301      	moveq	r3, #1
 80097b8:	2300      	movne	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d0a0      	beq.n	8009706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b096      	sub	sp, #88	@ 0x58
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2222      	movs	r2, #34	@ 0x22
 80097f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009802:	2b00      	cmp	r3, #0
 8009804:	d02d      	beq.n	8009862 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980c:	4a40      	ldr	r2, [pc, #256]	@ (8009910 <UART_Start_Receive_DMA+0x140>)
 800980e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009816:	4a3f      	ldr	r2, [pc, #252]	@ (8009914 <UART_Start_Receive_DMA+0x144>)
 8009818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	4a3d      	ldr	r2, [pc, #244]	@ (8009918 <UART_Start_Receive_DMA+0x148>)
 8009822:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800982a:	2200      	movs	r2, #0
 800982c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3324      	adds	r3, #36	@ 0x24
 800983a:	4619      	mov	r1, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009840:	461a      	mov	r2, r3
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	f7f8 fb50 	bl	8001ee8 <HAL_DMA_Start_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2210      	movs	r2, #16
 8009852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e051      	b.n	8009906 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d018      	beq.n	800989c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800987e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	461a      	mov	r2, r3
 8009886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800988e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e6      	bne.n	800986a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3308      	adds	r3, #8
 80098a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3308      	adds	r3, #8
 80098ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e5      	bne.n	800989c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	613b      	str	r3, [r7, #16]
   return(result);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098f0:	623a      	str	r2, [r7, #32]
 80098f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	69f9      	ldr	r1, [r7, #28]
 80098f6:	6a3a      	ldr	r2, [r7, #32]
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3758      	adds	r7, #88	@ 0x58
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	08009a6d 	.word	0x08009a6d
 8009914:	08009b95 	.word	0x08009b95
 8009918:	08009bd3 	.word	0x08009bd3

0800991c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b08f      	sub	sp, #60	@ 0x3c
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	61fb      	str	r3, [r7, #28]
   return(result);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009944:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	60bb      	str	r3, [r7, #8]
   return(result);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009976:	61ba      	str	r2, [r7, #24]
 8009978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6979      	ldr	r1, [r7, #20]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	613b      	str	r3, [r7, #16]
   return(result);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e5      	bne.n	8009956 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009992:	bf00      	nop
 8009994:	373c      	adds	r7, #60	@ 0x3c
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
	...

080099a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b095      	sub	sp, #84	@ 0x54
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b0:	e853 3f00 	ldrex	r3, [r3]
 80099b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80099c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ce:	e841 2300 	strex	r3, r2, [r1]
 80099d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e6      	bne.n	80099a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009a68 <UART_EndRxTransfer+0xc8>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3308      	adds	r3, #8
 80099f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e5      	bne.n	80099da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d118      	bne.n	8009a48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f023 0310 	bic.w	r3, r3, #16
 8009a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a34:	61bb      	str	r3, [r7, #24]
 8009a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6979      	ldr	r1, [r7, #20]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	613b      	str	r3, [r7, #16]
   return(result);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e6      	bne.n	8009a16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a5c:	bf00      	nop
 8009a5e:	3754      	adds	r7, #84	@ 0x54
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	effffffe 	.word	0xeffffffe

08009a6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b09c      	sub	sp, #112	@ 0x70
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a82:	d071      	beq.n	8009b68 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e6      	bne.n	8009a8c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad0:	f023 0301 	bic.w	r3, r3, #1
 8009ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3308      	adds	r3, #8
 8009adc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ade:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e5      	bne.n	8009abe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	623b      	str	r3, [r7, #32]
   return(result);
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e5      	bne.n	8009af2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d118      	bne.n	8009b68 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	69b9      	ldr	r1, [r7, #24]
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	617b      	str	r3, [r7, #20]
   return(result);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e6      	bne.n	8009b36 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d107      	bne.n	8009b86 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b80:	f7fe fdf4 	bl	800876c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b84:	e002      	b.n	8009b8c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009b86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b88:	f000 fc50 	bl	800a42c <HAL_UART_RxCpltCallback>
}
 8009b8c:	bf00      	nop
 8009b8e:	3770      	adds	r7, #112	@ 0x70
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d109      	bne.n	8009bc4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7fe fdd5 	bl	800876c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bc2:	e002      	b.n	8009bca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7fe fdbd 	bl	8008744 <HAL_UART_RxHalfCpltCallback>
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bfa:	2b80      	cmp	r3, #128	@ 0x80
 8009bfc:	d109      	bne.n	8009c12 <UART_DMAError+0x40>
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b21      	cmp	r3, #33	@ 0x21
 8009c02:	d106      	bne.n	8009c12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009c0c:	6978      	ldr	r0, [r7, #20]
 8009c0e:	f7ff fe85 	bl	800991c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c1c:	2b40      	cmp	r3, #64	@ 0x40
 8009c1e:	d109      	bne.n	8009c34 <UART_DMAError+0x62>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b22      	cmp	r3, #34	@ 0x22
 8009c24:	d106      	bne.n	8009c34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009c2e:	6978      	ldr	r0, [r7, #20]
 8009c30:	f7ff feb6 	bl	80099a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3a:	f043 0210 	orr.w	r2, r3, #16
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c44:	6978      	ldr	r0, [r7, #20]
 8009c46:	f7fe fd87 	bl	8008758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c4a:	bf00      	nop
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7fe fd71 	bl	8008758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b08f      	sub	sp, #60	@ 0x3c
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8c:	2b21      	cmp	r3, #33	@ 0x21
 8009c8e:	d14c      	bne.n	8009d2a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d132      	bne.n	8009d02 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e6      	bne.n	8009c9c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	61bb      	str	r3, [r7, #24]
 8009cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6979      	ldr	r1, [r7, #20]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e6      	bne.n	8009cce <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009d00:	e013      	b.n	8009d2a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d06:	781a      	ldrb	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009d2a:	bf00      	nop
 8009d2c:	373c      	adds	r7, #60	@ 0x3c
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b091      	sub	sp, #68	@ 0x44
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d44:	2b21      	cmp	r3, #33	@ 0x21
 8009d46:	d151      	bne.n	8009dec <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d132      	bne.n	8009dba <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	623b      	str	r3, [r7, #32]
   return(result);
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e6      	bne.n	8009d54 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	461a      	mov	r2, r3
 8009da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da8:	69b9      	ldr	r1, [r7, #24]
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	e841 2300 	strex	r3, r2, [r1]
 8009db0:	617b      	str	r3, [r7, #20]
   return(result);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e6      	bne.n	8009d86 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009db8:	e018      	b.n	8009dec <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dce:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd4:	1c9a      	adds	r2, r3, #2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009dec:	bf00      	nop
 8009dee:	3744      	adds	r7, #68	@ 0x44
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b091      	sub	sp, #68	@ 0x44
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e06:	2b21      	cmp	r3, #33	@ 0x21
 8009e08:	d160      	bne.n	8009ecc <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009e12:	e057      	b.n	8009ec4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d133      	bne.n	8009e88 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3308      	adds	r3, #8
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e40:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e5      	bne.n	8009e20 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	61fb      	str	r3, [r7, #28]
 8009e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	69b9      	ldr	r1, [r7, #24]
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e6      	bne.n	8009e54 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009e86:	e021      	b.n	8009ecc <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d013      	beq.n	8009ebe <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e9a:	781a      	ldrb	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ebe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009ec4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1a4      	bne.n	8009e14 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009eca:	e7ff      	b.n	8009ecc <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009ecc:	bf00      	nop
 8009ece:	3744      	adds	r7, #68	@ 0x44
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b091      	sub	sp, #68	@ 0x44
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ee6:	2b21      	cmp	r3, #33	@ 0x21
 8009ee8:	d165      	bne.n	8009fb6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ef0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009ef2:	e05c      	b.n	8009fae <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d133      	bne.n	8009f68 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e5      	bne.n	8009f00 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6979      	ldr	r1, [r7, #20]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e6      	bne.n	8009f34 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009f66:	e026      	b.n	8009fb6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d018      	beq.n	8009fa8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f8a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f90:	1c9a      	adds	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fa8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009faa:	3b01      	subs	r3, #1
 8009fac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009fae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d19f      	bne.n	8009ef4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009fb4:	e7ff      	b.n	8009fb6 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009fb6:	bf00      	nop
 8009fb8:	3744      	adds	r7, #68	@ 0x44
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b088      	sub	sp, #32
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fde:	61fb      	str	r3, [r7, #28]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6979      	ldr	r1, [r7, #20]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e6      	bne.n	8009fca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2220      	movs	r2, #32
 800a000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa1e 	bl	800a44c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a010:	bf00      	nop
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_UARTEx_DisableFifoMode+0x16>
 800a066:	2302      	movs	r3, #2
 800a068:	e027      	b.n	800a0ba <HAL_UARTEx_DisableFifoMode+0x66>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	@ 0x24
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a098:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e02d      	b.n	800a13a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2224      	movs	r2, #36	@ 0x24
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f850 	bl	800a1c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a152:	2b01      	cmp	r3, #1
 800a154:	d101      	bne.n	800a15a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a156:	2302      	movs	r3, #2
 800a158:	e02d      	b.n	800a1b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2224      	movs	r2, #36	@ 0x24
 800a166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0201 	bic.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f812 	bl	800a1c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2220      	movs	r2, #32
 800a1a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d108      	bne.n	800a1e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1e0:	e031      	b.n	800a246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1e2:	2310      	movs	r3, #16
 800a1e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	0e5b      	lsrs	r3, r3, #25
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	0f5b      	lsrs	r3, r3, #29
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	7b3a      	ldrb	r2, [r7, #12]
 800a20e:	4911      	ldr	r1, [pc, #68]	@ (800a254 <UARTEx_SetNbDataToProcess+0x94>)
 800a210:	5c8a      	ldrb	r2, [r1, r2]
 800a212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a216:	7b3a      	ldrb	r2, [r7, #12]
 800a218:	490f      	ldr	r1, [pc, #60]	@ (800a258 <UARTEx_SetNbDataToProcess+0x98>)
 800a21a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	7b7a      	ldrb	r2, [r7, #13]
 800a22c:	4909      	ldr	r1, [pc, #36]	@ (800a254 <UARTEx_SetNbDataToProcess+0x94>)
 800a22e:	5c8a      	ldrb	r2, [r1, r2]
 800a230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a234:	7b7a      	ldrb	r2, [r7, #13]
 800a236:	4908      	ldr	r1, [pc, #32]	@ (800a258 <UARTEx_SetNbDataToProcess+0x98>)
 800a238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a23a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	0800bce4 	.word	0x0800bce4
 800a258:	0800bcec 	.word	0x0800bcec

0800a25c <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a266:	f000 f833 	bl	800a2d0 <HAL_ResumeTick>

//	HAL_UART_MspInit(&huart3);

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a26a:	4a09      	ldr	r2, [pc, #36]	@ (800a290 <HAL_GPIO_EXTI_Callback+0x34>)
 800a26c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a270:	4808      	ldr	r0, [pc, #32]	@ (800a294 <HAL_GPIO_EXTI_Callback+0x38>)
 800a272:	f000 fc39 	bl	800aae8 <sniprintf>
 800a276:	4603      	mov	r3, r0
 800a278:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a27a:	89fa      	ldrh	r2, [r7, #14]
 800a27c:	2364      	movs	r3, #100	@ 0x64
 800a27e:	4905      	ldr	r1, [pc, #20]	@ (800a294 <HAL_GPIO_EXTI_Callback+0x38>)
 800a280:	4805      	ldr	r0, [pc, #20]	@ (800a298 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a282:	f7fd fd37 	bl	8007cf4 <HAL_UART_Transmit>

//	HAL_NVIC_SystemReset();
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	0800bc78 	.word	0x0800bc78
 800a294:	24000650 	.word	0x24000650
 800a298:	24000540 	.word	0x24000540

0800a29c <startLowPowerMode>:
#include "lowPowerMode.h"
#include "uart.h"


void startLowPowerMode(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
    HAL_SuspendTick();
 800a2a0:	f000 f806 	bl	800a2b0 <HAL_SuspendTick>

    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f7fa fada 	bl	8004860 <HAL_PWR_EnterSLEEPMode>
}
 800a2ac:	bf00      	nop
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <HAL_SuspendTick+0x1c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a04      	ldr	r2, [pc, #16]	@ (800a2cc <HAL_SuspendTick+0x1c>)
 800a2ba:	f023 0302 	bic.w	r3, r3, #2
 800a2be:	6013      	str	r3, [r2, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	e000e010 	.word	0xe000e010

0800a2d0 <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a2d4:	4b05      	ldr	r3, [pc, #20]	@ (800a2ec <HAL_ResumeTick+0x1c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a04      	ldr	r2, [pc, #16]	@ (800a2ec <HAL_ResumeTick+0x1c>)
 800a2da:	f043 0302 	orr.w	r3, r3, #2
 800a2de:	6013      	str	r3, [r2, #0]
}
 800a2e0:	bf00      	nop
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	e000e010 	.word	0xe000e010

0800a2f0 <RTCInit>:
		.mins	= 0,
		.secs	= 21
};

void RTCInit(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4809      	ldr	r0, [pc, #36]	@ (800a31c <RTCInit+0x2c>)
 800a2f8:	f7fd fc96 	bl	8007c28 <HAL_RTCEx_BKUPRead>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a302:	4293      	cmp	r3, r2
 800a304:	d008      	beq.n	800a318 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a306:	4806      	ldr	r0, [pc, #24]	@ (800a320 <RTCInit+0x30>)
 800a308:	f000 f810 	bl	800a32c <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a30c:	2364      	movs	r3, #100	@ 0x64
 800a30e:	220d      	movs	r2, #13
 800a310:	4904      	ldr	r1, [pc, #16]	@ (800a324 <RTCInit+0x34>)
 800a312:	4805      	ldr	r0, [pc, #20]	@ (800a328 <RTCInit+0x38>)
 800a314:	f7fd fcee 	bl	8007cf4 <HAL_UART_Transmit>
	}
}
 800a318:	bf00      	nop
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	24000518 	.word	0x24000518
 800a320:	24000070 	.word	0x24000070
 800a324:	0800bc8c 	.word	0x0800bc8c
 800a328:	24000540 	.word	0x24000540

0800a32c <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	609a      	str	r2, [r3, #8]
 800a340:	60da      	str	r2, [r3, #12]
 800a342:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	789b      	ldrb	r3, [r3, #2]
 800a354:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	78db      	ldrb	r3, [r3, #3]
 800a366:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	795b      	ldrb	r3, [r3, #5]
 800a36c:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	791b      	ldrb	r3, [r3, #4]
 800a372:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	799b      	ldrb	r3, [r3, #6]
 800a378:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a37a:	f107 030c 	add.w	r3, r7, #12
 800a37e:	2200      	movs	r2, #0
 800a380:	4619      	mov	r1, r3
 800a382:	4810      	ldr	r0, [pc, #64]	@ (800a3c4 <setRTCData+0x98>)
 800a384:	f7fd f86a 	bl	800745c <HAL_RTC_SetTime>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d115      	bne.n	800a3ba <setRTCData+0x8e>
 800a38e:	f107 0308 	add.w	r3, r7, #8
 800a392:	2200      	movs	r2, #0
 800a394:	4619      	mov	r1, r3
 800a396:	480b      	ldr	r0, [pc, #44]	@ (800a3c4 <setRTCData+0x98>)
 800a398:	f7fd f95a 	bl	8007650 <HAL_RTC_SetDate>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <setRTCData+0x8e>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a3a2:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4806      	ldr	r0, [pc, #24]	@ (800a3c4 <setRTCData+0x98>)
 800a3aa:	f7fd fc25 	bl	8007bf8 <HAL_RTCEx_BKUPWrite>
		HAL_UART_Transmit(&huart3, "RTC date Time Set\r\n", 18, 100);
 800a3ae:	2364      	movs	r3, #100	@ 0x64
 800a3b0:	2212      	movs	r2, #18
 800a3b2:	4905      	ldr	r1, [pc, #20]	@ (800a3c8 <setRTCData+0x9c>)
 800a3b4:	4805      	ldr	r0, [pc, #20]	@ (800a3cc <setRTCData+0xa0>)
 800a3b6:	f7fd fc9d 	bl	8007cf4 <HAL_UART_Transmit>
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	24000518 	.word	0x24000518
 800a3c8:	0800bca0 	.word	0x0800bca0
 800a3cc:	24000540 	.word	0x24000540

0800a3d0 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b088      	sub	sp, #32
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a3d8:	f107 0308 	add.w	r3, r7, #8
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4811      	ldr	r0, [pc, #68]	@ (800a428 <getRTCData+0x58>)
 800a3e2:	f7fd f8d9 	bl	8007598 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a3e6:	f107 031c 	add.w	r3, r7, #28
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	480e      	ldr	r0, [pc, #56]	@ (800a428 <getRTCData+0x58>)
 800a3f0:	f7fd f9b6 	bl	8007760 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a3f4:	7fba      	ldrb	r2, [r7, #30]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a3fa:	7f3a      	ldrb	r2, [r7, #28]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a400:	7f7a      	ldrb	r2, [r7, #29]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a406:	7ffa      	ldrb	r2, [r7, #31]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a40c:	7a3a      	ldrb	r2, [r7, #8]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a412:	7a7a      	ldrb	r2, [r7, #9]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a418:	7aba      	ldrb	r2, [r7, #10]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	709a      	strb	r2, [r3, #2]
}
 800a41e:	bf00      	nop
 800a420:	3720      	adds	r7, #32
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	24000518 	.word	0x24000518

0800a42c <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800a434:	4b04      	ldr	r3, [pc, #16]	@ (800a448 <HAL_UART_RxCpltCallback+0x1c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]

	fptr();
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4798      	blx	r3
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	240006b4 	.word	0x240006b4

0800a44c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]

}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a468:	4a04      	ldr	r2, [pc, #16]	@ (800a47c <uartInit+0x1c>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6013      	str	r3, [r2, #0]
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	240006b4 	.word	0x240006b4

0800a480 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a488:	2201      	movs	r2, #1
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	4803      	ldr	r0, [pc, #12]	@ (800a49c <receptionItrOn+0x1c>)
 800a48e:	f7fd fd53 	bl	8007f38 <HAL_UART_Receive_DMA>
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	24000540 	.word	0x24000540

0800a4a0 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a4a4:	4b07      	ldr	r3, [pc, #28]	@ (800a4c4 <debugRxCallback+0x24>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b0d      	cmp	r3, #13
 800a4aa:	d102      	bne.n	800a4b2 <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a4ac:	4b06      	ldr	r3, [pc, #24]	@ (800a4c8 <debugRxCallback+0x28>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a4b2:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <debugRxCallback+0x2c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4903      	ldr	r1, [pc, #12]	@ (800a4c4 <debugRxCallback+0x24>)
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 f888 	bl	800a5ce <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800a4be:	bf00      	nop
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	240006b8 	.word	0x240006b8
 800a4c8:	240006c0 	.word	0x240006c0
 800a4cc:	240006bc 	.word	0x240006bc

0800a4d0 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800a4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a500 <debugUartInit+0x30>)
 800a4d8:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800a4da:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <debugUartInit+0x34>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 f839 	bl	800a55c <circularBufferInit>

	uartInit(rxCallbackFptr);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff ffb8 	bl	800a460 <uartInit>

	receptionItrOn(&data);
 800a4f0:	4805      	ldr	r0, [pc, #20]	@ (800a508 <debugUartInit+0x38>)
 800a4f2:	f7ff ffc5 	bl	800a480 <receptionItrOn>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0800a4a1 	.word	0x0800a4a1
 800a504:	240006bc 	.word	0x240006bc
 800a508:	240006b8 	.word	0x240006b8

0800a50c <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800a510:	4b03      	ldr	r3, [pc, #12]	@ (800a520 <getCmdReceivedFlag+0x14>)
 800a512:	781b      	ldrb	r3, [r3, #0]
}
 800a514:	4618      	mov	r0, r3
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	240006c0 	.word	0x240006c0

0800a524 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800a52e:	4a04      	ldr	r2, [pc, #16]	@ (800a540 <setCmdReceivedFlag+0x1c>)
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	7013      	strb	r3, [r2, #0]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	240006c0 	.word	0x240006c0

0800a544 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
	return rxBuffer;
 800a548:	4b03      	ldr	r3, [pc, #12]	@ (800a558 <getRxBuffer+0x14>)
 800a54a:	681b      	ldr	r3, [r3, #0]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	240006bc 	.word	0x240006bc

0800a55c <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	807b      	strh	r3, [r7, #2]
 800a568:	4613      	mov	r3, r2
 800a56a:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	883a      	ldrh	r2, [r7, #0]
 800a580:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	887a      	ldrh	r2, [r7, #2]
 800a586:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800a588:	887b      	ldrh	r3, [r7, #2]
 800a58a:	883a      	ldrh	r2, [r7, #0]
 800a58c:	fb02 f303 	mul.w	r3, r2, r3
 800a590:	4618      	mov	r0, r3
 800a592:	f000 f8ad 	bl	800a6f0 <malloc>
 800a596:	4603      	mov	r3, r0
 800a598:	461a      	mov	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68d8      	ldr	r0, [r3, #12]
 800a5b0:	887b      	ldrh	r3, [r7, #2]
 800a5b2:	883a      	ldrh	r2, [r7, #0]
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	f000 fb0b 	bl	800abd6 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	889b      	ldrh	r3, [r3, #4]
 800a5e8:	89ba      	ldrh	r2, [r7, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d301      	bcc.n	800a5f2 <circularBufferEnqueue+0x24>
    {
        next = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	885b      	ldrh	r3, [r3, #2]
 800a5f6:	89ba      	ldrh	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d02b      	beq.n	800a654 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	8812      	ldrh	r2, [r2, #0]
 800a604:	4611      	mov	r1, r2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	88d2      	ldrh	r2, [r2, #6]
 800a60a:	fb01 f202 	mul.w	r2, r1, r2
 800a60e:	1898      	adds	r0, r3, r2
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	88db      	ldrh	r3, [r3, #6]
 800a614:	461a      	mov	r2, r3
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	f000 fbc5 	bl	800ada6 <memcpy>
 800a61c:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d017      	beq.n	800a654 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	89ba      	ldrh	r2, [r7, #12]
 800a628:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800a62a:	2302      	movs	r3, #2
 800a62c:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	889b      	ldrh	r3, [r3, #4]
 800a638:	4413      	add	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	8852      	ldrh	r2, [r2, #2]
 800a63e:	1a9b      	subs	r3, r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	8892      	ldrh	r2, [r2, #4]
 800a644:	fb93 f1f2 	sdiv	r1, r3, r2
 800a648:	fb01 f202 	mul.w	r2, r1, r2
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	b29a      	uxth	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800a668:	2305      	movs	r3, #5
 800a66a:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	885a      	ldrh	r2, [r3, #2]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d032      	beq.n	800a6de <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	885b      	ldrh	r3, [r3, #2]
 800a67c:	3301      	adds	r3, #1
 800a67e:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	889b      	ldrh	r3, [r3, #4]
 800a684:	89ba      	ldrh	r2, [r7, #12]
 800a686:	429a      	cmp	r2, r3
 800a688:	d301      	bcc.n	800a68e <circularBufferDequeue+0x30>
        {
            next = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	8852      	ldrh	r2, [r2, #2]
 800a696:	4611      	mov	r1, r2
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	88d2      	ldrh	r2, [r2, #6]
 800a69c:	fb01 f202 	mul.w	r2, r1, r2
 800a6a0:	1899      	adds	r1, r3, r2
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	88db      	ldrh	r3, [r3, #6]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6838      	ldr	r0, [r7, #0]
 800a6aa:	f000 fb7c 	bl	800ada6 <memcpy>

        cBuff->tail = next;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	89ba      	ldrh	r2, [r7, #12]
 800a6b2:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	889b      	ldrh	r3, [r3, #4]
 800a6be:	4413      	add	r3, r2
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	8852      	ldrh	r2, [r2, #2]
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	8892      	ldrh	r2, [r2, #4]
 800a6ca:	fb93 f1f2 	sdiv	r1, r3, r2
 800a6ce:	fb01 f202 	mul.w	r2, r1, r2
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800a6da:	2304      	movs	r3, #4
 800a6dc:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <atoi>:
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	f000 b930 	b.w	800a950 <strtol>

0800a6f0 <malloc>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	@ (800a6fc <malloc+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f000 b825 	b.w	800a744 <_malloc_r>
 800a6fa:	bf00      	nop
 800a6fc:	24000084 	.word	0x24000084

0800a700 <sbrk_aligned>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4e0f      	ldr	r6, [pc, #60]	@ (800a740 <sbrk_aligned+0x40>)
 800a704:	460c      	mov	r4, r1
 800a706:	6831      	ldr	r1, [r6, #0]
 800a708:	4605      	mov	r5, r0
 800a70a:	b911      	cbnz	r1, 800a712 <sbrk_aligned+0x12>
 800a70c:	f000 fafc 	bl	800ad08 <_sbrk_r>
 800a710:	6030      	str	r0, [r6, #0]
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	f000 faf7 	bl	800ad08 <_sbrk_r>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d103      	bne.n	800a726 <sbrk_aligned+0x26>
 800a71e:	f04f 34ff 	mov.w	r4, #4294967295
 800a722:	4620      	mov	r0, r4
 800a724:	bd70      	pop	{r4, r5, r6, pc}
 800a726:	1cc4      	adds	r4, r0, #3
 800a728:	f024 0403 	bic.w	r4, r4, #3
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d0f8      	beq.n	800a722 <sbrk_aligned+0x22>
 800a730:	1a21      	subs	r1, r4, r0
 800a732:	4628      	mov	r0, r5
 800a734:	f000 fae8 	bl	800ad08 <_sbrk_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d1f2      	bne.n	800a722 <sbrk_aligned+0x22>
 800a73c:	e7ef      	b.n	800a71e <sbrk_aligned+0x1e>
 800a73e:	bf00      	nop
 800a740:	240006c4 	.word	0x240006c4

0800a744 <_malloc_r>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	1ccd      	adds	r5, r1, #3
 800a74a:	f025 0503 	bic.w	r5, r5, #3
 800a74e:	3508      	adds	r5, #8
 800a750:	2d0c      	cmp	r5, #12
 800a752:	bf38      	it	cc
 800a754:	250c      	movcc	r5, #12
 800a756:	2d00      	cmp	r5, #0
 800a758:	4606      	mov	r6, r0
 800a75a:	db01      	blt.n	800a760 <_malloc_r+0x1c>
 800a75c:	42a9      	cmp	r1, r5
 800a75e:	d904      	bls.n	800a76a <_malloc_r+0x26>
 800a760:	230c      	movs	r3, #12
 800a762:	6033      	str	r3, [r6, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a840 <_malloc_r+0xfc>
 800a76e:	f000 f869 	bl	800a844 <__malloc_lock>
 800a772:	f8d8 3000 	ldr.w	r3, [r8]
 800a776:	461c      	mov	r4, r3
 800a778:	bb44      	cbnz	r4, 800a7cc <_malloc_r+0x88>
 800a77a:	4629      	mov	r1, r5
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff ffbf 	bl	800a700 <sbrk_aligned>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	4604      	mov	r4, r0
 800a786:	d158      	bne.n	800a83a <_malloc_r+0xf6>
 800a788:	f8d8 4000 	ldr.w	r4, [r8]
 800a78c:	4627      	mov	r7, r4
 800a78e:	2f00      	cmp	r7, #0
 800a790:	d143      	bne.n	800a81a <_malloc_r+0xd6>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d04b      	beq.n	800a82e <_malloc_r+0xea>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	eb04 0903 	add.w	r9, r4, r3
 800a7a0:	f000 fab2 	bl	800ad08 <_sbrk_r>
 800a7a4:	4581      	cmp	r9, r0
 800a7a6:	d142      	bne.n	800a82e <_malloc_r+0xea>
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	1a6d      	subs	r5, r5, r1
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ffa6 	bl	800a700 <sbrk_aligned>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d03a      	beq.n	800a82e <_malloc_r+0xea>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	442b      	add	r3, r5
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	bb62      	cbnz	r2, 800a820 <_malloc_r+0xdc>
 800a7c6:	f8c8 7000 	str.w	r7, [r8]
 800a7ca:	e00f      	b.n	800a7ec <_malloc_r+0xa8>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	1b52      	subs	r2, r2, r5
 800a7d0:	d420      	bmi.n	800a814 <_malloc_r+0xd0>
 800a7d2:	2a0b      	cmp	r2, #11
 800a7d4:	d917      	bls.n	800a806 <_malloc_r+0xc2>
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	6059      	strne	r1, [r3, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	bf08      	it	eq
 800a7e4:	f8c8 1000 	streq.w	r1, [r8]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f000 f82f 	bl	800a850 <__malloc_unlock>
 800a7f2:	f104 000b 	add.w	r0, r4, #11
 800a7f6:	1d23      	adds	r3, r4, #4
 800a7f8:	f020 0007 	bic.w	r0, r0, #7
 800a7fc:	1ac2      	subs	r2, r0, r3
 800a7fe:	bf1c      	itt	ne
 800a800:	1a1b      	subne	r3, r3, r0
 800a802:	50a3      	strne	r3, [r4, r2]
 800a804:	e7af      	b.n	800a766 <_malloc_r+0x22>
 800a806:	6862      	ldr	r2, [r4, #4]
 800a808:	42a3      	cmp	r3, r4
 800a80a:	bf0c      	ite	eq
 800a80c:	f8c8 2000 	streq.w	r2, [r8]
 800a810:	605a      	strne	r2, [r3, #4]
 800a812:	e7eb      	b.n	800a7ec <_malloc_r+0xa8>
 800a814:	4623      	mov	r3, r4
 800a816:	6864      	ldr	r4, [r4, #4]
 800a818:	e7ae      	b.n	800a778 <_malloc_r+0x34>
 800a81a:	463c      	mov	r4, r7
 800a81c:	687f      	ldr	r7, [r7, #4]
 800a81e:	e7b6      	b.n	800a78e <_malloc_r+0x4a>
 800a820:	461a      	mov	r2, r3
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	42a3      	cmp	r3, r4
 800a826:	d1fb      	bne.n	800a820 <_malloc_r+0xdc>
 800a828:	2300      	movs	r3, #0
 800a82a:	6053      	str	r3, [r2, #4]
 800a82c:	e7de      	b.n	800a7ec <_malloc_r+0xa8>
 800a82e:	230c      	movs	r3, #12
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f80c 	bl	800a850 <__malloc_unlock>
 800a838:	e794      	b.n	800a764 <_malloc_r+0x20>
 800a83a:	6005      	str	r5, [r0, #0]
 800a83c:	e7d6      	b.n	800a7ec <_malloc_r+0xa8>
 800a83e:	bf00      	nop
 800a840:	240006c8 	.word	0x240006c8

0800a844 <__malloc_lock>:
 800a844:	4801      	ldr	r0, [pc, #4]	@ (800a84c <__malloc_lock+0x8>)
 800a846:	f000 baac 	b.w	800ada2 <__retarget_lock_acquire_recursive>
 800a84a:	bf00      	nop
 800a84c:	2400080c 	.word	0x2400080c

0800a850 <__malloc_unlock>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__malloc_unlock+0x8>)
 800a852:	f000 baa7 	b.w	800ada4 <__retarget_lock_release_recursive>
 800a856:	bf00      	nop
 800a858:	2400080c 	.word	0x2400080c

0800a85c <_strtol_l.constprop.0>:
 800a85c:	2b24      	cmp	r3, #36	@ 0x24
 800a85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a862:	4686      	mov	lr, r0
 800a864:	4690      	mov	r8, r2
 800a866:	d801      	bhi.n	800a86c <_strtol_l.constprop.0+0x10>
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d106      	bne.n	800a87a <_strtol_l.constprop.0+0x1e>
 800a86c:	f000 fa6e 	bl	800ad4c <__errno>
 800a870:	2316      	movs	r3, #22
 800a872:	6003      	str	r3, [r0, #0]
 800a874:	2000      	movs	r0, #0
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	4834      	ldr	r0, [pc, #208]	@ (800a94c <_strtol_l.constprop.0+0xf0>)
 800a87c:	460d      	mov	r5, r1
 800a87e:	462a      	mov	r2, r5
 800a880:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a884:	5d06      	ldrb	r6, [r0, r4]
 800a886:	f016 0608 	ands.w	r6, r6, #8
 800a88a:	d1f8      	bne.n	800a87e <_strtol_l.constprop.0+0x22>
 800a88c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a88e:	d12d      	bne.n	800a8ec <_strtol_l.constprop.0+0x90>
 800a890:	782c      	ldrb	r4, [r5, #0]
 800a892:	2601      	movs	r6, #1
 800a894:	1c95      	adds	r5, r2, #2
 800a896:	f033 0210 	bics.w	r2, r3, #16
 800a89a:	d109      	bne.n	800a8b0 <_strtol_l.constprop.0+0x54>
 800a89c:	2c30      	cmp	r4, #48	@ 0x30
 800a89e:	d12a      	bne.n	800a8f6 <_strtol_l.constprop.0+0x9a>
 800a8a0:	782a      	ldrb	r2, [r5, #0]
 800a8a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8a6:	2a58      	cmp	r2, #88	@ 0x58
 800a8a8:	d125      	bne.n	800a8f6 <_strtol_l.constprop.0+0x9a>
 800a8aa:	786c      	ldrb	r4, [r5, #1]
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	3502      	adds	r5, #2
 800a8b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a8b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	fbbc f9f3 	udiv	r9, ip, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a8c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8c8:	2f09      	cmp	r7, #9
 800a8ca:	d81b      	bhi.n	800a904 <_strtol_l.constprop.0+0xa8>
 800a8cc:	463c      	mov	r4, r7
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	dd27      	ble.n	800a922 <_strtol_l.constprop.0+0xc6>
 800a8d2:	1c57      	adds	r7, r2, #1
 800a8d4:	d007      	beq.n	800a8e6 <_strtol_l.constprop.0+0x8a>
 800a8d6:	4581      	cmp	r9, r0
 800a8d8:	d320      	bcc.n	800a91c <_strtol_l.constprop.0+0xc0>
 800a8da:	d101      	bne.n	800a8e0 <_strtol_l.constprop.0+0x84>
 800a8dc:	45a2      	cmp	sl, r4
 800a8de:	db1d      	blt.n	800a91c <_strtol_l.constprop.0+0xc0>
 800a8e0:	fb00 4003 	mla	r0, r0, r3, r4
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8ea:	e7eb      	b.n	800a8c4 <_strtol_l.constprop.0+0x68>
 800a8ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8ee:	bf04      	itt	eq
 800a8f0:	782c      	ldrbeq	r4, [r5, #0]
 800a8f2:	1c95      	addeq	r5, r2, #2
 800a8f4:	e7cf      	b.n	800a896 <_strtol_l.constprop.0+0x3a>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1da      	bne.n	800a8b0 <_strtol_l.constprop.0+0x54>
 800a8fa:	2c30      	cmp	r4, #48	@ 0x30
 800a8fc:	bf0c      	ite	eq
 800a8fe:	2308      	moveq	r3, #8
 800a900:	230a      	movne	r3, #10
 800a902:	e7d5      	b.n	800a8b0 <_strtol_l.constprop.0+0x54>
 800a904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a908:	2f19      	cmp	r7, #25
 800a90a:	d801      	bhi.n	800a910 <_strtol_l.constprop.0+0xb4>
 800a90c:	3c37      	subs	r4, #55	@ 0x37
 800a90e:	e7de      	b.n	800a8ce <_strtol_l.constprop.0+0x72>
 800a910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a914:	2f19      	cmp	r7, #25
 800a916:	d804      	bhi.n	800a922 <_strtol_l.constprop.0+0xc6>
 800a918:	3c57      	subs	r4, #87	@ 0x57
 800a91a:	e7d8      	b.n	800a8ce <_strtol_l.constprop.0+0x72>
 800a91c:	f04f 32ff 	mov.w	r2, #4294967295
 800a920:	e7e1      	b.n	800a8e6 <_strtol_l.constprop.0+0x8a>
 800a922:	1c53      	adds	r3, r2, #1
 800a924:	d108      	bne.n	800a938 <_strtol_l.constprop.0+0xdc>
 800a926:	2322      	movs	r3, #34	@ 0x22
 800a928:	f8ce 3000 	str.w	r3, [lr]
 800a92c:	4660      	mov	r0, ip
 800a92e:	f1b8 0f00 	cmp.w	r8, #0
 800a932:	d0a0      	beq.n	800a876 <_strtol_l.constprop.0+0x1a>
 800a934:	1e69      	subs	r1, r5, #1
 800a936:	e006      	b.n	800a946 <_strtol_l.constprop.0+0xea>
 800a938:	b106      	cbz	r6, 800a93c <_strtol_l.constprop.0+0xe0>
 800a93a:	4240      	negs	r0, r0
 800a93c:	f1b8 0f00 	cmp.w	r8, #0
 800a940:	d099      	beq.n	800a876 <_strtol_l.constprop.0+0x1a>
 800a942:	2a00      	cmp	r2, #0
 800a944:	d1f6      	bne.n	800a934 <_strtol_l.constprop.0+0xd8>
 800a946:	f8c8 1000 	str.w	r1, [r8]
 800a94a:	e794      	b.n	800a876 <_strtol_l.constprop.0+0x1a>
 800a94c:	0800bcf5 	.word	0x0800bcf5

0800a950 <strtol>:
 800a950:	4613      	mov	r3, r2
 800a952:	460a      	mov	r2, r1
 800a954:	4601      	mov	r1, r0
 800a956:	4802      	ldr	r0, [pc, #8]	@ (800a960 <strtol+0x10>)
 800a958:	6800      	ldr	r0, [r0, #0]
 800a95a:	f7ff bf7f 	b.w	800a85c <_strtol_l.constprop.0>
 800a95e:	bf00      	nop
 800a960:	24000084 	.word	0x24000084

0800a964 <std>:
 800a964:	2300      	movs	r3, #0
 800a966:	b510      	push	{r4, lr}
 800a968:	4604      	mov	r4, r0
 800a96a:	e9c0 3300 	strd	r3, r3, [r0]
 800a96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a972:	6083      	str	r3, [r0, #8]
 800a974:	8181      	strh	r1, [r0, #12]
 800a976:	6643      	str	r3, [r0, #100]	@ 0x64
 800a978:	81c2      	strh	r2, [r0, #14]
 800a97a:	6183      	str	r3, [r0, #24]
 800a97c:	4619      	mov	r1, r3
 800a97e:	2208      	movs	r2, #8
 800a980:	305c      	adds	r0, #92	@ 0x5c
 800a982:	f000 f928 	bl	800abd6 <memset>
 800a986:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <std+0x58>)
 800a988:	6263      	str	r3, [r4, #36]	@ 0x24
 800a98a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c0 <std+0x5c>)
 800a98c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a98e:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c4 <std+0x60>)
 800a990:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a992:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <std+0x64>)
 800a994:	6323      	str	r3, [r4, #48]	@ 0x30
 800a996:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <std+0x68>)
 800a998:	6224      	str	r4, [r4, #32]
 800a99a:	429c      	cmp	r4, r3
 800a99c:	d006      	beq.n	800a9ac <std+0x48>
 800a99e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9a2:	4294      	cmp	r4, r2
 800a9a4:	d002      	beq.n	800a9ac <std+0x48>
 800a9a6:	33d0      	adds	r3, #208	@ 0xd0
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d105      	bne.n	800a9b8 <std+0x54>
 800a9ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b4:	f000 b9f4 	b.w	800ada0 <__retarget_lock_init_recursive>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	bf00      	nop
 800a9bc:	0800ab51 	.word	0x0800ab51
 800a9c0:	0800ab73 	.word	0x0800ab73
 800a9c4:	0800abab 	.word	0x0800abab
 800a9c8:	0800abcf 	.word	0x0800abcf
 800a9cc:	240006cc 	.word	0x240006cc

0800a9d0 <stdio_exit_handler>:
 800a9d0:	4a02      	ldr	r2, [pc, #8]	@ (800a9dc <stdio_exit_handler+0xc>)
 800a9d2:	4903      	ldr	r1, [pc, #12]	@ (800a9e0 <stdio_exit_handler+0x10>)
 800a9d4:	4803      	ldr	r0, [pc, #12]	@ (800a9e4 <stdio_exit_handler+0x14>)
 800a9d6:	f000 b869 	b.w	800aaac <_fwalk_sglue>
 800a9da:	bf00      	nop
 800a9dc:	24000078 	.word	0x24000078
 800a9e0:	0800b569 	.word	0x0800b569
 800a9e4:	24000088 	.word	0x24000088

0800a9e8 <cleanup_stdio>:
 800a9e8:	6841      	ldr	r1, [r0, #4]
 800a9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800aa1c <cleanup_stdio+0x34>)
 800a9ec:	4299      	cmp	r1, r3
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	d001      	beq.n	800a9f8 <cleanup_stdio+0x10>
 800a9f4:	f000 fdb8 	bl	800b568 <_fflush_r>
 800a9f8:	68a1      	ldr	r1, [r4, #8]
 800a9fa:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <cleanup_stdio+0x38>)
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	d002      	beq.n	800aa06 <cleanup_stdio+0x1e>
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fdb1 	bl	800b568 <_fflush_r>
 800aa06:	68e1      	ldr	r1, [r4, #12]
 800aa08:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <cleanup_stdio+0x3c>)
 800aa0a:	4299      	cmp	r1, r3
 800aa0c:	d004      	beq.n	800aa18 <cleanup_stdio+0x30>
 800aa0e:	4620      	mov	r0, r4
 800aa10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa14:	f000 bda8 	b.w	800b568 <_fflush_r>
 800aa18:	bd10      	pop	{r4, pc}
 800aa1a:	bf00      	nop
 800aa1c:	240006cc 	.word	0x240006cc
 800aa20:	24000734 	.word	0x24000734
 800aa24:	2400079c 	.word	0x2400079c

0800aa28 <global_stdio_init.part.0>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <global_stdio_init.part.0+0x30>)
 800aa2c:	4c0b      	ldr	r4, [pc, #44]	@ (800aa5c <global_stdio_init.part.0+0x34>)
 800aa2e:	4a0c      	ldr	r2, [pc, #48]	@ (800aa60 <global_stdio_init.part.0+0x38>)
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	4620      	mov	r0, r4
 800aa34:	2200      	movs	r2, #0
 800aa36:	2104      	movs	r1, #4
 800aa38:	f7ff ff94 	bl	800a964 <std>
 800aa3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa40:	2201      	movs	r2, #1
 800aa42:	2109      	movs	r1, #9
 800aa44:	f7ff ff8e 	bl	800a964 <std>
 800aa48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa52:	2112      	movs	r1, #18
 800aa54:	f7ff bf86 	b.w	800a964 <std>
 800aa58:	24000804 	.word	0x24000804
 800aa5c:	240006cc 	.word	0x240006cc
 800aa60:	0800a9d1 	.word	0x0800a9d1

0800aa64 <__sfp_lock_acquire>:
 800aa64:	4801      	ldr	r0, [pc, #4]	@ (800aa6c <__sfp_lock_acquire+0x8>)
 800aa66:	f000 b99c 	b.w	800ada2 <__retarget_lock_acquire_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	2400080d 	.word	0x2400080d

0800aa70 <__sfp_lock_release>:
 800aa70:	4801      	ldr	r0, [pc, #4]	@ (800aa78 <__sfp_lock_release+0x8>)
 800aa72:	f000 b997 	b.w	800ada4 <__retarget_lock_release_recursive>
 800aa76:	bf00      	nop
 800aa78:	2400080d 	.word	0x2400080d

0800aa7c <__sinit>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4604      	mov	r4, r0
 800aa80:	f7ff fff0 	bl	800aa64 <__sfp_lock_acquire>
 800aa84:	6a23      	ldr	r3, [r4, #32]
 800aa86:	b11b      	cbz	r3, 800aa90 <__sinit+0x14>
 800aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8c:	f7ff bff0 	b.w	800aa70 <__sfp_lock_release>
 800aa90:	4b04      	ldr	r3, [pc, #16]	@ (800aaa4 <__sinit+0x28>)
 800aa92:	6223      	str	r3, [r4, #32]
 800aa94:	4b04      	ldr	r3, [pc, #16]	@ (800aaa8 <__sinit+0x2c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f5      	bne.n	800aa88 <__sinit+0xc>
 800aa9c:	f7ff ffc4 	bl	800aa28 <global_stdio_init.part.0>
 800aaa0:	e7f2      	b.n	800aa88 <__sinit+0xc>
 800aaa2:	bf00      	nop
 800aaa4:	0800a9e9 	.word	0x0800a9e9
 800aaa8:	24000804 	.word	0x24000804

0800aaac <_fwalk_sglue>:
 800aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4607      	mov	r7, r0
 800aab2:	4688      	mov	r8, r1
 800aab4:	4614      	mov	r4, r2
 800aab6:	2600      	movs	r6, #0
 800aab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aabc:	f1b9 0901 	subs.w	r9, r9, #1
 800aac0:	d505      	bpl.n	800aace <_fwalk_sglue+0x22>
 800aac2:	6824      	ldr	r4, [r4, #0]
 800aac4:	2c00      	cmp	r4, #0
 800aac6:	d1f7      	bne.n	800aab8 <_fwalk_sglue+0xc>
 800aac8:	4630      	mov	r0, r6
 800aaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d907      	bls.n	800aae4 <_fwalk_sglue+0x38>
 800aad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aad8:	3301      	adds	r3, #1
 800aada:	d003      	beq.n	800aae4 <_fwalk_sglue+0x38>
 800aadc:	4629      	mov	r1, r5
 800aade:	4638      	mov	r0, r7
 800aae0:	47c0      	blx	r8
 800aae2:	4306      	orrs	r6, r0
 800aae4:	3568      	adds	r5, #104	@ 0x68
 800aae6:	e7e9      	b.n	800aabc <_fwalk_sglue+0x10>

0800aae8 <sniprintf>:
 800aae8:	b40c      	push	{r2, r3}
 800aaea:	b530      	push	{r4, r5, lr}
 800aaec:	4b17      	ldr	r3, [pc, #92]	@ (800ab4c <sniprintf+0x64>)
 800aaee:	1e0c      	subs	r4, r1, #0
 800aaf0:	681d      	ldr	r5, [r3, #0]
 800aaf2:	b09d      	sub	sp, #116	@ 0x74
 800aaf4:	da08      	bge.n	800ab08 <sniprintf+0x20>
 800aaf6:	238b      	movs	r3, #139	@ 0x8b
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295
 800aafe:	b01d      	add	sp, #116	@ 0x74
 800ab00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab04:	b002      	add	sp, #8
 800ab06:	4770      	bx	lr
 800ab08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab10:	bf14      	ite	ne
 800ab12:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab16:	4623      	moveq	r3, r4
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	9307      	str	r3, [sp, #28]
 800ab1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab20:	9002      	str	r0, [sp, #8]
 800ab22:	9006      	str	r0, [sp, #24]
 800ab24:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab2a:	ab21      	add	r3, sp, #132	@ 0x84
 800ab2c:	a902      	add	r1, sp, #8
 800ab2e:	4628      	mov	r0, r5
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	f000 fa0b 	bl	800af4c <_svfiprintf_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	bfbc      	itt	lt
 800ab3a:	238b      	movlt	r3, #139	@ 0x8b
 800ab3c:	602b      	strlt	r3, [r5, #0]
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d0dd      	beq.n	800aafe <sniprintf+0x16>
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	e7d9      	b.n	800aafe <sniprintf+0x16>
 800ab4a:	bf00      	nop
 800ab4c:	24000084 	.word	0x24000084

0800ab50 <__sread>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	f000 f8c4 	bl	800ace4 <_read_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	bfab      	itete	ge
 800ab60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab62:	89a3      	ldrhlt	r3, [r4, #12]
 800ab64:	181b      	addge	r3, r3, r0
 800ab66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab6a:	bfac      	ite	ge
 800ab6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab6e:	81a3      	strhlt	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__swrite>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	461f      	mov	r7, r3
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	05db      	lsls	r3, r3, #23
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4616      	mov	r6, r2
 800ab82:	d505      	bpl.n	800ab90 <__swrite+0x1e>
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f000 f898 	bl	800acc0 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	f000 b8bf 	b.w	800ad28 <_write_r>

0800abaa <__sseek>:
 800abaa:	b510      	push	{r4, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 f885 	bl	800acc0 <_lseek_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	bf15      	itete	ne
 800abbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abc6:	81a3      	strheq	r3, [r4, #12]
 800abc8:	bf18      	it	ne
 800abca:	81a3      	strhne	r3, [r4, #12]
 800abcc:	bd10      	pop	{r4, pc}

0800abce <__sclose>:
 800abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd2:	f000 b865 	b.w	800aca0 <_close_r>

0800abd6 <memset>:
 800abd6:	4402      	add	r2, r0
 800abd8:	4603      	mov	r3, r0
 800abda:	4293      	cmp	r3, r2
 800abdc:	d100      	bne.n	800abe0 <memset+0xa>
 800abde:	4770      	bx	lr
 800abe0:	f803 1b01 	strb.w	r1, [r3], #1
 800abe4:	e7f9      	b.n	800abda <memset+0x4>
	...

0800abe8 <strtok>:
 800abe8:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <strtok+0x5c>)
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	681f      	ldr	r7, [r3, #0]
 800abf0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800abf2:	4605      	mov	r5, r0
 800abf4:	460e      	mov	r6, r1
 800abf6:	b9ec      	cbnz	r4, 800ac34 <strtok+0x4c>
 800abf8:	2050      	movs	r0, #80	@ 0x50
 800abfa:	f7ff fd79 	bl	800a6f0 <malloc>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6478      	str	r0, [r7, #68]	@ 0x44
 800ac02:	b920      	cbnz	r0, 800ac0e <strtok+0x26>
 800ac04:	4b10      	ldr	r3, [pc, #64]	@ (800ac48 <strtok+0x60>)
 800ac06:	4811      	ldr	r0, [pc, #68]	@ (800ac4c <strtok+0x64>)
 800ac08:	215b      	movs	r1, #91	@ 0x5b
 800ac0a:	f000 f8db 	bl	800adc4 <__assert_func>
 800ac0e:	e9c0 4400 	strd	r4, r4, [r0]
 800ac12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ac1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ac22:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ac26:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ac2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ac2e:	6184      	str	r4, [r0, #24]
 800ac30:	7704      	strb	r4, [r0, #28]
 800ac32:	6244      	str	r4, [r0, #36]	@ 0x24
 800ac34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	f000 b806 	b.w	800ac50 <__strtok_r>
 800ac44:	24000084 	.word	0x24000084
 800ac48:	0800bdf5 	.word	0x0800bdf5
 800ac4c:	0800be0c 	.word	0x0800be0c

0800ac50 <__strtok_r>:
 800ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac52:	4604      	mov	r4, r0
 800ac54:	b908      	cbnz	r0, 800ac5a <__strtok_r+0xa>
 800ac56:	6814      	ldr	r4, [r2, #0]
 800ac58:	b144      	cbz	r4, 800ac6c <__strtok_r+0x1c>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac60:	460f      	mov	r7, r1
 800ac62:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac66:	b91e      	cbnz	r6, 800ac70 <__strtok_r+0x20>
 800ac68:	b965      	cbnz	r5, 800ac84 <__strtok_r+0x34>
 800ac6a:	6015      	str	r5, [r2, #0]
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e005      	b.n	800ac7c <__strtok_r+0x2c>
 800ac70:	42b5      	cmp	r5, r6
 800ac72:	d1f6      	bne.n	800ac62 <__strtok_r+0x12>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1f0      	bne.n	800ac5a <__strtok_r+0xa>
 800ac78:	6014      	str	r4, [r2, #0]
 800ac7a:	7003      	strb	r3, [r0, #0]
 800ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7e:	461c      	mov	r4, r3
 800ac80:	e00c      	b.n	800ac9c <__strtok_r+0x4c>
 800ac82:	b915      	cbnz	r5, 800ac8a <__strtok_r+0x3a>
 800ac84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac88:	460e      	mov	r6, r1
 800ac8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac8e:	42ab      	cmp	r3, r5
 800ac90:	d1f7      	bne.n	800ac82 <__strtok_r+0x32>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f3      	beq.n	800ac7e <__strtok_r+0x2e>
 800ac96:	2300      	movs	r3, #0
 800ac98:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac9c:	6014      	str	r4, [r2, #0]
 800ac9e:	e7ed      	b.n	800ac7c <__strtok_r+0x2c>

0800aca0 <_close_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d06      	ldr	r5, [pc, #24]	@ (800acbc <_close_r+0x1c>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f6 fa26 	bl	80010fc <_close>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_close_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_close_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	24000808 	.word	0x24000808

0800acc0 <_lseek_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d07      	ldr	r5, [pc, #28]	@ (800ace0 <_lseek_r+0x20>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7f6 fa3b 	bl	800114a <_lseek>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_lseek_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_lseek_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	24000808 	.word	0x24000808

0800ace4 <_read_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	@ (800ad04 <_read_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7f6 f9c9 	bl	800108a <_read>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_read_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_read_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	24000808 	.word	0x24000808

0800ad08 <_sbrk_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d06      	ldr	r5, [pc, #24]	@ (800ad24 <_sbrk_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f6 fa26 	bl	8001164 <_sbrk>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_sbrk_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_sbrk_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	24000808 	.word	0x24000808

0800ad28 <_write_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	@ (800ad48 <_write_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f6 f9c4 	bl	80010c4 <_write>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_write_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_write_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	24000808 	.word	0x24000808

0800ad4c <__errno>:
 800ad4c:	4b01      	ldr	r3, [pc, #4]	@ (800ad54 <__errno+0x8>)
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	24000084 	.word	0x24000084

0800ad58 <__libc_init_array>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	4d0d      	ldr	r5, [pc, #52]	@ (800ad90 <__libc_init_array+0x38>)
 800ad5c:	4c0d      	ldr	r4, [pc, #52]	@ (800ad94 <__libc_init_array+0x3c>)
 800ad5e:	1b64      	subs	r4, r4, r5
 800ad60:	10a4      	asrs	r4, r4, #2
 800ad62:	2600      	movs	r6, #0
 800ad64:	42a6      	cmp	r6, r4
 800ad66:	d109      	bne.n	800ad7c <__libc_init_array+0x24>
 800ad68:	4d0b      	ldr	r5, [pc, #44]	@ (800ad98 <__libc_init_array+0x40>)
 800ad6a:	4c0c      	ldr	r4, [pc, #48]	@ (800ad9c <__libc_init_array+0x44>)
 800ad6c:	f000 ff2a 	bl	800bbc4 <_init>
 800ad70:	1b64      	subs	r4, r4, r5
 800ad72:	10a4      	asrs	r4, r4, #2
 800ad74:	2600      	movs	r6, #0
 800ad76:	42a6      	cmp	r6, r4
 800ad78:	d105      	bne.n	800ad86 <__libc_init_array+0x2e>
 800ad7a:	bd70      	pop	{r4, r5, r6, pc}
 800ad7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad80:	4798      	blx	r3
 800ad82:	3601      	adds	r6, #1
 800ad84:	e7ee      	b.n	800ad64 <__libc_init_array+0xc>
 800ad86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad8a:	4798      	blx	r3
 800ad8c:	3601      	adds	r6, #1
 800ad8e:	e7f2      	b.n	800ad76 <__libc_init_array+0x1e>
 800ad90:	0800bee0 	.word	0x0800bee0
 800ad94:	0800bee0 	.word	0x0800bee0
 800ad98:	0800bee0 	.word	0x0800bee0
 800ad9c:	0800bee4 	.word	0x0800bee4

0800ada0 <__retarget_lock_init_recursive>:
 800ada0:	4770      	bx	lr

0800ada2 <__retarget_lock_acquire_recursive>:
 800ada2:	4770      	bx	lr

0800ada4 <__retarget_lock_release_recursive>:
 800ada4:	4770      	bx	lr

0800ada6 <memcpy>:
 800ada6:	440a      	add	r2, r1
 800ada8:	4291      	cmp	r1, r2
 800adaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800adae:	d100      	bne.n	800adb2 <memcpy+0xc>
 800adb0:	4770      	bx	lr
 800adb2:	b510      	push	{r4, lr}
 800adb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adbc:	4291      	cmp	r1, r2
 800adbe:	d1f9      	bne.n	800adb4 <memcpy+0xe>
 800adc0:	bd10      	pop	{r4, pc}
	...

0800adc4 <__assert_func>:
 800adc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adc6:	4614      	mov	r4, r2
 800adc8:	461a      	mov	r2, r3
 800adca:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <__assert_func+0x2c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4605      	mov	r5, r0
 800add0:	68d8      	ldr	r0, [r3, #12]
 800add2:	b954      	cbnz	r4, 800adea <__assert_func+0x26>
 800add4:	4b07      	ldr	r3, [pc, #28]	@ (800adf4 <__assert_func+0x30>)
 800add6:	461c      	mov	r4, r3
 800add8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800addc:	9100      	str	r1, [sp, #0]
 800adde:	462b      	mov	r3, r5
 800ade0:	4905      	ldr	r1, [pc, #20]	@ (800adf8 <__assert_func+0x34>)
 800ade2:	f000 fbe9 	bl	800b5b8 <fiprintf>
 800ade6:	f000 fc13 	bl	800b610 <abort>
 800adea:	4b04      	ldr	r3, [pc, #16]	@ (800adfc <__assert_func+0x38>)
 800adec:	e7f4      	b.n	800add8 <__assert_func+0x14>
 800adee:	bf00      	nop
 800adf0:	24000084 	.word	0x24000084
 800adf4:	0800bea1 	.word	0x0800bea1
 800adf8:	0800be73 	.word	0x0800be73
 800adfc:	0800be66 	.word	0x0800be66

0800ae00 <_free_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4605      	mov	r5, r0
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d041      	beq.n	800ae8c <_free_r+0x8c>
 800ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae0c:	1f0c      	subs	r4, r1, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfb8      	it	lt
 800ae12:	18e4      	addlt	r4, r4, r3
 800ae14:	f7ff fd16 	bl	800a844 <__malloc_lock>
 800ae18:	4a1d      	ldr	r2, [pc, #116]	@ (800ae90 <_free_r+0x90>)
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	b933      	cbnz	r3, 800ae2c <_free_r+0x2c>
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6014      	str	r4, [r2, #0]
 800ae22:	4628      	mov	r0, r5
 800ae24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae28:	f7ff bd12 	b.w	800a850 <__malloc_unlock>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d908      	bls.n	800ae42 <_free_r+0x42>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	1821      	adds	r1, r4, r0
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf01      	itttt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	1809      	addeq	r1, r1, r0
 800ae3e:	6021      	streq	r1, [r4, #0]
 800ae40:	e7ed      	b.n	800ae1e <_free_r+0x1e>
 800ae42:	461a      	mov	r2, r3
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b10b      	cbz	r3, 800ae4c <_free_r+0x4c>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x42>
 800ae4c:	6811      	ldr	r1, [r2, #0]
 800ae4e:	1850      	adds	r0, r2, r1
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x6c>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	4401      	add	r1, r0
 800ae58:	1850      	adds	r0, r2, r1
 800ae5a:	4283      	cmp	r3, r0
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	d1e0      	bne.n	800ae22 <_free_r+0x22>
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	6053      	str	r3, [r2, #4]
 800ae66:	4408      	add	r0, r1
 800ae68:	6010      	str	r0, [r2, #0]
 800ae6a:	e7da      	b.n	800ae22 <_free_r+0x22>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x74>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	e7d6      	b.n	800ae22 <_free_r+0x22>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	1821      	adds	r1, r4, r0
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf04      	itt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	bf04      	itt	eq
 800ae84:	1809      	addeq	r1, r1, r0
 800ae86:	6021      	streq	r1, [r4, #0]
 800ae88:	6054      	str	r4, [r2, #4]
 800ae8a:	e7ca      	b.n	800ae22 <_free_r+0x22>
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	240006c8 	.word	0x240006c8

0800ae94 <__ssputs_r>:
 800ae94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae98:	688e      	ldr	r6, [r1, #8]
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	42be      	cmp	r6, r7
 800ae9e:	680b      	ldr	r3, [r1, #0]
 800aea0:	4682      	mov	sl, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4690      	mov	r8, r2
 800aea6:	d82d      	bhi.n	800af04 <__ssputs_r+0x70>
 800aea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aeb0:	d026      	beq.n	800af00 <__ssputs_r+0x6c>
 800aeb2:	6965      	ldr	r5, [r4, #20]
 800aeb4:	6909      	ldr	r1, [r1, #16]
 800aeb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeba:	eba3 0901 	sub.w	r9, r3, r1
 800aebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aec2:	1c7b      	adds	r3, r7, #1
 800aec4:	444b      	add	r3, r9
 800aec6:	106d      	asrs	r5, r5, #1
 800aec8:	429d      	cmp	r5, r3
 800aeca:	bf38      	it	cc
 800aecc:	461d      	movcc	r5, r3
 800aece:	0553      	lsls	r3, r2, #21
 800aed0:	d527      	bpl.n	800af22 <__ssputs_r+0x8e>
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7ff fc36 	bl	800a744 <_malloc_r>
 800aed8:	4606      	mov	r6, r0
 800aeda:	b360      	cbz	r0, 800af36 <__ssputs_r+0xa2>
 800aedc:	6921      	ldr	r1, [r4, #16]
 800aede:	464a      	mov	r2, r9
 800aee0:	f7ff ff61 	bl	800ada6 <memcpy>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	6126      	str	r6, [r4, #16]
 800aef2:	6165      	str	r5, [r4, #20]
 800aef4:	444e      	add	r6, r9
 800aef6:	eba5 0509 	sub.w	r5, r5, r9
 800aefa:	6026      	str	r6, [r4, #0]
 800aefc:	60a5      	str	r5, [r4, #8]
 800aefe:	463e      	mov	r6, r7
 800af00:	42be      	cmp	r6, r7
 800af02:	d900      	bls.n	800af06 <__ssputs_r+0x72>
 800af04:	463e      	mov	r6, r7
 800af06:	6820      	ldr	r0, [r4, #0]
 800af08:	4632      	mov	r2, r6
 800af0a:	4641      	mov	r1, r8
 800af0c:	f000 fb66 	bl	800b5dc <memmove>
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	1b9b      	subs	r3, r3, r6
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	4433      	add	r3, r6
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	462a      	mov	r2, r5
 800af24:	f000 fb7b 	bl	800b61e <_realloc_r>
 800af28:	4606      	mov	r6, r0
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1e0      	bne.n	800aef0 <__ssputs_r+0x5c>
 800af2e:	6921      	ldr	r1, [r4, #16]
 800af30:	4650      	mov	r0, sl
 800af32:	f7ff ff65 	bl	800ae00 <_free_r>
 800af36:	230c      	movs	r3, #12
 800af38:	f8ca 3000 	str.w	r3, [sl]
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e7e9      	b.n	800af1e <__ssputs_r+0x8a>
	...

0800af4c <_svfiprintf_r>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	4698      	mov	r8, r3
 800af52:	898b      	ldrh	r3, [r1, #12]
 800af54:	061b      	lsls	r3, r3, #24
 800af56:	b09d      	sub	sp, #116	@ 0x74
 800af58:	4607      	mov	r7, r0
 800af5a:	460d      	mov	r5, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	d510      	bpl.n	800af82 <_svfiprintf_r+0x36>
 800af60:	690b      	ldr	r3, [r1, #16]
 800af62:	b973      	cbnz	r3, 800af82 <_svfiprintf_r+0x36>
 800af64:	2140      	movs	r1, #64	@ 0x40
 800af66:	f7ff fbed 	bl	800a744 <_malloc_r>
 800af6a:	6028      	str	r0, [r5, #0]
 800af6c:	6128      	str	r0, [r5, #16]
 800af6e:	b930      	cbnz	r0, 800af7e <_svfiprintf_r+0x32>
 800af70:	230c      	movs	r3, #12
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	b01d      	add	sp, #116	@ 0x74
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	2340      	movs	r3, #64	@ 0x40
 800af80:	616b      	str	r3, [r5, #20]
 800af82:	2300      	movs	r3, #0
 800af84:	9309      	str	r3, [sp, #36]	@ 0x24
 800af86:	2320      	movs	r3, #32
 800af88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af90:	2330      	movs	r3, #48	@ 0x30
 800af92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b130 <_svfiprintf_r+0x1e4>
 800af96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af9a:	f04f 0901 	mov.w	r9, #1
 800af9e:	4623      	mov	r3, r4
 800afa0:	469a      	mov	sl, r3
 800afa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa6:	b10a      	cbz	r2, 800afac <_svfiprintf_r+0x60>
 800afa8:	2a25      	cmp	r2, #37	@ 0x25
 800afaa:	d1f9      	bne.n	800afa0 <_svfiprintf_r+0x54>
 800afac:	ebba 0b04 	subs.w	fp, sl, r4
 800afb0:	d00b      	beq.n	800afca <_svfiprintf_r+0x7e>
 800afb2:	465b      	mov	r3, fp
 800afb4:	4622      	mov	r2, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ff6b 	bl	800ae94 <__ssputs_r>
 800afbe:	3001      	adds	r0, #1
 800afc0:	f000 80a7 	beq.w	800b112 <_svfiprintf_r+0x1c6>
 800afc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc6:	445a      	add	r2, fp
 800afc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afca:	f89a 3000 	ldrb.w	r3, [sl]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 809f 	beq.w	800b112 <_svfiprintf_r+0x1c6>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afde:	f10a 0a01 	add.w	sl, sl, #1
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	9307      	str	r3, [sp, #28]
 800afe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afea:	931a      	str	r3, [sp, #104]	@ 0x68
 800afec:	4654      	mov	r4, sl
 800afee:	2205      	movs	r2, #5
 800aff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff4:	484e      	ldr	r0, [pc, #312]	@ (800b130 <_svfiprintf_r+0x1e4>)
 800aff6:	f7f5 f99b 	bl	8000330 <memchr>
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	b9d8      	cbnz	r0, 800b036 <_svfiprintf_r+0xea>
 800affe:	06d0      	lsls	r0, r2, #27
 800b000:	bf44      	itt	mi
 800b002:	2320      	movmi	r3, #32
 800b004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b008:	0711      	lsls	r1, r2, #28
 800b00a:	bf44      	itt	mi
 800b00c:	232b      	movmi	r3, #43	@ 0x2b
 800b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b2a      	cmp	r3, #42	@ 0x2a
 800b018:	d015      	beq.n	800b046 <_svfiprintf_r+0xfa>
 800b01a:	9a07      	ldr	r2, [sp, #28]
 800b01c:	4654      	mov	r4, sl
 800b01e:	2000      	movs	r0, #0
 800b020:	f04f 0c0a 	mov.w	ip, #10
 800b024:	4621      	mov	r1, r4
 800b026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b02a:	3b30      	subs	r3, #48	@ 0x30
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d94b      	bls.n	800b0c8 <_svfiprintf_r+0x17c>
 800b030:	b1b0      	cbz	r0, 800b060 <_svfiprintf_r+0x114>
 800b032:	9207      	str	r2, [sp, #28]
 800b034:	e014      	b.n	800b060 <_svfiprintf_r+0x114>
 800b036:	eba0 0308 	sub.w	r3, r0, r8
 800b03a:	fa09 f303 	lsl.w	r3, r9, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	46a2      	mov	sl, r4
 800b044:	e7d2      	b.n	800afec <_svfiprintf_r+0xa0>
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	9103      	str	r1, [sp, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfbb      	ittet	lt
 800b052:	425b      	neglt	r3, r3
 800b054:	f042 0202 	orrlt.w	r2, r2, #2
 800b058:	9307      	strge	r3, [sp, #28]
 800b05a:	9307      	strlt	r3, [sp, #28]
 800b05c:	bfb8      	it	lt
 800b05e:	9204      	strlt	r2, [sp, #16]
 800b060:	7823      	ldrb	r3, [r4, #0]
 800b062:	2b2e      	cmp	r3, #46	@ 0x2e
 800b064:	d10a      	bne.n	800b07c <_svfiprintf_r+0x130>
 800b066:	7863      	ldrb	r3, [r4, #1]
 800b068:	2b2a      	cmp	r3, #42	@ 0x2a
 800b06a:	d132      	bne.n	800b0d2 <_svfiprintf_r+0x186>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	1d1a      	adds	r2, r3, #4
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	9203      	str	r2, [sp, #12]
 800b074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b078:	3402      	adds	r4, #2
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b140 <_svfiprintf_r+0x1f4>
 800b080:	7821      	ldrb	r1, [r4, #0]
 800b082:	2203      	movs	r2, #3
 800b084:	4650      	mov	r0, sl
 800b086:	f7f5 f953 	bl	8000330 <memchr>
 800b08a:	b138      	cbz	r0, 800b09c <_svfiprintf_r+0x150>
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	eba0 000a 	sub.w	r0, r0, sl
 800b092:	2240      	movs	r2, #64	@ 0x40
 800b094:	4082      	lsls	r2, r0
 800b096:	4313      	orrs	r3, r2
 800b098:	3401      	adds	r4, #1
 800b09a:	9304      	str	r3, [sp, #16]
 800b09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a0:	4824      	ldr	r0, [pc, #144]	@ (800b134 <_svfiprintf_r+0x1e8>)
 800b0a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	f7f5 f942 	bl	8000330 <memchr>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d036      	beq.n	800b11e <_svfiprintf_r+0x1d2>
 800b0b0:	4b21      	ldr	r3, [pc, #132]	@ (800b138 <_svfiprintf_r+0x1ec>)
 800b0b2:	bb1b      	cbnz	r3, 800b0fc <_svfiprintf_r+0x1b0>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	3307      	adds	r3, #7
 800b0b8:	f023 0307 	bic.w	r3, r3, #7
 800b0bc:	3308      	adds	r3, #8
 800b0be:	9303      	str	r3, [sp, #12]
 800b0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c2:	4433      	add	r3, r6
 800b0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c6:	e76a      	b.n	800af9e <_svfiprintf_r+0x52>
 800b0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	e7a8      	b.n	800b024 <_svfiprintf_r+0xd8>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	9305      	str	r3, [sp, #20]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e4:	3a30      	subs	r2, #48	@ 0x30
 800b0e6:	2a09      	cmp	r2, #9
 800b0e8:	d903      	bls.n	800b0f2 <_svfiprintf_r+0x1a6>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0c6      	beq.n	800b07c <_svfiprintf_r+0x130>
 800b0ee:	9105      	str	r1, [sp, #20]
 800b0f0:	e7c4      	b.n	800b07c <_svfiprintf_r+0x130>
 800b0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e7f0      	b.n	800b0de <_svfiprintf_r+0x192>
 800b0fc:	ab03      	add	r3, sp, #12
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	462a      	mov	r2, r5
 800b102:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <_svfiprintf_r+0x1f0>)
 800b104:	a904      	add	r1, sp, #16
 800b106:	4638      	mov	r0, r7
 800b108:	f3af 8000 	nop.w
 800b10c:	1c42      	adds	r2, r0, #1
 800b10e:	4606      	mov	r6, r0
 800b110:	d1d6      	bne.n	800b0c0 <_svfiprintf_r+0x174>
 800b112:	89ab      	ldrh	r3, [r5, #12]
 800b114:	065b      	lsls	r3, r3, #25
 800b116:	f53f af2d 	bmi.w	800af74 <_svfiprintf_r+0x28>
 800b11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b11c:	e72c      	b.n	800af78 <_svfiprintf_r+0x2c>
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	462a      	mov	r2, r5
 800b124:	4b05      	ldr	r3, [pc, #20]	@ (800b13c <_svfiprintf_r+0x1f0>)
 800b126:	a904      	add	r1, sp, #16
 800b128:	4638      	mov	r0, r7
 800b12a:	f000 f879 	bl	800b220 <_printf_i>
 800b12e:	e7ed      	b.n	800b10c <_svfiprintf_r+0x1c0>
 800b130:	0800bea2 	.word	0x0800bea2
 800b134:	0800beac 	.word	0x0800beac
 800b138:	00000000 	.word	0x00000000
 800b13c:	0800ae95 	.word	0x0800ae95
 800b140:	0800bea8 	.word	0x0800bea8

0800b144 <_printf_common>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	4616      	mov	r6, r2
 800b14a:	4698      	mov	r8, r3
 800b14c:	688a      	ldr	r2, [r1, #8]
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b154:	4293      	cmp	r3, r2
 800b156:	bfb8      	it	lt
 800b158:	4613      	movlt	r3, r2
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b160:	4607      	mov	r7, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b10a      	cbz	r2, 800b16a <_printf_common+0x26>
 800b166:	3301      	adds	r3, #1
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	0699      	lsls	r1, r3, #26
 800b16e:	bf42      	ittt	mi
 800b170:	6833      	ldrmi	r3, [r6, #0]
 800b172:	3302      	addmi	r3, #2
 800b174:	6033      	strmi	r3, [r6, #0]
 800b176:	6825      	ldr	r5, [r4, #0]
 800b178:	f015 0506 	ands.w	r5, r5, #6
 800b17c:	d106      	bne.n	800b18c <_printf_common+0x48>
 800b17e:	f104 0a19 	add.w	sl, r4, #25
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	6832      	ldr	r2, [r6, #0]
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc26      	bgt.n	800b1da <_printf_common+0x96>
 800b18c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	3b00      	subs	r3, #0
 800b194:	bf18      	it	ne
 800b196:	2301      	movne	r3, #1
 800b198:	0692      	lsls	r2, r2, #26
 800b19a:	d42b      	bmi.n	800b1f4 <_printf_common+0xb0>
 800b19c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c8      	blx	r9
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d01e      	beq.n	800b1e8 <_printf_common+0xa4>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	f003 0306 	and.w	r3, r3, #6
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	bf02      	ittt	eq
 800b1b6:	68e5      	ldreq	r5, [r4, #12]
 800b1b8:	6833      	ldreq	r3, [r6, #0]
 800b1ba:	1aed      	subeq	r5, r5, r3
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	bf0c      	ite	eq
 800b1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c4:	2500      	movne	r5, #0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	bfc4      	itt	gt
 800b1ca:	1a9b      	subgt	r3, r3, r2
 800b1cc:	18ed      	addgt	r5, r5, r3
 800b1ce:	2600      	movs	r6, #0
 800b1d0:	341a      	adds	r4, #26
 800b1d2:	42b5      	cmp	r5, r6
 800b1d4:	d11a      	bne.n	800b20c <_printf_common+0xc8>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e008      	b.n	800b1ec <_printf_common+0xa8>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4652      	mov	r2, sl
 800b1de:	4641      	mov	r1, r8
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	47c8      	blx	r9
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d103      	bne.n	800b1f0 <_printf_common+0xac>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	e7c6      	b.n	800b182 <_printf_common+0x3e>
 800b1f4:	18e1      	adds	r1, r4, r3
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	2030      	movs	r0, #48	@ 0x30
 800b1fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1fe:	4422      	add	r2, r4
 800b200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b208:	3302      	adds	r3, #2
 800b20a:	e7c7      	b.n	800b19c <_printf_common+0x58>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4622      	mov	r2, r4
 800b210:	4641      	mov	r1, r8
 800b212:	4638      	mov	r0, r7
 800b214:	47c8      	blx	r9
 800b216:	3001      	adds	r0, #1
 800b218:	d0e6      	beq.n	800b1e8 <_printf_common+0xa4>
 800b21a:	3601      	adds	r6, #1
 800b21c:	e7d9      	b.n	800b1d2 <_printf_common+0x8e>
	...

0800b220 <_printf_i>:
 800b220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	7e0f      	ldrb	r7, [r1, #24]
 800b226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b228:	2f78      	cmp	r7, #120	@ 0x78
 800b22a:	4691      	mov	r9, r2
 800b22c:	4680      	mov	r8, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	469a      	mov	sl, r3
 800b232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b236:	d807      	bhi.n	800b248 <_printf_i+0x28>
 800b238:	2f62      	cmp	r7, #98	@ 0x62
 800b23a:	d80a      	bhi.n	800b252 <_printf_i+0x32>
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	f000 80d2 	beq.w	800b3e6 <_printf_i+0x1c6>
 800b242:	2f58      	cmp	r7, #88	@ 0x58
 800b244:	f000 80b9 	beq.w	800b3ba <_printf_i+0x19a>
 800b248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b24c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b250:	e03a      	b.n	800b2c8 <_printf_i+0xa8>
 800b252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b256:	2b15      	cmp	r3, #21
 800b258:	d8f6      	bhi.n	800b248 <_printf_i+0x28>
 800b25a:	a101      	add	r1, pc, #4	@ (adr r1, 800b260 <_printf_i+0x40>)
 800b25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b260:	0800b2b9 	.word	0x0800b2b9
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b249 	.word	0x0800b249
 800b26c:	0800b249 	.word	0x0800b249
 800b270:	0800b249 	.word	0x0800b249
 800b274:	0800b249 	.word	0x0800b249
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b249 	.word	0x0800b249
 800b280:	0800b249 	.word	0x0800b249
 800b284:	0800b249 	.word	0x0800b249
 800b288:	0800b249 	.word	0x0800b249
 800b28c:	0800b3cd 	.word	0x0800b3cd
 800b290:	0800b2f7 	.word	0x0800b2f7
 800b294:	0800b387 	.word	0x0800b387
 800b298:	0800b249 	.word	0x0800b249
 800b29c:	0800b249 	.word	0x0800b249
 800b2a0:	0800b3ef 	.word	0x0800b3ef
 800b2a4:	0800b249 	.word	0x0800b249
 800b2a8:	0800b2f7 	.word	0x0800b2f7
 800b2ac:	0800b249 	.word	0x0800b249
 800b2b0:	0800b249 	.word	0x0800b249
 800b2b4:	0800b38f 	.word	0x0800b38f
 800b2b8:	6833      	ldr	r3, [r6, #0]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6032      	str	r2, [r6, #0]
 800b2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e09d      	b.n	800b408 <_printf_i+0x1e8>
 800b2cc:	6833      	ldr	r3, [r6, #0]
 800b2ce:	6820      	ldr	r0, [r4, #0]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	6031      	str	r1, [r6, #0]
 800b2d4:	0606      	lsls	r6, r0, #24
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0xbc>
 800b2d8:	681d      	ldr	r5, [r3, #0]
 800b2da:	e003      	b.n	800b2e4 <_printf_i+0xc4>
 800b2dc:	0645      	lsls	r5, r0, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0xb8>
 800b2e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	da03      	bge.n	800b2f0 <_printf_i+0xd0>
 800b2e8:	232d      	movs	r3, #45	@ 0x2d
 800b2ea:	426d      	negs	r5, r5
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f0:	4859      	ldr	r0, [pc, #356]	@ (800b458 <_printf_i+0x238>)
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	e011      	b.n	800b31a <_printf_i+0xfa>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	0608      	lsls	r0, r1, #24
 800b2fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b300:	d402      	bmi.n	800b308 <_printf_i+0xe8>
 800b302:	0649      	lsls	r1, r1, #25
 800b304:	bf48      	it	mi
 800b306:	b2ad      	uxthmi	r5, r5
 800b308:	2f6f      	cmp	r7, #111	@ 0x6f
 800b30a:	4853      	ldr	r0, [pc, #332]	@ (800b458 <_printf_i+0x238>)
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	bf14      	ite	ne
 800b310:	230a      	movne	r3, #10
 800b312:	2308      	moveq	r3, #8
 800b314:	2100      	movs	r1, #0
 800b316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b31a:	6866      	ldr	r6, [r4, #4]
 800b31c:	60a6      	str	r6, [r4, #8]
 800b31e:	2e00      	cmp	r6, #0
 800b320:	bfa2      	ittt	ge
 800b322:	6821      	ldrge	r1, [r4, #0]
 800b324:	f021 0104 	bicge.w	r1, r1, #4
 800b328:	6021      	strge	r1, [r4, #0]
 800b32a:	b90d      	cbnz	r5, 800b330 <_printf_i+0x110>
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	d04b      	beq.n	800b3c8 <_printf_i+0x1a8>
 800b330:	4616      	mov	r6, r2
 800b332:	fbb5 f1f3 	udiv	r1, r5, r3
 800b336:	fb03 5711 	mls	r7, r3, r1, r5
 800b33a:	5dc7      	ldrb	r7, [r0, r7]
 800b33c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b340:	462f      	mov	r7, r5
 800b342:	42bb      	cmp	r3, r7
 800b344:	460d      	mov	r5, r1
 800b346:	d9f4      	bls.n	800b332 <_printf_i+0x112>
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d10b      	bne.n	800b364 <_printf_i+0x144>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	07df      	lsls	r7, r3, #31
 800b350:	d508      	bpl.n	800b364 <_printf_i+0x144>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	4299      	cmp	r1, r3
 800b358:	bfde      	ittt	le
 800b35a:	2330      	movle	r3, #48	@ 0x30
 800b35c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b360:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b364:	1b92      	subs	r2, r2, r6
 800b366:	6122      	str	r2, [r4, #16]
 800b368:	f8cd a000 	str.w	sl, [sp]
 800b36c:	464b      	mov	r3, r9
 800b36e:	aa03      	add	r2, sp, #12
 800b370:	4621      	mov	r1, r4
 800b372:	4640      	mov	r0, r8
 800b374:	f7ff fee6 	bl	800b144 <_printf_common>
 800b378:	3001      	adds	r0, #1
 800b37a:	d14a      	bne.n	800b412 <_printf_i+0x1f2>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	b004      	add	sp, #16
 800b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	f043 0320 	orr.w	r3, r3, #32
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	4833      	ldr	r0, [pc, #204]	@ (800b45c <_printf_i+0x23c>)
 800b390:	2778      	movs	r7, #120	@ 0x78
 800b392:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	6831      	ldr	r1, [r6, #0]
 800b39a:	061f      	lsls	r7, r3, #24
 800b39c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3a0:	d402      	bmi.n	800b3a8 <_printf_i+0x188>
 800b3a2:	065f      	lsls	r7, r3, #25
 800b3a4:	bf48      	it	mi
 800b3a6:	b2ad      	uxthmi	r5, r5
 800b3a8:	6031      	str	r1, [r6, #0]
 800b3aa:	07d9      	lsls	r1, r3, #31
 800b3ac:	bf44      	itt	mi
 800b3ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b2:	6023      	strmi	r3, [r4, #0]
 800b3b4:	b11d      	cbz	r5, 800b3be <_printf_i+0x19e>
 800b3b6:	2310      	movs	r3, #16
 800b3b8:	e7ac      	b.n	800b314 <_printf_i+0xf4>
 800b3ba:	4827      	ldr	r0, [pc, #156]	@ (800b458 <_printf_i+0x238>)
 800b3bc:	e7e9      	b.n	800b392 <_printf_i+0x172>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	f023 0320 	bic.w	r3, r3, #32
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	e7f6      	b.n	800b3b6 <_printf_i+0x196>
 800b3c8:	4616      	mov	r6, r2
 800b3ca:	e7bd      	b.n	800b348 <_printf_i+0x128>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	6825      	ldr	r5, [r4, #0]
 800b3d0:	6961      	ldr	r1, [r4, #20]
 800b3d2:	1d18      	adds	r0, r3, #4
 800b3d4:	6030      	str	r0, [r6, #0]
 800b3d6:	062e      	lsls	r6, r5, #24
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	d501      	bpl.n	800b3e0 <_printf_i+0x1c0>
 800b3dc:	6019      	str	r1, [r3, #0]
 800b3de:	e002      	b.n	800b3e6 <_printf_i+0x1c6>
 800b3e0:	0668      	lsls	r0, r5, #25
 800b3e2:	d5fb      	bpl.n	800b3dc <_printf_i+0x1bc>
 800b3e4:	8019      	strh	r1, [r3, #0]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	4616      	mov	r6, r2
 800b3ec:	e7bc      	b.n	800b368 <_printf_i+0x148>
 800b3ee:	6833      	ldr	r3, [r6, #0]
 800b3f0:	1d1a      	adds	r2, r3, #4
 800b3f2:	6032      	str	r2, [r6, #0]
 800b3f4:	681e      	ldr	r6, [r3, #0]
 800b3f6:	6862      	ldr	r2, [r4, #4]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7f4 ff98 	bl	8000330 <memchr>
 800b400:	b108      	cbz	r0, 800b406 <_printf_i+0x1e6>
 800b402:	1b80      	subs	r0, r0, r6
 800b404:	6060      	str	r0, [r4, #4]
 800b406:	6863      	ldr	r3, [r4, #4]
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	2300      	movs	r3, #0
 800b40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b410:	e7aa      	b.n	800b368 <_printf_i+0x148>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	4632      	mov	r2, r6
 800b416:	4649      	mov	r1, r9
 800b418:	4640      	mov	r0, r8
 800b41a:	47d0      	blx	sl
 800b41c:	3001      	adds	r0, #1
 800b41e:	d0ad      	beq.n	800b37c <_printf_i+0x15c>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	079b      	lsls	r3, r3, #30
 800b424:	d413      	bmi.n	800b44e <_printf_i+0x22e>
 800b426:	68e0      	ldr	r0, [r4, #12]
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	4298      	cmp	r0, r3
 800b42c:	bfb8      	it	lt
 800b42e:	4618      	movlt	r0, r3
 800b430:	e7a6      	b.n	800b380 <_printf_i+0x160>
 800b432:	2301      	movs	r3, #1
 800b434:	4632      	mov	r2, r6
 800b436:	4649      	mov	r1, r9
 800b438:	4640      	mov	r0, r8
 800b43a:	47d0      	blx	sl
 800b43c:	3001      	adds	r0, #1
 800b43e:	d09d      	beq.n	800b37c <_printf_i+0x15c>
 800b440:	3501      	adds	r5, #1
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	9903      	ldr	r1, [sp, #12]
 800b446:	1a5b      	subs	r3, r3, r1
 800b448:	42ab      	cmp	r3, r5
 800b44a:	dcf2      	bgt.n	800b432 <_printf_i+0x212>
 800b44c:	e7eb      	b.n	800b426 <_printf_i+0x206>
 800b44e:	2500      	movs	r5, #0
 800b450:	f104 0619 	add.w	r6, r4, #25
 800b454:	e7f5      	b.n	800b442 <_printf_i+0x222>
 800b456:	bf00      	nop
 800b458:	0800beb3 	.word	0x0800beb3
 800b45c:	0800bec4 	.word	0x0800bec4

0800b460 <__sflush_r>:
 800b460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	0716      	lsls	r6, r2, #28
 800b46a:	4605      	mov	r5, r0
 800b46c:	460c      	mov	r4, r1
 800b46e:	d454      	bmi.n	800b51a <__sflush_r+0xba>
 800b470:	684b      	ldr	r3, [r1, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	dc02      	bgt.n	800b47c <__sflush_r+0x1c>
 800b476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dd48      	ble.n	800b50e <__sflush_r+0xae>
 800b47c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d045      	beq.n	800b50e <__sflush_r+0xae>
 800b482:	2300      	movs	r3, #0
 800b484:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b488:	682f      	ldr	r7, [r5, #0]
 800b48a:	6a21      	ldr	r1, [r4, #32]
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	d030      	beq.n	800b4f2 <__sflush_r+0x92>
 800b490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	0759      	lsls	r1, r3, #29
 800b496:	d505      	bpl.n	800b4a4 <__sflush_r+0x44>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b49e:	b10b      	cbz	r3, 800b4a4 <__sflush_r+0x44>
 800b4a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b4a2:	1ad2      	subs	r2, r2, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4a8:	6a21      	ldr	r1, [r4, #32]
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	47b0      	blx	r6
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	d106      	bne.n	800b4c2 <__sflush_r+0x62>
 800b4b4:	6829      	ldr	r1, [r5, #0]
 800b4b6:	291d      	cmp	r1, #29
 800b4b8:	d82b      	bhi.n	800b512 <__sflush_r+0xb2>
 800b4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b564 <__sflush_r+0x104>)
 800b4bc:	410a      	asrs	r2, r1
 800b4be:	07d6      	lsls	r6, r2, #31
 800b4c0:	d427      	bmi.n	800b512 <__sflush_r+0xb2>
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	6062      	str	r2, [r4, #4]
 800b4c6:	04d9      	lsls	r1, r3, #19
 800b4c8:	6922      	ldr	r2, [r4, #16]
 800b4ca:	6022      	str	r2, [r4, #0]
 800b4cc:	d504      	bpl.n	800b4d8 <__sflush_r+0x78>
 800b4ce:	1c42      	adds	r2, r0, #1
 800b4d0:	d101      	bne.n	800b4d6 <__sflush_r+0x76>
 800b4d2:	682b      	ldr	r3, [r5, #0]
 800b4d4:	b903      	cbnz	r3, 800b4d8 <__sflush_r+0x78>
 800b4d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4da:	602f      	str	r7, [r5, #0]
 800b4dc:	b1b9      	cbz	r1, 800b50e <__sflush_r+0xae>
 800b4de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d002      	beq.n	800b4ec <__sflush_r+0x8c>
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f7ff fc8a 	bl	800ae00 <_free_r>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4f0:	e00d      	b.n	800b50e <__sflush_r+0xae>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b0      	blx	r6
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	1c50      	adds	r0, r2, #1
 800b4fc:	d1c9      	bne.n	800b492 <__sflush_r+0x32>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0c6      	beq.n	800b492 <__sflush_r+0x32>
 800b504:	2b1d      	cmp	r3, #29
 800b506:	d001      	beq.n	800b50c <__sflush_r+0xac>
 800b508:	2b16      	cmp	r3, #22
 800b50a:	d11e      	bne.n	800b54a <__sflush_r+0xea>
 800b50c:	602f      	str	r7, [r5, #0]
 800b50e:	2000      	movs	r0, #0
 800b510:	e022      	b.n	800b558 <__sflush_r+0xf8>
 800b512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b516:	b21b      	sxth	r3, r3
 800b518:	e01b      	b.n	800b552 <__sflush_r+0xf2>
 800b51a:	690f      	ldr	r7, [r1, #16]
 800b51c:	2f00      	cmp	r7, #0
 800b51e:	d0f6      	beq.n	800b50e <__sflush_r+0xae>
 800b520:	0793      	lsls	r3, r2, #30
 800b522:	680e      	ldr	r6, [r1, #0]
 800b524:	bf08      	it	eq
 800b526:	694b      	ldreq	r3, [r1, #20]
 800b528:	600f      	str	r7, [r1, #0]
 800b52a:	bf18      	it	ne
 800b52c:	2300      	movne	r3, #0
 800b52e:	eba6 0807 	sub.w	r8, r6, r7
 800b532:	608b      	str	r3, [r1, #8]
 800b534:	f1b8 0f00 	cmp.w	r8, #0
 800b538:	dde9      	ble.n	800b50e <__sflush_r+0xae>
 800b53a:	6a21      	ldr	r1, [r4, #32]
 800b53c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b53e:	4643      	mov	r3, r8
 800b540:	463a      	mov	r2, r7
 800b542:	4628      	mov	r0, r5
 800b544:	47b0      	blx	r6
 800b546:	2800      	cmp	r0, #0
 800b548:	dc08      	bgt.n	800b55c <__sflush_r+0xfc>
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	4407      	add	r7, r0
 800b55e:	eba8 0800 	sub.w	r8, r8, r0
 800b562:	e7e7      	b.n	800b534 <__sflush_r+0xd4>
 800b564:	dfbffffe 	.word	0xdfbffffe

0800b568 <_fflush_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	690b      	ldr	r3, [r1, #16]
 800b56c:	4605      	mov	r5, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	b913      	cbnz	r3, 800b578 <_fflush_r+0x10>
 800b572:	2500      	movs	r5, #0
 800b574:	4628      	mov	r0, r5
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	b118      	cbz	r0, 800b582 <_fflush_r+0x1a>
 800b57a:	6a03      	ldr	r3, [r0, #32]
 800b57c:	b90b      	cbnz	r3, 800b582 <_fflush_r+0x1a>
 800b57e:	f7ff fa7d 	bl	800aa7c <__sinit>
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f3      	beq.n	800b572 <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x32>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x32>
 800b594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b596:	f7ff fc04 	bl	800ada2 <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff5f 	bl	800b460 <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5a4:	07da      	lsls	r2, r3, #31
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	d4e4      	bmi.n	800b574 <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4e1      	bmi.n	800b574 <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5b2:	f7ff fbf7 	bl	800ada4 <__retarget_lock_release_recursive>
 800b5b6:	e7dd      	b.n	800b574 <_fflush_r+0xc>

0800b5b8 <fiprintf>:
 800b5b8:	b40e      	push	{r1, r2, r3}
 800b5ba:	b503      	push	{r0, r1, lr}
 800b5bc:	4601      	mov	r1, r0
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	4805      	ldr	r0, [pc, #20]	@ (800b5d8 <fiprintf+0x20>)
 800b5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c6:	6800      	ldr	r0, [r0, #0]
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	f000 f87f 	bl	800b6cc <_vfiprintf_r>
 800b5ce:	b002      	add	sp, #8
 800b5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d4:	b003      	add	sp, #12
 800b5d6:	4770      	bx	lr
 800b5d8:	24000084 	.word	0x24000084

0800b5dc <memmove>:
 800b5dc:	4288      	cmp	r0, r1
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	eb01 0402 	add.w	r4, r1, r2
 800b5e4:	d902      	bls.n	800b5ec <memmove+0x10>
 800b5e6:	4284      	cmp	r4, r0
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	d807      	bhi.n	800b5fc <memmove+0x20>
 800b5ec:	1e43      	subs	r3, r0, #1
 800b5ee:	42a1      	cmp	r1, r4
 800b5f0:	d008      	beq.n	800b604 <memmove+0x28>
 800b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5fa:	e7f8      	b.n	800b5ee <memmove+0x12>
 800b5fc:	4402      	add	r2, r0
 800b5fe:	4601      	mov	r1, r0
 800b600:	428a      	cmp	r2, r1
 800b602:	d100      	bne.n	800b606 <memmove+0x2a>
 800b604:	bd10      	pop	{r4, pc}
 800b606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b60e:	e7f7      	b.n	800b600 <memmove+0x24>

0800b610 <abort>:
 800b610:	b508      	push	{r3, lr}
 800b612:	2006      	movs	r0, #6
 800b614:	f000 fa2e 	bl	800ba74 <raise>
 800b618:	2001      	movs	r0, #1
 800b61a:	f7f5 fd2b 	bl	8001074 <_exit>

0800b61e <_realloc_r>:
 800b61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b622:	4680      	mov	r8, r0
 800b624:	4615      	mov	r5, r2
 800b626:	460c      	mov	r4, r1
 800b628:	b921      	cbnz	r1, 800b634 <_realloc_r+0x16>
 800b62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62e:	4611      	mov	r1, r2
 800b630:	f7ff b888 	b.w	800a744 <_malloc_r>
 800b634:	b92a      	cbnz	r2, 800b642 <_realloc_r+0x24>
 800b636:	f7ff fbe3 	bl	800ae00 <_free_r>
 800b63a:	2400      	movs	r4, #0
 800b63c:	4620      	mov	r0, r4
 800b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b642:	f000 fa33 	bl	800baac <_malloc_usable_size_r>
 800b646:	4285      	cmp	r5, r0
 800b648:	4606      	mov	r6, r0
 800b64a:	d802      	bhi.n	800b652 <_realloc_r+0x34>
 800b64c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b650:	d8f4      	bhi.n	800b63c <_realloc_r+0x1e>
 800b652:	4629      	mov	r1, r5
 800b654:	4640      	mov	r0, r8
 800b656:	f7ff f875 	bl	800a744 <_malloc_r>
 800b65a:	4607      	mov	r7, r0
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0ec      	beq.n	800b63a <_realloc_r+0x1c>
 800b660:	42b5      	cmp	r5, r6
 800b662:	462a      	mov	r2, r5
 800b664:	4621      	mov	r1, r4
 800b666:	bf28      	it	cs
 800b668:	4632      	movcs	r2, r6
 800b66a:	f7ff fb9c 	bl	800ada6 <memcpy>
 800b66e:	4621      	mov	r1, r4
 800b670:	4640      	mov	r0, r8
 800b672:	f7ff fbc5 	bl	800ae00 <_free_r>
 800b676:	463c      	mov	r4, r7
 800b678:	e7e0      	b.n	800b63c <_realloc_r+0x1e>

0800b67a <__sfputc_r>:
 800b67a:	6893      	ldr	r3, [r2, #8]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	b410      	push	{r4}
 800b682:	6093      	str	r3, [r2, #8]
 800b684:	da08      	bge.n	800b698 <__sfputc_r+0x1e>
 800b686:	6994      	ldr	r4, [r2, #24]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	db01      	blt.n	800b690 <__sfputc_r+0x16>
 800b68c:	290a      	cmp	r1, #10
 800b68e:	d103      	bne.n	800b698 <__sfputc_r+0x1e>
 800b690:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b694:	f000 b932 	b.w	800b8fc <__swbuf_r>
 800b698:	6813      	ldr	r3, [r2, #0]
 800b69a:	1c58      	adds	r0, r3, #1
 800b69c:	6010      	str	r0, [r2, #0]
 800b69e:	7019      	strb	r1, [r3, #0]
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <__sfputs_r>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	18d5      	adds	r5, r2, r3
 800b6b2:	42ac      	cmp	r4, r5
 800b6b4:	d101      	bne.n	800b6ba <__sfputs_r+0x12>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e007      	b.n	800b6ca <__sfputs_r+0x22>
 800b6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6be:	463a      	mov	r2, r7
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ffda 	bl	800b67a <__sfputc_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d1f3      	bne.n	800b6b2 <__sfputs_r+0xa>
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6cc <_vfiprintf_r>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	b09d      	sub	sp, #116	@ 0x74
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	4698      	mov	r8, r3
 800b6d8:	4606      	mov	r6, r0
 800b6da:	b118      	cbz	r0, 800b6e4 <_vfiprintf_r+0x18>
 800b6dc:	6a03      	ldr	r3, [r0, #32]
 800b6de:	b90b      	cbnz	r3, 800b6e4 <_vfiprintf_r+0x18>
 800b6e0:	f7ff f9cc 	bl	800aa7c <__sinit>
 800b6e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6e6:	07d9      	lsls	r1, r3, #31
 800b6e8:	d405      	bmi.n	800b6f6 <_vfiprintf_r+0x2a>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	059a      	lsls	r2, r3, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_vfiprintf_r+0x2a>
 800b6f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6f2:	f7ff fb56 	bl	800ada2 <__retarget_lock_acquire_recursive>
 800b6f6:	89ab      	ldrh	r3, [r5, #12]
 800b6f8:	071b      	lsls	r3, r3, #28
 800b6fa:	d501      	bpl.n	800b700 <_vfiprintf_r+0x34>
 800b6fc:	692b      	ldr	r3, [r5, #16]
 800b6fe:	b99b      	cbnz	r3, 800b728 <_vfiprintf_r+0x5c>
 800b700:	4629      	mov	r1, r5
 800b702:	4630      	mov	r0, r6
 800b704:	f000 f938 	bl	800b978 <__swsetup_r>
 800b708:	b170      	cbz	r0, 800b728 <_vfiprintf_r+0x5c>
 800b70a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b70c:	07dc      	lsls	r4, r3, #31
 800b70e:	d504      	bpl.n	800b71a <_vfiprintf_r+0x4e>
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	b01d      	add	sp, #116	@ 0x74
 800b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71a:	89ab      	ldrh	r3, [r5, #12]
 800b71c:	0598      	lsls	r0, r3, #22
 800b71e:	d4f7      	bmi.n	800b710 <_vfiprintf_r+0x44>
 800b720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b722:	f7ff fb3f 	bl	800ada4 <__retarget_lock_release_recursive>
 800b726:	e7f3      	b.n	800b710 <_vfiprintf_r+0x44>
 800b728:	2300      	movs	r3, #0
 800b72a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b72c:	2320      	movs	r3, #32
 800b72e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b732:	f8cd 800c 	str.w	r8, [sp, #12]
 800b736:	2330      	movs	r3, #48	@ 0x30
 800b738:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b8e8 <_vfiprintf_r+0x21c>
 800b73c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b740:	f04f 0901 	mov.w	r9, #1
 800b744:	4623      	mov	r3, r4
 800b746:	469a      	mov	sl, r3
 800b748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b74c:	b10a      	cbz	r2, 800b752 <_vfiprintf_r+0x86>
 800b74e:	2a25      	cmp	r2, #37	@ 0x25
 800b750:	d1f9      	bne.n	800b746 <_vfiprintf_r+0x7a>
 800b752:	ebba 0b04 	subs.w	fp, sl, r4
 800b756:	d00b      	beq.n	800b770 <_vfiprintf_r+0xa4>
 800b758:	465b      	mov	r3, fp
 800b75a:	4622      	mov	r2, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	4630      	mov	r0, r6
 800b760:	f7ff ffa2 	bl	800b6a8 <__sfputs_r>
 800b764:	3001      	adds	r0, #1
 800b766:	f000 80a7 	beq.w	800b8b8 <_vfiprintf_r+0x1ec>
 800b76a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b76c:	445a      	add	r2, fp
 800b76e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b770:	f89a 3000 	ldrb.w	r3, [sl]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 809f 	beq.w	800b8b8 <_vfiprintf_r+0x1ec>
 800b77a:	2300      	movs	r3, #0
 800b77c:	f04f 32ff 	mov.w	r2, #4294967295
 800b780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b784:	f10a 0a01 	add.w	sl, sl, #1
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	9307      	str	r3, [sp, #28]
 800b78c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b790:	931a      	str	r3, [sp, #104]	@ 0x68
 800b792:	4654      	mov	r4, sl
 800b794:	2205      	movs	r2, #5
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	4853      	ldr	r0, [pc, #332]	@ (800b8e8 <_vfiprintf_r+0x21c>)
 800b79c:	f7f4 fdc8 	bl	8000330 <memchr>
 800b7a0:	9a04      	ldr	r2, [sp, #16]
 800b7a2:	b9d8      	cbnz	r0, 800b7dc <_vfiprintf_r+0x110>
 800b7a4:	06d1      	lsls	r1, r2, #27
 800b7a6:	bf44      	itt	mi
 800b7a8:	2320      	movmi	r3, #32
 800b7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ae:	0713      	lsls	r3, r2, #28
 800b7b0:	bf44      	itt	mi
 800b7b2:	232b      	movmi	r3, #43	@ 0x2b
 800b7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7be:	d015      	beq.n	800b7ec <_vfiprintf_r+0x120>
 800b7c0:	9a07      	ldr	r2, [sp, #28]
 800b7c2:	4654      	mov	r4, sl
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f04f 0c0a 	mov.w	ip, #10
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d0:	3b30      	subs	r3, #48	@ 0x30
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	d94b      	bls.n	800b86e <_vfiprintf_r+0x1a2>
 800b7d6:	b1b0      	cbz	r0, 800b806 <_vfiprintf_r+0x13a>
 800b7d8:	9207      	str	r2, [sp, #28]
 800b7da:	e014      	b.n	800b806 <_vfiprintf_r+0x13a>
 800b7dc:	eba0 0308 	sub.w	r3, r0, r8
 800b7e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	46a2      	mov	sl, r4
 800b7ea:	e7d2      	b.n	800b792 <_vfiprintf_r+0xc6>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	1d19      	adds	r1, r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	9103      	str	r1, [sp, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bfbb      	ittet	lt
 800b7f8:	425b      	neglt	r3, r3
 800b7fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b7fe:	9307      	strge	r3, [sp, #28]
 800b800:	9307      	strlt	r3, [sp, #28]
 800b802:	bfb8      	it	lt
 800b804:	9204      	strlt	r2, [sp, #16]
 800b806:	7823      	ldrb	r3, [r4, #0]
 800b808:	2b2e      	cmp	r3, #46	@ 0x2e
 800b80a:	d10a      	bne.n	800b822 <_vfiprintf_r+0x156>
 800b80c:	7863      	ldrb	r3, [r4, #1]
 800b80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b810:	d132      	bne.n	800b878 <_vfiprintf_r+0x1ac>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	1d1a      	adds	r2, r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	9203      	str	r2, [sp, #12]
 800b81a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b81e:	3402      	adds	r4, #2
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b8f8 <_vfiprintf_r+0x22c>
 800b826:	7821      	ldrb	r1, [r4, #0]
 800b828:	2203      	movs	r2, #3
 800b82a:	4650      	mov	r0, sl
 800b82c:	f7f4 fd80 	bl	8000330 <memchr>
 800b830:	b138      	cbz	r0, 800b842 <_vfiprintf_r+0x176>
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	eba0 000a 	sub.w	r0, r0, sl
 800b838:	2240      	movs	r2, #64	@ 0x40
 800b83a:	4082      	lsls	r2, r0
 800b83c:	4313      	orrs	r3, r2
 800b83e:	3401      	adds	r4, #1
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b846:	4829      	ldr	r0, [pc, #164]	@ (800b8ec <_vfiprintf_r+0x220>)
 800b848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b84c:	2206      	movs	r2, #6
 800b84e:	f7f4 fd6f 	bl	8000330 <memchr>
 800b852:	2800      	cmp	r0, #0
 800b854:	d03f      	beq.n	800b8d6 <_vfiprintf_r+0x20a>
 800b856:	4b26      	ldr	r3, [pc, #152]	@ (800b8f0 <_vfiprintf_r+0x224>)
 800b858:	bb1b      	cbnz	r3, 800b8a2 <_vfiprintf_r+0x1d6>
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	3307      	adds	r3, #7
 800b85e:	f023 0307 	bic.w	r3, r3, #7
 800b862:	3308      	adds	r3, #8
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	443b      	add	r3, r7
 800b86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b86c:	e76a      	b.n	800b744 <_vfiprintf_r+0x78>
 800b86e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b872:	460c      	mov	r4, r1
 800b874:	2001      	movs	r0, #1
 800b876:	e7a8      	b.n	800b7ca <_vfiprintf_r+0xfe>
 800b878:	2300      	movs	r3, #0
 800b87a:	3401      	adds	r4, #1
 800b87c:	9305      	str	r3, [sp, #20]
 800b87e:	4619      	mov	r1, r3
 800b880:	f04f 0c0a 	mov.w	ip, #10
 800b884:	4620      	mov	r0, r4
 800b886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b88a:	3a30      	subs	r2, #48	@ 0x30
 800b88c:	2a09      	cmp	r2, #9
 800b88e:	d903      	bls.n	800b898 <_vfiprintf_r+0x1cc>
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0c6      	beq.n	800b822 <_vfiprintf_r+0x156>
 800b894:	9105      	str	r1, [sp, #20]
 800b896:	e7c4      	b.n	800b822 <_vfiprintf_r+0x156>
 800b898:	fb0c 2101 	mla	r1, ip, r1, r2
 800b89c:	4604      	mov	r4, r0
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e7f0      	b.n	800b884 <_vfiprintf_r+0x1b8>
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4b12      	ldr	r3, [pc, #72]	@ (800b8f4 <_vfiprintf_r+0x228>)
 800b8aa:	a904      	add	r1, sp, #16
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f3af 8000 	nop.w
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	1c78      	adds	r0, r7, #1
 800b8b6:	d1d6      	bne.n	800b866 <_vfiprintf_r+0x19a>
 800b8b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ba:	07d9      	lsls	r1, r3, #31
 800b8bc:	d405      	bmi.n	800b8ca <_vfiprintf_r+0x1fe>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	059a      	lsls	r2, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_vfiprintf_r+0x1fe>
 800b8c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8c6:	f7ff fa6d 	bl	800ada4 <__retarget_lock_release_recursive>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	065b      	lsls	r3, r3, #25
 800b8ce:	f53f af1f 	bmi.w	800b710 <_vfiprintf_r+0x44>
 800b8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8d4:	e71e      	b.n	800b714 <_vfiprintf_r+0x48>
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4b05      	ldr	r3, [pc, #20]	@ (800b8f4 <_vfiprintf_r+0x228>)
 800b8de:	a904      	add	r1, sp, #16
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff fc9d 	bl	800b220 <_printf_i>
 800b8e6:	e7e4      	b.n	800b8b2 <_vfiprintf_r+0x1e6>
 800b8e8:	0800bea2 	.word	0x0800bea2
 800b8ec:	0800beac 	.word	0x0800beac
 800b8f0:	00000000 	.word	0x00000000
 800b8f4:	0800b6a9 	.word	0x0800b6a9
 800b8f8:	0800bea8 	.word	0x0800bea8

0800b8fc <__swbuf_r>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	460e      	mov	r6, r1
 800b900:	4614      	mov	r4, r2
 800b902:	4605      	mov	r5, r0
 800b904:	b118      	cbz	r0, 800b90e <__swbuf_r+0x12>
 800b906:	6a03      	ldr	r3, [r0, #32]
 800b908:	b90b      	cbnz	r3, 800b90e <__swbuf_r+0x12>
 800b90a:	f7ff f8b7 	bl	800aa7c <__sinit>
 800b90e:	69a3      	ldr	r3, [r4, #24]
 800b910:	60a3      	str	r3, [r4, #8]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	071a      	lsls	r2, r3, #28
 800b916:	d501      	bpl.n	800b91c <__swbuf_r+0x20>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	b943      	cbnz	r3, 800b92e <__swbuf_r+0x32>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 f82a 	bl	800b978 <__swsetup_r>
 800b924:	b118      	cbz	r0, 800b92e <__swbuf_r+0x32>
 800b926:	f04f 37ff 	mov.w	r7, #4294967295
 800b92a:	4638      	mov	r0, r7
 800b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	6922      	ldr	r2, [r4, #16]
 800b932:	1a98      	subs	r0, r3, r2
 800b934:	6963      	ldr	r3, [r4, #20]
 800b936:	b2f6      	uxtb	r6, r6
 800b938:	4283      	cmp	r3, r0
 800b93a:	4637      	mov	r7, r6
 800b93c:	dc05      	bgt.n	800b94a <__swbuf_r+0x4e>
 800b93e:	4621      	mov	r1, r4
 800b940:	4628      	mov	r0, r5
 800b942:	f7ff fe11 	bl	800b568 <_fflush_r>
 800b946:	2800      	cmp	r0, #0
 800b948:	d1ed      	bne.n	800b926 <__swbuf_r+0x2a>
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	60a3      	str	r3, [r4, #8]
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	6022      	str	r2, [r4, #0]
 800b956:	701e      	strb	r6, [r3, #0]
 800b958:	6962      	ldr	r2, [r4, #20]
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d004      	beq.n	800b96a <__swbuf_r+0x6e>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	07db      	lsls	r3, r3, #31
 800b964:	d5e1      	bpl.n	800b92a <__swbuf_r+0x2e>
 800b966:	2e0a      	cmp	r6, #10
 800b968:	d1df      	bne.n	800b92a <__swbuf_r+0x2e>
 800b96a:	4621      	mov	r1, r4
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7ff fdfb 	bl	800b568 <_fflush_r>
 800b972:	2800      	cmp	r0, #0
 800b974:	d0d9      	beq.n	800b92a <__swbuf_r+0x2e>
 800b976:	e7d6      	b.n	800b926 <__swbuf_r+0x2a>

0800b978 <__swsetup_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4b29      	ldr	r3, [pc, #164]	@ (800ba20 <__swsetup_r+0xa8>)
 800b97c:	4605      	mov	r5, r0
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	460c      	mov	r4, r1
 800b982:	b118      	cbz	r0, 800b98c <__swsetup_r+0x14>
 800b984:	6a03      	ldr	r3, [r0, #32]
 800b986:	b90b      	cbnz	r3, 800b98c <__swsetup_r+0x14>
 800b988:	f7ff f878 	bl	800aa7c <__sinit>
 800b98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	d422      	bmi.n	800b9da <__swsetup_r+0x62>
 800b994:	06da      	lsls	r2, r3, #27
 800b996:	d407      	bmi.n	800b9a8 <__swsetup_r+0x30>
 800b998:	2209      	movs	r2, #9
 800b99a:	602a      	str	r2, [r5, #0]
 800b99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a0:	81a3      	strh	r3, [r4, #12]
 800b9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a6:	e033      	b.n	800ba10 <__swsetup_r+0x98>
 800b9a8:	0758      	lsls	r0, r3, #29
 800b9aa:	d512      	bpl.n	800b9d2 <__swsetup_r+0x5a>
 800b9ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ae:	b141      	cbz	r1, 800b9c2 <__swsetup_r+0x4a>
 800b9b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9b4:	4299      	cmp	r1, r3
 800b9b6:	d002      	beq.n	800b9be <__swsetup_r+0x46>
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f7ff fa21 	bl	800ae00 <_free_r>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f043 0308 	orr.w	r3, r3, #8
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	b94b      	cbnz	r3, 800b9f2 <__swsetup_r+0x7a>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9e8:	d003      	beq.n	800b9f2 <__swsetup_r+0x7a>
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 f88b 	bl	800bb08 <__smakebuf_r>
 800b9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f6:	f013 0201 	ands.w	r2, r3, #1
 800b9fa:	d00a      	beq.n	800ba12 <__swsetup_r+0x9a>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60a2      	str	r2, [r4, #8]
 800ba00:	6962      	ldr	r2, [r4, #20]
 800ba02:	4252      	negs	r2, r2
 800ba04:	61a2      	str	r2, [r4, #24]
 800ba06:	6922      	ldr	r2, [r4, #16]
 800ba08:	b942      	cbnz	r2, 800ba1c <__swsetup_r+0xa4>
 800ba0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba0e:	d1c5      	bne.n	800b99c <__swsetup_r+0x24>
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	0799      	lsls	r1, r3, #30
 800ba14:	bf58      	it	pl
 800ba16:	6962      	ldrpl	r2, [r4, #20]
 800ba18:	60a2      	str	r2, [r4, #8]
 800ba1a:	e7f4      	b.n	800ba06 <__swsetup_r+0x8e>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e7f7      	b.n	800ba10 <__swsetup_r+0x98>
 800ba20:	24000084 	.word	0x24000084

0800ba24 <_raise_r>:
 800ba24:	291f      	cmp	r1, #31
 800ba26:	b538      	push	{r3, r4, r5, lr}
 800ba28:	4605      	mov	r5, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	d904      	bls.n	800ba38 <_raise_r+0x14>
 800ba2e:	2316      	movs	r3, #22
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba3a:	b112      	cbz	r2, 800ba42 <_raise_r+0x1e>
 800ba3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba40:	b94b      	cbnz	r3, 800ba56 <_raise_r+0x32>
 800ba42:	4628      	mov	r0, r5
 800ba44:	f000 f830 	bl	800baa8 <_getpid_r>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba52:	f000 b817 	b.w	800ba84 <_kill_r>
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d00a      	beq.n	800ba70 <_raise_r+0x4c>
 800ba5a:	1c59      	adds	r1, r3, #1
 800ba5c:	d103      	bne.n	800ba66 <_raise_r+0x42>
 800ba5e:	2316      	movs	r3, #22
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	2001      	movs	r0, #1
 800ba64:	e7e7      	b.n	800ba36 <_raise_r+0x12>
 800ba66:	2100      	movs	r1, #0
 800ba68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4798      	blx	r3
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7e0      	b.n	800ba36 <_raise_r+0x12>

0800ba74 <raise>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	@ (800ba80 <raise+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f7ff bfd3 	b.w	800ba24 <_raise_r>
 800ba7e:	bf00      	nop
 800ba80:	24000084 	.word	0x24000084

0800ba84 <_kill_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	@ (800baa4 <_kill_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f5 fadf 	bl	8001054 <_kill>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_kill_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_kill_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	24000808 	.word	0x24000808

0800baa8 <_getpid_r>:
 800baa8:	f7f5 bacc 	b.w	8001044 <_getpid>

0800baac <_malloc_usable_size_r>:
 800baac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bab0:	1f18      	subs	r0, r3, #4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	bfbc      	itt	lt
 800bab6:	580b      	ldrlt	r3, [r1, r0]
 800bab8:	18c0      	addlt	r0, r0, r3
 800baba:	4770      	bx	lr

0800babc <__swhatbuf_r>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	460c      	mov	r4, r1
 800bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac4:	2900      	cmp	r1, #0
 800bac6:	b096      	sub	sp, #88	@ 0x58
 800bac8:	4615      	mov	r5, r2
 800baca:	461e      	mov	r6, r3
 800bacc:	da0d      	bge.n	800baea <__swhatbuf_r+0x2e>
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bad4:	f04f 0100 	mov.w	r1, #0
 800bad8:	bf14      	ite	ne
 800bada:	2340      	movne	r3, #64	@ 0x40
 800badc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bae0:	2000      	movs	r0, #0
 800bae2:	6031      	str	r1, [r6, #0]
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	b016      	add	sp, #88	@ 0x58
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	466a      	mov	r2, sp
 800baec:	f000 f848 	bl	800bb80 <_fstat_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dbec      	blt.n	800bace <__swhatbuf_r+0x12>
 800baf4:	9901      	ldr	r1, [sp, #4]
 800baf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bafa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bafe:	4259      	negs	r1, r3
 800bb00:	4159      	adcs	r1, r3
 800bb02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb06:	e7eb      	b.n	800bae0 <__swhatbuf_r+0x24>

0800bb08 <__smakebuf_r>:
 800bb08:	898b      	ldrh	r3, [r1, #12]
 800bb0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb0c:	079d      	lsls	r5, r3, #30
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	d507      	bpl.n	800bb24 <__smakebuf_r+0x1c>
 800bb14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	b003      	add	sp, #12
 800bb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb24:	ab01      	add	r3, sp, #4
 800bb26:	466a      	mov	r2, sp
 800bb28:	f7ff ffc8 	bl	800babc <__swhatbuf_r>
 800bb2c:	9f00      	ldr	r7, [sp, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4639      	mov	r1, r7
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7fe fe06 	bl	800a744 <_malloc_r>
 800bb38:	b948      	cbnz	r0, 800bb4e <__smakebuf_r+0x46>
 800bb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3e:	059a      	lsls	r2, r3, #22
 800bb40:	d4ee      	bmi.n	800bb20 <__smakebuf_r+0x18>
 800bb42:	f023 0303 	bic.w	r3, r3, #3
 800bb46:	f043 0302 	orr.w	r3, r3, #2
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	e7e2      	b.n	800bb14 <__smakebuf_r+0xc>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	6020      	str	r0, [r4, #0]
 800bb52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb56:	81a3      	strh	r3, [r4, #12]
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb5e:	b15b      	cbz	r3, 800bb78 <__smakebuf_r+0x70>
 800bb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f81d 	bl	800bba4 <_isatty_r>
 800bb6a:	b128      	cbz	r0, 800bb78 <__smakebuf_r+0x70>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	f043 0301 	orr.w	r3, r3, #1
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	431d      	orrs	r5, r3
 800bb7c:	81a5      	strh	r5, [r4, #12]
 800bb7e:	e7cf      	b.n	800bb20 <__smakebuf_r+0x18>

0800bb80 <_fstat_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d07      	ldr	r5, [pc, #28]	@ (800bba0 <_fstat_r+0x20>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	602b      	str	r3, [r5, #0]
 800bb8e:	f7f5 fac1 	bl	8001114 <_fstat>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d102      	bne.n	800bb9c <_fstat_r+0x1c>
 800bb96:	682b      	ldr	r3, [r5, #0]
 800bb98:	b103      	cbz	r3, 800bb9c <_fstat_r+0x1c>
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	24000808 	.word	0x24000808

0800bba4 <_isatty_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d06      	ldr	r5, [pc, #24]	@ (800bbc0 <_isatty_r+0x1c>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7f5 fac0 	bl	8001134 <_isatty>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_isatty_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_isatty_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	24000808 	.word	0x24000808

0800bbc4 <_init>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr

0800bbd0 <_fini>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr

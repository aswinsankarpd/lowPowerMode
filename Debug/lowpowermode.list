
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf44  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800c214  0800c214  0000d214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5c0  0800c5c0  0000d5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5c8  0800c5c8  0000d5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5cc  0800c5cc  0000d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f8  24000000  0800c5d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  240000f8  0800c6c8  0000e0f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400089c  0800c6c8  0000e89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a6da  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c22  00000000  00000000  00028800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cbb  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362d0  00000000  00000000  0002e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c972  00000000  00000000  0006449b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149c98  00000000  00000000  00080e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001caaa5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dfc  00000000  00000000  001caae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001cf8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f8 	.word	0x240000f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c1fc 	.word	0x0800c1fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000fc 	.word	0x240000fc
 800030c:	0800c1fc 	.word	0x0800c1fc

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fa3b 	bl	800ab44 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fa37 	bl	800ab5c <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fd8b 	bl	800b20e <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fd85 	bl	800b20e <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000314 	.word	0x24000314
 8000710:	24000114 	.word	0x24000114

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a fa1c 	bl	800ab7c <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a faa3 	bl	800ac96 <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000114 	.word	0x24000114

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fd4e 	bl	800b220 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fd41 	bl	800b220 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fc4e 	bl	800b120 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fca9 	bl	80081e8 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000060 	.word	0x24000060
 80008a4:	0800c250 	.word	0x0800c250
 80008a8:	24000114 	.word	0x24000114
 80008ac:	24000314 	.word	0x24000314
 80008b0:	2400033c 	.word	0x2400033c
 80008b4:	0800c254 	.word	0x0800c254
 80008b8:	0800c268 	.word	0x0800c268
 80008bc:	24000564 	.word	0x24000564

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a f85a 	bl	800a994 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fc0b 	bl	800b120 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fc67 	bl	80081e8 <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c26c 	.word	0x0800c26c
 8000928:	24000564 	.word	0x24000564

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fc61 	bl	800b220 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a f9dc 	bl	800ad20 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fc4e 	bl	800b220 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fc36 	bl	800b220 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a f9b1 	bl	800ad20 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fc23 	bl	800b220 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 ff83 	bl	800a904 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fb8b 	bl	800b120 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fbe7 	bl	80081e8 <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c2b8 	.word	0x0800c2b8
 8000a28:	0800c2a0 	.word	0x0800c2a0
 8000a2c:	0800c2a4 	.word	0x0800c2a4
 8000a30:	0800c2a8 	.word	0x0800c2a8
 8000a34:	24000564 	.word	0x24000564

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fbdb 	bl	800b220 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a f956 	bl	800ad20 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fbc8 	bl	800b220 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fbb0 	bl	800b220 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a f92b 	bl	800ad20 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fb9d 	bl	800b220 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 ff73 	bl	800a9f0 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fb05 	bl	800b120 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fb61 	bl	80081e8 <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c2b8 	.word	0x0800c2b8
 8000b34:	0800c2a0 	.word	0x0800c2a0
 8000b38:	0800c2a4 	.word	0x0800c2a4
 8000b3c:	0800c2bc 	.word	0x0800c2bc
 8000b40:	24000564 	.word	0x24000564

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
//    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");

//	HAL_UART_Transmit(&huart3, response, length, 100);

//	startSleepMode();
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <setStopMode>:

static void setStopMode(char ** args, char *response)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
	setStopModeFlag(true);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f009 fe95 	bl	800a894 <setStopModeFlag>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3308      	adds	r3, #8
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	491f      	ldr	r1, [pc, #124]	@ (8000c08 <setGreenLed+0x94>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fbc0 	bl	8000310 <strcmp>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10d      	bne.n	8000bb2 <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <setGreenLed+0x98>)
 8000b9c:	f003 ff44 	bl	8004a28 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <setGreenLed+0x9c>)
 8000ba2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f00a faba 	bl	800b120 <sniprintf>
 8000bac:	4603      	mov	r3, r0
 8000bae:	81fb      	strh	r3, [r7, #14]
 8000bb0:	e01f      	b.n	8000bf2 <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4916      	ldr	r1, [pc, #88]	@ (8000c14 <setGreenLed+0xa0>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fba8 	bl	8000310 <strcmp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10d      	bne.n	8000be2 <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <setGreenLed+0x98>)
 8000bcc:	f003 ff2c 	bl	8004a28 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000bd0:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <setGreenLed+0xa4>)
 8000bd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00a faa2 	bl	800b120 <sniprintf>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	81fb      	strh	r3, [r7, #14]
 8000be0:	e007      	b.n	8000bf2 <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <setGreenLed+0xa8>)
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f00a fa99 	bl	800b120 <sniprintf>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000bf2:	89fa      	ldrh	r2, [r7, #14]
 8000bf4:	2364      	movs	r3, #100	@ 0x64
 8000bf6:	6839      	ldr	r1, [r7, #0]
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <setGreenLed+0xac>)
 8000bfa:	f007 faf5 	bl	80081e8 <HAL_UART_Transmit>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800c2cc 	.word	0x0800c2cc
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	0800c2d0 	.word	0x0800c2d0
 8000c14:	0800c2e0 	.word	0x0800c2e0
 8000c18:	0800c2e4 	.word	0x0800c2e4
 8000c1c:	0800c2f8 	.word	0x0800c2f8
 8000c20:	24000564 	.word	0x24000564

08000c24 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c28:	f009 ff6e 	bl	800ab08 <debugUartInit>

	RTCInit();
 8000c2c:	f009 fe4c 	bl	800a8c8 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2101      	movs	r1, #1
 8000c34:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <systemInit+0x24>)
 8000c36:	f003 fef7 	bl	8004a28 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	4903      	ldr	r1, [pc, #12]	@ (8000c4c <systemInit+0x28>)
 8000c3e:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <systemInit+0x2c>)
 8000c40:	f007 fb60 	bl	8008304 <HAL_UART_Transmit_IT>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	0800c304 	.word	0x0800c304
 8000c50:	24000564 	.word	0x24000564

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c60:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f000 febe 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c82:	200b      	movs	r0, #11
 8000c84:	f000 fed5 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024400 	.word	0x58024400

08000c94 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b90      	ldr	r3, [pc, #576]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b8c      	ldr	r3, [pc, #560]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc8:	4b88      	ldr	r3, [pc, #544]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a87      	ldr	r2, [pc, #540]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b84      	ldr	r3, [pc, #528]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b81      	ldr	r3, [pc, #516]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	4a7f      	ldr	r2, [pc, #508]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b79      	ldr	r3, [pc, #484]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	4a78      	ldr	r2, [pc, #480]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d14:	4b75      	ldr	r3, [pc, #468]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	4b72      	ldr	r3, [pc, #456]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	4a70      	ldr	r2, [pc, #448]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d32:	4b6e      	ldr	r3, [pc, #440]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d40:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	4a69      	ldr	r2, [pc, #420]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d50:	4b66      	ldr	r3, [pc, #408]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	4b63      	ldr	r3, [pc, #396]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	4a61      	ldr	r2, [pc, #388]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000eec <MX_GPIO_Init+0x258>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d82:	485b      	ldr	r0, [pc, #364]	@ (8000ef0 <MX_GPIO_Init+0x25c>)
 8000d84:	f003 fe50 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8e:	4859      	ldr	r0, [pc, #356]	@ (8000ef4 <MX_GPIO_Init+0x260>)
 8000d90:	f003 fe4a 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2102      	movs	r1, #2
 8000d98:	4857      	ldr	r0, [pc, #348]	@ (8000ef8 <MX_GPIO_Init+0x264>)
 8000d9a:	f003 fe45 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4851      	ldr	r0, [pc, #324]	@ (8000efc <MX_GPIO_Init+0x268>)
 8000db6:	f003 fc8f 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dba:	2332      	movs	r3, #50	@ 0x32
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dca:	230b      	movs	r3, #11
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4849      	ldr	r0, [pc, #292]	@ (8000efc <MX_GPIO_Init+0x268>)
 8000dd6:	f003 fc7f 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dda:	2386      	movs	r3, #134	@ 0x86
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dea:	230b      	movs	r3, #11
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4842      	ldr	r0, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x26c>)
 8000df6:	f003 fc6f 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000dfa:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4837      	ldr	r0, [pc, #220]	@ (8000ef0 <MX_GPIO_Init+0x25c>)
 8000e14:	f003 fc60 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	482e      	ldr	r0, [pc, #184]	@ (8000ef0 <MX_GPIO_Init+0x25c>)
 8000e36:	f003 fc4f 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4828      	ldr	r0, [pc, #160]	@ (8000ef4 <MX_GPIO_Init+0x260>)
 8000e54:	f003 fc40 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4825      	ldr	r0, [pc, #148]	@ (8000f04 <MX_GPIO_Init+0x270>)
 8000e6e:	f003 fc33 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e84:	230a      	movs	r3, #10
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	@ (8000f00 <MX_GPIO_Init+0x26c>)
 8000e90:	f003 fc22 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e94:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	@ (8000f04 <MX_GPIO_Init+0x270>)
 8000eb2:	f003 fc11 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480a      	ldr	r0, [pc, #40]	@ (8000ef8 <MX_GPIO_Init+0x264>)
 8000ece:	f003 fc03 	bl	80046d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2028      	movs	r0, #40	@ 0x28
 8000ed8:	f000 fd91 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000edc:	2028      	movs	r0, #40	@ 0x28
 8000ede:	f000 fda8 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3730      	adds	r7, #48	@ 0x30
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58020c00 	.word	0x58020c00
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58020800 	.word	0x58020800
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58021800 	.word	0x58021800

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fbe6 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f810 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f7ff febe 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f18:	f7ff fe9c 	bl	8000c54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f1c:	f000 fac4 	bl	80014a8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000f20:	f000 f87e 	bl	8001020 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000f24:	f7ff fe7e 	bl	8000c24 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000f28:	f7ff fbca 	bl	80006c0 <debugCLITask>

	  stopModeTask();
 8000f2c:	f009 fc30 	bl	800a790 <stopModeTask>
	  debugCLITask();
 8000f30:	bf00      	nop
 8000f32:	e7f9      	b.n	8000f28 <main+0x20>

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09c      	sub	sp, #112	@ 0x70
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	224c      	movs	r2, #76	@ 0x4c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a f963 	bl	800b20e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00a f95d 	bl	800b20e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f003 fdf1 	bl	8004b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a2b      	ldr	r2, [pc, #172]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f76:	bf00      	nop
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f84:	d1f8      	bne.n	8000f78 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f86:	2309      	movs	r3, #9
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000fa0:	f240 1313 	movw	r3, #275	@ 0x113
 8000fa4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fdf4 	bl	8004bb0 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fce:	f000 f821 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	233f      	movs	r3, #63	@ 0x3f
 8000fd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe6:	2340      	movs	r3, #64	@ 0x40
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 f9b3 	bl	8005364 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001004:	f000 f806 	bl	8001014 <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3770      	adds	r7, #112	@ 0x70
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	58024800 	.word	0x58024800

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001038:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <MX_RTC_Init+0xb0>)
 800103a:	4a26      	ldr	r2, [pc, #152]	@ (80010d4 <MX_RTC_Init+0xb4>)
 800103c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001046:	227f      	movs	r2, #127	@ 0x7f
 8001048:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_RTC_Init+0xb0>)
 800104c:	22ff      	movs	r2, #255	@ 0xff
 800104e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_RTC_Init+0xb0>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001068:	4819      	ldr	r0, [pc, #100]	@ (80010d0 <MX_RTC_Init+0xb0>)
 800106a:	f006 fac9 	bl	8007600 <HAL_RTC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001074:	f7ff ffce 	bl	8001014 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001078:	2300      	movs	r3, #0
 800107a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800107c:	2300      	movs	r3, #0
 800107e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001080:	2300      	movs	r3, #0
 8001082:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	480f      	ldr	r0, [pc, #60]	@ (80010d0 <MX_RTC_Init+0xb0>)
 8001094:	f006 fb36 	bl	8007704 <HAL_RTC_SetTime>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800109e:	f7ff ffb9 	bl	8001014 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010a2:	2301      	movs	r3, #1
 80010a4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010a6:	2301      	movs	r3, #1
 80010a8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_RTC_Init+0xb0>)
 80010ba:	f006 fc1d 	bl	80078f8 <HAL_RTC_SetDate>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010c4:	f7ff ffa6 	bl	8001014 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400053c 	.word	0x2400053c
 80010d4:	58004000 	.word	0x58004000

080010d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0b0      	sub	sp, #192	@ 0xc0
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	22b8      	movs	r2, #184	@ 0xb8
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00a f890 	bl	800b20e <memset>
  if(rtcHandle->Instance==RTC)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <HAL_RTC_MspInit+0x6c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d121      	bne.n	800113c <HAL_RTC_MspInit+0x64>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fcb3 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800111c:	f7ff ff7a 	bl	8001014 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_RTC_MspInit+0x70>)
 8001122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001124:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <HAL_RTC_MspInit+0x70>)
 8001126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800112a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2003      	movs	r0, #3
 8001132:	f000 fc64 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001136:	2003      	movs	r0, #3
 8001138:	f000 fc7b 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	37c0      	adds	r7, #192	@ 0xc0
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	58004000 	.word	0x58004000
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_MspInit+0x30>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x30>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x30>)
 8001164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	58024400 	.word	0x58024400

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 faf3 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line.
  */
void RTC_WKUP_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <RTC_WKUP_IRQHandler+0x10>)
 80011e6:	f006 ff5b 	bl	80080a0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2400053c 	.word	0x2400053c

080011f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <DMA1_Stream0_IRQHandler+0x10>)
 80011fa:	f001 ff5b 	bl	80030b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240005f8 	.word	0x240005f8

08001208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <USART3_IRQHandler+0x10>)
 800120e:	f007 f959 	bl	80084c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000564 	.word	0x24000564

0800121c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001220:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001224:	f003 fc33 	bl	8004a8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_kill>:

int _kill(int pid, int sig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001246:	f00a f89d 	bl	800b384 <__errno>
 800124a:	4603      	mov	r3, r0
 800124c:	2216      	movs	r2, #22
 800124e:	601a      	str	r2, [r3, #0]
  return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe7 	bl	800123c <_kill>
  while (1) {}    /* Make sure we hang here */
 800126e:	bf00      	nop
 8001270:	e7fd      	b.n	800126e <_exit+0x12>

08001272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e00a      	b.n	800129a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001284:	f3af 8000 	nop.w
 8001288:	4601      	mov	r1, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	60ba      	str	r2, [r7, #8]
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbf0      	blt.n	8001284 <_read+0x12>
  }

  return len;
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e009      	b.n	80012d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	60ba      	str	r2, [r7, #8]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbf1      	blt.n	80012be <_write+0x12>
  }
  return len;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_close>:

int _close(int file)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800130c:	605a      	str	r2, [r3, #4]
  return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_isatty>:

int _isatty(int file)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f00a f802 	bl	800b384 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	24050000 	.word	0x24050000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	24000560 	.word	0x24000560
 80013b4:	240008a0 	.word	0x240008a0

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013bc:	4b32      	ldr	r3, [pc, #200]	@ (8001488 <SystemInit+0xd0>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c2:	4a31      	ldr	r2, [pc, #196]	@ (8001488 <SystemInit+0xd0>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <SystemInit+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d807      	bhi.n	80013e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d8:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <SystemInit+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 030f 	bic.w	r3, r3, #15
 80013e0:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <SystemInit+0xd4>)
 80013e2:	f043 0307 	orr.w	r3, r3, #7
 80013e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <SystemInit+0xd8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	@ (8001490 <SystemInit+0xd8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013f4:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <SystemInit+0xd8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <SystemInit+0xd8>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4924      	ldr	r1, [pc, #144]	@ (8001490 <SystemInit+0xd8>)
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <SystemInit+0xdc>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <SystemInit+0xd4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <SystemInit+0xd4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <SystemInit+0xd4>)
 800141c:	f043 0307 	orr.w	r3, r3, #7
 8001420:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <SystemInit+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <SystemInit+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <SystemInit+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <SystemInit+0xd8>)
 8001436:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <SystemInit+0xe0>)
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <SystemInit+0xd8>)
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <SystemInit+0xe4>)
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <SystemInit+0xd8>)
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <SystemInit+0xe8>)
 8001444:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <SystemInit+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <SystemInit+0xd8>)
 800144e:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <SystemInit+0xe8>)
 8001450:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <SystemInit+0xd8>)
 8001454:	2200      	movs	r2, #0
 8001456:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <SystemInit+0xd8>)
 800145a:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <SystemInit+0xe8>)
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <SystemInit+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <SystemInit+0xd8>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <SystemInit+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <SystemInit+0xec>)
 8001478:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800147c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	52002000 	.word	0x52002000
 8001490:	58024400 	.word	0x58024400
 8001494:	eaf6ed7f 	.word	0xeaf6ed7f
 8001498:	02020200 	.word	0x02020200
 800149c:	01ff0000 	.word	0x01ff0000
 80014a0:	01010280 	.word	0x01010280
 80014a4:	52004000 	.word	0x52004000

080014a8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <MX_USART3_UART_Init+0x94>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f0:	4811      	ldr	r0, [pc, #68]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014f2:	f006 fe29 	bl	8008148 <HAL_UART_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014fc:	f7ff fd8a 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	480d      	ldr	r0, [pc, #52]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001504:	f009 f859 	bl	800a5ba <HAL_UARTEx_SetTxFifoThreshold>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150e:	f7ff fd81 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001512:	2100      	movs	r1, #0
 8001514:	4808      	ldr	r0, [pc, #32]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001516:	f009 f88e 	bl	800a636 <HAL_UARTEx_SetRxFifoThreshold>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001520:	f7ff fd78 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001526:	f009 f80f 	bl	800a548 <HAL_UARTEx_DisableFifoMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001530:	f7ff fd70 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24000564 	.word	0x24000564
 800153c:	40004800 	.word	0x40004800

08001540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0b8      	sub	sp, #224	@ 0xe0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	22b8      	movs	r2, #184	@ 0xb8
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f009 fe54 	bl	800b20e <memset>
  if(uartHandle->Instance==USART3)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <HAL_UART_MspInit+0x134>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d17d      	bne.n	800166c <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001570:	f04f 0202 	mov.w	r2, #2
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fa78 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001592:	f7ff fd3f 	bl	8001014 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_UART_MspInit+0x138>)
 8001598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800159c:	4a36      	ldr	r2, [pc, #216]	@ (8001678 <HAL_UART_MspInit+0x138>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015a6:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_UART_MspInit+0x138>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <HAL_UART_MspInit+0x138>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001678 <HAL_UART_MspInit+0x138>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <HAL_UART_MspInit+0x138>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80015d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015f6:	4619      	mov	r1, r3
 80015f8:	4820      	ldr	r0, [pc, #128]	@ (800167c <HAL_UART_MspInit+0x13c>)
 80015fa:	f003 f86d 	bl	80046d8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001600:	4a20      	ldr	r2, [pc, #128]	@ (8001684 <HAL_UART_MspInit+0x144>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001606:	222d      	movs	r2, #45	@ 0x2d
 8001608:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_UART_MspInit+0x140>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_UART_MspInit+0x140>)
 800162c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001630:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_UART_MspInit+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800163e:	4810      	ldr	r0, [pc, #64]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001640:	f000 fa12 	bl	8001a68 <HAL_DMA_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800164a:	f7ff fce3 	bl	8001014 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0b      	ldr	r2, [pc, #44]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_UART_MspInit+0x140>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2027      	movs	r0, #39	@ 0x27
 8001662:	f000 f9cc 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001666:	2027      	movs	r0, #39	@ 0x27
 8001668:	f000 f9e3 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	37e0      	adds	r7, #224	@ 0xe0
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40004800 	.word	0x40004800
 8001678:	58024400 	.word	0x58024400
 800167c:	58020c00 	.word	0x58020c00
 8001680:	240005f8 	.word	0x240005f8
 8001684:	40020010 	.word	0x40020010

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800168c:	f7ff fe94 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f009 fe6b 	bl	800b390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fc25 	bl	8000f08 <main>
  bx  lr
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c8:	240000f8 	.word	0x240000f8
  ldr r2, =_sidata
 80016cc:	0800c5d0 	.word	0x0800c5d0
  ldr r2, =_sbss
 80016d0:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 80016d4:	2400089c 	.word	0x2400089c

080016d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC3_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 f980 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e8:	f003 fff2 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_Init+0x68>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	4913      	ldr	r1, [pc, #76]	@ (8001748 <HAL_Init+0x6c>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_Init+0x68>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4a0e      	ldr	r2, [pc, #56]	@ (8001748 <HAL_Init+0x6c>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_Init+0x70>)
 800171e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_Init+0x74>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f814 	bl	8001754 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e002      	b.n	800173c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001736:	f7ff fd09 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024400 	.word	0x58024400
 8001748:	0800c39c 	.word	0x0800c39c
 800174c:	24000088 	.word	0x24000088
 8001750:	24000084 	.word	0x24000084

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_InitTick+0x60>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e021      	b.n	80017ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_InitTick+0x64>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_InitTick+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f965 	bl	8001a4e <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f92f 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <HAL_InitTick+0x68>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	24000090 	.word	0x24000090
 80017b8:	24000084 	.word	0x24000084
 80017bc:	2400008c 	.word	0x2400008c

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	24000090 	.word	0x24000090
 80017e4:	24000670 	.word	0x24000670

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	24000670 	.word	0x24000670

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000090 	.word	0x24000090

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	05fa0000 	.word	0x05fa0000

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	@ (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff40 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff33 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa4 	bl	80019a4 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff feba 	bl	80017e8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e312      	b.n	80020a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a66      	ldr	r2, [pc, #408]	@ (8001c20 <HAL_DMA_Init+0x1b8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a65      	ldr	r2, [pc, #404]	@ (8001c24 <HAL_DMA_Init+0x1bc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a63      	ldr	r2, [pc, #396]	@ (8001c28 <HAL_DMA_Init+0x1c0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a62      	ldr	r2, [pc, #392]	@ (8001c2c <HAL_DMA_Init+0x1c4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a60      	ldr	r2, [pc, #384]	@ (8001c30 <HAL_DMA_Init+0x1c8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c34 <HAL_DMA_Init+0x1cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <HAL_DMA_Init+0x1d0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	@ (8001c3c <HAL_DMA_Init+0x1d4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HAL_DMA_Init+0x1d8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a59      	ldr	r2, [pc, #356]	@ (8001c44 <HAL_DMA_Init+0x1dc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_DMA_Init+0x1e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_DMA_Init+0x1e4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a54      	ldr	r2, [pc, #336]	@ (8001c50 <HAL_DMA_Init+0x1e8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a53      	ldr	r2, [pc, #332]	@ (8001c54 <HAL_DMA_Init+0x1ec>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a51      	ldr	r2, [pc, #324]	@ (8001c58 <HAL_DMA_Init+0x1f0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a50      	ldr	r2, [pc, #320]	@ (8001c5c <HAL_DMA_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Init+0xbc>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_Init+0xbe>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 813c 	beq.w	8001da4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a37      	ldr	r2, [pc, #220]	@ (8001c20 <HAL_DMA_Init+0x1b8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	@ (8001c24 <HAL_DMA_Init+0x1bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a34      	ldr	r2, [pc, #208]	@ (8001c28 <HAL_DMA_Init+0x1c0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a33      	ldr	r2, [pc, #204]	@ (8001c2c <HAL_DMA_Init+0x1c4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a31      	ldr	r2, [pc, #196]	@ (8001c30 <HAL_DMA_Init+0x1c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <HAL_DMA_Init+0x1cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c38 <HAL_DMA_Init+0x1d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2d      	ldr	r2, [pc, #180]	@ (8001c3c <HAL_DMA_Init+0x1d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <HAL_DMA_Init+0x1d8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c44 <HAL_DMA_Init+0x1dc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <HAL_DMA_Init+0x1e0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a27      	ldr	r2, [pc, #156]	@ (8001c4c <HAL_DMA_Init+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a25      	ldr	r2, [pc, #148]	@ (8001c50 <HAL_DMA_Init+0x1e8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a24      	ldr	r2, [pc, #144]	@ (8001c54 <HAL_DMA_Init+0x1ec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	@ (8001c58 <HAL_DMA_Init+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_DMA_Init+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <HAL_DMA_Init+0x186>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_DMA_Init+0x196>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bfe:	e02f      	b.n	8001c60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c00:	f7ff fdf2 	bl	80017e8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d928      	bls.n	8001c60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e242      	b.n	80020a6 <HAL_DMA_Init+0x63e>
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1c8      	bne.n	8001c00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4b83      	ldr	r3, [pc, #524]	@ (8001e88 <HAL_DMA_Init+0x420>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b28      	cmp	r3, #40	@ 0x28
 8001cca:	d903      	bls.n	8001cd4 <HAL_DMA_Init+0x26c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cd2:	d91f      	bls.n	8001d14 <HAL_DMA_Init+0x2ac>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001cda:	d903      	bls.n	8001ce4 <HAL_DMA_Init+0x27c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b42      	cmp	r3, #66	@ 0x42
 8001ce2:	d917      	bls.n	8001d14 <HAL_DMA_Init+0x2ac>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b46      	cmp	r3, #70	@ 0x46
 8001cea:	d903      	bls.n	8001cf4 <HAL_DMA_Init+0x28c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b48      	cmp	r3, #72	@ 0x48
 8001cf2:	d90f      	bls.n	8001d14 <HAL_DMA_Init+0x2ac>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001cfa:	d903      	bls.n	8001d04 <HAL_DMA_Init+0x29c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b52      	cmp	r3, #82	@ 0x52
 8001d02:	d907      	bls.n	8001d14 <HAL_DMA_Init+0x2ac>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b73      	cmp	r3, #115	@ 0x73
 8001d0a:	d905      	bls.n	8001d18 <HAL_DMA_Init+0x2b0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b77      	cmp	r3, #119	@ 0x77
 8001d12:	d801      	bhi.n	8001d18 <HAL_DMA_Init+0x2b0>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_DMA_Init+0x2b2>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f023 0307 	bic.w	r3, r3, #7
 8001d3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d117      	bne.n	8001d80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00e      	beq.n	8001d80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f002 fb2e 	bl	80043c4 <DMA_CheckFifoParam>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2240      	movs	r2, #64	@ 0x40
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e192      	b.n	80020a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f002 fa69 	bl	8004260 <DMA_CalcBaseAndBitshift>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	223f      	movs	r2, #63	@ 0x3f
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	e0c8      	b.n	8001f36 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a38      	ldr	r2, [pc, #224]	@ (8001e8c <HAL_DMA_Init+0x424>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a37      	ldr	r2, [pc, #220]	@ (8001e90 <HAL_DMA_Init+0x428>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a35      	ldr	r2, [pc, #212]	@ (8001e94 <HAL_DMA_Init+0x42c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a34      	ldr	r2, [pc, #208]	@ (8001e98 <HAL_DMA_Init+0x430>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a32      	ldr	r2, [pc, #200]	@ (8001e9c <HAL_DMA_Init+0x434>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a31      	ldr	r2, [pc, #196]	@ (8001ea0 <HAL_DMA_Init+0x438>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_DMA_Init+0x43c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Init+0x38c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea8 <HAL_DMA_Init+0x440>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Init+0x390>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_DMA_Init+0x392>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8092 	beq.w	8001f24 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <HAL_DMA_Init+0x424>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d021      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a20      	ldr	r2, [pc, #128]	@ (8001e90 <HAL_DMA_Init+0x428>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d01c      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	@ (8001e94 <HAL_DMA_Init+0x42c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d017      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_DMA_Init+0x430>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <HAL_DMA_Init+0x434>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea0 <HAL_DMA_Init+0x438>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <HAL_DMA_Init+0x43c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d003      	beq.n	8001e4e <HAL_DMA_Init+0x3e6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_DMA_Init+0x440>)
 8001e4c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_DMA_Init+0x444>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d01c      	beq.n	8001eb0 <HAL_DMA_Init+0x448>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b80      	cmp	r3, #128	@ 0x80
 8001e7c:	d102      	bne.n	8001e84 <HAL_DMA_Init+0x41c>
 8001e7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e82:	e016      	b.n	8001eb2 <HAL_DMA_Init+0x44a>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e014      	b.n	8001eb2 <HAL_DMA_Init+0x44a>
 8001e88:	fe10803f 	.word	0xfe10803f
 8001e8c:	58025408 	.word	0x58025408
 8001e90:	5802541c 	.word	0x5802541c
 8001e94:	58025430 	.word	0x58025430
 8001e98:	58025444 	.word	0x58025444
 8001e9c:	58025458 	.word	0x58025458
 8001ea0:	5802546c 	.word	0x5802546c
 8001ea4:	58025480 	.word	0x58025480
 8001ea8:	58025494 	.word	0x58025494
 8001eac:	fffe000f 	.word	0xfffe000f
 8001eb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ee0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_DMA_Init+0x648>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a6e      	ldr	r2, [pc, #440]	@ (80020b4 <HAL_DMA_Init+0x64c>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f002 f9a9 	bl	8004260 <DMA_CalcBaseAndBitshift>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e008      	b.n	8001f36 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0b7      	b.n	80020a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80020b8 <HAL_DMA_Init+0x650>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d072      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5d      	ldr	r2, [pc, #372]	@ (80020bc <HAL_DMA_Init+0x654>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d06d      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80020c0 <HAL_DMA_Init+0x658>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d068      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5a      	ldr	r2, [pc, #360]	@ (80020c4 <HAL_DMA_Init+0x65c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d063      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a59      	ldr	r2, [pc, #356]	@ (80020c8 <HAL_DMA_Init+0x660>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a57      	ldr	r2, [pc, #348]	@ (80020cc <HAL_DMA_Init+0x664>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d059      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a56      	ldr	r2, [pc, #344]	@ (80020d0 <HAL_DMA_Init+0x668>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d054      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a54      	ldr	r2, [pc, #336]	@ (80020d4 <HAL_DMA_Init+0x66c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04f      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a53      	ldr	r2, [pc, #332]	@ (80020d8 <HAL_DMA_Init+0x670>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <HAL_DMA_Init+0x674>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a50      	ldr	r2, [pc, #320]	@ (80020e0 <HAL_DMA_Init+0x678>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80020e4 <HAL_DMA_Init+0x67c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4d      	ldr	r2, [pc, #308]	@ (80020e8 <HAL_DMA_Init+0x680>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80020ec <HAL_DMA_Init+0x684>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4a      	ldr	r2, [pc, #296]	@ (80020f0 <HAL_DMA_Init+0x688>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a48      	ldr	r2, [pc, #288]	@ (80020f4 <HAL_DMA_Init+0x68c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a47      	ldr	r2, [pc, #284]	@ (80020f8 <HAL_DMA_Init+0x690>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a45      	ldr	r2, [pc, #276]	@ (80020fc <HAL_DMA_Init+0x694>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a44      	ldr	r2, [pc, #272]	@ (8002100 <HAL_DMA_Init+0x698>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a42      	ldr	r2, [pc, #264]	@ (8002104 <HAL_DMA_Init+0x69c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a41      	ldr	r2, [pc, #260]	@ (8002108 <HAL_DMA_Init+0x6a0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3f      	ldr	r2, [pc, #252]	@ (800210c <HAL_DMA_Init+0x6a4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a3e      	ldr	r2, [pc, #248]	@ (8002110 <HAL_DMA_Init+0x6a8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Init+0x5be>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3c      	ldr	r2, [pc, #240]	@ (8002114 <HAL_DMA_Init+0x6ac>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Init+0x5c2>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Init+0x5c4>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d032      	beq.n	8002096 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f002 fa43 	bl	80044bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b80      	cmp	r3, #128	@ 0x80
 800203c:	d102      	bne.n	8002044 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002058:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_DMA_Init+0x61c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b08      	cmp	r3, #8
 8002068:	d80c      	bhi.n	8002084 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f002 fac0 	bl	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e008      	b.n	8002096 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	a7fdabf8 	.word	0xa7fdabf8
 80020b4:	cccccccd 	.word	0xcccccccd
 80020b8:	40020010 	.word	0x40020010
 80020bc:	40020028 	.word	0x40020028
 80020c0:	40020040 	.word	0x40020040
 80020c4:	40020058 	.word	0x40020058
 80020c8:	40020070 	.word	0x40020070
 80020cc:	40020088 	.word	0x40020088
 80020d0:	400200a0 	.word	0x400200a0
 80020d4:	400200b8 	.word	0x400200b8
 80020d8:	40020410 	.word	0x40020410
 80020dc:	40020428 	.word	0x40020428
 80020e0:	40020440 	.word	0x40020440
 80020e4:	40020458 	.word	0x40020458
 80020e8:	40020470 	.word	0x40020470
 80020ec:	40020488 	.word	0x40020488
 80020f0:	400204a0 	.word	0x400204a0
 80020f4:	400204b8 	.word	0x400204b8
 80020f8:	58025408 	.word	0x58025408
 80020fc:	5802541c 	.word	0x5802541c
 8002100:	58025430 	.word	0x58025430
 8002104:	58025444 	.word	0x58025444
 8002108:	58025458 	.word	0x58025458
 800210c:	5802546c 	.word	0x5802546c
 8002110:	58025480 	.word	0x58025480
 8002114:	58025494 	.word	0x58025494

08002118 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e226      	b.n	8002582 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_DMA_Start_IT+0x2a>
 800213e:	2302      	movs	r3, #2
 8002140:	e21f      	b.n	8002582 <HAL_DMA_Start_IT+0x46a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 820a 	bne.w	800256c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a68      	ldr	r2, [pc, #416]	@ (800230c <HAL_DMA_Start_IT+0x1f4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d04a      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a66      	ldr	r2, [pc, #408]	@ (8002310 <HAL_DMA_Start_IT+0x1f8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d045      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a65      	ldr	r2, [pc, #404]	@ (8002314 <HAL_DMA_Start_IT+0x1fc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d040      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a63      	ldr	r2, [pc, #396]	@ (8002318 <HAL_DMA_Start_IT+0x200>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d03b      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_DMA_Start_IT+0x204>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d036      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a60      	ldr	r2, [pc, #384]	@ (8002320 <HAL_DMA_Start_IT+0x208>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d031      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002324 <HAL_DMA_Start_IT+0x20c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d02c      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002328 <HAL_DMA_Start_IT+0x210>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d027      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a5c      	ldr	r2, [pc, #368]	@ (800232c <HAL_DMA_Start_IT+0x214>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d022      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002330 <HAL_DMA_Start_IT+0x218>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01d      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a59      	ldr	r2, [pc, #356]	@ (8002334 <HAL_DMA_Start_IT+0x21c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d018      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a57      	ldr	r2, [pc, #348]	@ (8002338 <HAL_DMA_Start_IT+0x220>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a56      	ldr	r2, [pc, #344]	@ (800233c <HAL_DMA_Start_IT+0x224>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00e      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a54      	ldr	r2, [pc, #336]	@ (8002340 <HAL_DMA_Start_IT+0x228>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a53      	ldr	r2, [pc, #332]	@ (8002344 <HAL_DMA_Start_IT+0x22c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d004      	beq.n	8002206 <HAL_DMA_Start_IT+0xee>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a51      	ldr	r2, [pc, #324]	@ (8002348 <HAL_DMA_Start_IT+0x230>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <HAL_DMA_Start_IT+0x100>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e007      	b.n	8002228 <HAL_DMA_Start_IT+0x110>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 fe6a 	bl	8003f08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	@ (800230c <HAL_DMA_Start_IT+0x1f4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d04a      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a33      	ldr	r2, [pc, #204]	@ (8002310 <HAL_DMA_Start_IT+0x1f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d045      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a31      	ldr	r2, [pc, #196]	@ (8002314 <HAL_DMA_Start_IT+0x1fc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d040      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a30      	ldr	r2, [pc, #192]	@ (8002318 <HAL_DMA_Start_IT+0x200>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d03b      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2e      	ldr	r2, [pc, #184]	@ (800231c <HAL_DMA_Start_IT+0x204>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d036      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <HAL_DMA_Start_IT+0x208>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d031      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2b      	ldr	r2, [pc, #172]	@ (8002324 <HAL_DMA_Start_IT+0x20c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02c      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2a      	ldr	r2, [pc, #168]	@ (8002328 <HAL_DMA_Start_IT+0x210>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d027      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a28      	ldr	r2, [pc, #160]	@ (800232c <HAL_DMA_Start_IT+0x214>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d022      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a27      	ldr	r2, [pc, #156]	@ (8002330 <HAL_DMA_Start_IT+0x218>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d01d      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	@ (8002334 <HAL_DMA_Start_IT+0x21c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d018      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a24      	ldr	r2, [pc, #144]	@ (8002338 <HAL_DMA_Start_IT+0x220>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <HAL_DMA_Start_IT+0x224>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00e      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_DMA_Start_IT+0x228>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <HAL_DMA_Start_IT+0x22c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_DMA_Start_IT+0x1bc>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <HAL_DMA_Start_IT+0x230>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_DMA_Start_IT+0x1c0>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_DMA_Start_IT+0x1c2>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 021e 	bic.w	r2, r3, #30
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0216 	orr.w	r2, r2, #22
 80022f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03e      	beq.n	8002378 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0208 	orr.w	r2, r2, #8
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e035      	b.n	8002378 <HAL_DMA_Start_IT+0x260>
 800230c:	40020010 	.word	0x40020010
 8002310:	40020028 	.word	0x40020028
 8002314:	40020040 	.word	0x40020040
 8002318:	40020058 	.word	0x40020058
 800231c:	40020070 	.word	0x40020070
 8002320:	40020088 	.word	0x40020088
 8002324:	400200a0 	.word	0x400200a0
 8002328:	400200b8 	.word	0x400200b8
 800232c:	40020410 	.word	0x40020410
 8002330:	40020428 	.word	0x40020428
 8002334:	40020440 	.word	0x40020440
 8002338:	40020458 	.word	0x40020458
 800233c:	40020470 	.word	0x40020470
 8002340:	40020488 	.word	0x40020488
 8002344:	400204a0 	.word	0x400204a0
 8002348:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 020e 	bic.w	r2, r3, #14
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 020a 	orr.w	r2, r2, #10
 800235e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0204 	orr.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	@ (800258c <HAL_DMA_Start_IT+0x474>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d072      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a82      	ldr	r2, [pc, #520]	@ (8002590 <HAL_DMA_Start_IT+0x478>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d06d      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	@ (8002594 <HAL_DMA_Start_IT+0x47c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d068      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7f      	ldr	r2, [pc, #508]	@ (8002598 <HAL_DMA_Start_IT+0x480>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d063      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7d      	ldr	r2, [pc, #500]	@ (800259c <HAL_DMA_Start_IT+0x484>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d05e      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7c      	ldr	r2, [pc, #496]	@ (80025a0 <HAL_DMA_Start_IT+0x488>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d059      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a7a      	ldr	r2, [pc, #488]	@ (80025a4 <HAL_DMA_Start_IT+0x48c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d054      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a79      	ldr	r2, [pc, #484]	@ (80025a8 <HAL_DMA_Start_IT+0x490>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d04f      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a77      	ldr	r2, [pc, #476]	@ (80025ac <HAL_DMA_Start_IT+0x494>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04a      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a76      	ldr	r2, [pc, #472]	@ (80025b0 <HAL_DMA_Start_IT+0x498>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d045      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a74      	ldr	r2, [pc, #464]	@ (80025b4 <HAL_DMA_Start_IT+0x49c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d040      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a73      	ldr	r2, [pc, #460]	@ (80025b8 <HAL_DMA_Start_IT+0x4a0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d03b      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a71      	ldr	r2, [pc, #452]	@ (80025bc <HAL_DMA_Start_IT+0x4a4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d036      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a70      	ldr	r2, [pc, #448]	@ (80025c0 <HAL_DMA_Start_IT+0x4a8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d031      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_DMA_Start_IT+0x4ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02c      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6d      	ldr	r2, [pc, #436]	@ (80025c8 <HAL_DMA_Start_IT+0x4b0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d027      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6b      	ldr	r2, [pc, #428]	@ (80025cc <HAL_DMA_Start_IT+0x4b4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d022      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6a      	ldr	r2, [pc, #424]	@ (80025d0 <HAL_DMA_Start_IT+0x4b8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d01d      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a68      	ldr	r2, [pc, #416]	@ (80025d4 <HAL_DMA_Start_IT+0x4bc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d018      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a67      	ldr	r2, [pc, #412]	@ (80025d8 <HAL_DMA_Start_IT+0x4c0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_DMA_Start_IT+0x4c4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00e      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a64      	ldr	r2, [pc, #400]	@ (80025e0 <HAL_DMA_Start_IT+0x4c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a62      	ldr	r2, [pc, #392]	@ (80025e4 <HAL_DMA_Start_IT+0x4cc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_Start_IT+0x350>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a61      	ldr	r2, [pc, #388]	@ (80025e8 <HAL_DMA_Start_IT+0x4d0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_DMA_Start_IT+0x354>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_DMA_Start_IT+0x356>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01a      	beq.n	80024a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a37      	ldr	r2, [pc, #220]	@ (800258c <HAL_DMA_Start_IT+0x474>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a36      	ldr	r2, [pc, #216]	@ (8002590 <HAL_DMA_Start_IT+0x478>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a34      	ldr	r2, [pc, #208]	@ (8002594 <HAL_DMA_Start_IT+0x47c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a33      	ldr	r2, [pc, #204]	@ (8002598 <HAL_DMA_Start_IT+0x480>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a31      	ldr	r2, [pc, #196]	@ (800259c <HAL_DMA_Start_IT+0x484>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <HAL_DMA_Start_IT+0x488>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2e      	ldr	r2, [pc, #184]	@ (80025a4 <HAL_DMA_Start_IT+0x48c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_DMA_Start_IT+0x490>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2b      	ldr	r2, [pc, #172]	@ (80025ac <HAL_DMA_Start_IT+0x494>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <HAL_DMA_Start_IT+0x498>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <HAL_DMA_Start_IT+0x49c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	@ (80025b8 <HAL_DMA_Start_IT+0x4a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <HAL_DMA_Start_IT+0x4a4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_DMA_Start_IT+0x4a8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <HAL_DMA_Start_IT+0x4ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Start_IT+0x430>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	@ (80025c8 <HAL_DMA_Start_IT+0x4b0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d108      	bne.n	800255a <HAL_DMA_Start_IT+0x442>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e012      	b.n	8002580 <HAL_DMA_Start_IT+0x468>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e009      	b.n	8002580 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002580:	7dfb      	ldrb	r3, [r7, #23]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40020010 	.word	0x40020010
 8002590:	40020028 	.word	0x40020028
 8002594:	40020040 	.word	0x40020040
 8002598:	40020058 	.word	0x40020058
 800259c:	40020070 	.word	0x40020070
 80025a0:	40020088 	.word	0x40020088
 80025a4:	400200a0 	.word	0x400200a0
 80025a8:	400200b8 	.word	0x400200b8
 80025ac:	40020410 	.word	0x40020410
 80025b0:	40020428 	.word	0x40020428
 80025b4:	40020440 	.word	0x40020440
 80025b8:	40020458 	.word	0x40020458
 80025bc:	40020470 	.word	0x40020470
 80025c0:	40020488 	.word	0x40020488
 80025c4:	400204a0 	.word	0x400204a0
 80025c8:	400204b8 	.word	0x400204b8
 80025cc:	58025408 	.word	0x58025408
 80025d0:	5802541c 	.word	0x5802541c
 80025d4:	58025430 	.word	0x58025430
 80025d8:	58025444 	.word	0x58025444
 80025dc:	58025458 	.word	0x58025458
 80025e0:	5802546c 	.word	0x5802546c
 80025e4:	58025480 	.word	0x58025480
 80025e8:	58025494 	.word	0x58025494

080025ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff f8f8 	bl	80017e8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e2dc      	b.n	8002bbe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	@ 0x80
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e2cd      	b.n	8002bbe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a76      	ldr	r2, [pc, #472]	@ (8002800 <HAL_DMA_Abort+0x214>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a74      	ldr	r2, [pc, #464]	@ (8002804 <HAL_DMA_Abort+0x218>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a73      	ldr	r2, [pc, #460]	@ (8002808 <HAL_DMA_Abort+0x21c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a71      	ldr	r2, [pc, #452]	@ (800280c <HAL_DMA_Abort+0x220>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a70      	ldr	r2, [pc, #448]	@ (8002810 <HAL_DMA_Abort+0x224>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_DMA_Abort+0x228>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6d      	ldr	r2, [pc, #436]	@ (8002818 <HAL_DMA_Abort+0x22c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6b      	ldr	r2, [pc, #428]	@ (800281c <HAL_DMA_Abort+0x230>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6a      	ldr	r2, [pc, #424]	@ (8002820 <HAL_DMA_Abort+0x234>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a68      	ldr	r2, [pc, #416]	@ (8002824 <HAL_DMA_Abort+0x238>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a67      	ldr	r2, [pc, #412]	@ (8002828 <HAL_DMA_Abort+0x23c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a65      	ldr	r2, [pc, #404]	@ (800282c <HAL_DMA_Abort+0x240>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a64      	ldr	r2, [pc, #400]	@ (8002830 <HAL_DMA_Abort+0x244>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a62      	ldr	r2, [pc, #392]	@ (8002834 <HAL_DMA_Abort+0x248>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a61      	ldr	r2, [pc, #388]	@ (8002838 <HAL_DMA_Abort+0x24c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Abort+0xd6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5f      	ldr	r2, [pc, #380]	@ (800283c <HAL_DMA_Abort+0x250>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_DMA_Abort+0xda>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_DMA_Abort+0xdc>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 021e 	bic.w	r2, r2, #30
 80026da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e00a      	b.n	800270a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 020e 	bic.w	r2, r2, #14
 8002702:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3c      	ldr	r2, [pc, #240]	@ (8002800 <HAL_DMA_Abort+0x214>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d072      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3a      	ldr	r2, [pc, #232]	@ (8002804 <HAL_DMA_Abort+0x218>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d06d      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <HAL_DMA_Abort+0x21c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d068      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a37      	ldr	r2, [pc, #220]	@ (800280c <HAL_DMA_Abort+0x220>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d063      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <HAL_DMA_Abort+0x224>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d05e      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	@ (8002814 <HAL_DMA_Abort+0x228>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d059      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <HAL_DMA_Abort+0x22c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d054      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a31      	ldr	r2, [pc, #196]	@ (800281c <HAL_DMA_Abort+0x230>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d04f      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_DMA_Abort+0x234>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04a      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_DMA_Abort+0x238>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d045      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_DMA_Abort+0x23c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2b      	ldr	r2, [pc, #172]	@ (800282c <HAL_DMA_Abort+0x240>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d03b      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2a      	ldr	r2, [pc, #168]	@ (8002830 <HAL_DMA_Abort+0x244>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a28      	ldr	r2, [pc, #160]	@ (8002834 <HAL_DMA_Abort+0x248>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_DMA_Abort+0x24c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d02c      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a25      	ldr	r2, [pc, #148]	@ (800283c <HAL_DMA_Abort+0x250>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d027      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a24      	ldr	r2, [pc, #144]	@ (8002840 <HAL_DMA_Abort+0x254>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <HAL_DMA_Abort+0x258>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a21      	ldr	r2, [pc, #132]	@ (8002848 <HAL_DMA_Abort+0x25c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	@ (800284c <HAL_DMA_Abort+0x260>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <HAL_DMA_Abort+0x264>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_DMA_Abort+0x268>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <HAL_DMA_Abort+0x26c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	@ (800285c <HAL_DMA_Abort+0x270>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d132      	bne.n	8002860 <HAL_DMA_Abort+0x274>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e031      	b.n	8002862 <HAL_DMA_Abort+0x276>
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a30 <HAL_DMA_Abort+0x444>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04a      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6b      	ldr	r2, [pc, #428]	@ (8002a34 <HAL_DMA_Abort+0x448>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d045      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6a      	ldr	r2, [pc, #424]	@ (8002a38 <HAL_DMA_Abort+0x44c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d040      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a68      	ldr	r2, [pc, #416]	@ (8002a3c <HAL_DMA_Abort+0x450>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d03b      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a67      	ldr	r2, [pc, #412]	@ (8002a40 <HAL_DMA_Abort+0x454>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d036      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_DMA_Abort+0x458>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d031      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a64      	ldr	r2, [pc, #400]	@ (8002a48 <HAL_DMA_Abort+0x45c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d02c      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a62      	ldr	r2, [pc, #392]	@ (8002a4c <HAL_DMA_Abort+0x460>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d027      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a61      	ldr	r2, [pc, #388]	@ (8002a50 <HAL_DMA_Abort+0x464>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a54 <HAL_DMA_Abort+0x468>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5e      	ldr	r2, [pc, #376]	@ (8002a58 <HAL_DMA_Abort+0x46c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a5c <HAL_DMA_Abort+0x470>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a60 <HAL_DMA_Abort+0x474>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a59      	ldr	r2, [pc, #356]	@ (8002a64 <HAL_DMA_Abort+0x478>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_DMA_Abort+0x47c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Abort+0x32a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a56      	ldr	r2, [pc, #344]	@ (8002a6c <HAL_DMA_Abort+0x480>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <HAL_DMA_Abort+0x33c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <HAL_DMA_Abort+0x34c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002938:	e013      	b.n	8002962 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800293a:	f7fe ff55 	bl	80017e8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b05      	cmp	r3, #5
 8002946:	d90c      	bls.n	8002962 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e12d      	b.n	8002bbe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <HAL_DMA_Abort+0x444>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d04a      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a34 <HAL_DMA_Abort+0x448>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d045      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2c      	ldr	r2, [pc, #176]	@ (8002a38 <HAL_DMA_Abort+0x44c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d040      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2a      	ldr	r2, [pc, #168]	@ (8002a3c <HAL_DMA_Abort+0x450>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d03b      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a29      	ldr	r2, [pc, #164]	@ (8002a40 <HAL_DMA_Abort+0x454>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d036      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a27      	ldr	r2, [pc, #156]	@ (8002a44 <HAL_DMA_Abort+0x458>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a26      	ldr	r2, [pc, #152]	@ (8002a48 <HAL_DMA_Abort+0x45c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d02c      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <HAL_DMA_Abort+0x460>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_DMA_Abort+0x464>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a21      	ldr	r2, [pc, #132]	@ (8002a54 <HAL_DMA_Abort+0x468>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <HAL_DMA_Abort+0x46c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_DMA_Abort+0x470>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <HAL_DMA_Abort+0x474>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_DMA_Abort+0x478>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_DMA_Abort+0x47c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_DMA_Abort+0x422>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a18      	ldr	r2, [pc, #96]	@ (8002a6c <HAL_DMA_Abort+0x480>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Abort+0x426>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_Abort+0x428>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02b      	beq.n	8002a70 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	223f      	movs	r2, #63	@ 0x3f
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	e02a      	b.n	8002a86 <HAL_DMA_Abort+0x49a>
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2201      	movs	r2, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc8 <HAL_DMA_Abort+0x5dc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d072      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4d      	ldr	r2, [pc, #308]	@ (8002bcc <HAL_DMA_Abort+0x5e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d06d      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd0 <HAL_DMA_Abort+0x5e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d068      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_DMA_Abort+0x5e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d063      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a49      	ldr	r2, [pc, #292]	@ (8002bd8 <HAL_DMA_Abort+0x5ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d05e      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a47      	ldr	r2, [pc, #284]	@ (8002bdc <HAL_DMA_Abort+0x5f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d059      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a46      	ldr	r2, [pc, #280]	@ (8002be0 <HAL_DMA_Abort+0x5f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d054      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a44      	ldr	r2, [pc, #272]	@ (8002be4 <HAL_DMA_Abort+0x5f8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d04f      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a43      	ldr	r2, [pc, #268]	@ (8002be8 <HAL_DMA_Abort+0x5fc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d04a      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a41      	ldr	r2, [pc, #260]	@ (8002bec <HAL_DMA_Abort+0x600>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d045      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a40      	ldr	r2, [pc, #256]	@ (8002bf0 <HAL_DMA_Abort+0x604>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d040      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf4 <HAL_DMA_Abort+0x608>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d03b      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf8 <HAL_DMA_Abort+0x60c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d036      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002bfc <HAL_DMA_Abort+0x610>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d031      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3a      	ldr	r2, [pc, #232]	@ (8002c00 <HAL_DMA_Abort+0x614>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d02c      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a38      	ldr	r2, [pc, #224]	@ (8002c04 <HAL_DMA_Abort+0x618>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d027      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a37      	ldr	r2, [pc, #220]	@ (8002c08 <HAL_DMA_Abort+0x61c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a35      	ldr	r2, [pc, #212]	@ (8002c0c <HAL_DMA_Abort+0x620>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01d      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a34      	ldr	r2, [pc, #208]	@ (8002c10 <HAL_DMA_Abort+0x624>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d018      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <HAL_DMA_Abort+0x628>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <HAL_DMA_Abort+0x62c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c1c <HAL_DMA_Abort+0x630>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2e      	ldr	r2, [pc, #184]	@ (8002c20 <HAL_DMA_Abort+0x634>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_DMA_Abort+0x58a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2c      	ldr	r2, [pc, #176]	@ (8002c24 <HAL_DMA_Abort+0x638>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA_Abort+0x58e>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_DMA_Abort+0x590>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002baa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494

08002c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e237      	b.n	80030aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d004      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2280      	movs	r2, #128	@ 0x80
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e22c      	b.n	80030aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dcc <HAL_DMA_Abort_IT+0x1a4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a59      	ldr	r2, [pc, #356]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a56      	ldr	r2, [pc, #344]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a55      	ldr	r2, [pc, #340]	@ (8002ddc <HAL_DMA_Abort_IT+0x1b4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a53      	ldr	r2, [pc, #332]	@ (8002de0 <HAL_DMA_Abort_IT+0x1b8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_DMA_Abort_IT+0x1bc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	@ (8002de8 <HAL_DMA_Abort_IT+0x1c0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <HAL_DMA_Abort_IT+0x1c4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002df0 <HAL_DMA_Abort_IT+0x1c8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8002df4 <HAL_DMA_Abort_IT+0x1cc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_DMA_Abort_IT+0x1d0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a49      	ldr	r2, [pc, #292]	@ (8002dfc <HAL_DMA_Abort_IT+0x1d4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a47      	ldr	r2, [pc, #284]	@ (8002e00 <HAL_DMA_Abort_IT+0x1d8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0xc8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a46      	ldr	r2, [pc, #280]	@ (8002e04 <HAL_DMA_Abort_IT+0x1dc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Abort_IT+0xcc>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_DMA_Abort_IT+0xce>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8086 	beq.w	8002e08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d04a      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2e      	ldr	r2, [pc, #184]	@ (8002dcc <HAL_DMA_Abort_IT+0x1a4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d045      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1a8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d040      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1ac>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d03b      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a29      	ldr	r2, [pc, #164]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d036      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a28      	ldr	r2, [pc, #160]	@ (8002ddc <HAL_DMA_Abort_IT+0x1b4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d031      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a26      	ldr	r2, [pc, #152]	@ (8002de0 <HAL_DMA_Abort_IT+0x1b8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02c      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a25      	ldr	r2, [pc, #148]	@ (8002de4 <HAL_DMA_Abort_IT+0x1bc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d027      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <HAL_DMA_Abort_IT+0x1c0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <HAL_DMA_Abort_IT+0x1c4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d01d      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_DMA_Abort_IT+0x1c8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <HAL_DMA_Abort_IT+0x1cc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_DMA_Abort_IT+0x1d0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_DMA_Abort_IT+0x1d4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	@ (8002e00 <HAL_DMA_Abort_IT+0x1d8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x17c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_DMA_Abort_IT+0x1dc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <HAL_DMA_Abort_IT+0x18e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e178      	b.n	80030a8 <HAL_DMA_Abort_IT+0x480>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e16f      	b.n	80030a8 <HAL_DMA_Abort_IT+0x480>
 8002dc8:	40020010 	.word	0x40020010
 8002dcc:	40020028 	.word	0x40020028
 8002dd0:	40020040 	.word	0x40020040
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	40020070 	.word	0x40020070
 8002ddc:	40020088 	.word	0x40020088
 8002de0:	400200a0 	.word	0x400200a0
 8002de4:	400200b8 	.word	0x400200b8
 8002de8:	40020410 	.word	0x40020410
 8002dec:	40020428 	.word	0x40020428
 8002df0:	40020440 	.word	0x40020440
 8002df4:	40020458 	.word	0x40020458
 8002df8:	40020470 	.word	0x40020470
 8002dfc:	40020488 	.word	0x40020488
 8002e00:	400204a0 	.word	0x400204a0
 8002e04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 020e 	bic.w	r2, r2, #14
 8002e16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04a      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6b      	ldr	r2, [pc, #428]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d045      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a69      	ldr	r2, [pc, #420]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d040      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a68      	ldr	r2, [pc, #416]	@ (8002fdc <HAL_DMA_Abort_IT+0x3b4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d03b      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a66      	ldr	r2, [pc, #408]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d036      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d031      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a63      	ldr	r2, [pc, #396]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02c      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a62      	ldr	r2, [pc, #392]	@ (8002fec <HAL_DMA_Abort_IT+0x3c4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d027      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ffc <HAL_DMA_Abort_IT+0x3d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_DMA_Abort_IT+0x3d8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a59      	ldr	r2, [pc, #356]	@ (8003004 <HAL_DMA_Abort_IT+0x3dc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	@ (8003008 <HAL_DMA_Abort_IT+0x3e0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x290>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_DMA_Abort_IT+0x3e4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d108      	bne.n	8002eca <HAL_DMA_Abort_IT+0x2a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_DMA_Abort_IT+0x2b2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3a8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d072      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3ac>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d06d      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a39      	ldr	r2, [pc, #228]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3b0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d068      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a37      	ldr	r2, [pc, #220]	@ (8002fdc <HAL_DMA_Abort_IT+0x3b4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d063      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a36      	ldr	r2, [pc, #216]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3b8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d05e      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a34      	ldr	r2, [pc, #208]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3bc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d059      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a33      	ldr	r2, [pc, #204]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3c0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d054      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a31      	ldr	r2, [pc, #196]	@ (8002fec <HAL_DMA_Abort_IT+0x3c4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04f      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3c8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3cc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3d0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <HAL_DMA_Abort_IT+0x3d4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2a      	ldr	r2, [pc, #168]	@ (8003000 <HAL_DMA_Abort_IT+0x3d8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a28      	ldr	r2, [pc, #160]	@ (8003004 <HAL_DMA_Abort_IT+0x3dc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <HAL_DMA_Abort_IT+0x3e0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a25      	ldr	r2, [pc, #148]	@ (800300c <HAL_DMA_Abort_IT+0x3e4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a24      	ldr	r2, [pc, #144]	@ (8003010 <HAL_DMA_Abort_IT+0x3e8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <HAL_DMA_Abort_IT+0x3ec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <HAL_DMA_Abort_IT+0x3f0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <HAL_DMA_Abort_IT+0x3f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_DMA_Abort_IT+0x3f8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003024 <HAL_DMA_Abort_IT+0x3fc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_DMA_Abort_IT+0x400>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_Abort_IT+0x3a2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_DMA_Abort_IT+0x404>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d132      	bne.n	8003030 <HAL_DMA_Abort_IT+0x408>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e031      	b.n	8003032 <HAL_DMA_Abort_IT+0x40a>
 8002fce:	bf00      	nop
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	58025408 	.word	0x58025408
 8003014:	5802541c 	.word	0x5802541c
 8003018:	58025430 	.word	0x58025430
 800301c:	58025444 	.word	0x58025444
 8003020:	58025458 	.word	0x58025458
 8003024:	5802546c 	.word	0x5802546c
 8003028:	58025480 	.word	0x58025480
 800302c:	58025494 	.word	0x58025494
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003044:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003064:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800307c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003086:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c0:	4b67      	ldr	r3, [pc, #412]	@ (8003260 <HAL_DMA_IRQHandler+0x1ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a67      	ldr	r2, [pc, #412]	@ (8003264 <HAL_DMA_IRQHandler+0x1b0>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003268 <HAL_DMA_IRQHandler+0x1b4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	@ (800326c <HAL_DMA_IRQHandler+0x1b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003270 <HAL_DMA_IRQHandler+0x1bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5a      	ldr	r2, [pc, #360]	@ (8003274 <HAL_DMA_IRQHandler+0x1c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a59      	ldr	r2, [pc, #356]	@ (8003278 <HAL_DMA_IRQHandler+0x1c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a57      	ldr	r2, [pc, #348]	@ (800327c <HAL_DMA_IRQHandler+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a56      	ldr	r2, [pc, #344]	@ (8003280 <HAL_DMA_IRQHandler+0x1cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a54      	ldr	r2, [pc, #336]	@ (8003284 <HAL_DMA_IRQHandler+0x1d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a53      	ldr	r2, [pc, #332]	@ (8003288 <HAL_DMA_IRQHandler+0x1d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a51      	ldr	r2, [pc, #324]	@ (800328c <HAL_DMA_IRQHandler+0x1d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <HAL_DMA_IRQHandler+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4e      	ldr	r2, [pc, #312]	@ (8003294 <HAL_DMA_IRQHandler+0x1e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4d      	ldr	r2, [pc, #308]	@ (8003298 <HAL_DMA_IRQHandler+0x1e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4b      	ldr	r2, [pc, #300]	@ (800329c <HAL_DMA_IRQHandler+0x1e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <HAL_DMA_IRQHandler+0x1ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a48      	ldr	r2, [pc, #288]	@ (80032a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_DMA_IRQHandler+0xd6>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_DMA_IRQHandler+0xd8>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 842b 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a2 	beq.w	80032ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003268 <HAL_DMA_IRQHandler+0x1b4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <HAL_DMA_IRQHandler+0x1b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <HAL_DMA_IRQHandler+0x1bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <HAL_DMA_IRQHandler+0x1c0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <HAL_DMA_IRQHandler+0x1c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_DMA_IRQHandler+0x1c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	@ (8003280 <HAL_DMA_IRQHandler+0x1cc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	@ (8003284 <HAL_DMA_IRQHandler+0x1d0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_DMA_IRQHandler+0x1d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	@ (800328c <HAL_DMA_IRQHandler+0x1d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <HAL_DMA_IRQHandler+0x1dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <HAL_DMA_IRQHandler+0x1e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_DMA_IRQHandler+0x1e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <HAL_DMA_IRQHandler+0x1e8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_DMA_IRQHandler+0x1ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	@ (80032a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d12f      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x1f4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e02e      	b.n	80032bc <HAL_DMA_IRQHandler+0x208>
 800325e:	bf00      	nop
 8003260:	24000084 	.word	0x24000084
 8003264:	1b4e81b5 	.word	0x1b4e81b5
 8003268:	40020010 	.word	0x40020010
 800326c:	40020028 	.word	0x40020028
 8003270:	40020040 	.word	0x40020040
 8003274:	40020058 	.word	0x40020058
 8003278:	40020070 	.word	0x40020070
 800327c:	40020088 	.word	0x40020088
 8003280:	400200a0 	.word	0x400200a0
 8003284:	400200b8 	.word	0x400200b8
 8003288:	40020410 	.word	0x40020410
 800328c:	40020428 	.word	0x40020428
 8003290:	40020440 	.word	0x40020440
 8003294:	40020458 	.word	0x40020458
 8003298:	40020470 	.word	0x40020470
 800329c:	40020488 	.word	0x40020488
 80032a0:	400204a0 	.word	0x400204a0
 80032a4:	400204b8 	.word	0x400204b8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a69      	ldr	r2, [pc, #420]	@ (80034ac <HAL_DMA_IRQHandler+0x3f8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04a      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a67      	ldr	r2, [pc, #412]	@ (80034b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d045      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a66      	ldr	r2, [pc, #408]	@ (80034b4 <HAL_DMA_IRQHandler+0x400>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d040      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a64      	ldr	r2, [pc, #400]	@ (80034b8 <HAL_DMA_IRQHandler+0x404>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d03b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a63      	ldr	r2, [pc, #396]	@ (80034bc <HAL_DMA_IRQHandler+0x408>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d036      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a61      	ldr	r2, [pc, #388]	@ (80034c0 <HAL_DMA_IRQHandler+0x40c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a60      	ldr	r2, [pc, #384]	@ (80034c4 <HAL_DMA_IRQHandler+0x410>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d02c      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a5e      	ldr	r2, [pc, #376]	@ (80034c8 <HAL_DMA_IRQHandler+0x414>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d027      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5d      	ldr	r2, [pc, #372]	@ (80034cc <HAL_DMA_IRQHandler+0x418>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_DMA_IRQHandler+0x41c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01d      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <HAL_DMA_IRQHandler+0x420>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_DMA_IRQHandler+0x424>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a57      	ldr	r2, [pc, #348]	@ (80034dc <HAL_DMA_IRQHandler+0x428>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a55      	ldr	r2, [pc, #340]	@ (80034e0 <HAL_DMA_IRQHandler+0x42c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a54      	ldr	r2, [pc, #336]	@ (80034e4 <HAL_DMA_IRQHandler+0x430>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a52      	ldr	r2, [pc, #328]	@ (80034e8 <HAL_DMA_IRQHandler+0x434>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10a      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x304>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e003      	b.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2201      	movs	r2, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808f 	beq.w	8003514 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <HAL_DMA_IRQHandler+0x3f8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2a      	ldr	r2, [pc, #168]	@ (80034b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <HAL_DMA_IRQHandler+0x400>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <HAL_DMA_IRQHandler+0x404>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_DMA_IRQHandler+0x408>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a24      	ldr	r2, [pc, #144]	@ (80034c0 <HAL_DMA_IRQHandler+0x40c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_DMA_IRQHandler+0x410>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a21      	ldr	r2, [pc, #132]	@ (80034c8 <HAL_DMA_IRQHandler+0x414>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a20      	ldr	r2, [pc, #128]	@ (80034cc <HAL_DMA_IRQHandler+0x418>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_DMA_IRQHandler+0x41c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <HAL_DMA_IRQHandler+0x420>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <HAL_DMA_IRQHandler+0x424>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <HAL_DMA_IRQHandler+0x428>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <HAL_DMA_IRQHandler+0x42c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_DMA_IRQHandler+0x430>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <HAL_DMA_IRQHandler+0x434>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12a      	bne.n	80034ec <HAL_DMA_IRQHandler+0x438>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e023      	b.n	80034f4 <HAL_DMA_IRQHandler+0x440>
 80034ac:	40020010 	.word	0x40020010
 80034b0:	40020028 	.word	0x40020028
 80034b4:	40020040 	.word	0x40020040
 80034b8:	40020058 	.word	0x40020058
 80034bc:	40020070 	.word	0x40020070
 80034c0:	40020088 	.word	0x40020088
 80034c4:	400200a0 	.word	0x400200a0
 80034c8:	400200b8 	.word	0x400200b8
 80034cc:	40020410 	.word	0x40020410
 80034d0:	40020428 	.word	0x40020428
 80034d4:	40020440 	.word	0x40020440
 80034d8:	40020458 	.word	0x40020458
 80034dc:	40020470 	.word	0x40020470
 80034e0:	40020488 	.word	0x40020488
 80034e4:	400204a0 	.word	0x400204a0
 80034e8:	400204b8 	.word	0x400204b8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2210      	movs	r2, #16
 800351e:	409a      	lsls	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a6 	beq.w	8003676 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a85      	ldr	r2, [pc, #532]	@ (8003744 <HAL_DMA_IRQHandler+0x690>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	@ (8003748 <HAL_DMA_IRQHandler+0x694>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a82      	ldr	r2, [pc, #520]	@ (800374c <HAL_DMA_IRQHandler+0x698>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a80      	ldr	r2, [pc, #512]	@ (8003750 <HAL_DMA_IRQHandler+0x69c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7f      	ldr	r2, [pc, #508]	@ (8003754 <HAL_DMA_IRQHandler+0x6a0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7d      	ldr	r2, [pc, #500]	@ (8003758 <HAL_DMA_IRQHandler+0x6a4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7c      	ldr	r2, [pc, #496]	@ (800375c <HAL_DMA_IRQHandler+0x6a8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7a      	ldr	r2, [pc, #488]	@ (8003760 <HAL_DMA_IRQHandler+0x6ac>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a79      	ldr	r2, [pc, #484]	@ (8003764 <HAL_DMA_IRQHandler+0x6b0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a77      	ldr	r2, [pc, #476]	@ (8003768 <HAL_DMA_IRQHandler+0x6b4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a76      	ldr	r2, [pc, #472]	@ (800376c <HAL_DMA_IRQHandler+0x6b8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a74      	ldr	r2, [pc, #464]	@ (8003770 <HAL_DMA_IRQHandler+0x6bc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	@ (8003774 <HAL_DMA_IRQHandler+0x6c0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a71      	ldr	r2, [pc, #452]	@ (8003778 <HAL_DMA_IRQHandler+0x6c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a70      	ldr	r2, [pc, #448]	@ (800377c <HAL_DMA_IRQHandler+0x6c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_DMA_IRQHandler+0x6cc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10a      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x52c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e009      	b.n	80035f4 <HAL_DMA_IRQHandler+0x540>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d03e      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2210      	movs	r2, #16
 8003602:	409a      	lsls	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d024      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e01f      	b.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01b      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e016      	b.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0208 	bic.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2220      	movs	r2, #32
 8003680:	409a      	lsls	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8110 	beq.w	80038ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2c      	ldr	r2, [pc, #176]	@ (8003744 <HAL_DMA_IRQHandler+0x690>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2b      	ldr	r2, [pc, #172]	@ (8003748 <HAL_DMA_IRQHandler+0x694>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a29      	ldr	r2, [pc, #164]	@ (800374c <HAL_DMA_IRQHandler+0x698>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <HAL_DMA_IRQHandler+0x69c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <HAL_DMA_IRQHandler+0x6a0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a25      	ldr	r2, [pc, #148]	@ (8003758 <HAL_DMA_IRQHandler+0x6a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a23      	ldr	r2, [pc, #140]	@ (800375c <HAL_DMA_IRQHandler+0x6a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a22      	ldr	r2, [pc, #136]	@ (8003760 <HAL_DMA_IRQHandler+0x6ac>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a20      	ldr	r2, [pc, #128]	@ (8003764 <HAL_DMA_IRQHandler+0x6b0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003768 <HAL_DMA_IRQHandler+0x6b4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	@ (800376c <HAL_DMA_IRQHandler+0x6b8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003770 <HAL_DMA_IRQHandler+0x6bc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1a      	ldr	r2, [pc, #104]	@ (8003774 <HAL_DMA_IRQHandler+0x6c0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a19      	ldr	r2, [pc, #100]	@ (8003778 <HAL_DMA_IRQHandler+0x6c4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	@ (800377c <HAL_DMA_IRQHandler+0x6c8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	@ (8003780 <HAL_DMA_IRQHandler+0x6cc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12b      	bne.n	8003784 <HAL_DMA_IRQHandler+0x6d0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02a      	b.n	8003798 <HAL_DMA_IRQHandler+0x6e4>
 8003742:	bf00      	nop
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8087 	beq.w	80038ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d139      	bne.n	800382e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x736>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	223f      	movs	r2, #63	@ 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 834a 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
          }
          return;
 800382c:	e344      	b.n	8003eb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e027      	b.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e01e      	b.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0210 	bic.w	r2, r2, #16
 800388a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8306 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8088 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	@ (8003abc <HAL_DMA_IRQHandler+0xa08>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	@ (8003ac0 <HAL_DMA_IRQHandler+0xa0c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa10>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a76      	ldr	r2, [pc, #472]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa14>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a74      	ldr	r2, [pc, #464]	@ (8003acc <HAL_DMA_IRQHandler+0xa18>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa1c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a71      	ldr	r2, [pc, #452]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa20>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	@ (8003ad8 <HAL_DMA_IRQHandler+0xa24>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	@ (8003adc <HAL_DMA_IRQHandler+0xa28>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ae0 <HAL_DMA_IRQHandler+0xa2c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae4 <HAL_DMA_IRQHandler+0xa30>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa34>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	@ (8003aec <HAL_DMA_IRQHandler+0xa38>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a67      	ldr	r2, [pc, #412]	@ (8003af0 <HAL_DMA_IRQHandler+0xa3c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_DMA_IRQHandler+0xa40>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a64      	ldr	r2, [pc, #400]	@ (8003af8 <HAL_DMA_IRQHandler+0xa44>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <HAL_DMA_IRQHandler+0x8ca>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e007      	b.n	800398e <HAL_DMA_IRQHandler+0x8da>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3301      	adds	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	429a      	cmp	r2, r3
 8003998:	d307      	bcc.n	80039aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f2      	bne.n	800398e <HAL_DMA_IRQHandler+0x8da>
 80039a8:	e000      	b.n	80039ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80039c2:	e003      	b.n	80039cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8272 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
 80039e6:	e26c      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a43      	ldr	r2, [pc, #268]	@ (8003afc <HAL_DMA_IRQHandler+0xa48>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d022      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a42      	ldr	r2, [pc, #264]	@ (8003b00 <HAL_DMA_IRQHandler+0xa4c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a40      	ldr	r2, [pc, #256]	@ (8003b04 <HAL_DMA_IRQHandler+0xa50>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b08 <HAL_DMA_IRQHandler+0xa54>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3d      	ldr	r2, [pc, #244]	@ (8003b0c <HAL_DMA_IRQHandler+0xa58>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_DMA_IRQHandler+0xa5c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3a      	ldr	r2, [pc, #232]	@ (8003b14 <HAL_DMA_IRQHandler+0xa60>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a39      	ldr	r2, [pc, #228]	@ (8003b18 <HAL_DMA_IRQHandler+0xa64>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x988>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_IRQHandler+0x98a>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 823f 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2204      	movs	r2, #4
 8003a56:	409a      	lsls	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80cd 	beq.w	8003bfc <HAL_DMA_IRQHandler+0xb48>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80c7 	beq.w	8003bfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2204      	movs	r2, #4
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d049      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8210 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa4:	e20a      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8206 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab8:	e200      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
 8003aba:	bf00      	nop
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	58025408 	.word	0x58025408
 8003b00:	5802541c 	.word	0x5802541c
 8003b04:	58025430 	.word	0x58025430
 8003b08:	58025444 	.word	0x58025444
 8003b0c:	58025458 	.word	0x58025458
 8003b10:	5802546c 	.word	0x5802546c
 8003b14:	58025480 	.word	0x58025480
 8003b18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d160      	bne.n	8003be8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d28 <HAL_DMA_IRQHandler+0xc74>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04a      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a7d      	ldr	r2, [pc, #500]	@ (8003d2c <HAL_DMA_IRQHandler+0xc78>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d045      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d30 <HAL_DMA_IRQHandler+0xc7c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7a      	ldr	r2, [pc, #488]	@ (8003d34 <HAL_DMA_IRQHandler+0xc80>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a79      	ldr	r2, [pc, #484]	@ (8003d38 <HAL_DMA_IRQHandler+0xc84>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a77      	ldr	r2, [pc, #476]	@ (8003d3c <HAL_DMA_IRQHandler+0xc88>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a76      	ldr	r2, [pc, #472]	@ (8003d40 <HAL_DMA_IRQHandler+0xc8c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a74      	ldr	r2, [pc, #464]	@ (8003d44 <HAL_DMA_IRQHandler+0xc90>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a73      	ldr	r2, [pc, #460]	@ (8003d48 <HAL_DMA_IRQHandler+0xc94>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a71      	ldr	r2, [pc, #452]	@ (8003d4c <HAL_DMA_IRQHandler+0xc98>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a70      	ldr	r2, [pc, #448]	@ (8003d50 <HAL_DMA_IRQHandler+0xc9c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	@ (8003d54 <HAL_DMA_IRQHandler+0xca0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8003d58 <HAL_DMA_IRQHandler+0xca4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6b      	ldr	r2, [pc, #428]	@ (8003d5c <HAL_DMA_IRQHandler+0xca8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d60 <HAL_DMA_IRQHandler+0xcac>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a68      	ldr	r2, [pc, #416]	@ (8003d64 <HAL_DMA_IRQHandler+0xcb0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0xb24>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0208 	bic.w	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_DMA_IRQHandler+0xb34>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8165 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfa:	e15f      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2202      	movs	r2, #2
 8003c06:	409a      	lsls	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80c5 	beq.w	8003d9c <HAL_DMA_IRQHandler+0xce8>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80bf 	beq.w	8003d9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2202      	movs	r2, #2
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 813a 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c54:	e134      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8130 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	e12a      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8089 	bne.w	8003d88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d28 <HAL_DMA_IRQHandler+0xc74>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d04a      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a29      	ldr	r2, [pc, #164]	@ (8003d2c <HAL_DMA_IRQHandler+0xc78>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d045      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a28      	ldr	r2, [pc, #160]	@ (8003d30 <HAL_DMA_IRQHandler+0xc7c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d040      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_DMA_IRQHandler+0xc80>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d03b      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a25      	ldr	r2, [pc, #148]	@ (8003d38 <HAL_DMA_IRQHandler+0xc84>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d036      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <HAL_DMA_IRQHandler+0xc88>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d031      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <HAL_DMA_IRQHandler+0xc8c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d02c      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <HAL_DMA_IRQHandler+0xc90>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d027      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	@ (8003d48 <HAL_DMA_IRQHandler+0xc94>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d4c <HAL_DMA_IRQHandler+0xc98>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <HAL_DMA_IRQHandler+0xc9c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d54 <HAL_DMA_IRQHandler+0xca0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a19      	ldr	r2, [pc, #100]	@ (8003d58 <HAL_DMA_IRQHandler+0xca4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <HAL_DMA_IRQHandler+0xca8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <HAL_DMA_IRQHandler+0xcac>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xc62>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <HAL_DMA_IRQHandler+0xcb0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d128      	bne.n	8003d68 <HAL_DMA_IRQHandler+0xcb4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0214 	bic.w	r2, r2, #20
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e027      	b.n	8003d78 <HAL_DMA_IRQHandler+0xcc4>
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020a 	bic.w	r2, r2, #10
 8003d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8097 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d9a:	e091      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8082 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a41      	ldr	r2, [pc, #260]	@ (8003ec8 <HAL_DMA_IRQHandler+0xe14>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ecc <HAL_DMA_IRQHandler+0xe18>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed0 <HAL_DMA_IRQHandler+0xe1c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed4 <HAL_DMA_IRQHandler+0xe20>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed8 <HAL_DMA_IRQHandler+0xe24>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a39      	ldr	r2, [pc, #228]	@ (8003edc <HAL_DMA_IRQHandler+0xe28>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a38      	ldr	r2, [pc, #224]	@ (8003ee0 <HAL_DMA_IRQHandler+0xe2c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a36      	ldr	r2, [pc, #216]	@ (8003ee4 <HAL_DMA_IRQHandler+0xe30>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a35      	ldr	r2, [pc, #212]	@ (8003ee8 <HAL_DMA_IRQHandler+0xe34>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a33      	ldr	r2, [pc, #204]	@ (8003eec <HAL_DMA_IRQHandler+0xe38>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a32      	ldr	r2, [pc, #200]	@ (8003ef0 <HAL_DMA_IRQHandler+0xe3c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <HAL_DMA_IRQHandler+0xe40>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef8 <HAL_DMA_IRQHandler+0xe44>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <HAL_DMA_IRQHandler+0xe48>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <HAL_DMA_IRQHandler+0xe4c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <HAL_DMA_IRQHandler+0xe50>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_IRQHandler+0xdbc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 021c 	bic.w	r2, r2, #28
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e007      	b.n	8003e80 <HAL_DMA_IRQHandler+0xdcc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
 8003eb6:	e004      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ec2:	3728      	adds	r7, #40	@ 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8

08003f08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7f      	ldr	r2, [pc, #508]	@ (8004124 <DMA_SetConfig+0x21c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d072      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7d      	ldr	r2, [pc, #500]	@ (8004128 <DMA_SetConfig+0x220>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d06d      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800412c <DMA_SetConfig+0x224>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d068      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7a      	ldr	r2, [pc, #488]	@ (8004130 <DMA_SetConfig+0x228>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d063      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a79      	ldr	r2, [pc, #484]	@ (8004134 <DMA_SetConfig+0x22c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d05e      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a77      	ldr	r2, [pc, #476]	@ (8004138 <DMA_SetConfig+0x230>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d059      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a76      	ldr	r2, [pc, #472]	@ (800413c <DMA_SetConfig+0x234>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d054      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a74      	ldr	r2, [pc, #464]	@ (8004140 <DMA_SetConfig+0x238>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04f      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a73      	ldr	r2, [pc, #460]	@ (8004144 <DMA_SetConfig+0x23c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d04a      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a71      	ldr	r2, [pc, #452]	@ (8004148 <DMA_SetConfig+0x240>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d045      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a70      	ldr	r2, [pc, #448]	@ (800414c <DMA_SetConfig+0x244>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a6e      	ldr	r2, [pc, #440]	@ (8004150 <DMA_SetConfig+0x248>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d03b      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004154 <DMA_SetConfig+0x24c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d036      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8004158 <DMA_SetConfig+0x250>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800415c <DMA_SetConfig+0x254>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d02c      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a68      	ldr	r2, [pc, #416]	@ (8004160 <DMA_SetConfig+0x258>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d027      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a67      	ldr	r2, [pc, #412]	@ (8004164 <DMA_SetConfig+0x25c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d022      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a65      	ldr	r2, [pc, #404]	@ (8004168 <DMA_SetConfig+0x260>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01d      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a64      	ldr	r2, [pc, #400]	@ (800416c <DMA_SetConfig+0x264>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d018      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a62      	ldr	r2, [pc, #392]	@ (8004170 <DMA_SetConfig+0x268>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a61      	ldr	r2, [pc, #388]	@ (8004174 <DMA_SetConfig+0x26c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8004178 <DMA_SetConfig+0x270>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5e      	ldr	r2, [pc, #376]	@ (800417c <DMA_SetConfig+0x274>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <DMA_SetConfig+0x10a>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5c      	ldr	r2, [pc, #368]	@ (8004180 <DMA_SetConfig+0x278>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <DMA_SetConfig+0x10e>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <DMA_SetConfig+0x110>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004024:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004036:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a39      	ldr	r2, [pc, #228]	@ (8004124 <DMA_SetConfig+0x21c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a38      	ldr	r2, [pc, #224]	@ (8004128 <DMA_SetConfig+0x220>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a36      	ldr	r2, [pc, #216]	@ (800412c <DMA_SetConfig+0x224>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a35      	ldr	r2, [pc, #212]	@ (8004130 <DMA_SetConfig+0x228>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a33      	ldr	r2, [pc, #204]	@ (8004134 <DMA_SetConfig+0x22c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <DMA_SetConfig+0x230>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a30      	ldr	r2, [pc, #192]	@ (800413c <DMA_SetConfig+0x234>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <DMA_SetConfig+0x238>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <DMA_SetConfig+0x23c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2c      	ldr	r2, [pc, #176]	@ (8004148 <DMA_SetConfig+0x240>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	@ (800414c <DMA_SetConfig+0x244>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a29      	ldr	r2, [pc, #164]	@ (8004150 <DMA_SetConfig+0x248>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a27      	ldr	r2, [pc, #156]	@ (8004154 <DMA_SetConfig+0x24c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	@ (8004158 <DMA_SetConfig+0x250>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a24      	ldr	r2, [pc, #144]	@ (800415c <DMA_SetConfig+0x254>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <DMA_SetConfig+0x1d0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a23      	ldr	r2, [pc, #140]	@ (8004160 <DMA_SetConfig+0x258>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <DMA_SetConfig+0x1d4>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <DMA_SetConfig+0x1d6>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d059      	beq.n	8004196 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	223f      	movs	r2, #63	@ 0x3f
 80040ec:	409a      	lsls	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004100:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d138      	bne.n	8004184 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004122:	e086      	b.n	8004232 <DMA_SetConfig+0x32a>
 8004124:	40020010 	.word	0x40020010
 8004128:	40020028 	.word	0x40020028
 800412c:	40020040 	.word	0x40020040
 8004130:	40020058 	.word	0x40020058
 8004134:	40020070 	.word	0x40020070
 8004138:	40020088 	.word	0x40020088
 800413c:	400200a0 	.word	0x400200a0
 8004140:	400200b8 	.word	0x400200b8
 8004144:	40020410 	.word	0x40020410
 8004148:	40020428 	.word	0x40020428
 800414c:	40020440 	.word	0x40020440
 8004150:	40020458 	.word	0x40020458
 8004154:	40020470 	.word	0x40020470
 8004158:	40020488 	.word	0x40020488
 800415c:	400204a0 	.word	0x400204a0
 8004160:	400204b8 	.word	0x400204b8
 8004164:	58025408 	.word	0x58025408
 8004168:	5802541c 	.word	0x5802541c
 800416c:	58025430 	.word	0x58025430
 8004170:	58025444 	.word	0x58025444
 8004174:	58025458 	.word	0x58025458
 8004178:	5802546c 	.word	0x5802546c
 800417c:	58025480 	.word	0x58025480
 8004180:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]
}
 8004194:	e04d      	b.n	8004232 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a29      	ldr	r2, [pc, #164]	@ (8004240 <DMA_SetConfig+0x338>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a27      	ldr	r2, [pc, #156]	@ (8004244 <DMA_SetConfig+0x33c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a26      	ldr	r2, [pc, #152]	@ (8004248 <DMA_SetConfig+0x340>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a24      	ldr	r2, [pc, #144]	@ (800424c <DMA_SetConfig+0x344>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a23      	ldr	r2, [pc, #140]	@ (8004250 <DMA_SetConfig+0x348>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <DMA_SetConfig+0x34c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a20      	ldr	r2, [pc, #128]	@ (8004258 <DMA_SetConfig+0x350>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <DMA_SetConfig+0x2de>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <DMA_SetConfig+0x354>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <DMA_SetConfig+0x2e2>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <DMA_SetConfig+0x2e4>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d108      	bne.n	8004222 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	e007      	b.n	8004232 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	58025408 	.word	0x58025408
 8004244:	5802541c 	.word	0x5802541c
 8004248:	58025430 	.word	0x58025430
 800424c:	58025444 	.word	0x58025444
 8004250:	58025458 	.word	0x58025458
 8004254:	5802546c 	.word	0x5802546c
 8004258:	58025480 	.word	0x58025480
 800425c:	58025494 	.word	0x58025494

08004260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a42      	ldr	r2, [pc, #264]	@ (8004378 <DMA_CalcBaseAndBitshift+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d04a      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a41      	ldr	r2, [pc, #260]	@ (800437c <DMA_CalcBaseAndBitshift+0x11c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d045      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3f      	ldr	r2, [pc, #252]	@ (8004380 <DMA_CalcBaseAndBitshift+0x120>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d040      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3e      	ldr	r2, [pc, #248]	@ (8004384 <DMA_CalcBaseAndBitshift+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d03b      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3c      	ldr	r2, [pc, #240]	@ (8004388 <DMA_CalcBaseAndBitshift+0x128>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d036      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3b      	ldr	r2, [pc, #236]	@ (800438c <DMA_CalcBaseAndBitshift+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d031      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a39      	ldr	r2, [pc, #228]	@ (8004390 <DMA_CalcBaseAndBitshift+0x130>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02c      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a38      	ldr	r2, [pc, #224]	@ (8004394 <DMA_CalcBaseAndBitshift+0x134>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d027      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a36      	ldr	r2, [pc, #216]	@ (8004398 <DMA_CalcBaseAndBitshift+0x138>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a35      	ldr	r2, [pc, #212]	@ (800439c <DMA_CalcBaseAndBitshift+0x13c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <DMA_CalcBaseAndBitshift+0x140>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a32      	ldr	r2, [pc, #200]	@ (80043a4 <DMA_CalcBaseAndBitshift+0x144>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a30      	ldr	r2, [pc, #192]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x148>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <DMA_CalcBaseAndBitshift+0x14c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2d      	ldr	r2, [pc, #180]	@ (80043b0 <DMA_CalcBaseAndBitshift+0x150>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <DMA_CalcBaseAndBitshift+0xa8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <DMA_CalcBaseAndBitshift+0x154>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <DMA_CalcBaseAndBitshift+0xac>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <DMA_CalcBaseAndBitshift+0xae>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d024      	beq.n	800435c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3b10      	subs	r3, #16
 800431a:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <DMA_CalcBaseAndBitshift+0x158>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	4a24      	ldr	r2, [pc, #144]	@ (80043bc <DMA_CalcBaseAndBitshift+0x15c>)
 800432c:	5cd3      	ldrb	r3, [r2, r3]
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d908      	bls.n	800434c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b1f      	ldr	r3, [pc, #124]	@ (80043c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004342:	4013      	ands	r3, r2
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	659a      	str	r2, [r3, #88]	@ 0x58
 800434a:	e00d      	b.n	8004368 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6593      	str	r3, [r2, #88]	@ 0x58
 800435a:	e005      	b.n	8004368 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	40020040 	.word	0x40020040
 8004384:	40020058 	.word	0x40020058
 8004388:	40020070 	.word	0x40020070
 800438c:	40020088 	.word	0x40020088
 8004390:	400200a0 	.word	0x400200a0
 8004394:	400200b8 	.word	0x400200b8
 8004398:	40020410 	.word	0x40020410
 800439c:	40020428 	.word	0x40020428
 80043a0:	40020440 	.word	0x40020440
 80043a4:	40020458 	.word	0x40020458
 80043a8:	40020470 	.word	0x40020470
 80043ac:	40020488 	.word	0x40020488
 80043b0:	400204a0 	.word	0x400204a0
 80043b4:	400204b8 	.word	0x400204b8
 80043b8:	aaaaaaab 	.word	0xaaaaaaab
 80043bc:	0800c3ac 	.word	0x0800c3ac
 80043c0:	fffffc00 	.word	0xfffffc00

080043c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d120      	bne.n	800441a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d858      	bhi.n	8004492 <DMA_CheckFifoParam+0xce>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <DMA_CheckFifoParam+0x24>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	0800440b 	.word	0x0800440b
 80043f0:	080043f9 	.word	0x080043f9
 80043f4:	08004493 	.word	0x08004493
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d048      	beq.n	8004496 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004408:	e045      	b.n	8004496 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004412:	d142      	bne.n	800449a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004418:	e03f      	b.n	800449a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004422:	d123      	bne.n	800446c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	2b03      	cmp	r3, #3
 800442a:	d838      	bhi.n	800449e <DMA_CheckFifoParam+0xda>
 800442c:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <DMA_CheckFifoParam+0x70>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004445 	.word	0x08004445
 8004438:	0800444b 	.word	0x0800444b
 800443c:	08004445 	.word	0x08004445
 8004440:	0800445d 	.word	0x0800445d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
        break;
 8004448:	e030      	b.n	80044ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d025      	beq.n	80044a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800445a:	e022      	b.n	80044a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004464:	d11f      	bne.n	80044a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800446a:	e01c      	b.n	80044a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	d902      	bls.n	800447a <DMA_CheckFifoParam+0xb6>
 8004474:	2b03      	cmp	r3, #3
 8004476:	d003      	beq.n	8004480 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004478:	e018      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	e015      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
    break;
 8004490:	e00b      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
        break;
 8004492:	bf00      	nop
 8004494:	e00a      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        break;
 8004496:	bf00      	nop
 8004498:	e008      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        break;
 800449a:	bf00      	nop
 800449c:	e006      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        break;
 800449e:	bf00      	nop
 80044a0:	e004      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <DMA_CheckFifoParam+0xe8>
    break;
 80044aa:	bf00      	nop
    }
  }

  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop

080044bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a38      	ldr	r2, [pc, #224]	@ (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a36      	ldr	r2, [pc, #216]	@ (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01d      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a35      	ldr	r2, [pc, #212]	@ (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a30      	ldr	r2, [pc, #192]	@ (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2f      	ldr	r2, [pc, #188]	@ (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2d      	ldr	r2, [pc, #180]	@ (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01a      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3b08      	subs	r3, #8
 800452c:	4a28      	ldr	r2, [pc, #160]	@ (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4b26      	ldr	r3, [pc, #152]	@ (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a24      	ldr	r2, [pc, #144]	@ (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004548:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2201      	movs	r2, #1
 8004552:	409a      	lsls	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004558:	e024      	b.n	80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3b10      	subs	r3, #16
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d806      	bhi.n	8004582 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d902      	bls.n	8004582 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3308      	adds	r3, #8
 8004580:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4b18      	ldr	r3, [pc, #96]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a16      	ldr	r2, [pc, #88]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004594:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2201      	movs	r2, #1
 800459e:	409a      	lsls	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	58025408 	.word	0x58025408
 80045b4:	5802541c 	.word	0x5802541c
 80045b8:	58025430 	.word	0x58025430
 80045bc:	58025444 	.word	0x58025444
 80045c0:	58025458 	.word	0x58025458
 80045c4:	5802546c 	.word	0x5802546c
 80045c8:	58025480 	.word	0x58025480
 80045cc:	58025494 	.word	0x58025494
 80045d0:	cccccccd 	.word	0xcccccccd
 80045d4:	16009600 	.word	0x16009600
 80045d8:	58025880 	.word	0x58025880
 80045dc:	aaaaaaab 	.word	0xaaaaaaab
 80045e0:	400204b8 	.word	0x400204b8
 80045e4:	4002040f 	.word	0x4002040f
 80045e8:	10008200 	.word	0x10008200
 80045ec:	40020880 	.word	0x40020880

080045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04a      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d847      	bhi.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a25      	ldr	r2, [pc, #148]	@ (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d022      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a24      	ldr	r2, [pc, #144]	@ (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d01d      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1e      	ldr	r2, [pc, #120]	@ (80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1c      	ldr	r2, [pc, #112]	@ (80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d101      	bne.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4b17      	ldr	r3, [pc, #92]	@ (80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a15      	ldr	r2, [pc, #84]	@ (80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004678:	671a      	str	r2, [r3, #112]	@ 0x70
 800467a:	e009      	b.n	8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4b14      	ldr	r3, [pc, #80]	@ (80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800468e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	2201      	movs	r2, #1
 8004696:	409a      	lsls	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	58025408 	.word	0x58025408
 80046ac:	5802541c 	.word	0x5802541c
 80046b0:	58025430 	.word	0x58025430
 80046b4:	58025444 	.word	0x58025444
 80046b8:	58025458 	.word	0x58025458
 80046bc:	5802546c 	.word	0x5802546c
 80046c0:	58025480 	.word	0x58025480
 80046c4:	58025494 	.word	0x58025494
 80046c8:	1600963f 	.word	0x1600963f
 80046cc:	58025940 	.word	0x58025940
 80046d0:	1000823f 	.word	0x1000823f
 80046d4:	40020940 	.word	0x40020940

080046d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046e6:	4b86      	ldr	r3, [pc, #536]	@ (8004900 <HAL_GPIO_Init+0x228>)
 80046e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046ea:	e18c      	b.n	8004a06 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 817e 	beq.w	8004a00 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d005      	beq.n	800471c <HAL_GPIO_Init+0x44>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d130      	bne.n	800477e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004752:	2201      	movs	r2, #1
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0201 	and.w	r2, r3, #1
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b03      	cmp	r3, #3
 8004788:	d017      	beq.n	80047ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d123      	bne.n	800480e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80d8 	beq.w	8004a00 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004850:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_GPIO_Init+0x22c>)
 8004852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004856:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_GPIO_Init+0x22c>)
 8004858:	f043 0302 	orr.w	r3, r3, #2
 800485c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004860:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_GPIO_Init+0x22c>)
 8004862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486e:	4a26      	ldr	r2, [pc, #152]	@ (8004908 <HAL_GPIO_Init+0x230>)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3302      	adds	r3, #2
 8004876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <HAL_GPIO_Init+0x234>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04a      	beq.n	8004930 <HAL_GPIO_Init+0x258>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <HAL_GPIO_Init+0x238>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02b      	beq.n	80048fa <HAL_GPIO_Init+0x222>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <HAL_GPIO_Init+0x23c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d025      	beq.n	80048f6 <HAL_GPIO_Init+0x21e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004918 <HAL_GPIO_Init+0x240>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <HAL_GPIO_Init+0x21a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <HAL_GPIO_Init+0x244>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d019      	beq.n	80048ee <HAL_GPIO_Init+0x216>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a18      	ldr	r2, [pc, #96]	@ (8004920 <HAL_GPIO_Init+0x248>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_GPIO_Init+0x212>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a17      	ldr	r2, [pc, #92]	@ (8004924 <HAL_GPIO_Init+0x24c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00d      	beq.n	80048e6 <HAL_GPIO_Init+0x20e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a16      	ldr	r2, [pc, #88]	@ (8004928 <HAL_GPIO_Init+0x250>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <HAL_GPIO_Init+0x20a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a15      	ldr	r2, [pc, #84]	@ (800492c <HAL_GPIO_Init+0x254>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_GPIO_Init+0x206>
 80048da:	2309      	movs	r3, #9
 80048dc:	e029      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048de:	230a      	movs	r3, #10
 80048e0:	e027      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048e2:	2307      	movs	r3, #7
 80048e4:	e025      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048e6:	2306      	movs	r3, #6
 80048e8:	e023      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e021      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e01f      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048f2:	2303      	movs	r3, #3
 80048f4:	e01d      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e01b      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e019      	b.n	8004932 <HAL_GPIO_Init+0x25a>
 80048fe:	bf00      	nop
 8004900:	58000080 	.word	0x58000080
 8004904:	58024400 	.word	0x58024400
 8004908:	58000400 	.word	0x58000400
 800490c:	58020000 	.word	0x58020000
 8004910:	58020400 	.word	0x58020400
 8004914:	58020800 	.word	0x58020800
 8004918:	58020c00 	.word	0x58020c00
 800491c:	58021000 	.word	0x58021000
 8004920:	58021400 	.word	0x58021400
 8004924:	58021800 	.word	0x58021800
 8004928:	58021c00 	.word	0x58021c00
 800492c:	58022400 	.word	0x58022400
 8004930:	2300      	movs	r3, #0
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	f002 0203 	and.w	r2, r2, #3
 8004938:	0092      	lsls	r2, r2, #2
 800493a:	4093      	lsls	r3, r2
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004942:	4938      	ldr	r1, [pc, #224]	@ (8004a24 <HAL_GPIO_Init+0x34c>)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	3302      	adds	r3, #2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f ae6b 	bne.w	80046ec <HAL_GPIO_Init+0x14>
  }
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	3724      	adds	r7, #36	@ 0x24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	58000400 	.word	0x58000400

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4013      	ands	r3, r2
 8004a72:	041a      	lsls	r2, r3, #16
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f005 fe4b 	bl	800a750 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8004ad0:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 0201 	bic.w	r2, r3, #1
 8004ad8:	4916      	ldr	r1, [pc, #88]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004ae0:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004ae6:	f023 0305 	bic.w	r3, r3, #5
 8004aea:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8004aec:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	4a10      	ldr	r2, [pc, #64]	@ (8004b34 <HAL_PWR_EnterSTOPMode+0x70>)
 8004af2:	f023 0302 	bic.w	r3, r3, #2
 8004af6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004af8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <HAL_PWR_EnterSTOPMode+0x74>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <HAL_PWR_EnterSTOPMode+0x74>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b04:	f3bf 8f4f 	dsb	sy
}
 8004b08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b0a:	f3bf 8f6f 	isb	sy
}
 8004b0e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004b16:	bf30      	wfi
 8004b18:	e000      	b.n	8004b1c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8004b1a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_PWR_EnterSTOPMode+0x74>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4a05      	ldr	r2, [pc, #20]	@ (8004b38 <HAL_PWR_EnterSTOPMode+0x74>)
 8004b22:	f023 0304 	bic.w	r3, r3, #4
 8004b26:	6113      	str	r3, [r2, #16]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	58024800 	.word	0x58024800
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b44:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d00a      	beq.n	8004b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b50:	4b16      	ldr	r3, [pc, #88]	@ (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e01f      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e01d      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b66:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	490f      	ldr	r1, [pc, #60]	@ (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b76:	f7fc fe37 	bl	80017e8 <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b7c:	e009      	b.n	8004b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b7e:	f7fc fe33 	bl	80017e8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b8c:	d901      	bls.n	8004b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e007      	b.n	8004ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_PWREx_ConfigSupply+0x70>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	58024800 	.word	0x58024800

08004bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	@ 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e3c8      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8087 	beq.w	8004cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bda:	4b86      	ldr	r3, [pc, #536]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d007      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x46>
 8004be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be8:	2b18      	cmp	r3, #24
 8004bea:	d110      	bne.n	8004c0e <HAL_RCC_OscConfig+0x5e>
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d06c      	beq.n	8004cdc <HAL_RCC_OscConfig+0x12c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d168      	bne.n	8004cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e3a2      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCC_OscConfig+0x76>
 8004c18:	4b76      	ldr	r3, [pc, #472]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a75      	ldr	r2, [pc, #468]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e02e      	b.n	8004c84 <HAL_RCC_OscConfig+0xd4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x98>
 8004c2e:	4b71      	ldr	r3, [pc, #452]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a70      	ldr	r2, [pc, #448]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e01d      	b.n	8004c84 <HAL_RCC_OscConfig+0xd4>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0xbc>
 8004c52:	4b68      	ldr	r3, [pc, #416]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a67      	ldr	r2, [pc, #412]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b65      	ldr	r3, [pc, #404]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a64      	ldr	r2, [pc, #400]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0xd4>
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a60      	ldr	r2, [pc, #384]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b5e      	ldr	r3, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d013      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fc fdac 	bl	80017e8 <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fc fda8 	bl	80017e8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e356      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0xe4>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fc fd98 	bl	80017e8 <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fc fd94 	bl	80017e8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	@ 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e342      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cce:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x10c>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 808c 	beq.w	8004e04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cec:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <HAL_RCC_OscConfig+0x162>
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b18      	cmp	r3, #24
 8004d06:	d137      	bne.n	8004d78 <HAL_RCC_OscConfig+0x1c8>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d132      	bne.n	8004d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d12:	4b38      	ldr	r3, [pc, #224]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e314      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d2a:	4b32      	ldr	r3, [pc, #200]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 0219 	bic.w	r2, r3, #25
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	492f      	ldr	r1, [pc, #188]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fd54 	bl	80017e8 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fc fd50 	bl	80017e8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e2fe      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d62:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	061b      	lsls	r3, r3, #24
 8004d70:	4920      	ldr	r1, [pc, #128]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d76:	e045      	b.n	8004e04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d026      	beq.n	8004dce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d80:	4b1c      	ldr	r3, [pc, #112]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 0219 	bic.w	r2, r3, #25
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4919      	ldr	r1, [pc, #100]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fc fd29 	bl	80017e8 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9a:	f7fc fd25 	bl	80017e8 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e2d3      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	490b      	ldr	r1, [pc, #44]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
 8004dcc:	e01a      	b.n	8004e04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc fd05 	bl	80017e8 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fc fd01 	bl	80017e8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d903      	bls.n	8004df8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e2af      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
 8004df4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004df8:	4b96      	ldr	r3, [pc, #600]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ee      	bne.n	8004de2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d06a      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e10:	4b90      	ldr	r3, [pc, #576]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d007      	beq.n	8004e36 <HAL_RCC_OscConfig+0x286>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b18      	cmp	r3, #24
 8004e2a:	d11b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2b4>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d116      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e36:	4b87      	ldr	r3, [pc, #540]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_RCC_OscConfig+0x29e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d001      	beq.n	8004e4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e282      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e4e:	4b81      	ldr	r3, [pc, #516]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	497d      	ldr	r1, [pc, #500]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e62:	e040      	b.n	8004ee6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d023      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e6c:	4b79      	ldr	r3, [pc, #484]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a78      	ldr	r2, [pc, #480]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc fcb6 	bl	80017e8 <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e80:	f7fc fcb2 	bl	80017e8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e260      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e92:	4b70      	ldr	r3, [pc, #448]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	061b      	lsls	r3, r3, #24
 8004eac:	4969      	ldr	r1, [pc, #420]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
 8004eb2:	e018      	b.n	8004ee6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eb4:	4b67      	ldr	r3, [pc, #412]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a66      	ldr	r2, [pc, #408]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fc92 	bl	80017e8 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ec8:	f7fc fc8e 	bl	80017e8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e23c      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eda:	4b5e      	ldr	r3, [pc, #376]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d036      	beq.n	8004f60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efa:	4b56      	ldr	r3, [pc, #344]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	4a55      	ldr	r2, [pc, #340]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f06:	f7fc fc6f 	bl	80017e8 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fc fc6b 	bl	80017e8 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e219      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f20:	4b4c      	ldr	r3, [pc, #304]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x35e>
 8004f2c:	e018      	b.n	8004f60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f2e:	4b49      	ldr	r3, [pc, #292]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	4a48      	ldr	r2, [pc, #288]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fc55 	bl	80017e8 <HAL_GetTick>
 8004f3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fc fc51 	bl	80017e8 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1ff      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f54:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d036      	beq.n	8004fda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d019      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f74:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a36      	ldr	r2, [pc, #216]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f80:	f7fc fc32 	bl	80017e8 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f88:	f7fc fc2e 	bl	80017e8 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1dc      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x3d8>
 8004fa6:	e018      	b.n	8004fda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fb4:	f7fc fc18 	bl	80017e8 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fbc:	f7fc fc14 	bl	80017e8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1c2      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fce:	4b21      	ldr	r3, [pc, #132]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8086 	beq.w	80050f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <HAL_RCC_OscConfig+0x4a8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	@ (8005058 <HAL_RCC_OscConfig+0x4a8>)
 8004fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff4:	f7fc fbf8 	bl	80017e8 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffc:	f7fc fbf4 	bl	80017e8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	@ 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e1a2      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500e:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCC_OscConfig+0x4a8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x480>
 8005022:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	4a0b      	ldr	r2, [pc, #44]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6713      	str	r3, [r2, #112]	@ 0x70
 800502e:	e032      	b.n	8005096 <HAL_RCC_OscConfig+0x4e6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d111      	bne.n	800505c <HAL_RCC_OscConfig+0x4ac>
 8005038:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a02      	ldr	r2, [pc, #8]	@ (8005054 <HAL_RCC_OscConfig+0x4a4>)
 800504a:	f023 0304 	bic.w	r3, r3, #4
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	e021      	b.n	8005096 <HAL_RCC_OscConfig+0x4e6>
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	58024800 	.word	0x58024800
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d10c      	bne.n	800507e <HAL_RCC_OscConfig+0x4ce>
 8005064:	4b83      	ldr	r3, [pc, #524]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a82      	ldr	r2, [pc, #520]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	4b80      	ldr	r3, [pc, #512]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a7f      	ldr	r2, [pc, #508]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x4e6>
 800507e:	4b7d      	ldr	r3, [pc, #500]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	4a7c      	ldr	r2, [pc, #496]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	@ 0x70
 800508a:	4b7a      	ldr	r3, [pc, #488]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a79      	ldr	r2, [pc, #484]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fc fba3 	bl	80017e8 <HAL_GetTick>
 80050a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fc fb9f 	bl	80017e8 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e14b      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RCC_OscConfig+0x4f6>
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fc fb8d 	bl	80017e8 <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fc fb89 	bl	80017e8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e135      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e8:	4b62      	ldr	r3, [pc, #392]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ee      	bne.n	80050d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 812a 	beq.w	8005352 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005106:	2b18      	cmp	r3, #24
 8005108:	f000 80ba 	beq.w	8005280 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	2b02      	cmp	r3, #2
 8005112:	f040 8095 	bne.w	8005240 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b57      	ldr	r3, [pc, #348]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a56      	ldr	r2, [pc, #344]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800511c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7fc fb61 	bl	80017e8 <HAL_GetTick>
 8005126:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512a:	f7fc fb5d 	bl	80017e8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e10b      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800513c:	4b4d      	ldr	r3, [pc, #308]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005148:	4b4a      	ldr	r3, [pc, #296]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800514a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800514c:	4b4a      	ldr	r3, [pc, #296]	@ (8005278 <HAL_RCC_OscConfig+0x6c8>)
 800514e:	4013      	ands	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	430a      	orrs	r2, r1
 800515c:	4945      	ldr	r1, [pc, #276]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800515e:	4313      	orrs	r3, r2
 8005160:	628b      	str	r3, [r1, #40]	@ 0x28
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	3b01      	subs	r3, #1
 8005168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005170:	3b01      	subs	r3, #1
 8005172:	025b      	lsls	r3, r3, #9
 8005174:	b29b      	uxth	r3, r3
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	3b01      	subs	r3, #1
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518a:	3b01      	subs	r3, #1
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005192:	4938      	ldr	r1, [pc, #224]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005194:	4313      	orrs	r3, r2
 8005196:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005198:	4b36      	ldr	r3, [pc, #216]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051a4:	4b33      	ldr	r3, [pc, #204]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a8:	4b34      	ldr	r3, [pc, #208]	@ (800527c <HAL_RCC_OscConfig+0x6cc>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051b0:	00d2      	lsls	r2, r2, #3
 80051b2:	4930      	ldr	r1, [pc, #192]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	f023 020c 	bic.w	r2, r3, #12
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	492b      	ldr	r1, [pc, #172]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	f023 0202 	bic.w	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	4927      	ldr	r1, [pc, #156]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	4a24      	ldr	r2, [pc, #144]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e8:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a21      	ldr	r2, [pc, #132]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005200:	4b1c      	ldr	r3, [pc, #112]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a18      	ldr	r2, [pc, #96]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fc fae6 	bl	80017e8 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fc fae2 	bl	80017e8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e090      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x670>
 800523e:	e088      	b.n	8005352 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0b      	ldr	r2, [pc, #44]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800524a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fc facc 	bl	80017e8 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fc fac8 	bl	80017e8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e076      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005266:	4b03      	ldr	r3, [pc, #12]	@ (8005274 <HAL_RCC_OscConfig+0x6c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x6a4>
 8005272:	e06e      	b.n	8005352 <HAL_RCC_OscConfig+0x7a2>
 8005274:	58024400 	.word	0x58024400
 8005278:	fffffc0c 	.word	0xfffffc0c
 800527c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005280:	4b36      	ldr	r3, [pc, #216]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005286:	4b35      	ldr	r3, [pc, #212]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	2b01      	cmp	r3, #1
 8005292:	d031      	beq.n	80052f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f003 0203 	and.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d12a      	bne.n	80052f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d122      	bne.n	80052f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d11a      	bne.n	80052f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0a5b      	lsrs	r3, r3, #9
 80052c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d111      	bne.n	80052f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d108      	bne.n	80052f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0e1b      	lsrs	r3, r3, #24
 80052ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e02b      	b.n	8005354 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 80052fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	429a      	cmp	r2, r3
 8005310:	d01f      	beq.n	8005352 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005312:	4b12      	ldr	r3, [pc, #72]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4a11      	ldr	r2, [pc, #68]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800531e:	f7fc fa63 	bl	80017e8 <HAL_GetTick>
 8005322:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005324:	bf00      	nop
 8005326:	f7fc fa5f 	bl	80017e8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	4293      	cmp	r3, r2
 8005330:	d0f9      	beq.n	8005326 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_RCC_OscConfig+0x7b0>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800533e:	00d2      	lsls	r2, r2, #3
 8005340:	4906      	ldr	r1, [pc, #24]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005342:	4313      	orrs	r3, r2
 8005344:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005346:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_RCC_OscConfig+0x7ac>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3730      	adds	r7, #48	@ 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	58024400 	.word	0x58024400
 8005360:	ffff0007 	.word	0xffff0007

08005364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e19c      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b8a      	ldr	r3, [pc, #552]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d910      	bls.n	80053a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b87      	ldr	r3, [pc, #540]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 020f 	bic.w	r2, r3, #15
 800538e:	4985      	ldr	r1, [pc, #532]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b83      	ldr	r3, [pc, #524]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e184      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	4b7b      	ldr	r3, [pc, #492]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d908      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053c4:	4b78      	ldr	r3, [pc, #480]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4975      	ldr	r1, [pc, #468]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	4b70      	ldr	r3, [pc, #448]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d908      	bls.n	8005404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053f2:	4b6d      	ldr	r3, [pc, #436]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	496a      	ldr	r1, [pc, #424]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005400:	4313      	orrs	r3, r2
 8005402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b64      	ldr	r3, [pc, #400]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800541c:	429a      	cmp	r2, r3
 800541e:	d908      	bls.n	8005432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005420:	4b61      	ldr	r3, [pc, #388]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	495e      	ldr	r1, [pc, #376]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 800542e:	4313      	orrs	r3, r2
 8005430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	4b59      	ldr	r3, [pc, #356]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544a:	429a      	cmp	r2, r3
 800544c:	d908      	bls.n	8005460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800544e:	4b56      	ldr	r3, [pc, #344]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4953      	ldr	r1, [pc, #332]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 800545c:	4313      	orrs	r3, r2
 800545e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	429a      	cmp	r2, r3
 800547a:	d908      	bls.n	800548e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547c:	4b4a      	ldr	r3, [pc, #296]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f023 020f 	bic.w	r2, r3, #15
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4947      	ldr	r1, [pc, #284]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 800548a:	4313      	orrs	r3, r2
 800548c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d055      	beq.n	8005546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800549a:	4b43      	ldr	r3, [pc, #268]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4940      	ldr	r1, [pc, #256]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d107      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054b4:	4b3c      	ldr	r3, [pc, #240]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d121      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0f6      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054cc:	4b36      	ldr	r3, [pc, #216]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d115      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0ea      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054e4:	4b30      	ldr	r3, [pc, #192]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0de      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f4:	4b2c      	ldr	r3, [pc, #176]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0d6      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005504:	4b28      	ldr	r3, [pc, #160]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f023 0207 	bic.w	r2, r3, #7
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4925      	ldr	r1, [pc, #148]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005512:	4313      	orrs	r3, r2
 8005514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005516:	f7fc f967 	bl	80017e8 <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551c:	e00a      	b.n	8005534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551e:	f7fc f963 	bl	80017e8 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0be      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005534:	4b1c      	ldr	r3, [pc, #112]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	429a      	cmp	r2, r3
 8005544:	d1eb      	bne.n	800551e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d010      	beq.n	8005574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	429a      	cmp	r2, r3
 8005560:	d208      	bcs.n	8005574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005562:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f023 020f 	bic.w	r2, r3, #15
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	490e      	ldr	r1, [pc, #56]	@ (80055a8 <HAL_RCC_ClockConfig+0x244>)
 8005570:	4313      	orrs	r3, r2
 8005572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d214      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b08      	ldr	r3, [pc, #32]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 020f 	bic.w	r2, r3, #15
 800558a:	4906      	ldr	r1, [pc, #24]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <HAL_RCC_ClockConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e086      	b.n	80056b2 <HAL_RCC_ClockConfig+0x34e>
 80055a4:	52002000 	.word	0x52002000
 80055a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	4b3f      	ldr	r3, [pc, #252]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d208      	bcs.n	80055da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055c8:	4b3c      	ldr	r3, [pc, #240]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	4939      	ldr	r1, [pc, #228]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	4b34      	ldr	r3, [pc, #208]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d208      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055f6:	4b31      	ldr	r3, [pc, #196]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	492e      	ldr	r1, [pc, #184]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005604:	4313      	orrs	r3, r2
 8005606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b28      	ldr	r3, [pc, #160]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005620:	429a      	cmp	r2, r3
 8005622:	d208      	bcs.n	8005636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005624:	4b25      	ldr	r3, [pc, #148]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	4922      	ldr	r1, [pc, #136]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005632:	4313      	orrs	r3, r2
 8005634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800564e:	429a      	cmp	r2, r3
 8005650:	d208      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005652:	4b1a      	ldr	r3, [pc, #104]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4917      	ldr	r1, [pc, #92]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005660:	4313      	orrs	r3, r2
 8005662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005664:	f000 f834 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	4912      	ldr	r1, [pc, #72]	@ (80056c0 <HAL_RCC_ClockConfig+0x35c>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005682:	4b0e      	ldr	r3, [pc, #56]	@ (80056bc <HAL_RCC_ClockConfig+0x358>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	4a0d      	ldr	r2, [pc, #52]	@ (80056c0 <HAL_RCC_ClockConfig+0x35c>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <HAL_RCC_ClockConfig+0x360>)
 800569a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <HAL_RCC_ClockConfig+0x364>)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056a2:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <HAL_RCC_ClockConfig+0x368>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fc f854 	bl	8001754 <HAL_InitTick>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	0800c39c 	.word	0x0800c39c
 80056c4:	24000088 	.word	0x24000088
 80056c8:	24000084 	.word	0x24000084
 80056cc:	2400008c 	.word	0x2400008c

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	@ 0x24
 80056d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d6:	4bb3      	ldr	r3, [pc, #716]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056de:	2b18      	cmp	r3, #24
 80056e0:	f200 8155 	bhi.w	800598e <HAL_RCC_GetSysClockFreq+0x2be>
 80056e4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005751 	.word	0x08005751
 80056f0:	0800598f 	.word	0x0800598f
 80056f4:	0800598f 	.word	0x0800598f
 80056f8:	0800598f 	.word	0x0800598f
 80056fc:	0800598f 	.word	0x0800598f
 8005700:	0800598f 	.word	0x0800598f
 8005704:	0800598f 	.word	0x0800598f
 8005708:	0800598f 	.word	0x0800598f
 800570c:	08005777 	.word	0x08005777
 8005710:	0800598f 	.word	0x0800598f
 8005714:	0800598f 	.word	0x0800598f
 8005718:	0800598f 	.word	0x0800598f
 800571c:	0800598f 	.word	0x0800598f
 8005720:	0800598f 	.word	0x0800598f
 8005724:	0800598f 	.word	0x0800598f
 8005728:	0800598f 	.word	0x0800598f
 800572c:	0800577d 	.word	0x0800577d
 8005730:	0800598f 	.word	0x0800598f
 8005734:	0800598f 	.word	0x0800598f
 8005738:	0800598f 	.word	0x0800598f
 800573c:	0800598f 	.word	0x0800598f
 8005740:	0800598f 	.word	0x0800598f
 8005744:	0800598f 	.word	0x0800598f
 8005748:	0800598f 	.word	0x0800598f
 800574c:	08005783 	.word	0x08005783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005750:	4b94      	ldr	r3, [pc, #592]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800575c:	4b91      	ldr	r3, [pc, #580]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	4a90      	ldr	r2, [pc, #576]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800576e:	e111      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005770:	4b8d      	ldr	r3, [pc, #564]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005772:	61bb      	str	r3, [r7, #24]
      break;
 8005774:	e10e      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005776:	4b8d      	ldr	r3, [pc, #564]	@ (80059ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005778:	61bb      	str	r3, [r7, #24]
      break;
 800577a:	e10b      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800577c:	4b8c      	ldr	r3, [pc, #560]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800577e:	61bb      	str	r3, [r7, #24]
      break;
 8005780:	e108      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005782:	4b88      	ldr	r3, [pc, #544]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800578c:	4b85      	ldr	r3, [pc, #532]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005798:	4b82      	ldr	r3, [pc, #520]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057a2:	4b80      	ldr	r3, [pc, #512]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	08db      	lsrs	r3, r3, #3
 80057a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80e1 	beq.w	8005988 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f000 8083 	beq.w	80058d4 <HAL_RCC_GetSysClockFreq+0x204>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	f200 80a1 	bhi.w	8005918 <HAL_RCC_GetSysClockFreq+0x248>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x114>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d056      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057e2:	e099      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e4:	4b6f      	ldr	r3, [pc, #444]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02d      	beq.n	800584c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f0:	4b6c      	ldr	r3, [pc, #432]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	4a6b      	ldr	r2, [pc, #428]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	4b62      	ldr	r3, [pc, #392]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	ed97 6a02 	vldr	s12, [r7, #8]
 800582e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800584a:	e087      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	4b51      	ldr	r3, [pc, #324]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005872:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800588e:	e065      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b40      	ldr	r3, [pc, #256]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058d2:	e043      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b2f      	ldr	r3, [pc, #188]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005916:	e021      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b1e      	ldr	r3, [pc, #120]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a02 	vldr	s12, [r7, #8]
 800593e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800595a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800595c:	4b11      	ldr	r3, [pc, #68]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005960:	0a5b      	lsrs	r3, r3, #9
 8005962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005966:	3301      	adds	r3, #1
 8005968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005974:	edd7 6a07 	vldr	s13, [r7, #28]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005980:	ee17 3a90 	vmov	r3, s15
 8005984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005986:	e005      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
      break;
 800598c:	e002      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005990:	61bb      	str	r3, [r7, #24]
      break;
 8005992:	bf00      	nop
  }

  return sysclockfreq;
 8005994:	69bb      	ldr	r3, [r7, #24]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	@ 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	03d09000 	.word	0x03d09000
 80059ac:	003d0900 	.word	0x003d0900
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	46000000 	.word	0x46000000
 80059b8:	4c742400 	.word	0x4c742400
 80059bc:	4a742400 	.word	0x4a742400
 80059c0:	4af42400 	.word	0x4af42400

080059c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059ca:	f7ff fe81 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	0a1b      	lsrs	r3, r3, #8
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	490f      	ldr	r1, [pc, #60]	@ (8005a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80059dc:	5ccb      	ldrb	r3, [r1, r3]
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80059f2:	5cd3      	ldrb	r3, [r2, r3]
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a07      	ldr	r2, [pc, #28]	@ (8005a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a02:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	58024400 	.word	0x58024400
 8005a18:	0800c39c 	.word	0x0800c39c
 8005a1c:	24000088 	.word	0x24000088
 8005a20:	24000084 	.word	0x24000084

08005a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a28:	f7ff ffcc 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4904      	ldr	r1, [pc, #16]	@ (8005a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	0800c39c 	.word	0x0800c39c

08005a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a54:	f7ff ffb6 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4904      	ldr	r1, [pc, #16]	@ (8005a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	58024400 	.word	0x58024400
 8005a78:	0800c39c 	.word	0x0800c39c

08005a7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a80:	b0c6      	sub	sp, #280	@ 0x118
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	ea54 0305 	orrs.w	r3, r4, r5
 8005aa6:	d049      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ab4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ab8:	d828      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005abe:	d01a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ac4:	d822      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ace:	d007      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ad0:	e01c      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad2:	4bab      	ldr	r3, [pc, #684]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	4aaa      	ldr	r2, [pc, #680]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ade:	e01a      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fc25 	bl	8007338 <RCCEx_PLL2_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005af4:	e00f      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	3328      	adds	r3, #40	@ 0x28
 8005afc:	2102      	movs	r1, #2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fccc 	bl	800749c <RCCEx_PLL3_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b0a:	e004      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b1e:	4b98      	ldr	r3, [pc, #608]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2c:	4a94      	ldr	r2, [pc, #592]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b32:	e003      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b48:	f04f 0900 	mov.w	r9, #0
 8005b4c:	ea58 0309 	orrs.w	r3, r8, r9
 8005b50:	d047      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d82a      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b79 	.word	0x08005b79
 8005b68:	08005b87 	.word	0x08005b87
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005bbb 	.word	0x08005bbb
 8005b74:	08005bbb 	.word	0x08005bbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b81      	ldr	r3, [pc, #516]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	4a80      	ldr	r2, [pc, #512]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b84:	e01a      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fbd2 	bl	8007338 <RCCEx_PLL2_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b9a:	e00f      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba0:	3328      	adds	r3, #40	@ 0x28
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 fc79 	bl	800749c <RCCEx_PLL3_Config>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb0:	e004      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb8:	e000      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc4:	4b6e      	ldr	r3, [pc, #440]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc8:	f023 0107 	bic.w	r1, r3, #7
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005bee:	f04f 0b00 	mov.w	fp, #0
 8005bf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bf6:	d05b      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c04:	d03b      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c0a:	d834      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c10:	d037      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c16:	d82e      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c1c:	d033      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c22:	d828      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c28:	d01a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c2e:	d822      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c38:	d007      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c3a:	e01c      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3c:	4b50      	ldr	r3, [pc, #320]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	4a4f      	ldr	r2, [pc, #316]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c48:	e01e      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	3308      	adds	r3, #8
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fb70 	bl	8007338 <RCCEx_PLL2_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c5e:	e013      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c64:	3328      	adds	r3, #40	@ 0x28
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 fc17 	bl	800749c <RCCEx_PLL3_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c74:	e008      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c7c:	e004      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c7e:	bf00      	nop
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c90:	4b3b      	ldr	r3, [pc, #236]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c94:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ca0:	4a37      	ldr	r2, [pc, #220]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ca6:	e003      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	d05d      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cdc:	d03b      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ce2:	d834      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce8:	d037      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cee:	d82e      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cf4:	d033      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005cf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cfa:	d828      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d00:	d01a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d06:	d822      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d10:	d007      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d12:	e01c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d20:	e01e      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d26:	3308      	adds	r3, #8
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fb04 	bl	8007338 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d36:	e013      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	3328      	adds	r3, #40	@ 0x28
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fbab 	bl	800749c <RCCEx_PLL3_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e008      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d54:	e004      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d56:	bf00      	nop
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d5a:	bf00      	nop
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d78:	4a01      	ldr	r2, [pc, #4]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d7e:	e005      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005da2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	d03a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	2b30      	cmp	r3, #48	@ 0x30
 8005db4:	d01f      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005db6:	2b30      	cmp	r3, #48	@ 0x30
 8005db8:	d819      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d815      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d019      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d111      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dca:	4baa      	ldr	r3, [pc, #680]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	4aa9      	ldr	r2, [pc, #676]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dd6:	e011      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	3308      	adds	r3, #8
 8005dde:	2102      	movs	r1, #2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 faa9 	bl	8007338 <RCCEx_PLL2_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dec:	e006      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005df4:	e002      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005df6:	bf00      	nop
 8005df8:	e000      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e04:	4b9b      	ldr	r3, [pc, #620]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	4a98      	ldr	r2, [pc, #608]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	d051      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e4c:	d035      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e52:	d82e      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e58:	d031      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e5e:	d828      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e64:	d01a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e6a:	d822      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e74:	d007      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e76:	e01c      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e78:	4b7e      	ldr	r3, [pc, #504]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fa52 	bl	8007338 <RCCEx_PLL2_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e011      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 faf9 	bl	800749c <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e006      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ecc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed6:	4a67      	ldr	r2, [pc, #412]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d053      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f10:	d033      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f16:	d82c      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f1c:	d02f      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f22:	d826      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f28:	d02b      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f2e:	d820      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f34:	d012      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f3a:	d81a      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d022      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f44:	d115      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f9f2 	bl	8007338 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e015      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	3328      	adds	r3, #40	@ 0x28
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fa99 	bl	800749c <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f70:	e00a      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f90:	4b38      	ldr	r3, [pc, #224]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9e:	4a35      	ldr	r2, [pc, #212]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fc4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d058      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fda:	d033      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe0:	d82c      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d02f      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d826      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff2:	d02b      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff8:	d820      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffe:	d012      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006004:	d81a      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d022      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800600a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800600e:	d115      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	3308      	adds	r3, #8
 8006016:	2101      	movs	r1, #1
 8006018:	4618      	mov	r0, r3
 800601a:	f001 f98d 	bl	8007338 <RCCEx_PLL2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006024:	e015      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	3328      	adds	r3, #40	@ 0x28
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f001 fa34 	bl	800749c <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800603a:	e00a      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006044:	bf00      	nop
 8006046:	e004      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006048:	bf00      	nop
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10e      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800606a:	4a02      	ldr	r2, [pc, #8]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800606c:	430b      	orrs	r3, r1
 800606e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006070:	e006      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800607c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800608c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006096:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d037      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060aa:	d00e      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b0:	d816      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ba:	d111      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4bc4      	ldr	r3, [pc, #784]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	4ac3      	ldr	r2, [pc, #780]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060c8:	e00f      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	3308      	adds	r3, #8
 80060d0:	2101      	movs	r1, #1
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f930 	bl	8007338 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060f2:	4bb7      	ldr	r3, [pc, #732]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006100:	4ab3      	ldr	r2, [pc, #716]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6513      	str	r3, [r2, #80]	@ 0x50
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800610c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800611c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d039      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006136:	2b03      	cmp	r3, #3
 8006138:	d81c      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	0800617d 	.word	0x0800617d
 8006144:	08006151 	.word	0x08006151
 8006148:	0800615f 	.word	0x0800615f
 800614c:	0800617d 	.word	0x0800617d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006150:	4b9f      	ldr	r3, [pc, #636]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	4a9e      	ldr	r2, [pc, #632]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800615c:	e00f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006162:	3308      	adds	r3, #8
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f8e6 	bl	8007338 <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006172:	e004      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006186:	4b92      	ldr	r3, [pc, #584]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618a:	f023 0103 	bic.w	r1, r3, #3
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006194:	4a8e      	ldr	r2, [pc, #568]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006196:	430b      	orrs	r3, r1
 8006198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800619a:	e003      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061be:	460b      	mov	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f000 8099 	beq.w	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c6:	4b83      	ldr	r3, [pc, #524]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a82      	ldr	r2, [pc, #520]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061d2:	f7fb fb09 	bl	80017e8 <HAL_GetTick>
 80061d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061da:	e00b      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061dc:	f7fb fb04 	bl	80017e8 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b64      	cmp	r3, #100	@ 0x64
 80061ea:	d903      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061f2:	e005      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f4:	4b77      	ldr	r3, [pc, #476]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ed      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006204:	2b00      	cmp	r3, #0
 8006206:	d173      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006208:	4b71      	ldr	r3, [pc, #452]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800620a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006214:	4053      	eors	r3, r2
 8006216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800621a:	2b00      	cmp	r3, #0
 800621c:	d015      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800621e:	4b6c      	ldr	r3, [pc, #432]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006226:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800622a:	4b69      	ldr	r3, [pc, #420]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	4a68      	ldr	r2, [pc, #416]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006234:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006236:	4b66      	ldr	r3, [pc, #408]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623a:	4a65      	ldr	r2, [pc, #404]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006242:	4a63      	ldr	r2, [pc, #396]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006248:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006256:	d118      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fb fac6 	bl	80017e8 <HAL_GetTick>
 800625c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006260:	e00d      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fb fac1 	bl	80017e8 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800626c:	1ad2      	subs	r2, r2, r3
 800626e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006272:	429a      	cmp	r2, r3
 8006274:	d903      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800627c:	e005      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800627e:	4b54      	ldr	r3, [pc, #336]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0eb      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800628a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800628e:	2b00      	cmp	r3, #0
 8006290:	d129      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800629a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a2:	d10e      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062a4:	4b4a      	ldr	r3, [pc, #296]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b4:	091a      	lsrs	r2, r3, #4
 80062b6:	4b48      	ldr	r3, [pc, #288]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	4a45      	ldr	r2, [pc, #276]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6113      	str	r3, [r2, #16]
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062c2:	4b43      	ldr	r3, [pc, #268]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	4a42      	ldr	r2, [pc, #264]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062cc:	6113      	str	r3, [r2, #16]
 80062ce:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062de:	4a3c      	ldr	r2, [pc, #240]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e4:	e008      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80062ee:	e003      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f002 0301 	and.w	r3, r2, #1
 8006304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006308:	2300      	movs	r3, #0
 800630a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800630e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006312:	460b      	mov	r3, r1
 8006314:	4313      	orrs	r3, r2
 8006316:	f000 808f 	beq.w	8006438 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006320:	2b28      	cmp	r3, #40	@ 0x28
 8006322:	d871      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006324:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006411 	.word	0x08006411
 8006330:	08006409 	.word	0x08006409
 8006334:	08006409 	.word	0x08006409
 8006338:	08006409 	.word	0x08006409
 800633c:	08006409 	.word	0x08006409
 8006340:	08006409 	.word	0x08006409
 8006344:	08006409 	.word	0x08006409
 8006348:	08006409 	.word	0x08006409
 800634c:	080063dd 	.word	0x080063dd
 8006350:	08006409 	.word	0x08006409
 8006354:	08006409 	.word	0x08006409
 8006358:	08006409 	.word	0x08006409
 800635c:	08006409 	.word	0x08006409
 8006360:	08006409 	.word	0x08006409
 8006364:	08006409 	.word	0x08006409
 8006368:	08006409 	.word	0x08006409
 800636c:	080063f3 	.word	0x080063f3
 8006370:	08006409 	.word	0x08006409
 8006374:	08006409 	.word	0x08006409
 8006378:	08006409 	.word	0x08006409
 800637c:	08006409 	.word	0x08006409
 8006380:	08006409 	.word	0x08006409
 8006384:	08006409 	.word	0x08006409
 8006388:	08006409 	.word	0x08006409
 800638c:	08006411 	.word	0x08006411
 8006390:	08006409 	.word	0x08006409
 8006394:	08006409 	.word	0x08006409
 8006398:	08006409 	.word	0x08006409
 800639c:	08006409 	.word	0x08006409
 80063a0:	08006409 	.word	0x08006409
 80063a4:	08006409 	.word	0x08006409
 80063a8:	08006409 	.word	0x08006409
 80063ac:	08006411 	.word	0x08006411
 80063b0:	08006409 	.word	0x08006409
 80063b4:	08006409 	.word	0x08006409
 80063b8:	08006409 	.word	0x08006409
 80063bc:	08006409 	.word	0x08006409
 80063c0:	08006409 	.word	0x08006409
 80063c4:	08006409 	.word	0x08006409
 80063c8:	08006409 	.word	0x08006409
 80063cc:	08006411 	.word	0x08006411
 80063d0:	58024400 	.word	0x58024400
 80063d4:	58024800 	.word	0x58024800
 80063d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	3308      	adds	r3, #8
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ffa7 	bl	8007338 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063f0:	e00f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	3328      	adds	r3, #40	@ 0x28
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f84e 	bl	800749c <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800641a:	4bbf      	ldr	r3, [pc, #764]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006428:	4abb      	ldr	r2, [pc, #748]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6553      	str	r3, [r2, #84]	@ 0x54
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f002 0302 	and.w	r3, r2, #2
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800644e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d041      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645e:	2b05      	cmp	r3, #5
 8006460:	d824      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	080064b5 	.word	0x080064b5
 800646c:	08006481 	.word	0x08006481
 8006470:	08006497 	.word	0x08006497
 8006474:	080064b5 	.word	0x080064b5
 8006478:	080064b5 	.word	0x080064b5
 800647c:	080064b5 	.word	0x080064b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006484:	3308      	adds	r3, #8
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f000 ff55 	bl	8007338 <RCCEx_PLL2_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006494:	e00f      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	3328      	adds	r3, #40	@ 0x28
 800649c:	2101      	movs	r1, #1
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fffc 	bl	800749c <RCCEx_PLL3_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064aa:	e004      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064be:	4b96      	ldr	r3, [pc, #600]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c2:	f023 0107 	bic.w	r1, r3, #7
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064cc:	4a92      	ldr	r2, [pc, #584]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ce:	430b      	orrs	r3, r1
 80064d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80064d2:	e003      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 0304 	and.w	r3, r2, #4
 80064e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	d044      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006504:	2b05      	cmp	r3, #5
 8006506:	d825      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006508:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	0800655d 	.word	0x0800655d
 8006514:	08006529 	.word	0x08006529
 8006518:	0800653f 	.word	0x0800653f
 800651c:	0800655d 	.word	0x0800655d
 8006520:	0800655d 	.word	0x0800655d
 8006524:	0800655d 	.word	0x0800655d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	3308      	adds	r3, #8
 800652e:	2101      	movs	r1, #1
 8006530:	4618      	mov	r0, r3
 8006532:	f000 ff01 	bl	8007338 <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800653c:	e00f      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	3328      	adds	r3, #40	@ 0x28
 8006544:	2101      	movs	r1, #1
 8006546:	4618      	mov	r0, r3
 8006548:	f000 ffa8 	bl	800749c <RCCEx_PLL3_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006566:	4b6c      	ldr	r3, [pc, #432]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	f023 0107 	bic.w	r1, r3, #7
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	4a68      	ldr	r2, [pc, #416]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006578:	430b      	orrs	r3, r1
 800657a:	6593      	str	r3, [r2, #88]	@ 0x58
 800657c:	e003      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f002 0320 	and.w	r3, r2, #32
 8006592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006596:	2300      	movs	r3, #0
 8006598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800659c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d055      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b2:	d033      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b8:	d82c      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065be:	d02f      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d826      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ca:	d02b      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065d0:	d820      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d6:	d012      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065dc:	d81a      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d022      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e6:	d115      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	3308      	adds	r3, #8
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fea1 	bl	8007338 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065fc:	e015      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	3328      	adds	r3, #40	@ 0x28
 8006604:	2102      	movs	r1, #2
 8006606:	4618      	mov	r0, r3
 8006608:	f000 ff48 	bl	800749c <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006612:	e00a      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661a:	e006      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800661c:	bf00      	nop
 800661e:	e004      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006620:	bf00      	nop
 8006622:	e002      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006624:	bf00      	nop
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006632:	4b39      	ldr	r3, [pc, #228]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006642:	4a35      	ldr	r2, [pc, #212]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6553      	str	r3, [r2, #84]	@ 0x54
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800664e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800665e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006662:	2300      	movs	r3, #0
 8006664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006668:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800666c:	460b      	mov	r3, r1
 800666e:	4313      	orrs	r3, r2
 8006670:	d058      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800667a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800667e:	d033      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006680:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006684:	d82c      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668a:	d02f      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006690:	d826      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006696:	d02b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800669c:	d820      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a2:	d012      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a8:	d81a      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d022      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b2:	d115      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b8:	3308      	adds	r3, #8
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fe3b 	bl	8007338 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066c8:	e015      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	3328      	adds	r3, #40	@ 0x28
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fee2 	bl	800749c <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066de:	e00a      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066e6:	e006      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066fe:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800670e:	4a02      	ldr	r2, [pc, #8]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6593      	str	r3, [r2, #88]	@ 0x58
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006716:	bf00      	nop
 8006718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800673a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d055      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800674c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006750:	d033      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006752:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006756:	d82c      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675c:	d02f      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800675e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006762:	d826      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006764:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006768:	d02b      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800676a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800676e:	d820      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006774:	d012      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800677a:	d81a      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d022      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006784:	d115      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678a:	3308      	adds	r3, #8
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fdd2 	bl	8007338 <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800679a:	e015      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	3328      	adds	r3, #40	@ 0x28
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fe79 	bl	800749c <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067b0:	e00a      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067b8:	e006      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ba:	bf00      	nop
 80067bc:	e004      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067be:	bf00      	nop
 80067c0:	e002      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067d0:	4ba0      	ldr	r3, [pc, #640]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e0:	4a9c      	ldr	r2, [pc, #624]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f002 0308 	and.w	r3, r2, #8
 80067fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006806:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d01e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800681c:	d10c      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	3328      	adds	r3, #40	@ 0x28
 8006824:	2102      	movs	r1, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fe38 	bl	800749c <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006838:	4b86      	ldr	r3, [pc, #536]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800683a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006848:	4a82      	ldr	r2, [pc, #520]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800684a:	430b      	orrs	r3, r1
 800684c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f002 0310 	and.w	r3, r2, #16
 800685a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800685e:	2300      	movs	r3, #0
 8006860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006864:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006868:	460b      	mov	r3, r1
 800686a:	4313      	orrs	r3, r2
 800686c:	d01e      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800686e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687a:	d10c      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006880:	3328      	adds	r3, #40	@ 0x28
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fe09 	bl	800749c <RCCEx_PLL3_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006896:	4b6f      	ldr	r3, [pc, #444]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800689e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a6:	4a6b      	ldr	r2, [pc, #428]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068ba:	2300      	movs	r3, #0
 80068bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d03e      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d4:	d022      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068da:	d81b      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e4:	d00b      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068e6:	e015      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	3308      	adds	r3, #8
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fd21 	bl	8007338 <RCCEx_PLL2_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068fc:	e00f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	3328      	adds	r3, #40	@ 0x28
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fdc8 	bl	800749c <RCCEx_PLL3_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006926:	4b4b      	ldr	r3, [pc, #300]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006936:	4a47      	ldr	r2, [pc, #284]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006938:	430b      	orrs	r3, r1
 800693a:	6593      	str	r3, [r2, #88]	@ 0x58
 800693c:	e003      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006952:	673b      	str	r3, [r7, #112]	@ 0x70
 8006954:	2300      	movs	r3, #0
 8006956:	677b      	str	r3, [r7, #116]	@ 0x74
 8006958:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d03b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800696a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800696e:	d01f      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006974:	d818      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697a:	d003      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800697c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006980:	d007      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006982:	e011      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006984:	4b33      	ldr	r3, [pc, #204]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4a32      	ldr	r2, [pc, #200]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800698a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006990:	e00f      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2101      	movs	r1, #1
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fd7e 	bl	800749c <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a6:	e004      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ba:	4b26      	ldr	r3, [pc, #152]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ca:	4a22      	ldr	r2, [pc, #136]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069e8:	2300      	movs	r3, #0
 80069ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d034      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a04:	d007      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a06:	e011      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a08:	4b12      	ldr	r3, [pc, #72]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a11      	ldr	r2, [pc, #68]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a14:	e00e      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fc8a 	bl	8007338 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a2a:	e003      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10d      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a3c:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4a:	4a02      	ldr	r2, [pc, #8]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a52:	bf00      	nop
 8006a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a6e:	2300      	movs	r3, #0
 8006a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d00c      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	3328      	adds	r3, #40	@ 0x28
 8006a82:	2102      	movs	r1, #2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fd09 	bl	800749c <RCCEx_PLL3_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aac:	460b      	mov	r3, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	d036      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006abc:	d018      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac2:	d811      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac8:	d014      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ace:	d80b      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad8:	d106      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ada:	4bb7      	ldr	r3, [pc, #732]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	4ab6      	ldr	r2, [pc, #728]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b02:	4bad      	ldr	r3, [pc, #692]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b10:	4aa9      	ldr	r2, [pc, #676]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b2e:	2300      	movs	r3, #0
 8006b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d009      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	4a9b      	ldr	r2, [pc, #620]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	2300      	movs	r3, #0
 8006b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b66:	460b      	mov	r3, r1
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b6c:	4b92      	ldr	r3, [pc, #584]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b70:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b7a:	4a8f      	ldr	r2, [pc, #572]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8e:	2300      	movs	r3, #0
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b9c:	4b86      	ldr	r3, [pc, #536]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	4a85      	ldr	r2, [pc, #532]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ba6:	6113      	str	r3, [r2, #16]
 8006ba8:	4b83      	ldr	r3, [pc, #524]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006baa:	6919      	ldr	r1, [r3, #16]
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bb4:	4a80      	ldr	r2, [pc, #512]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bcc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bd6:	4b78      	ldr	r3, [pc, #480]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be4:	4a74      	ldr	r2, [pc, #464]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be6:	430b      	orrs	r3, r1
 8006be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c00:	460b      	mov	r3, r1
 8006c02:	4313      	orrs	r3, r2
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c06:	4b6c      	ldr	r3, [pc, #432]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c16:	4a68      	ldr	r2, [pc, #416]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	2100      	movs	r1, #0
 8006c26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c32:	460b      	mov	r3, r1
 8006c34:	4313      	orrs	r3, r2
 8006c36:	d011      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fb79 	bl	8007338 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	2100      	movs	r1, #0
 8006c66:	6239      	str	r1, [r7, #32]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c72:	460b      	mov	r3, r1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	d011      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	2101      	movs	r1, #1
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb59 	bl	8007338 <RCCEx_PLL2_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	61b9      	str	r1, [r7, #24]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d011      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2102      	movs	r1, #2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fb39 	bl	8007338 <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6139      	str	r1, [r7, #16]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d011      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	3328      	adds	r3, #40	@ 0x28
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fbcb 	bl	800749c <RCCEx_PLL3_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	2100      	movs	r1, #0
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d011      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	3328      	adds	r3, #40	@ 0x28
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fbab 	bl	800749c <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	2100      	movs	r1, #0
 8006d66:	6039      	str	r1, [r7, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d011      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	3328      	adds	r3, #40	@ 0x28
 8006d7e:	2102      	movs	r1, #2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fb8b 	bl	800749c <RCCEx_PLL3_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006d9c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006db0:	46bd      	mov	sp, r7
 8006db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db6:	bf00      	nop
 8006db8:	58024400 	.word	0x58024400

08006dbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dc0:	f7fe fe00 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	4904      	ldr	r1, [pc, #16]	@ (8006de4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	58024400 	.word	0x58024400
 8006de4:	0800c39c 	.word	0x0800c39c

08006de8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	@ 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	0b1b      	lsrs	r3, r3, #12
 8006e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	@ (800707c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	@ 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4af42400 	.word	0x4af42400

08007090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	@ 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba1      	ldr	r3, [pc, #644]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070a2:	4b9f      	ldr	r3, [pc, #636]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	0d1b      	lsrs	r3, r3, #20
 80070a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070ae:	4b9c      	ldr	r3, [pc, #624]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070ba:	4b99      	ldr	r3, [pc, #612]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	08db      	lsrs	r3, r3, #3
 80070c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8111 	beq.w	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f000 8083 	beq.w	80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f200 80a1 	bhi.w	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d056      	beq.n	80071a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070fa:	e099      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fc:	4b88      	ldr	r3, [pc, #544]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02d      	beq.n	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007108:	4b85      	ldr	r3, [pc, #532]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	4a84      	ldr	r2, [pc, #528]	@ (8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b7b      	ldr	r3, [pc, #492]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007162:	e087      	b.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800732c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b6a      	ldr	r3, [pc, #424]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a6:	e065      	b.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ba:	4b59      	ldr	r3, [pc, #356]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ea:	e043      	b.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fe:	4b48      	ldr	r3, [pc, #288]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007212:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722e:	e021      	b.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b37      	ldr	r3, [pc, #220]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a03 	vldr	s12, [r7, #12]
 8007256:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007274:	4b2a      	ldr	r3, [pc, #168]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	0a5b      	lsrs	r3, r3, #9
 800727a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800728a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729a:	ee17 2a90 	vmov	r2, s15
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c8:	ee17 2a90 	vmov	r2, s15
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072d0:	4b13      	ldr	r3, [pc, #76]	@ (8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f6:	ee17 2a90 	vmov	r2, s15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072fe:	e008      	b.n	8007312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
}
 8007312:	bf00      	nop
 8007314:	3724      	adds	r7, #36	@ 0x24
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	03d09000 	.word	0x03d09000
 8007328:	46000000 	.word	0x46000000
 800732c:	4c742400 	.word	0x4c742400
 8007330:	4a742400 	.word	0x4a742400
 8007334:	4af42400 	.word	0x4af42400

08007338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007346:	4b53      	ldr	r3, [pc, #332]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b03      	cmp	r3, #3
 8007350:	d101      	bne.n	8007356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e099      	b.n	800748a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007356:	4b4f      	ldr	r3, [pc, #316]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4e      	ldr	r2, [pc, #312]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800735c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007362:	f7fa fa41 	bl	80017e8 <HAL_GetTick>
 8007366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007368:	e008      	b.n	800737c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800736a:	f7fa fa3d 	bl	80017e8 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e086      	b.n	800748a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800737c:	4b45      	ldr	r3, [pc, #276]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f0      	bne.n	800736a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007388:	4b42      	ldr	r3, [pc, #264]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800738a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	031b      	lsls	r3, r3, #12
 8007396:	493f      	ldr	r1, [pc, #252]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007398:	4313      	orrs	r3, r2
 800739a:	628b      	str	r3, [r1, #40]	@ 0x28
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	025b      	lsls	r3, r3, #9
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	041b      	lsls	r3, r3, #16
 80073ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073cc:	4931      	ldr	r1, [pc, #196]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073d2:	4b30      	ldr	r3, [pc, #192]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	492d      	ldr	r1, [pc, #180]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	f023 0220 	bic.w	r2, r3, #32
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	4928      	ldr	r1, [pc, #160]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073f6:	4b27      	ldr	r3, [pc, #156]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	f023 0310 	bic.w	r3, r3, #16
 8007400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007402:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007404:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007406:	4b24      	ldr	r3, [pc, #144]	@ (8007498 <RCCEx_PLL2_Config+0x160>)
 8007408:	4013      	ands	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	69d2      	ldr	r2, [r2, #28]
 800740e:	00d2      	lsls	r2, r2, #3
 8007410:	4920      	ldr	r1, [pc, #128]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007416:	4b1f      	ldr	r3, [pc, #124]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	4a1e      	ldr	r2, [pc, #120]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800741c:	f043 0310 	orr.w	r3, r3, #16
 8007420:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007428:	4b1a      	ldr	r3, [pc, #104]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	4a19      	ldr	r2, [pc, #100]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800742e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007434:	e00f      	b.n	8007456 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d106      	bne.n	800744a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800743c:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4a14      	ldr	r2, [pc, #80]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007448:	e005      	b.n	8007456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800744a:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744e:	4a11      	ldr	r2, [pc, #68]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007454:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a0e      	ldr	r2, [pc, #56]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800745c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007462:	f7fa f9c1 	bl	80017e8 <HAL_GetTick>
 8007466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007468:	e008      	b.n	800747c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800746a:	f7fa f9bd 	bl	80017e8 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e006      	b.n	800748a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800747c:	4b05      	ldr	r3, [pc, #20]	@ (8007494 <RCCEx_PLL2_Config+0x15c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0f0      	beq.n	800746a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	ffff0007 	.word	0xffff0007

0800749c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074aa:	4b53      	ldr	r3, [pc, #332]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d101      	bne.n	80074ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e099      	b.n	80075ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074ba:	4b4f      	ldr	r3, [pc, #316]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a4e      	ldr	r2, [pc, #312]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c6:	f7fa f98f 	bl	80017e8 <HAL_GetTick>
 80074ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074cc:	e008      	b.n	80074e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074ce:	f7fa f98b 	bl	80017e8 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e086      	b.n	80075ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e0:	4b45      	ldr	r3, [pc, #276]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f0      	bne.n	80074ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074ec:	4b42      	ldr	r3, [pc, #264]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	051b      	lsls	r3, r3, #20
 80074fa:	493f      	ldr	r1, [pc, #252]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	3b01      	subs	r3, #1
 8007506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	3b01      	subs	r3, #1
 8007510:	025b      	lsls	r3, r3, #9
 8007512:	b29b      	uxth	r3, r3
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	3b01      	subs	r3, #1
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	3b01      	subs	r3, #1
 800752a:	061b      	lsls	r3, r3, #24
 800752c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007530:	4931      	ldr	r1, [pc, #196]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007532:	4313      	orrs	r3, r2
 8007534:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007536:	4b30      	ldr	r3, [pc, #192]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	492d      	ldr	r1, [pc, #180]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007544:	4313      	orrs	r3, r2
 8007546:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007548:	4b2b      	ldr	r3, [pc, #172]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	4928      	ldr	r1, [pc, #160]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800755a:	4b27      	ldr	r3, [pc, #156]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	4a26      	ldr	r2, [pc, #152]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007566:	4b24      	ldr	r3, [pc, #144]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756a:	4b24      	ldr	r3, [pc, #144]	@ (80075fc <RCCEx_PLL3_Config+0x160>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	69d2      	ldr	r2, [r2, #28]
 8007572:	00d2      	lsls	r2, r2, #3
 8007574:	4920      	ldr	r1, [pc, #128]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800757a:	4b1f      	ldr	r3, [pc, #124]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	4a1e      	ldr	r2, [pc, #120]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007584:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d106      	bne.n	800759a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800758c:	4b1a      	ldr	r3, [pc, #104]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	4a19      	ldr	r2, [pc, #100]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 8007592:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007598:	e00f      	b.n	80075ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d106      	bne.n	80075ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075a0:	4b15      	ldr	r3, [pc, #84]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a14      	ldr	r2, [pc, #80]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075ac:	e005      	b.n	80075ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075ae:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a11      	ldr	r2, [pc, #68]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075ba:	4b0f      	ldr	r3, [pc, #60]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a0e      	ldr	r2, [pc, #56]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c6:	f7fa f90f 	bl	80017e8 <HAL_GetTick>
 80075ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075cc:	e008      	b.n	80075e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075ce:	f7fa f90b 	bl	80017e8 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e006      	b.n	80075ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <RCCEx_PLL3_Config+0x15c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	58024400 	.word	0x58024400
 80075fc:	ffff0007 	.word	0xffff0007

08007600 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d071      	beq.n	80076f6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7f9 fd56 	bl	80010d8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b10      	cmp	r3, #16
 8007640:	d050      	beq.n	80076e4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	22ca      	movs	r2, #202	@ 0xca
 8007648:	625a      	str	r2, [r3, #36]	@ 0x24
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2253      	movs	r2, #83	@ 0x53
 8007650:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fb88 	bl	8007d68 <RTC_EnterInitMode>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d124      	bne.n	80076ac <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6899      	ldr	r1, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b24      	ldr	r3, [pc, #144]	@ (8007700 <HAL_RTC_Init+0x100>)
 800766e:	400b      	ands	r3, r1
 8007670:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6899      	ldr	r1, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	0419      	lsls	r1, r3, #16
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb94 	bl	8007dd0 <RTC_ExitInitMode>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d113      	bne.n	80076da <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0203 	bic.w	r2, r2, #3
 80076c0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	22ff      	movs	r2, #255	@ 0xff
 80076e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80076e2:	e001      	b.n	80076e8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	ff8fffbf 	.word	0xff8fffbf

08007704 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_RTC_SetTime+0x1a>
 800771a:	2302      	movs	r3, #2
 800771c:	e089      	b.n	8007832 <HAL_RTC_SetTime+0x12e>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	22ca      	movs	r2, #202	@ 0xca
 8007734:	625a      	str	r2, [r3, #36]	@ 0x24
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2253      	movs	r2, #83	@ 0x53
 800773c:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fb12 	bl	8007d68 <RTC_EnterInitMode>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d161      	bne.n	8007812 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d126      	bne.n	80077a2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fb6d 	bl	8007e4c <RTC_ByteToBcd2>
 8007772:	4603      	mov	r3, r0
 8007774:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fb66 	bl	8007e4c <RTC_ByteToBcd2>
 8007780:	4603      	mov	r3, r0
 8007782:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007784:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	789b      	ldrb	r3, [r3, #2]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fb5e 	bl	8007e4c <RTC_ByteToBcd2>
 8007790:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007792:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	78db      	ldrb	r3, [r3, #3]
 800779a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e018      	b.n	80077d4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	78db      	ldrb	r3, [r3, #3]
 80077ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	4b18      	ldr	r3, [pc, #96]	@ (800783c <HAL_RTC_SetTime+0x138>)
 80077dc:	400b      	ands	r3, r1
 80077de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6899      	ldr	r1, [r3, #8]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	431a      	orrs	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fae1 	bl	8007dd0 <RTC_ExitInitMode>
 800780e:	4603      	mov	r3, r0
 8007810:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	22ff      	movs	r2, #255	@ 0xff
 8007818:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800781a:	7cfb      	ldrb	r3, [r7, #19]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007830:	7cfb      	ldrb	r3, [r7, #19]
}
 8007832:	4618      	mov	r0, r3
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	bd90      	pop	{r4, r7, pc}
 800783a:	bf00      	nop
 800783c:	007f7f7f 	.word	0x007f7f7f

08007840 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4b22      	ldr	r3, [pc, #136]	@ (80078f4 <HAL_RTC_GetTime+0xb4>)
 800786c:	4013      	ands	r3, r2
 800786e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	0c1b      	lsrs	r3, r3, #16
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	b2db      	uxtb	r3, r3
 8007886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788a:	b2da      	uxtb	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	0d9b      	lsrs	r3, r3, #22
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11a      	bne.n	80078ea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fae7 	bl	8007e8c <RTC_Bcd2ToByte>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fade 	bl	8007e8c <RTC_Bcd2ToByte>
 80078d0:	4603      	mov	r3, r0
 80078d2:	461a      	mov	r2, r3
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	789b      	ldrb	r3, [r3, #2]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fad5 	bl	8007e8c <RTC_Bcd2ToByte>
 80078e2:	4603      	mov	r3, r0
 80078e4:	461a      	mov	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	007f7f7f 	.word	0x007f7f7f

080078f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <HAL_RTC_SetDate+0x1a>
 800790e:	2302      	movs	r3, #2
 8007910:	e073      	b.n	80079fa <HAL_RTC_SetDate+0x102>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10e      	bne.n	8007946 <HAL_RTC_SetDate+0x4e>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	f023 0310 	bic.w	r3, r3, #16
 800793c:	b2db      	uxtb	r3, r3
 800793e:	330a      	adds	r3, #10
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11c      	bne.n	8007986 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	78db      	ldrb	r3, [r3, #3]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fa7b 	bl	8007e4c <RTC_ByteToBcd2>
 8007956:	4603      	mov	r3, r0
 8007958:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fa74 	bl	8007e4c <RTC_ByteToBcd2>
 8007964:	4603      	mov	r3, r0
 8007966:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007968:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	789b      	ldrb	r3, [r3, #2]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fa6c 	bl	8007e4c <RTC_ByteToBcd2>
 8007974:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007976:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e00e      	b.n	80079a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	78db      	ldrb	r3, [r3, #3]
 800798a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007992:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007998:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	22ca      	movs	r2, #202	@ 0xca
 80079aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2253      	movs	r2, #83	@ 0x53
 80079b2:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f9d7 	bl	8007d68 <RTC_EnterInitMode>
 80079ba:	4603      	mov	r3, r0
 80079bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007a04 <HAL_RTC_SetDate+0x10c>)
 80079cc:	400b      	ands	r3, r1
 80079ce:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f9fd 	bl	8007dd0 <RTC_ExitInitMode>
 80079d6:	4603      	mov	r3, r0
 80079d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	22ff      	movs	r2, #255	@ 0xff
 80079e0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80079e2:	7cfb      	ldrb	r3, [r7, #19]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80079f8:	7cfb      	ldrb	r3, [r7, #19]


}
 80079fa:	4618      	mov	r0, r3
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	00ffff3f 	.word	0x00ffff3f

08007a08 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4b21      	ldr	r3, [pc, #132]	@ (8007aa0 <HAL_RTC_GetDate+0x98>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	0c1b      	lsrs	r3, r3, #16
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	0a1b      	lsrs	r3, r3, #8
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	0b5b      	lsrs	r3, r3, #13
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11a      	bne.n	8007a94 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fa12 	bl	8007e8c <RTC_Bcd2ToByte>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fa09 	bl	8007e8c <RTC_Bcd2ToByte>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	789b      	ldrb	r3, [r3, #2]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fa00 	bl	8007e8c <RTC_Bcd2ToByte>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	00ffff3f 	.word	0x00ffff3f

08007aa4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b089      	sub	sp, #36	@ 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_RTC_SetAlarm_IT+0x1a>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e129      	b.n	8007d12 <HAL_RTC_SetAlarm_IT+0x26e>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d137      	bne.n	8007b44 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f9ad 	bl	8007e4c <RTC_ByteToBcd2>
 8007af2:	4603      	mov	r3, r0
 8007af4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f9a6 	bl	8007e4c <RTC_ByteToBcd2>
 8007b00:	4603      	mov	r3, r0
 8007b02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	789b      	ldrb	r3, [r3, #2]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f99e 	bl	8007e4c <RTC_ByteToBcd2>
 8007b10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f990 	bl	8007e4c <RTC_ByteToBcd2>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	61fb      	str	r3, [r7, #28]
 8007b42:	e023      	b.n	8007b8c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	785b      	ldrb	r3, [r3, #1]
 8007b62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b64:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	22ca      	movs	r2, #202	@ 0xca
 8007b9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2253      	movs	r2, #83	@ 0x53
 8007ba6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb0:	d14a      	bne.n	8007c48 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bc0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007bd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007bd4:	f7f9 fe08 	bl	80017e8 <HAL_GetTick>
 8007bd8:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007bda:	e015      	b.n	8007c08 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bdc:	f7f9 fe04 	bl	80017e8 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bea:	d90d      	bls.n	8007c08 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	22ff      	movs	r2, #255	@ 0xff
 8007bf2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e084      	b.n	8007d12 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0e2      	beq.n	8007bdc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c34:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c44:	609a      	str	r2, [r3, #8]
 8007c46:	e049      	b.n	8007cdc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c56:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007c68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c6a:	f7f9 fdbd 	bl	80017e8 <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c70:	e015      	b.n	8007c9e <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c72:	f7f9 fdb9 	bl	80017e8 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c80:	d90d      	bls.n	8007c9e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	22ff      	movs	r2, #255	@ 0xff
 8007c88:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e039      	b.n	8007d12 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0e2      	beq.n	8007c72 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cda:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <HAL_RTC_SetAlarm_IT+0x278>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8007d1c <HAL_RTC_SetAlarm_IT+0x278>)
 8007ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce6:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf6:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	22ff      	movs	r2, #255	@ 0xff
 8007cfe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3724      	adds	r7, #36	@ 0x24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd90      	pop	{r4, r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	58000080 	.word	0x58000080

08007d20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8007d64 <HAL_RTC_WaitForSynchro+0x44>)
 8007d2e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007d30:	f7f9 fd5a 	bl	80017e8 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d36:	e009      	b.n	8007d4c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d38:	f7f9 fd56 	bl	80017e8 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d46:	d901      	bls.n	8007d4c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e007      	b.n	8007d5c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0ee      	beq.n	8007d38 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	0003ff5f 	.word	0x0003ff5f

08007d68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d120      	bne.n	8007dc4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d8c:	f7f9 fd2c 	bl	80017e8 <HAL_GetTick>
 8007d90:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d92:	e00d      	b.n	8007db0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d94:	f7f9 fd28 	bl	80017e8 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007da2:	d905      	bls.n	8007db0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <RTC_EnterInitMode+0x5c>
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d1e7      	bne.n	8007d94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a19      	ldr	r2, [pc, #100]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007de6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007de8:	4b17      	ldr	r3, [pc, #92]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff ff93 	bl	8007d20 <HAL_RTC_WaitForSynchro>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	73fb      	strb	r3, [r7, #15]
 8007e0c:	e017      	b.n	8007e3e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	4a0d      	ldr	r2, [pc, #52]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007e14:	f023 0320 	bic.w	r3, r3, #32
 8007e18:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff ff80 	bl	8007d20 <HAL_RTC_WaitForSynchro>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	4a04      	ldr	r2, [pc, #16]	@ (8007e48 <RTC_ExitInitMode+0x78>)
 8007e38:	f043 0320 	orr.w	r3, r3, #32
 8007e3c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	58004000 	.word	0x58004000

08007e4c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007e5e:	e005      	b.n	8007e6c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	3b0a      	subs	r3, #10
 8007e6a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d8f6      	bhi.n	8007e60 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	b2db      	uxtb	r3, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	0092      	lsls	r2, r2, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	b2db      	uxtb	r3, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e07b      	b.n	8007fd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	22ca      	movs	r2, #202	@ 0xca
 8007ef0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2253      	movs	r2, #83	@ 0x53
 8007ef8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007efa:	4b38      	ldr	r3, [pc, #224]	@ (8007fdc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	4a37      	ldr	r2, [pc, #220]	@ (8007fdc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f04:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8007f06:	4b35      	ldr	r3, [pc, #212]	@ (8007fdc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d120      	bne.n	8007f54 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8007f12:	f7f9 fc69 	bl	80017e8 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f18:	e015      	b.n	8007f46 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f1a:	f7f9 fc65 	bl	80017e8 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f28:	d90d      	bls.n	8007f46 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	22ff      	movs	r2, #255	@ 0xff
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2203      	movs	r2, #3
 8007f36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e045      	b.n	8007fd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0e2      	beq.n	8007f1a <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007f7c:	4b18      	ldr	r3, [pc, #96]	@ (8007fe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a17      	ldr	r2, [pc, #92]	@ (8007fe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f96:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fa6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fb6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	22ff      	movs	r2, #255	@ 0xff
 8007fbe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	58004000 	.word	0x58004000
 8007fe0:	58000080 	.word	0x58000080

08007fe4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e04d      	b.n	8008096 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	22ca      	movs	r2, #202	@ 0xca
 8008010:	625a      	str	r2, [r3, #36]	@ 0x24
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2253      	movs	r2, #83	@ 0x53
 8008018:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008028:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008038:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800803a:	f7f9 fbd5 	bl	80017e8 <HAL_GetTick>
 800803e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
#if defined(TAMP)
  while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008040:	e015      	b.n	800806e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
#endif /* TAMP */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008042:	f7f9 fbd1 	bl	80017e8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008050:	d90d      	bls.n	800806e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	22ff      	movs	r2, #255	@ 0xff
 8008058:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e013      	b.n	8008096 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0e2      	beq.n	8008042 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	22ff      	movs	r2, #255	@ 0xff
 8008082:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_CLEAR_FLAG();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80080a8:	4b0f      	ldr	r3, [pc, #60]	@ (80080e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80080aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80080ae:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00b      	beq.n	80080d6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80080ce:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
  #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
  #else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f002 fbef 	bl	800a8b4 <HAL_RTCEx_WakeUpTimerEventCallback>
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	58000080 	.word	0x58000080

080080ec <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3350      	adds	r3, #80	@ 0x50
 80080fe:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4413      	add	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3350      	adds	r3, #80	@ 0x50
 800812c:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e042      	b.n	80081e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7f9 f9e7 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2224      	movs	r2, #36	@ 0x24
 8008176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 fbdc 	bl	8009950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd6d 	bl	8008c78 <UART_SetConfig>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e01b      	b.n	80081e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 fc5b 	bl	8009a94 <UART_CheckIdleState>
 80081de:	4603      	mov	r3, r0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	@ 0x28
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d17b      	bne.n	80082fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_UART_Transmit+0x26>
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e074      	b.n	80082fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2221      	movs	r2, #33	@ 0x21
 800821e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008222:	f7f9 fae1 	bl	80017e8 <HAL_GetTick>
 8008226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	88fa      	ldrh	r2, [r7, #6]
 800822c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008240:	d108      	bne.n	8008254 <HAL_UART_Transmit+0x6c>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e003      	b.n	800825c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800825c:	e030      	b.n	80082c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2200      	movs	r2, #0
 8008266:	2180      	movs	r1, #128	@ 0x80
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f001 fcbd 	bl	8009be8 <UART_WaitOnFlagUntilTimeout>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e03d      	b.n	80082fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008294:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	3302      	adds	r3, #2
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	e007      	b.n	80082ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1c8      	bne.n	800825e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2200      	movs	r2, #0
 80082d4:	2140      	movs	r1, #64	@ 0x40
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f001 fc86 	bl	8009be8 <UART_WaitOnFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e006      	b.n	80082fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e000      	b.n	80082fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80082fa:	2302      	movs	r3, #2
  }
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008304:	b480      	push	{r7}
 8008306:	b091      	sub	sp, #68	@ 0x44
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008318:	2b20      	cmp	r3, #32
 800831a:	d178      	bne.n	800840e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_UART_Transmit_IT+0x24>
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e071      	b.n	8008410 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2221      	movs	r2, #33	@ 0x21
 8008354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800835c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008360:	d12a      	bne.n	80083b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800836a:	d107      	bne.n	800837c <HAL_UART_Transmit_IT+0x78>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a29      	ldr	r2, [pc, #164]	@ (800841c <HAL_UART_Transmit_IT+0x118>)
 8008378:	679a      	str	r2, [r3, #120]	@ 0x78
 800837a:	e002      	b.n	8008382 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a28      	ldr	r2, [pc, #160]	@ (8008420 <HAL_UART_Transmit_IT+0x11c>)
 8008380:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80083a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e5      	bne.n	8008382 <HAL_UART_Transmit_IT+0x7e>
 80083b6:	e028      	b.n	800840a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c0:	d107      	bne.n	80083d2 <HAL_UART_Transmit_IT+0xce>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d103      	bne.n	80083d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4a15      	ldr	r2, [pc, #84]	@ (8008424 <HAL_UART_Transmit_IT+0x120>)
 80083ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80083d0:	e002      	b.n	80083d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4a14      	ldr	r2, [pc, #80]	@ (8008428 <HAL_UART_Transmit_IT+0x124>)
 80083d6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	613b      	str	r3, [r7, #16]
   return(result);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	623b      	str	r3, [r7, #32]
 80083f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	69f9      	ldr	r1, [r7, #28]
 80083fc:	6a3a      	ldr	r2, [r7, #32]
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	61bb      	str	r3, [r7, #24]
   return(result);
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	e000      	b.n	8008410 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3744      	adds	r7, #68	@ 0x44
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	0800a3cd 	.word	0x0800a3cd
 8008420:	0800a2ed 	.word	0x0800a2ed
 8008424:	0800a22b 	.word	0x0800a22b
 8008428:	0800a173 	.word	0x0800a173

0800842c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	@ 0x28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008440:	2b20      	cmp	r3, #32
 8008442:	d137      	bne.n	80084b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_UART_Receive_DMA+0x24>
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e030      	b.n	80084b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a18      	ldr	r2, [pc, #96]	@ (80084c0 <HAL_UART_Receive_DMA+0x94>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d01f      	beq.n	80084a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d018      	beq.n	80084a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	613b      	str	r3, [r7, #16]
   return(result);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	623b      	str	r3, [r7, #32]
 8008492:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	61bb      	str	r3, [r7, #24]
   return(result);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f001 fc0a 	bl	8009cc4 <UART_Start_Receive_DMA>
 80084b0:	4603      	mov	r3, r0
 80084b2:	e000      	b.n	80084b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084b4:	2302      	movs	r3, #2
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3728      	adds	r7, #40	@ 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	58000c00 	.word	0x58000c00

080084c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b0ba      	sub	sp, #232	@ 0xe8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084f2:	4013      	ands	r3, r2
 80084f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80084f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11b      	bne.n	8008538 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d015      	beq.n	8008538 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800851c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d009      	beq.n	8008538 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8377 	beq.w	8008c1c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
      }
      return;
 8008536:	e371      	b.n	8008c1c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8123 	beq.w	8008788 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008542:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008546:	4b8d      	ldr	r3, [pc, #564]	@ (800877c <HAL_UART_IRQHandler+0x2b8>)
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800854e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008552:	4b8b      	ldr	r3, [pc, #556]	@ (8008780 <HAL_UART_IRQHandler+0x2bc>)
 8008554:	4013      	ands	r3, r2
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 8116 	beq.w	8008788 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <HAL_UART_IRQHandler+0xc8>
 8008568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800856c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008582:	f043 0201 	orr.w	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d011      	beq.n	80085bc <HAL_UART_IRQHandler+0xf8>
 8008598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2202      	movs	r2, #2
 80085aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b2:	f043 0204 	orr.w	r2, r3, #4
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d011      	beq.n	80085ec <HAL_UART_IRQHandler+0x128>
 80085c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2204      	movs	r2, #4
 80085da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e2:	f043 0202 	orr.w	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d017      	beq.n	8008628 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008604:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008608:	4b5c      	ldr	r3, [pc, #368]	@ (800877c <HAL_UART_IRQHandler+0x2b8>)
 800860a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2208      	movs	r2, #8
 8008616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861e:	f043 0208 	orr.w	r2, r3, #8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008630:	2b00      	cmp	r3, #0
 8008632:	d012      	beq.n	800865a <HAL_UART_IRQHandler+0x196>
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008638:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00c      	beq.n	800865a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008650:	f043 0220 	orr.w	r2, r3, #32
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 82dd 	beq.w	8008c20 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d013      	beq.n	800869a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800867e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ae:	2b40      	cmp	r3, #64	@ 0x40
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d054      	beq.n	8008768 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fbe8 	bl	8009e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ce:	2b40      	cmp	r3, #64	@ 0x40
 80086d0:	d146      	bne.n	8008760 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800870a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1d9      	bne.n	80086d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008724:	2b00      	cmp	r3, #0
 8008726:	d017      	beq.n	8008758 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800872e:	4a15      	ldr	r2, [pc, #84]	@ (8008784 <HAL_UART_IRQHandler+0x2c0>)
 8008730:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008738:	4618      	mov	r0, r3
 800873a:	f7fa fa75 	bl	8002c28 <HAL_DMA_Abort_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008752:	4610      	mov	r0, r2
 8008754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008756:	e00f      	b.n	8008778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa77 	bl	8008c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875e:	e00b      	b.n	8008778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa73 	bl	8008c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008766:	e007      	b.n	8008778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa6f 	bl	8008c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008776:	e253      	b.n	8008c20 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008778:	bf00      	nop
    return;
 800877a:	e251      	b.n	8008c20 <HAL_UART_IRQHandler+0x75c>
 800877c:	10000001 	.word	0x10000001
 8008780:	04000120 	.word	0x04000120
 8008784:	0800a147 	.word	0x0800a147

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800878c:	2b01      	cmp	r3, #1
 800878e:	f040 81e7 	bne.w	8008b60 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 81e0 	beq.w	8008b60 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 0310 	and.w	r3, r3, #16
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 81d9 	beq.w	8008b60 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2210      	movs	r2, #16
 80087b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c0:	2b40      	cmp	r3, #64	@ 0x40
 80087c2:	f040 8151 	bne.w	8008a68 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a96      	ldr	r2, [pc, #600]	@ (8008a28 <HAL_UART_IRQHandler+0x564>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d068      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a93      	ldr	r2, [pc, #588]	@ (8008a2c <HAL_UART_IRQHandler+0x568>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d061      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a91      	ldr	r2, [pc, #580]	@ (8008a30 <HAL_UART_IRQHandler+0x56c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d05a      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a8e      	ldr	r2, [pc, #568]	@ (8008a34 <HAL_UART_IRQHandler+0x570>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d053      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a8c      	ldr	r2, [pc, #560]	@ (8008a38 <HAL_UART_IRQHandler+0x574>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d04c      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a89      	ldr	r2, [pc, #548]	@ (8008a3c <HAL_UART_IRQHandler+0x578>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d045      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a87      	ldr	r2, [pc, #540]	@ (8008a40 <HAL_UART_IRQHandler+0x57c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d03e      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a84      	ldr	r2, [pc, #528]	@ (8008a44 <HAL_UART_IRQHandler+0x580>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d037      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a82      	ldr	r2, [pc, #520]	@ (8008a48 <HAL_UART_IRQHandler+0x584>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d030      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a7f      	ldr	r2, [pc, #508]	@ (8008a4c <HAL_UART_IRQHandler+0x588>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d029      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a7d      	ldr	r2, [pc, #500]	@ (8008a50 <HAL_UART_IRQHandler+0x58c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d022      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a7a      	ldr	r2, [pc, #488]	@ (8008a54 <HAL_UART_IRQHandler+0x590>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d01b      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a78      	ldr	r2, [pc, #480]	@ (8008a58 <HAL_UART_IRQHandler+0x594>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d014      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a75      	ldr	r2, [pc, #468]	@ (8008a5c <HAL_UART_IRQHandler+0x598>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00d      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a73      	ldr	r2, [pc, #460]	@ (8008a60 <HAL_UART_IRQHandler+0x59c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d006      	beq.n	80088a6 <HAL_UART_IRQHandler+0x3e2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a70      	ldr	r2, [pc, #448]	@ (8008a64 <HAL_UART_IRQHandler+0x5a0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d106      	bne.n	80088b4 <HAL_UART_IRQHandler+0x3f0>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	e005      	b.n	80088c0 <HAL_UART_IRQHandler+0x3fc>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 81ab 	beq.w	8008c24 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088d8:	429a      	cmp	r2, r3
 80088da:	f080 81a3 	bcs.w	8008c24 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f4:	f000 8087 	beq.w	8008a06 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800890c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008926:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800892e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800893a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1da      	bne.n	80088f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008966:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800896a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800896e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e1      	bne.n	8008942 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800898e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e3      	bne.n	800897e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089d4:	f023 0310 	bic.w	r3, r3, #16
 80089d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e4      	bne.n	80089c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f9 fdf3 	bl	80025ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f91d 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a26:	e0fd      	b.n	8008c24 <HAL_UART_IRQHandler+0x760>
 8008a28:	40020010 	.word	0x40020010
 8008a2c:	40020028 	.word	0x40020028
 8008a30:	40020040 	.word	0x40020040
 8008a34:	40020058 	.word	0x40020058
 8008a38:	40020070 	.word	0x40020070
 8008a3c:	40020088 	.word	0x40020088
 8008a40:	400200a0 	.word	0x400200a0
 8008a44:	400200b8 	.word	0x400200b8
 8008a48:	40020410 	.word	0x40020410
 8008a4c:	40020428 	.word	0x40020428
 8008a50:	40020440 	.word	0x40020440
 8008a54:	40020458 	.word	0x40020458
 8008a58:	40020470 	.word	0x40020470
 8008a5c:	40020488 	.word	0x40020488
 8008a60:	400204a0 	.word	0x400204a0
 8008a64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 80cf 	beq.w	8008c28 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80ca 	beq.w	8008c28 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ab8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e4      	bne.n	8008a94 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	4b55      	ldr	r3, [pc, #340]	@ (8008c34 <HAL_UART_IRQHandler+0x770>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e3      	bne.n	8008aca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b38:	61fb      	str	r3, [r7, #28]
 8008b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	69b9      	ldr	r1, [r7, #24]
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	617b      	str	r3, [r7, #20]
   return(result);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e4      	bne.n	8008b16 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f881 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b5e:	e063      	b.n	8008c28 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <HAL_UART_IRQHandler+0x6c6>
 8008b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fcc2 	bl	800a50c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b88:	e051      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d014      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d105      	bne.n	8008bae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d008      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d03a      	beq.n	8008c2c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
    }
    return;
 8008bbe:	e035      	b.n	8008c2c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d009      	beq.n	8008be0 <HAL_UART_IRQHandler+0x71c>
 8008bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fc6c 	bl	800a4b6 <UART_EndTransmit_IT>
    return;
 8008bde:	e026      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <HAL_UART_IRQHandler+0x73c>
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 fc9b 	bl	800a534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bfe:	e016      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d010      	beq.n	8008c2e <HAL_UART_IRQHandler+0x76a>
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da0c      	bge.n	8008c2e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fc83 	bl	800a520 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c1a:	e008      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c1c:	bf00      	nop
 8008c1e:	e006      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
    return;
 8008c20:	bf00      	nop
 8008c22:	e004      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c24:	bf00      	nop
 8008c26:	e002      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c28:	bf00      	nop
 8008c2a:	e000      	b.n	8008c2e <HAL_UART_IRQHandler+0x76a>
    return;
 8008c2c:	bf00      	nop
  }
}
 8008c2e:	37e8      	adds	r7, #232	@ 0xe8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	effffffe 	.word	0xeffffffe

08008c38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c7c:	b092      	sub	sp, #72	@ 0x48
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	4bbe      	ldr	r3, [pc, #760]	@ (8008fa0 <UART_SetConfig+0x328>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	6812      	ldr	r2, [r2, #0]
 8008cae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4ab3      	ldr	r2, [pc, #716]	@ (8008fa4 <UART_SetConfig+0x32c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	4baf      	ldr	r3, [pc, #700]	@ (8008fa8 <UART_SetConfig+0x330>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	6812      	ldr	r2, [r2, #0]
 8008cf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cf4:	430b      	orrs	r3, r1
 8008cf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	f023 010f 	bic.w	r1, r3, #15
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4aa6      	ldr	r2, [pc, #664]	@ (8008fac <UART_SetConfig+0x334>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d177      	bne.n	8008e08 <UART_SetConfig+0x190>
 8008d18:	4ba5      	ldr	r3, [pc, #660]	@ (8008fb0 <UART_SetConfig+0x338>)
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d20:	2b28      	cmp	r3, #40	@ 0x28
 8008d22:	d86d      	bhi.n	8008e00 <UART_SetConfig+0x188>
 8008d24:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <UART_SetConfig+0xb4>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008dd1 	.word	0x08008dd1
 8008d30:	08008e01 	.word	0x08008e01
 8008d34:	08008e01 	.word	0x08008e01
 8008d38:	08008e01 	.word	0x08008e01
 8008d3c:	08008e01 	.word	0x08008e01
 8008d40:	08008e01 	.word	0x08008e01
 8008d44:	08008e01 	.word	0x08008e01
 8008d48:	08008e01 	.word	0x08008e01
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008e01 	.word	0x08008e01
 8008d54:	08008e01 	.word	0x08008e01
 8008d58:	08008e01 	.word	0x08008e01
 8008d5c:	08008e01 	.word	0x08008e01
 8008d60:	08008e01 	.word	0x08008e01
 8008d64:	08008e01 	.word	0x08008e01
 8008d68:	08008e01 	.word	0x08008e01
 8008d6c:	08008de1 	.word	0x08008de1
 8008d70:	08008e01 	.word	0x08008e01
 8008d74:	08008e01 	.word	0x08008e01
 8008d78:	08008e01 	.word	0x08008e01
 8008d7c:	08008e01 	.word	0x08008e01
 8008d80:	08008e01 	.word	0x08008e01
 8008d84:	08008e01 	.word	0x08008e01
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008de9 	.word	0x08008de9
 8008d90:	08008e01 	.word	0x08008e01
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008e01 	.word	0x08008e01
 8008da0:	08008e01 	.word	0x08008e01
 8008da4:	08008e01 	.word	0x08008e01
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
 8008dc8:	08008e01 	.word	0x08008e01
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e326      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e322      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008de0:	2308      	movs	r3, #8
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e31e      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e31a      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008df0:	2320      	movs	r3, #32
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e316      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008df8:	2340      	movs	r3, #64	@ 0x40
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e312      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e00:	2380      	movs	r3, #128	@ 0x80
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e30e      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a69      	ldr	r2, [pc, #420]	@ (8008fb4 <UART_SetConfig+0x33c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d130      	bne.n	8008e74 <UART_SetConfig+0x1fc>
 8008e12:	4b67      	ldr	r3, [pc, #412]	@ (8008fb0 <UART_SetConfig+0x338>)
 8008e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d826      	bhi.n	8008e6c <UART_SetConfig+0x1f4>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <UART_SetConfig+0x1ac>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e3d 	.word	0x08008e3d
 8008e28:	08008e45 	.word	0x08008e45
 8008e2c:	08008e4d 	.word	0x08008e4d
 8008e30:	08008e55 	.word	0x08008e55
 8008e34:	08008e5d 	.word	0x08008e5d
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e2f0      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e2ec      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e2e8      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e2e4      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e2e0      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e2dc      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e2d8      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a4f      	ldr	r2, [pc, #316]	@ (8008fb8 <UART_SetConfig+0x340>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d130      	bne.n	8008ee0 <UART_SetConfig+0x268>
 8008e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8008fb0 <UART_SetConfig+0x338>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d826      	bhi.n	8008ed8 <UART_SetConfig+0x260>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x218>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e2ba      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e2b6      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e2b2      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e2ae      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e2aa      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e2a6      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e2a2      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a35      	ldr	r2, [pc, #212]	@ (8008fbc <UART_SetConfig+0x344>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d130      	bne.n	8008f4c <UART_SetConfig+0x2d4>
 8008eea:	4b31      	ldr	r3, [pc, #196]	@ (8008fb0 <UART_SetConfig+0x338>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d826      	bhi.n	8008f44 <UART_SetConfig+0x2cc>
 8008ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <UART_SetConfig+0x284>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f3d 	.word	0x08008f3d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e284      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e280      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f24:	2308      	movs	r3, #8
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e27c      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e278      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f34:	2320      	movs	r3, #32
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e274      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e270      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e26c      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc0 <UART_SetConfig+0x348>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d142      	bne.n	8008fdc <UART_SetConfig+0x364>
 8008f56:	4b16      	ldr	r3, [pc, #88]	@ (8008fb0 <UART_SetConfig+0x338>)
 8008f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d838      	bhi.n	8008fd4 <UART_SetConfig+0x35c>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x2f0>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008f81 	.word	0x08008f81
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	08008fc5 	.word	0x08008fc5
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e24e      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e24a      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e246      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e242      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008fa0:	cfff69f3 	.word	0xcfff69f3
 8008fa4:	58000c00 	.word	0x58000c00
 8008fa8:	11fff4ff 	.word	0x11fff4ff
 8008fac:	40011000 	.word	0x40011000
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	40004400 	.word	0x40004400
 8008fb8:	40004800 	.word	0x40004800
 8008fbc:	40004c00 	.word	0x40004c00
 8008fc0:	40005000 	.word	0x40005000
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e22c      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008fcc:	2340      	movs	r3, #64	@ 0x40
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e228      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e224      	b.n	8009426 <UART_SetConfig+0x7ae>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4ab1      	ldr	r2, [pc, #708]	@ (80092a8 <UART_SetConfig+0x630>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d176      	bne.n	80090d4 <UART_SetConfig+0x45c>
 8008fe6:	4bb1      	ldr	r3, [pc, #708]	@ (80092ac <UART_SetConfig+0x634>)
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fee:	2b28      	cmp	r3, #40	@ 0x28
 8008ff0:	d86c      	bhi.n	80090cc <UART_SetConfig+0x454>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <UART_SetConfig+0x380>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	0800909d 	.word	0x0800909d
 8008ffc:	080090cd 	.word	0x080090cd
 8009000:	080090cd 	.word	0x080090cd
 8009004:	080090cd 	.word	0x080090cd
 8009008:	080090cd 	.word	0x080090cd
 800900c:	080090cd 	.word	0x080090cd
 8009010:	080090cd 	.word	0x080090cd
 8009014:	080090cd 	.word	0x080090cd
 8009018:	080090a5 	.word	0x080090a5
 800901c:	080090cd 	.word	0x080090cd
 8009020:	080090cd 	.word	0x080090cd
 8009024:	080090cd 	.word	0x080090cd
 8009028:	080090cd 	.word	0x080090cd
 800902c:	080090cd 	.word	0x080090cd
 8009030:	080090cd 	.word	0x080090cd
 8009034:	080090cd 	.word	0x080090cd
 8009038:	080090ad 	.word	0x080090ad
 800903c:	080090cd 	.word	0x080090cd
 8009040:	080090cd 	.word	0x080090cd
 8009044:	080090cd 	.word	0x080090cd
 8009048:	080090cd 	.word	0x080090cd
 800904c:	080090cd 	.word	0x080090cd
 8009050:	080090cd 	.word	0x080090cd
 8009054:	080090cd 	.word	0x080090cd
 8009058:	080090b5 	.word	0x080090b5
 800905c:	080090cd 	.word	0x080090cd
 8009060:	080090cd 	.word	0x080090cd
 8009064:	080090cd 	.word	0x080090cd
 8009068:	080090cd 	.word	0x080090cd
 800906c:	080090cd 	.word	0x080090cd
 8009070:	080090cd 	.word	0x080090cd
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090bd 	.word	0x080090bd
 800907c:	080090cd 	.word	0x080090cd
 8009080:	080090cd 	.word	0x080090cd
 8009084:	080090cd 	.word	0x080090cd
 8009088:	080090cd 	.word	0x080090cd
 800908c:	080090cd 	.word	0x080090cd
 8009090:	080090cd 	.word	0x080090cd
 8009094:	080090cd 	.word	0x080090cd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e1c0      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090a4:	2304      	movs	r3, #4
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e1bc      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090ac:	2308      	movs	r3, #8
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e1b8      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090b4:	2310      	movs	r3, #16
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e1b4      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090bc:	2320      	movs	r3, #32
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e1b0      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090c4:	2340      	movs	r3, #64	@ 0x40
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e1ac      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e1a8      	b.n	8009426 <UART_SetConfig+0x7ae>
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a75      	ldr	r2, [pc, #468]	@ (80092b0 <UART_SetConfig+0x638>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d130      	bne.n	8009140 <UART_SetConfig+0x4c8>
 80090de:	4b73      	ldr	r3, [pc, #460]	@ (80092ac <UART_SetConfig+0x634>)
 80090e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d826      	bhi.n	8009138 <UART_SetConfig+0x4c0>
 80090ea:	a201      	add	r2, pc, #4	@ (adr r2, 80090f0 <UART_SetConfig+0x478>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009109 	.word	0x08009109
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009119 	.word	0x08009119
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009129 	.word	0x08009129
 8009104:	08009131 	.word	0x08009131
 8009108:	2300      	movs	r3, #0
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e18a      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e186      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e182      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e17e      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009128:	2320      	movs	r3, #32
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e17a      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e176      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009138:	2380      	movs	r3, #128	@ 0x80
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e172      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a5b      	ldr	r2, [pc, #364]	@ (80092b4 <UART_SetConfig+0x63c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d130      	bne.n	80091ac <UART_SetConfig+0x534>
 800914a:	4b58      	ldr	r3, [pc, #352]	@ (80092ac <UART_SetConfig+0x634>)
 800914c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	2b05      	cmp	r3, #5
 8009154:	d826      	bhi.n	80091a4 <UART_SetConfig+0x52c>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <UART_SetConfig+0x4e4>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009175 	.word	0x08009175
 8009160:	0800917d 	.word	0x0800917d
 8009164:	08009185 	.word	0x08009185
 8009168:	0800918d 	.word	0x0800918d
 800916c:	08009195 	.word	0x08009195
 8009170:	0800919d 	.word	0x0800919d
 8009174:	2300      	movs	r3, #0
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e154      	b.n	8009426 <UART_SetConfig+0x7ae>
 800917c:	2304      	movs	r3, #4
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e150      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009184:	2308      	movs	r3, #8
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e14c      	b.n	8009426 <UART_SetConfig+0x7ae>
 800918c:	2310      	movs	r3, #16
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e148      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009194:	2320      	movs	r3, #32
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e144      	b.n	8009426 <UART_SetConfig+0x7ae>
 800919c:	2340      	movs	r3, #64	@ 0x40
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e140      	b.n	8009426 <UART_SetConfig+0x7ae>
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e13c      	b.n	8009426 <UART_SetConfig+0x7ae>
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a41      	ldr	r2, [pc, #260]	@ (80092b8 <UART_SetConfig+0x640>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	f040 8082 	bne.w	80092bc <UART_SetConfig+0x644>
 80091b8:	4b3c      	ldr	r3, [pc, #240]	@ (80092ac <UART_SetConfig+0x634>)
 80091ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091c0:	2b28      	cmp	r3, #40	@ 0x28
 80091c2:	d86d      	bhi.n	80092a0 <UART_SetConfig+0x628>
 80091c4:	a201      	add	r2, pc, #4	@ (adr r2, 80091cc <UART_SetConfig+0x554>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	08009271 	.word	0x08009271
 80091d0:	080092a1 	.word	0x080092a1
 80091d4:	080092a1 	.word	0x080092a1
 80091d8:	080092a1 	.word	0x080092a1
 80091dc:	080092a1 	.word	0x080092a1
 80091e0:	080092a1 	.word	0x080092a1
 80091e4:	080092a1 	.word	0x080092a1
 80091e8:	080092a1 	.word	0x080092a1
 80091ec:	08009279 	.word	0x08009279
 80091f0:	080092a1 	.word	0x080092a1
 80091f4:	080092a1 	.word	0x080092a1
 80091f8:	080092a1 	.word	0x080092a1
 80091fc:	080092a1 	.word	0x080092a1
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092a1 	.word	0x080092a1
 8009208:	080092a1 	.word	0x080092a1
 800920c:	08009281 	.word	0x08009281
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092a1 	.word	0x080092a1
 8009218:	080092a1 	.word	0x080092a1
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080092a1 	.word	0x080092a1
 8009224:	080092a1 	.word	0x080092a1
 8009228:	080092a1 	.word	0x080092a1
 800922c:	08009289 	.word	0x08009289
 8009230:	080092a1 	.word	0x080092a1
 8009234:	080092a1 	.word	0x080092a1
 8009238:	080092a1 	.word	0x080092a1
 800923c:	080092a1 	.word	0x080092a1
 8009240:	080092a1 	.word	0x080092a1
 8009244:	080092a1 	.word	0x080092a1
 8009248:	080092a1 	.word	0x080092a1
 800924c:	08009291 	.word	0x08009291
 8009250:	080092a1 	.word	0x080092a1
 8009254:	080092a1 	.word	0x080092a1
 8009258:	080092a1 	.word	0x080092a1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092a1 	.word	0x080092a1
 8009264:	080092a1 	.word	0x080092a1
 8009268:	080092a1 	.word	0x080092a1
 800926c:	08009299 	.word	0x08009299
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e0d6      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e0d2      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e0ce      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e0ca      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e0c6      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009298:	2340      	movs	r3, #64	@ 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e0c2      	b.n	8009426 <UART_SetConfig+0x7ae>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e0be      	b.n	8009426 <UART_SetConfig+0x7ae>
 80092a8:	40011400 	.word	0x40011400
 80092ac:	58024400 	.word	0x58024400
 80092b0:	40007800 	.word	0x40007800
 80092b4:	40007c00 	.word	0x40007c00
 80092b8:	40011800 	.word	0x40011800
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4aad      	ldr	r2, [pc, #692]	@ (8009578 <UART_SetConfig+0x900>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d176      	bne.n	80093b4 <UART_SetConfig+0x73c>
 80092c6:	4bad      	ldr	r3, [pc, #692]	@ (800957c <UART_SetConfig+0x904>)
 80092c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092ce:	2b28      	cmp	r3, #40	@ 0x28
 80092d0:	d86c      	bhi.n	80093ac <UART_SetConfig+0x734>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <UART_SetConfig+0x660>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	0800937d 	.word	0x0800937d
 80092dc:	080093ad 	.word	0x080093ad
 80092e0:	080093ad 	.word	0x080093ad
 80092e4:	080093ad 	.word	0x080093ad
 80092e8:	080093ad 	.word	0x080093ad
 80092ec:	080093ad 	.word	0x080093ad
 80092f0:	080093ad 	.word	0x080093ad
 80092f4:	080093ad 	.word	0x080093ad
 80092f8:	08009385 	.word	0x08009385
 80092fc:	080093ad 	.word	0x080093ad
 8009300:	080093ad 	.word	0x080093ad
 8009304:	080093ad 	.word	0x080093ad
 8009308:	080093ad 	.word	0x080093ad
 800930c:	080093ad 	.word	0x080093ad
 8009310:	080093ad 	.word	0x080093ad
 8009314:	080093ad 	.word	0x080093ad
 8009318:	0800938d 	.word	0x0800938d
 800931c:	080093ad 	.word	0x080093ad
 8009320:	080093ad 	.word	0x080093ad
 8009324:	080093ad 	.word	0x080093ad
 8009328:	080093ad 	.word	0x080093ad
 800932c:	080093ad 	.word	0x080093ad
 8009330:	080093ad 	.word	0x080093ad
 8009334:	080093ad 	.word	0x080093ad
 8009338:	08009395 	.word	0x08009395
 800933c:	080093ad 	.word	0x080093ad
 8009340:	080093ad 	.word	0x080093ad
 8009344:	080093ad 	.word	0x080093ad
 8009348:	080093ad 	.word	0x080093ad
 800934c:	080093ad 	.word	0x080093ad
 8009350:	080093ad 	.word	0x080093ad
 8009354:	080093ad 	.word	0x080093ad
 8009358:	0800939d 	.word	0x0800939d
 800935c:	080093ad 	.word	0x080093ad
 8009360:	080093ad 	.word	0x080093ad
 8009364:	080093ad 	.word	0x080093ad
 8009368:	080093ad 	.word	0x080093ad
 800936c:	080093ad 	.word	0x080093ad
 8009370:	080093ad 	.word	0x080093ad
 8009374:	080093ad 	.word	0x080093ad
 8009378:	080093a5 	.word	0x080093a5
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e050      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009384:	2304      	movs	r3, #4
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e04c      	b.n	8009426 <UART_SetConfig+0x7ae>
 800938c:	2308      	movs	r3, #8
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e048      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009394:	2310      	movs	r3, #16
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e044      	b.n	8009426 <UART_SetConfig+0x7ae>
 800939c:	2320      	movs	r3, #32
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e040      	b.n	8009426 <UART_SetConfig+0x7ae>
 80093a4:	2340      	movs	r3, #64	@ 0x40
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e03c      	b.n	8009426 <UART_SetConfig+0x7ae>
 80093ac:	2380      	movs	r3, #128	@ 0x80
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e038      	b.n	8009426 <UART_SetConfig+0x7ae>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a71      	ldr	r2, [pc, #452]	@ (8009580 <UART_SetConfig+0x908>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d130      	bne.n	8009420 <UART_SetConfig+0x7a8>
 80093be:	4b6f      	ldr	r3, [pc, #444]	@ (800957c <UART_SetConfig+0x904>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d826      	bhi.n	8009418 <UART_SetConfig+0x7a0>
 80093ca:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <UART_SetConfig+0x758>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	080093e9 	.word	0x080093e9
 80093d4:	080093f1 	.word	0x080093f1
 80093d8:	080093f9 	.word	0x080093f9
 80093dc:	08009401 	.word	0x08009401
 80093e0:	08009409 	.word	0x08009409
 80093e4:	08009411 	.word	0x08009411
 80093e8:	2302      	movs	r3, #2
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e01a      	b.n	8009426 <UART_SetConfig+0x7ae>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e016      	b.n	8009426 <UART_SetConfig+0x7ae>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e012      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e00e      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009408:	2320      	movs	r3, #32
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e00a      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009410:	2340      	movs	r3, #64	@ 0x40
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e006      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009418:	2380      	movs	r3, #128	@ 0x80
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e002      	b.n	8009426 <UART_SetConfig+0x7ae>
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a55      	ldr	r2, [pc, #340]	@ (8009580 <UART_SetConfig+0x908>)
 800942c:	4293      	cmp	r3, r2
 800942e:	f040 80f8 	bne.w	8009622 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009432:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009436:	2b20      	cmp	r3, #32
 8009438:	dc46      	bgt.n	80094c8 <UART_SetConfig+0x850>
 800943a:	2b02      	cmp	r3, #2
 800943c:	db75      	blt.n	800952a <UART_SetConfig+0x8b2>
 800943e:	3b02      	subs	r3, #2
 8009440:	2b1e      	cmp	r3, #30
 8009442:	d872      	bhi.n	800952a <UART_SetConfig+0x8b2>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x7d4>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	080094cf 	.word	0x080094cf
 8009450:	0800952b 	.word	0x0800952b
 8009454:	080094d7 	.word	0x080094d7
 8009458:	0800952b 	.word	0x0800952b
 800945c:	0800952b 	.word	0x0800952b
 8009460:	0800952b 	.word	0x0800952b
 8009464:	080094e7 	.word	0x080094e7
 8009468:	0800952b 	.word	0x0800952b
 800946c:	0800952b 	.word	0x0800952b
 8009470:	0800952b 	.word	0x0800952b
 8009474:	0800952b 	.word	0x0800952b
 8009478:	0800952b 	.word	0x0800952b
 800947c:	0800952b 	.word	0x0800952b
 8009480:	0800952b 	.word	0x0800952b
 8009484:	080094f7 	.word	0x080094f7
 8009488:	0800952b 	.word	0x0800952b
 800948c:	0800952b 	.word	0x0800952b
 8009490:	0800952b 	.word	0x0800952b
 8009494:	0800952b 	.word	0x0800952b
 8009498:	0800952b 	.word	0x0800952b
 800949c:	0800952b 	.word	0x0800952b
 80094a0:	0800952b 	.word	0x0800952b
 80094a4:	0800952b 	.word	0x0800952b
 80094a8:	0800952b 	.word	0x0800952b
 80094ac:	0800952b 	.word	0x0800952b
 80094b0:	0800952b 	.word	0x0800952b
 80094b4:	0800952b 	.word	0x0800952b
 80094b8:	0800952b 	.word	0x0800952b
 80094bc:	0800952b 	.word	0x0800952b
 80094c0:	0800952b 	.word	0x0800952b
 80094c4:	0800951d 	.word	0x0800951d
 80094c8:	2b40      	cmp	r3, #64	@ 0x40
 80094ca:	d02a      	beq.n	8009522 <UART_SetConfig+0x8aa>
 80094cc:	e02d      	b.n	800952a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094ce:	f7fd fc75 	bl	8006dbc <HAL_RCCEx_GetD3PCLK1Freq>
 80094d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094d4:	e02f      	b.n	8009536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fd fc84 	bl	8006de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e4:	e027      	b.n	8009536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e6:	f107 0318 	add.w	r3, r7, #24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fdd0 	bl	8007090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e01f      	b.n	8009536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f6:	4b21      	ldr	r3, [pc, #132]	@ (800957c <UART_SetConfig+0x904>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009502:	4b1e      	ldr	r3, [pc, #120]	@ (800957c <UART_SetConfig+0x904>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	4a1d      	ldr	r2, [pc, #116]	@ (8009584 <UART_SetConfig+0x90c>)
 800950e:	fa22 f303 	lsr.w	r3, r2, r3
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009514:	e00f      	b.n	8009536 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009516:	4b1b      	ldr	r3, [pc, #108]	@ (8009584 <UART_SetConfig+0x90c>)
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951a:	e00c      	b.n	8009536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800951c:	4b1a      	ldr	r3, [pc, #104]	@ (8009588 <UART_SetConfig+0x910>)
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009520:	e009      	b.n	8009536 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009528:	e005      	b.n	8009536 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 81ee 	beq.w	800991a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	4a12      	ldr	r2, [pc, #72]	@ (800958c <UART_SetConfig+0x914>)
 8009544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009548:	461a      	mov	r2, r3
 800954a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	4413      	add	r3, r2
 800955c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800955e:	429a      	cmp	r2, r3
 8009560:	d305      	bcc.n	800956e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956a:	429a      	cmp	r2, r3
 800956c:	d910      	bls.n	8009590 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009574:	e1d1      	b.n	800991a <UART_SetConfig+0xca2>
 8009576:	bf00      	nop
 8009578:	40011c00 	.word	0x40011c00
 800957c:	58024400 	.word	0x58024400
 8009580:	58000c00 	.word	0x58000c00
 8009584:	03d09000 	.word	0x03d09000
 8009588:	003d0900 	.word	0x003d0900
 800958c:	0800c3b4 	.word	0x0800c3b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009592:	2200      	movs	r2, #0
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	60fa      	str	r2, [r7, #12]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	4ac0      	ldr	r2, [pc, #768]	@ (80098a0 <UART_SetConfig+0xc28>)
 800959e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2200      	movs	r2, #0
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095b2:	f7f6 ff0d 	bl	80003d0 <__aeabi_uldivmod>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4610      	mov	r0, r2
 80095bc:	4619      	mov	r1, r3
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	020b      	lsls	r3, r1, #8
 80095c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095cc:	0202      	lsls	r2, r0, #8
 80095ce:	6979      	ldr	r1, [r7, #20]
 80095d0:	6849      	ldr	r1, [r1, #4]
 80095d2:	0849      	lsrs	r1, r1, #1
 80095d4:	2000      	movs	r0, #0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4605      	mov	r5, r0
 80095da:	eb12 0804 	adds.w	r8, r2, r4
 80095de:	eb43 0905 	adc.w	r9, r3, r5
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	469a      	mov	sl, r3
 80095ea:	4693      	mov	fp, r2
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	4640      	mov	r0, r8
 80095f2:	4649      	mov	r1, r9
 80095f4:	f7f6 feec 	bl	80003d0 <__aeabi_uldivmod>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4613      	mov	r3, r2
 80095fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009606:	d308      	bcc.n	800961a <UART_SetConfig+0x9a2>
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800960e:	d204      	bcs.n	800961a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009616:	60da      	str	r2, [r3, #12]
 8009618:	e17f      	b.n	800991a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009620:	e17b      	b.n	800991a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800962a:	f040 80bd 	bne.w	80097a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800962e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009632:	2b20      	cmp	r3, #32
 8009634:	dc48      	bgt.n	80096c8 <UART_SetConfig+0xa50>
 8009636:	2b00      	cmp	r3, #0
 8009638:	db7b      	blt.n	8009732 <UART_SetConfig+0xaba>
 800963a:	2b20      	cmp	r3, #32
 800963c:	d879      	bhi.n	8009732 <UART_SetConfig+0xaba>
 800963e:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <UART_SetConfig+0x9cc>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	080096cf 	.word	0x080096cf
 8009648:	080096d7 	.word	0x080096d7
 800964c:	08009733 	.word	0x08009733
 8009650:	08009733 	.word	0x08009733
 8009654:	080096df 	.word	0x080096df
 8009658:	08009733 	.word	0x08009733
 800965c:	08009733 	.word	0x08009733
 8009660:	08009733 	.word	0x08009733
 8009664:	080096ef 	.word	0x080096ef
 8009668:	08009733 	.word	0x08009733
 800966c:	08009733 	.word	0x08009733
 8009670:	08009733 	.word	0x08009733
 8009674:	08009733 	.word	0x08009733
 8009678:	08009733 	.word	0x08009733
 800967c:	08009733 	.word	0x08009733
 8009680:	08009733 	.word	0x08009733
 8009684:	080096ff 	.word	0x080096ff
 8009688:	08009733 	.word	0x08009733
 800968c:	08009733 	.word	0x08009733
 8009690:	08009733 	.word	0x08009733
 8009694:	08009733 	.word	0x08009733
 8009698:	08009733 	.word	0x08009733
 800969c:	08009733 	.word	0x08009733
 80096a0:	08009733 	.word	0x08009733
 80096a4:	08009733 	.word	0x08009733
 80096a8:	08009733 	.word	0x08009733
 80096ac:	08009733 	.word	0x08009733
 80096b0:	08009733 	.word	0x08009733
 80096b4:	08009733 	.word	0x08009733
 80096b8:	08009733 	.word	0x08009733
 80096bc:	08009733 	.word	0x08009733
 80096c0:	08009733 	.word	0x08009733
 80096c4:	08009725 	.word	0x08009725
 80096c8:	2b40      	cmp	r3, #64	@ 0x40
 80096ca:	d02e      	beq.n	800972a <UART_SetConfig+0xab2>
 80096cc:	e031      	b.n	8009732 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ce:	f7fc f9a9 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80096d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096d4:	e033      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096d6:	f7fc f9bb 	bl	8005a50 <HAL_RCC_GetPCLK2Freq>
 80096da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096dc:	e02f      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fd fb80 	bl	8006de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ec:	e027      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ee:	f107 0318 	add.w	r3, r7, #24
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fd fccc 	bl	8007090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fc:	e01f      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096fe:	4b69      	ldr	r3, [pc, #420]	@ (80098a4 <UART_SetConfig+0xc2c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800970a:	4b66      	ldr	r3, [pc, #408]	@ (80098a4 <UART_SetConfig+0xc2c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	08db      	lsrs	r3, r3, #3
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	4a64      	ldr	r2, [pc, #400]	@ (80098a8 <UART_SetConfig+0xc30>)
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800971c:	e00f      	b.n	800973e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800971e:	4b62      	ldr	r3, [pc, #392]	@ (80098a8 <UART_SetConfig+0xc30>)
 8009720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009722:	e00c      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009724:	4b61      	ldr	r3, [pc, #388]	@ (80098ac <UART_SetConfig+0xc34>)
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009728:	e009      	b.n	800973e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009730:	e005      	b.n	800973e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800973c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800973e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80ea 	beq.w	800991a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974a:	4a55      	ldr	r2, [pc, #340]	@ (80098a0 <UART_SetConfig+0xc28>)
 800974c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009750:	461a      	mov	r2, r3
 8009752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009754:	fbb3 f3f2 	udiv	r3, r3, r2
 8009758:	005a      	lsls	r2, r3, #1
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	441a      	add	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	2b0f      	cmp	r3, #15
 8009770:	d916      	bls.n	80097a0 <UART_SetConfig+0xb28>
 8009772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009778:	d212      	bcs.n	80097a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	b29b      	uxth	r3, r3
 800977e:	f023 030f 	bic.w	r3, r3, #15
 8009782:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	b29a      	uxth	r2, r3
 8009790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009792:	4313      	orrs	r3, r2
 8009794:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800979c:	60da      	str	r2, [r3, #12]
 800979e:	e0bc      	b.n	800991a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097a6:	e0b8      	b.n	800991a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	dc4b      	bgt.n	8009848 <UART_SetConfig+0xbd0>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f2c0 8087 	blt.w	80098c4 <UART_SetConfig+0xc4c>
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	f200 8084 	bhi.w	80098c4 <UART_SetConfig+0xc4c>
 80097bc:	a201      	add	r2, pc, #4	@ (adr r2, 80097c4 <UART_SetConfig+0xb4c>)
 80097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c2:	bf00      	nop
 80097c4:	0800984f 	.word	0x0800984f
 80097c8:	08009857 	.word	0x08009857
 80097cc:	080098c5 	.word	0x080098c5
 80097d0:	080098c5 	.word	0x080098c5
 80097d4:	0800985f 	.word	0x0800985f
 80097d8:	080098c5 	.word	0x080098c5
 80097dc:	080098c5 	.word	0x080098c5
 80097e0:	080098c5 	.word	0x080098c5
 80097e4:	0800986f 	.word	0x0800986f
 80097e8:	080098c5 	.word	0x080098c5
 80097ec:	080098c5 	.word	0x080098c5
 80097f0:	080098c5 	.word	0x080098c5
 80097f4:	080098c5 	.word	0x080098c5
 80097f8:	080098c5 	.word	0x080098c5
 80097fc:	080098c5 	.word	0x080098c5
 8009800:	080098c5 	.word	0x080098c5
 8009804:	0800987f 	.word	0x0800987f
 8009808:	080098c5 	.word	0x080098c5
 800980c:	080098c5 	.word	0x080098c5
 8009810:	080098c5 	.word	0x080098c5
 8009814:	080098c5 	.word	0x080098c5
 8009818:	080098c5 	.word	0x080098c5
 800981c:	080098c5 	.word	0x080098c5
 8009820:	080098c5 	.word	0x080098c5
 8009824:	080098c5 	.word	0x080098c5
 8009828:	080098c5 	.word	0x080098c5
 800982c:	080098c5 	.word	0x080098c5
 8009830:	080098c5 	.word	0x080098c5
 8009834:	080098c5 	.word	0x080098c5
 8009838:	080098c5 	.word	0x080098c5
 800983c:	080098c5 	.word	0x080098c5
 8009840:	080098c5 	.word	0x080098c5
 8009844:	080098b7 	.word	0x080098b7
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	d037      	beq.n	80098bc <UART_SetConfig+0xc44>
 800984c:	e03a      	b.n	80098c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800984e:	f7fc f8e9 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8009852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009854:	e03c      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009856:	f7fc f8fb 	bl	8005a50 <HAL_RCC_GetPCLK2Freq>
 800985a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800985c:	e038      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800985e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009862:	4618      	mov	r0, r3
 8009864:	f7fd fac0 	bl	8006de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986c:	e030      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986e:	f107 0318 	add.w	r3, r7, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f7fd fc0c 	bl	8007090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987c:	e028      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800987e:	4b09      	ldr	r3, [pc, #36]	@ (80098a4 <UART_SetConfig+0xc2c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d012      	beq.n	80098b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800988a:	4b06      	ldr	r3, [pc, #24]	@ (80098a4 <UART_SetConfig+0xc2c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	08db      	lsrs	r3, r3, #3
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	4a04      	ldr	r2, [pc, #16]	@ (80098a8 <UART_SetConfig+0xc30>)
 8009896:	fa22 f303 	lsr.w	r3, r2, r3
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800989c:	e018      	b.n	80098d0 <UART_SetConfig+0xc58>
 800989e:	bf00      	nop
 80098a0:	0800c3b4 	.word	0x0800c3b4
 80098a4:	58024400 	.word	0x58024400
 80098a8:	03d09000 	.word	0x03d09000
 80098ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b24      	ldr	r3, [pc, #144]	@ (8009944 <UART_SetConfig+0xccc>)
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b4:	e00c      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098b6:	4b24      	ldr	r3, [pc, #144]	@ (8009948 <UART_SetConfig+0xcd0>)
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ba:	e009      	b.n	80098d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c2:	e005      	b.n	80098d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098ce:	bf00      	nop
    }

    if (pclk != 0U)
 80098d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d021      	beq.n	800991a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	4a1c      	ldr	r2, [pc, #112]	@ (800994c <UART_SetConfig+0xcd4>)
 80098dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	085b      	lsrs	r3, r3, #1
 80098ee:	441a      	add	r2, r3
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	2b0f      	cmp	r3, #15
 80098fe:	d909      	bls.n	8009914 <UART_SetConfig+0xc9c>
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009906:	d205      	bcs.n	8009914 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	b29a      	uxth	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	60da      	str	r2, [r3, #12]
 8009912:	e002      	b.n	800991a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2201      	movs	r2, #1
 800991e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2201      	movs	r2, #1
 8009926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2200      	movs	r2, #0
 800992e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2200      	movs	r2, #0
 8009934:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009936:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800993a:	4618      	mov	r0, r3
 800993c:	3748      	adds	r7, #72	@ 0x48
 800993e:	46bd      	mov	sp, r7
 8009940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009944:	03d09000 	.word	0x03d09000
 8009948:	003d0900 	.word	0x003d0900
 800994c:	0800c3b4 	.word	0x0800c3b4

08009950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	430a      	orrs	r2, r1
 800999a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01a      	beq.n	8009a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a4e:	d10a      	bne.n	8009a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  }
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b098      	sub	sp, #96	@ 0x60
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009aa4:	f7f7 fea0 	bl	80017e8 <HAL_GetTick>
 8009aa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d12f      	bne.n	8009b18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f88e 	bl	8009be8 <UART_WaitOnFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d022      	beq.n	8009b18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	461a      	mov	r2, r3
 8009aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e6      	bne.n	8009ad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2220      	movs	r2, #32
 8009b08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e063      	b.n	8009be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d149      	bne.n	8009bba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f857 	bl	8009be8 <UART_WaitOnFlagUntilTimeout>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d03c      	beq.n	8009bba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e6      	bne.n	8009b40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3308      	adds	r3, #8
 8009b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f023 0301 	bic.w	r3, r3, #1
 8009b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b92:	61fa      	str	r2, [r7, #28]
 8009b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	69b9      	ldr	r1, [r7, #24]
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e5      	bne.n	8009b72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e012      	b.n	8009be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3758      	adds	r7, #88	@ 0x58
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf8:	e04f      	b.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d04b      	beq.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c02:	f7f7 fdf1 	bl	80017e8 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d302      	bcc.n	8009c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e04e      	b.n	8009cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d037      	beq.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b80      	cmp	r3, #128	@ 0x80
 8009c2e:	d034      	beq.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b40      	cmp	r3, #64	@ 0x40
 8009c34:	d031      	beq.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f003 0308 	and.w	r3, r3, #8
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d110      	bne.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2208      	movs	r2, #8
 8009c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f921 	bl	8009e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2208      	movs	r2, #8
 8009c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e029      	b.n	8009cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c74:	d111      	bne.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f907 	bl	8009e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e00f      	b.n	8009cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69da      	ldr	r2, [r3, #28]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	bf0c      	ite	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	2300      	movne	r3, #0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d0a0      	beq.n	8009bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b096      	sub	sp, #88	@ 0x58
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2222      	movs	r2, #34	@ 0x22
 8009cec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d02d      	beq.n	8009d56 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d00:	4a40      	ldr	r2, [pc, #256]	@ (8009e04 <UART_Start_Receive_DMA+0x140>)
 8009d02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e08 <UART_Start_Receive_DMA+0x144>)
 8009d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d14:	4a3d      	ldr	r2, [pc, #244]	@ (8009e0c <UART_Start_Receive_DMA+0x148>)
 8009d16:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1e:	2200      	movs	r2, #0
 8009d20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3324      	adds	r3, #36	@ 0x24
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d34:	461a      	mov	r2, r3
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	f7f8 f9ee 	bl	8002118 <HAL_DMA_Start_IT>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2210      	movs	r2, #16
 8009d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e051      	b.n	8009dfa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d018      	beq.n	8009d90 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d7e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e6      	bne.n	8009d5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3308      	adds	r3, #8
 8009dae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009db0:	637a      	str	r2, [r7, #52]	@ 0x34
 8009db2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009db6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e5      	bne.n	8009d90 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3308      	adds	r3, #8
 8009de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009de4:	623a      	str	r2, [r7, #32]
 8009de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	69f9      	ldr	r1, [r7, #28]
 8009dea:	6a3a      	ldr	r2, [r7, #32]
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e5      	bne.n	8009dc4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3758      	adds	r7, #88	@ 0x58
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	08009f61 	.word	0x08009f61
 8009e08:	0800a089 	.word	0x0800a089
 8009e0c:	0800a0c7 	.word	0x0800a0c7

08009e10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b08f      	sub	sp, #60	@ 0x3c
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e38:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6a:	61ba      	str	r2, [r7, #24]
 8009e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6979      	ldr	r1, [r7, #20]
 8009e70:	69ba      	ldr	r2, [r7, #24]
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	613b      	str	r3, [r7, #16]
   return(result);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e5      	bne.n	8009e4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e86:	bf00      	nop
 8009e88:	373c      	adds	r7, #60	@ 0x3c
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
	...

08009e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b095      	sub	sp, #84	@ 0x54
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e6      	bne.n	8009e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f5c <UART_EndRxTransfer+0xc8>)
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e5      	bne.n	8009ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d118      	bne.n	8009f3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f023 0310 	bic.w	r3, r3, #16
 8009f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f28:	61bb      	str	r3, [r7, #24]
 8009f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6979      	ldr	r1, [r7, #20]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	613b      	str	r3, [r7, #16]
   return(result);
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e6      	bne.n	8009f0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f50:	bf00      	nop
 8009f52:	3754      	adds	r7, #84	@ 0x54
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	effffffe 	.word	0xeffffffe

08009f60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b09c      	sub	sp, #112	@ 0x70
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f76:	d071      	beq.n	800a05c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fa0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e6      	bne.n	8009f80 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3308      	adds	r3, #8
 8009fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	e853 3f00 	ldrex	r3, [r3]
 8009ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3308      	adds	r3, #8
 800a004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a006:	633a      	str	r2, [r7, #48]	@ 0x30
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a00e:	e841 2300 	strex	r3, r2, [r1]
 800a012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e5      	bne.n	8009fe6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a01a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01c:	2220      	movs	r2, #32
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d118      	bne.n	800a05c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	60fb      	str	r3, [r7, #12]
   return(result);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0310 	bic.w	r3, r3, #16
 800a03e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	617b      	str	r3, [r7, #20]
   return(result);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a05e:	2200      	movs	r2, #0
 800a060:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d107      	bne.n	800a07a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a06c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a070:	4619      	mov	r1, r3
 800a072:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a074:	f7fe fdf4 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a078:	e002      	b.n	800a080 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a07a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a07c:	f000 fcf2 	bl	800aa64 <HAL_UART_RxCpltCallback>
}
 800a080:	bf00      	nop
 800a082:	3770      	adds	r7, #112	@ 0x70
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a094:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d109      	bne.n	800a0b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7fe fdd5 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0b6:	e002      	b.n	800a0be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7fe fdbd 	bl	8008c38 <HAL_UART_RxHalfCpltCallback>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ee:	2b80      	cmp	r3, #128	@ 0x80
 800a0f0:	d109      	bne.n	800a106 <UART_DMAError+0x40>
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b21      	cmp	r3, #33	@ 0x21
 800a0f6:	d106      	bne.n	800a106 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a100:	6978      	ldr	r0, [r7, #20]
 800a102:	f7ff fe85 	bl	8009e10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a110:	2b40      	cmp	r3, #64	@ 0x40
 800a112:	d109      	bne.n	800a128 <UART_DMAError+0x62>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b22      	cmp	r3, #34	@ 0x22
 800a118:	d106      	bne.n	800a128 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a122:	6978      	ldr	r0, [r7, #20]
 800a124:	f7ff feb6 	bl	8009e94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a12e:	f043 0210 	orr.w	r2, r3, #16
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a138:	6978      	ldr	r0, [r7, #20]
 800a13a:	f7fe fd87 	bl	8008c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a13e:	bf00      	nop
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7fe fd71 	bl	8008c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a172:	b480      	push	{r7}
 800a174:	b08f      	sub	sp, #60	@ 0x3c
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a180:	2b21      	cmp	r3, #33	@ 0x21
 800a182:	d14c      	bne.n	800a21e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d132      	bne.n	800a1f6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e6      	bne.n	800a190 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e4:	6979      	ldr	r1, [r7, #20]
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	e841 2300 	strex	r3, r2, [r1]
 800a1ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e6      	bne.n	800a1c2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a1f4:	e013      	b.n	800a21e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a21e:	bf00      	nop
 800a220:	373c      	adds	r7, #60	@ 0x3c
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b091      	sub	sp, #68	@ 0x44
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a238:	2b21      	cmp	r3, #33	@ 0x21
 800a23a:	d151      	bne.n	800a2e0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a242:	b29b      	uxth	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d132      	bne.n	800a2ae <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	623b      	str	r3, [r7, #32]
   return(result);
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a25c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	633b      	str	r3, [r7, #48]	@ 0x30
 800a268:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e6      	bne.n	800a248 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	60fb      	str	r3, [r7, #12]
   return(result);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a298:	61fb      	str	r3, [r7, #28]
 800a29a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	69b9      	ldr	r1, [r7, #24]
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e6      	bne.n	800a27a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a2ac:	e018      	b.n	800a2e0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2c8:	1c9a      	adds	r2, r3, #2
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a2e0:	bf00      	nop
 800a2e2:	3744      	adds	r7, #68	@ 0x44
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b091      	sub	sp, #68	@ 0x44
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2fa:	2b21      	cmp	r3, #33	@ 0x21
 800a2fc:	d160      	bne.n	800a3c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a306:	e057      	b.n	800a3b8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a30e:	b29b      	uxth	r3, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	d133      	bne.n	800a37c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	623b      	str	r3, [r7, #32]
   return(result);
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a32a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3308      	adds	r3, #8
 800a332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a334:	633a      	str	r2, [r7, #48]	@ 0x30
 800a336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	e853 3f00 	ldrex	r3, [r3]
 800a354:	60fb      	str	r3, [r7, #12]
   return(result);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a366:	61fb      	str	r3, [r7, #28]
 800a368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	69b9      	ldr	r1, [r7, #24]
 800a36c:	69fa      	ldr	r2, [r7, #28]
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	617b      	str	r3, [r7, #20]
   return(result);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e6      	bne.n	800a348 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a37a:	e021      	b.n	800a3c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a386:	2b00      	cmp	r3, #0
 800a388:	d013      	beq.n	800a3b2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a38e:	781a      	ldrb	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a3b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a3b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1a4      	bne.n	800a308 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a3be:	e7ff      	b.n	800a3c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a3c0:	bf00      	nop
 800a3c2:	3744      	adds	r7, #68	@ 0x44
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b091      	sub	sp, #68	@ 0x44
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3da:	2b21      	cmp	r3, #33	@ 0x21
 800a3dc:	d165      	bne.n	800a4aa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a3e6:	e05c      	b.n	800a4a2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d133      	bne.n	800a45c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	e853 3f00 	ldrex	r3, [r3]
 800a402:	61fb      	str	r3, [r7, #28]
   return(result);
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a40a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a41a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e5      	bne.n	800a3f4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	60bb      	str	r3, [r7, #8]
   return(result);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a43c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6979      	ldr	r1, [r7, #20]
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	613b      	str	r3, [r7, #16]
   return(result);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e6      	bne.n	800a428 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a45a:	e026      	b.n	800a4aa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a466:	2b00      	cmp	r3, #0
 800a468:	d018      	beq.n	800a49c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a46e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a47e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a490:	b29b      	uxth	r3, r3
 800a492:	3b01      	subs	r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a49c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a4a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d19f      	bne.n	800a3e8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a4a8:	e7ff      	b.n	800a4aa <UART_TxISR_16BIT_FIFOEN+0xde>
 800a4aa:	bf00      	nop
 800a4ac:	3744      	adds	r7, #68	@ 0x44
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b088      	sub	sp, #32
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fac0 	bl	800aa84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a504:	bf00      	nop
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_UARTEx_DisableFifoMode+0x16>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e027      	b.n	800a5ae <HAL_UARTEx_DisableFifoMode+0x66>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2224      	movs	r2, #36	@ 0x24
 800a56a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0201 	bic.w	r2, r2, #1
 800a584:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a58c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e02d      	b.n	800a62e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2224      	movs	r2, #36	@ 0x24
 800a5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0201 	bic.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f850 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e02d      	b.n	800a6aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2224      	movs	r2, #36	@ 0x24
 800a65a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0201 	bic.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f812 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d108      	bne.n	800a6d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d4:	e031      	b.n	800a73a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d6:	2310      	movs	r3, #16
 800a6d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6da:	2310      	movs	r3, #16
 800a6dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	0e5b      	lsrs	r3, r3, #25
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	0f5b      	lsrs	r3, r3, #29
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0307 	and.w	r3, r3, #7
 800a6fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	7b3a      	ldrb	r2, [r7, #12]
 800a702:	4911      	ldr	r1, [pc, #68]	@ (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a704:	5c8a      	ldrb	r2, [r1, r2]
 800a706:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a70a:	7b3a      	ldrb	r2, [r7, #12]
 800a70c:	490f      	ldr	r1, [pc, #60]	@ (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a70e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a710:	fb93 f3f2 	sdiv	r3, r3, r2
 800a714:	b29a      	uxth	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	7b7a      	ldrb	r2, [r7, #13]
 800a720:	4909      	ldr	r1, [pc, #36]	@ (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a722:	5c8a      	ldrb	r2, [r1, r2]
 800a724:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a728:	7b7a      	ldrb	r2, [r7, #13]
 800a72a:	4908      	ldr	r1, [pc, #32]	@ (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a72c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	0800c3cc 	.word	0x0800c3cc
 800a74c:	0800c3d4 	.word	0x0800c3d4

0800a750 <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a75a:	f000 f88b 	bl	800a874 <HAL_ResumeTick>

//	HAL_UART_MspInit(&huart3);

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a75e:	4a09      	ldr	r2, [pc, #36]	@ (800a784 <HAL_GPIO_EXTI_Callback+0x34>)
 800a760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a764:	4808      	ldr	r0, [pc, #32]	@ (800a788 <HAL_GPIO_EXTI_Callback+0x38>)
 800a766:	f000 fcdb 	bl	800b120 <sniprintf>
 800a76a:	4603      	mov	r3, r0
 800a76c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a76e:	89fa      	ldrh	r2, [r7, #14]
 800a770:	2364      	movs	r3, #100	@ 0x64
 800a772:	4905      	ldr	r1, [pc, #20]	@ (800a788 <HAL_GPIO_EXTI_Callback+0x38>)
 800a774:	4805      	ldr	r0, [pc, #20]	@ (800a78c <HAL_GPIO_EXTI_Callback+0x3c>)
 800a776:	f7fd fd37 	bl	80081e8 <HAL_UART_Transmit>

//	HAL_NVIC_SystemReset();
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	0800c318 	.word	0x0800c318
 800a788:	24000674 	.word	0x24000674
 800a78c:	24000564 	.word	0x24000564

0800a790 <stopModeTask>:
//	}
}


void stopModeTask(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
	if(stopModeTriggered == true)
 800a796:	4b28      	ldr	r3, [pc, #160]	@ (800a838 <stopModeTask+0xa8>)
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d047      	beq.n	800a82e <stopModeTask+0x9e>
	{
		stopModeTriggered = false;
 800a79e:	4b26      	ldr	r3, [pc, #152]	@ (800a838 <stopModeTask+0xa8>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]

		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800a7aa:	4824      	ldr	r0, [pc, #144]	@ (800a83c <stopModeTask+0xac>)
 800a7ac:	f7fd fb88 	bl	8007ec0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <stopModeTask+0x2a>
		{
			Error_Handler();
 800a7b6:	f7f6 fc2d 	bl	8001014 <Error_Handler>
		}

	    uint16_t length = snprintf(res, 512, "Stop Mode Triggered \r\n");
 800a7ba:	4a21      	ldr	r2, [pc, #132]	@ (800a840 <stopModeTask+0xb0>)
 800a7bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a7c0:	4820      	ldr	r0, [pc, #128]	@ (800a844 <stopModeTask+0xb4>)
 800a7c2:	f000 fcad 	bl	800b120 <sniprintf>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	80bb      	strh	r3, [r7, #4]

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a7ca:	88ba      	ldrh	r2, [r7, #4]
 800a7cc:	2364      	movs	r3, #100	@ 0x64
 800a7ce:	491d      	ldr	r1, [pc, #116]	@ (800a844 <stopModeTask+0xb4>)
 800a7d0:	481d      	ldr	r0, [pc, #116]	@ (800a848 <stopModeTask+0xb8>)
 800a7d2:	f7fd fd09 	bl	80081e8 <HAL_UART_Transmit>

		HAL_SuspendTick();
 800a7d6:	f000 f83d 	bl	800a854 <HAL_SuspendTick>

		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a7da:	2101      	movs	r1, #1
 800a7dc:	2000      	movs	r0, #0
 800a7de:	f7fa f971 	bl	8004ac4 <HAL_PWR_EnterSTOPMode>


		//<<< Logic after wakeup
		SystemClock_Config();
 800a7e2:	f7f6 fba7 	bl	8000f34 <SystemClock_Config>

		HAL_ResumeTick();
 800a7e6:	f000 f845 	bl	800a874 <HAL_ResumeTick>

		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a7ea:	4814      	ldr	r0, [pc, #80]	@ (800a83c <stopModeTask+0xac>)
 800a7ec:	f7fd fbfa 	bl	8007fe4 <HAL_RTCEx_DeactivateWakeUpTimer>

		for(uint8_t i = 0; i < 5; i++)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	71fb      	strb	r3, [r7, #7]
 800a7f4:	e00a      	b.n	800a80c <stopModeTask+0x7c>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4814      	ldr	r0, [pc, #80]	@ (800a84c <stopModeTask+0xbc>)
 800a7fa:	f7fa f92e 	bl	8004a5a <HAL_GPIO_TogglePin>

			HAL_Delay(1000);
 800a7fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a802:	f7f6 fffd 	bl	8001800 <HAL_Delay>
		for(uint8_t i = 0; i < 5; i++)
 800a806:	79fb      	ldrb	r3, [r7, #7]
 800a808:	3301      	adds	r3, #1
 800a80a:	71fb      	strb	r3, [r7, #7]
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d9f1      	bls.n	800a7f6 <stopModeTask+0x66>
		}

	    length = snprintf(res, 512, "System woken up \r\n");
 800a812:	4a0f      	ldr	r2, [pc, #60]	@ (800a850 <stopModeTask+0xc0>)
 800a814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a818:	480a      	ldr	r0, [pc, #40]	@ (800a844 <stopModeTask+0xb4>)
 800a81a:	f000 fc81 	bl	800b120 <sniprintf>
 800a81e:	4603      	mov	r3, r0
 800a820:	80bb      	strh	r3, [r7, #4]

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a822:	88ba      	ldrh	r2, [r7, #4]
 800a824:	2364      	movs	r3, #100	@ 0x64
 800a826:	4907      	ldr	r1, [pc, #28]	@ (800a844 <stopModeTask+0xb4>)
 800a828:	4807      	ldr	r0, [pc, #28]	@ (800a848 <stopModeTask+0xb8>)
 800a82a:	f7fd fcdd 	bl	80081e8 <HAL_UART_Transmit>

	}
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2400073c 	.word	0x2400073c
 800a83c:	2400053c 	.word	0x2400053c
 800a840:	0800c32c 	.word	0x0800c32c
 800a844:	240006d8 	.word	0x240006d8
 800a848:	24000564 	.word	0x24000564
 800a84c:	58020400 	.word	0x58020400
 800a850:	0800c344 	.word	0x0800c344

0800a854 <HAL_SuspendTick>:
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}


void HAL_SuspendTick(void)
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a858:	4b05      	ldr	r3, [pc, #20]	@ (800a870 <HAL_SuspendTick+0x1c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a04      	ldr	r2, [pc, #16]	@ (800a870 <HAL_SuspendTick+0x1c>)
 800a85e:	f023 0302 	bic.w	r3, r3, #2
 800a862:	6013      	str	r3, [r2, #0]
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	e000e010 	.word	0xe000e010

0800a874 <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a878:	4b05      	ldr	r3, [pc, #20]	@ (800a890 <HAL_ResumeTick+0x1c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a04      	ldr	r2, [pc, #16]	@ (800a890 <HAL_ResumeTick+0x1c>)
 800a87e:	f043 0302 	orr.w	r3, r3, #2
 800a882:	6013      	str	r3, [r2, #0]
}
 800a884:	bf00      	nop
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	e000e010 	.word	0xe000e010

0800a894 <setStopModeFlag>:
{
	return stopModeTriggered;
}

void setStopModeFlag(bool flag)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
	stopModeTriggered = flag;
 800a89e:	4a04      	ldr	r2, [pc, #16]	@ (800a8b0 <setStopModeFlag+0x1c>)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	7013      	strb	r3, [r2, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	2400073c 	.word	0x2400073c

0800a8b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
static uint8_t days_in_month(uint8_t month, uint8_t year);

bool rtcAlarmTriggered = false;

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef * hrtc)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 800a8bc:	f7ff ffda 	bl	800a874 <HAL_ResumeTick>
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <RTCInit>:

	rtcAlarmTriggered = true;
}

void RTCInit(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	4809      	ldr	r0, [pc, #36]	@ (800a8f4 <RTCInit+0x2c>)
 800a8d0:	f7fd fc24 	bl	800811c <HAL_RTCEx_BKUPRead>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d008      	beq.n	800a8f0 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a8de:	4806      	ldr	r0, [pc, #24]	@ (800a8f8 <RTCInit+0x30>)
 800a8e0:	f000 f810 	bl	800a904 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a8e4:	2364      	movs	r3, #100	@ 0x64
 800a8e6:	220d      	movs	r2, #13
 800a8e8:	4904      	ldr	r1, [pc, #16]	@ (800a8fc <RTCInit+0x34>)
 800a8ea:	4805      	ldr	r0, [pc, #20]	@ (800a900 <RTCInit+0x38>)
 800a8ec:	f7fd fc7c 	bl	80081e8 <HAL_UART_Transmit>
	}
}
 800a8f0:	bf00      	nop
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2400053c 	.word	0x2400053c
 800a8f8:	24000094 	.word	0x24000094
 800a8fc:	0800c358 	.word	0x0800c358
 800a900:	24000564 	.word	0x24000564

0800a904 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	789b      	ldrb	r3, [r3, #2]
 800a92c:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a92e:	2300      	movs	r3, #0
 800a930:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a936:	2300      	movs	r3, #0
 800a938:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	78db      	ldrb	r3, [r3, #3]
 800a93e:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	795b      	ldrb	r3, [r3, #5]
 800a944:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	791b      	ldrb	r3, [r3, #4]
 800a94a:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	799b      	ldrb	r3, [r3, #6]
 800a950:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a952:	f107 030c 	add.w	r3, r7, #12
 800a956:	2200      	movs	r2, #0
 800a958:	4619      	mov	r1, r3
 800a95a:	480d      	ldr	r0, [pc, #52]	@ (800a990 <setRTCData+0x8c>)
 800a95c:	f7fc fed2 	bl	8007704 <HAL_RTC_SetTime>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10f      	bne.n	800a986 <setRTCData+0x82>
 800a966:	f107 0308 	add.w	r3, r7, #8
 800a96a:	2200      	movs	r2, #0
 800a96c:	4619      	mov	r1, r3
 800a96e:	4808      	ldr	r0, [pc, #32]	@ (800a990 <setRTCData+0x8c>)
 800a970:	f7fc ffc2 	bl	80078f8 <HAL_RTC_SetDate>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a97a:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a97e:	2101      	movs	r1, #1
 800a980:	4803      	ldr	r0, [pc, #12]	@ (800a990 <setRTCData+0x8c>)
 800a982:	f7fd fbb3 	bl	80080ec <HAL_RTCEx_BKUPWrite>
	}
}
 800a986:	bf00      	nop
 800a988:	3720      	adds	r7, #32
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	2400053c 	.word	0x2400053c

0800a994 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4811      	ldr	r0, [pc, #68]	@ (800a9ec <getRTCData+0x58>)
 800a9a6:	f7fc ff4b 	bl	8007840 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a9aa:	f107 031c 	add.w	r3, r7, #28
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	480e      	ldr	r0, [pc, #56]	@ (800a9ec <getRTCData+0x58>)
 800a9b4:	f7fd f828 	bl	8007a08 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a9b8:	7fba      	ldrb	r2, [r7, #30]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a9be:	7f3a      	ldrb	r2, [r7, #28]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a9c4:	7f7a      	ldrb	r2, [r7, #29]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a9ca:	7ffa      	ldrb	r2, [r7, #31]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a9d0:	7a3a      	ldrb	r2, [r7, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a9d6:	7a7a      	ldrb	r2, [r7, #9]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a9dc:	7aba      	ldrb	r2, [r7, #10]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	709a      	strb	r2, [r3, #2]
}
 800a9e2:	bf00      	nop
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	2400053c 	.word	0x2400053c

0800a9f0 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08c      	sub	sp, #48	@ 0x30
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a9f8:	f107 0308 	add.w	r3, r7, #8
 800a9fc:	2228      	movs	r2, #40	@ 0x28
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fc04 	bl	800b20e <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	789b      	ldrb	r3, [r3, #2]
 800aa16:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800aa2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	78db      	ldrb	r3, [r3, #3]
 800aa36:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800aa3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	2200      	movs	r2, #0
 800aa46:	4619      	mov	r1, r3
 800aa48:	4805      	ldr	r0, [pc, #20]	@ (800aa60 <setRTCAlarm+0x70>)
 800aa4a:	f7fd f82b 	bl	8007aa4 <HAL_RTC_SetAlarm_IT>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <setRTCAlarm+0x68>
	{
		Error_Handler();
 800aa54:	f7f6 fade 	bl	8001014 <Error_Handler>
	}
}
 800aa58:	bf00      	nop
 800aa5a:	3730      	adds	r7, #48	@ 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	2400053c 	.word	0x2400053c

0800aa64 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800aa6c:	4b04      	ldr	r3, [pc, #16]	@ (800aa80 <HAL_UART_RxCpltCallback+0x1c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	60fb      	str	r3, [r7, #12]

	fptr();
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4798      	blx	r3
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	24000740 	.word	0x24000740

0800aa84 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]

}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800aaa0:	4a04      	ldr	r2, [pc, #16]	@ (800aab4 <uartInit+0x1c>)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6013      	str	r3, [r2, #0]
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	24000740 	.word	0x24000740

0800aab8 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800aac0:	2201      	movs	r2, #1
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4803      	ldr	r0, [pc, #12]	@ (800aad4 <receptionItrOn+0x1c>)
 800aac6:	f7fd fcb1 	bl	800842c <HAL_UART_Receive_DMA>
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	24000564 	.word	0x24000564

0800aad8 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <debugRxCallback+0x24>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b0d      	cmp	r3, #13
 800aae2:	d102      	bne.n	800aaea <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800aae4:	4b06      	ldr	r3, [pc, #24]	@ (800ab00 <debugRxCallback+0x28>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800aaea:	4b06      	ldr	r3, [pc, #24]	@ (800ab04 <debugRxCallback+0x2c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4903      	ldr	r1, [pc, #12]	@ (800aafc <debugRxCallback+0x24>)
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f888 	bl	800ac06 <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800aaf6:	bf00      	nop
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	24000744 	.word	0x24000744
 800ab00:	2400074c 	.word	0x2400074c
 800ab04:	24000748 	.word	0x24000748

0800ab08 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800ab0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab38 <debugUartInit+0x30>)
 800ab10:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800ab12:	4b0a      	ldr	r3, [pc, #40]	@ (800ab3c <debugUartInit+0x34>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 f839 	bl	800ab94 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff ffb8 	bl	800aa98 <uartInit>

	receptionItrOn(&data);
 800ab28:	4805      	ldr	r0, [pc, #20]	@ (800ab40 <debugUartInit+0x38>)
 800ab2a:	f7ff ffc5 	bl	800aab8 <receptionItrOn>
}
 800ab2e:	bf00      	nop
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	0800aad9 	.word	0x0800aad9
 800ab3c:	24000748 	.word	0x24000748
 800ab40:	24000744 	.word	0x24000744

0800ab44 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800ab48:	4b03      	ldr	r3, [pc, #12]	@ (800ab58 <getCmdReceivedFlag+0x14>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	2400074c 	.word	0x2400074c

0800ab5c <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800ab66:	4a04      	ldr	r2, [pc, #16]	@ (800ab78 <setCmdReceivedFlag+0x1c>)
 800ab68:	79fb      	ldrb	r3, [r7, #7]
 800ab6a:	7013      	strb	r3, [r2, #0]
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	2400074c 	.word	0x2400074c

0800ab7c <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
	return rxBuffer;
 800ab80:	4b03      	ldr	r3, [pc, #12]	@ (800ab90 <getRxBuffer+0x14>)
 800ab82:	681b      	ldr	r3, [r3, #0]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	24000748 	.word	0x24000748

0800ab94 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	807b      	strh	r3, [r7, #2]
 800aba0:	4613      	mov	r3, r2
 800aba2:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	883a      	ldrh	r2, [r7, #0]
 800abb8:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	887a      	ldrh	r2, [r7, #2]
 800abbe:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800abc0:	887b      	ldrh	r3, [r7, #2]
 800abc2:	883a      	ldrh	r2, [r7, #0]
 800abc4:	fb02 f303 	mul.w	r3, r2, r3
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f8ad 	bl	800ad28 <malloc>
 800abce:	4603      	mov	r3, r0
 800abd0:	461a      	mov	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68d8      	ldr	r0, [r3, #12]
 800abe8:	887b      	ldrh	r3, [r7, #2]
 800abea:	883a      	ldrh	r2, [r7, #0]
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	2100      	movs	r1, #0
 800abf4:	f000 fb0b 	bl	800b20e <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800ac10:	2303      	movs	r3, #3
 800ac12:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	889b      	ldrh	r3, [r3, #4]
 800ac20:	89ba      	ldrh	r2, [r7, #12]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d301      	bcc.n	800ac2a <circularBufferEnqueue+0x24>
    {
        next = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	885b      	ldrh	r3, [r3, #2]
 800ac2e:	89ba      	ldrh	r2, [r7, #12]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d02b      	beq.n	800ac8c <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	8812      	ldrh	r2, [r2, #0]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	88d2      	ldrh	r2, [r2, #6]
 800ac42:	fb01 f202 	mul.w	r2, r1, r2
 800ac46:	1898      	adds	r0, r3, r2
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	88db      	ldrh	r3, [r3, #6]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	f000 fbc5 	bl	800b3de <memcpy>
 800ac54:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d017      	beq.n	800ac8c <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	89ba      	ldrh	r2, [r7, #12]
 800ac60:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	889b      	ldrh	r3, [r3, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	8852      	ldrh	r2, [r2, #2]
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	8892      	ldrh	r2, [r2, #4]
 800ac7c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac80:	fb01 f202 	mul.w	r2, r1, r2
 800ac84:	1a9b      	subs	r3, r3, r2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800aca0:	2305      	movs	r3, #5
 800aca2:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	885a      	ldrh	r2, [r3, #2]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d032      	beq.n	800ad16 <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	3301      	adds	r3, #1
 800acb6:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	889b      	ldrh	r3, [r3, #4]
 800acbc:	89ba      	ldrh	r2, [r7, #12]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d301      	bcc.n	800acc6 <circularBufferDequeue+0x30>
        {
            next = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	8852      	ldrh	r2, [r2, #2]
 800acce:	4611      	mov	r1, r2
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	88d2      	ldrh	r2, [r2, #6]
 800acd4:	fb01 f202 	mul.w	r2, r1, r2
 800acd8:	1899      	adds	r1, r3, r2
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	88db      	ldrh	r3, [r3, #6]
 800acde:	461a      	mov	r2, r3
 800ace0:	6838      	ldr	r0, [r7, #0]
 800ace2:	f000 fb7c 	bl	800b3de <memcpy>

        cBuff->tail = next;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	89ba      	ldrh	r2, [r7, #12]
 800acea:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	889b      	ldrh	r3, [r3, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	8852      	ldrh	r2, [r2, #2]
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	8892      	ldrh	r2, [r2, #4]
 800ad02:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad06:	fb01 f202 	mul.w	r2, r1, r2
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ad12:	2304      	movs	r3, #4
 800ad14:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <atoi>:
 800ad20:	220a      	movs	r2, #10
 800ad22:	2100      	movs	r1, #0
 800ad24:	f000 b930 	b.w	800af88 <strtol>

0800ad28 <malloc>:
 800ad28:	4b02      	ldr	r3, [pc, #8]	@ (800ad34 <malloc+0xc>)
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f000 b825 	b.w	800ad7c <_malloc_r>
 800ad32:	bf00      	nop
 800ad34:	240000a8 	.word	0x240000a8

0800ad38 <sbrk_aligned>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ad78 <sbrk_aligned+0x40>)
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	6831      	ldr	r1, [r6, #0]
 800ad40:	4605      	mov	r5, r0
 800ad42:	b911      	cbnz	r1, 800ad4a <sbrk_aligned+0x12>
 800ad44:	f000 fafc 	bl	800b340 <_sbrk_r>
 800ad48:	6030      	str	r0, [r6, #0]
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f000 faf7 	bl	800b340 <_sbrk_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d103      	bne.n	800ad5e <sbrk_aligned+0x26>
 800ad56:	f04f 34ff 	mov.w	r4, #4294967295
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	1cc4      	adds	r4, r0, #3
 800ad60:	f024 0403 	bic.w	r4, r4, #3
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	d0f8      	beq.n	800ad5a <sbrk_aligned+0x22>
 800ad68:	1a21      	subs	r1, r4, r0
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fae8 	bl	800b340 <_sbrk_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1f2      	bne.n	800ad5a <sbrk_aligned+0x22>
 800ad74:	e7ef      	b.n	800ad56 <sbrk_aligned+0x1e>
 800ad76:	bf00      	nop
 800ad78:	24000750 	.word	0x24000750

0800ad7c <_malloc_r>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	1ccd      	adds	r5, r1, #3
 800ad82:	f025 0503 	bic.w	r5, r5, #3
 800ad86:	3508      	adds	r5, #8
 800ad88:	2d0c      	cmp	r5, #12
 800ad8a:	bf38      	it	cc
 800ad8c:	250c      	movcc	r5, #12
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	4606      	mov	r6, r0
 800ad92:	db01      	blt.n	800ad98 <_malloc_r+0x1c>
 800ad94:	42a9      	cmp	r1, r5
 800ad96:	d904      	bls.n	800ada2 <_malloc_r+0x26>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	6033      	str	r3, [r6, #0]
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae78 <_malloc_r+0xfc>
 800ada6:	f000 f869 	bl	800ae7c <__malloc_lock>
 800adaa:	f8d8 3000 	ldr.w	r3, [r8]
 800adae:	461c      	mov	r4, r3
 800adb0:	bb44      	cbnz	r4, 800ae04 <_malloc_r+0x88>
 800adb2:	4629      	mov	r1, r5
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff ffbf 	bl	800ad38 <sbrk_aligned>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	4604      	mov	r4, r0
 800adbe:	d158      	bne.n	800ae72 <_malloc_r+0xf6>
 800adc0:	f8d8 4000 	ldr.w	r4, [r8]
 800adc4:	4627      	mov	r7, r4
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	d143      	bne.n	800ae52 <_malloc_r+0xd6>
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d04b      	beq.n	800ae66 <_malloc_r+0xea>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	4639      	mov	r1, r7
 800add2:	4630      	mov	r0, r6
 800add4:	eb04 0903 	add.w	r9, r4, r3
 800add8:	f000 fab2 	bl	800b340 <_sbrk_r>
 800addc:	4581      	cmp	r9, r0
 800adde:	d142      	bne.n	800ae66 <_malloc_r+0xea>
 800ade0:	6821      	ldr	r1, [r4, #0]
 800ade2:	1a6d      	subs	r5, r5, r1
 800ade4:	4629      	mov	r1, r5
 800ade6:	4630      	mov	r0, r6
 800ade8:	f7ff ffa6 	bl	800ad38 <sbrk_aligned>
 800adec:	3001      	adds	r0, #1
 800adee:	d03a      	beq.n	800ae66 <_malloc_r+0xea>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	442b      	add	r3, r5
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	f8d8 3000 	ldr.w	r3, [r8]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	bb62      	cbnz	r2, 800ae58 <_malloc_r+0xdc>
 800adfe:	f8c8 7000 	str.w	r7, [r8]
 800ae02:	e00f      	b.n	800ae24 <_malloc_r+0xa8>
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	1b52      	subs	r2, r2, r5
 800ae08:	d420      	bmi.n	800ae4c <_malloc_r+0xd0>
 800ae0a:	2a0b      	cmp	r2, #11
 800ae0c:	d917      	bls.n	800ae3e <_malloc_r+0xc2>
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	6025      	str	r5, [r4, #0]
 800ae14:	bf18      	it	ne
 800ae16:	6059      	strne	r1, [r3, #4]
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	bf08      	it	eq
 800ae1c:	f8c8 1000 	streq.w	r1, [r8]
 800ae20:	5162      	str	r2, [r4, r5]
 800ae22:	604b      	str	r3, [r1, #4]
 800ae24:	4630      	mov	r0, r6
 800ae26:	f000 f82f 	bl	800ae88 <__malloc_unlock>
 800ae2a:	f104 000b 	add.w	r0, r4, #11
 800ae2e:	1d23      	adds	r3, r4, #4
 800ae30:	f020 0007 	bic.w	r0, r0, #7
 800ae34:	1ac2      	subs	r2, r0, r3
 800ae36:	bf1c      	itt	ne
 800ae38:	1a1b      	subne	r3, r3, r0
 800ae3a:	50a3      	strne	r3, [r4, r2]
 800ae3c:	e7af      	b.n	800ad9e <_malloc_r+0x22>
 800ae3e:	6862      	ldr	r2, [r4, #4]
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	bf0c      	ite	eq
 800ae44:	f8c8 2000 	streq.w	r2, [r8]
 800ae48:	605a      	strne	r2, [r3, #4]
 800ae4a:	e7eb      	b.n	800ae24 <_malloc_r+0xa8>
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	6864      	ldr	r4, [r4, #4]
 800ae50:	e7ae      	b.n	800adb0 <_malloc_r+0x34>
 800ae52:	463c      	mov	r4, r7
 800ae54:	687f      	ldr	r7, [r7, #4]
 800ae56:	e7b6      	b.n	800adc6 <_malloc_r+0x4a>
 800ae58:	461a      	mov	r2, r3
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	d1fb      	bne.n	800ae58 <_malloc_r+0xdc>
 800ae60:	2300      	movs	r3, #0
 800ae62:	6053      	str	r3, [r2, #4]
 800ae64:	e7de      	b.n	800ae24 <_malloc_r+0xa8>
 800ae66:	230c      	movs	r3, #12
 800ae68:	6033      	str	r3, [r6, #0]
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f000 f80c 	bl	800ae88 <__malloc_unlock>
 800ae70:	e794      	b.n	800ad9c <_malloc_r+0x20>
 800ae72:	6005      	str	r5, [r0, #0]
 800ae74:	e7d6      	b.n	800ae24 <_malloc_r+0xa8>
 800ae76:	bf00      	nop
 800ae78:	24000754 	.word	0x24000754

0800ae7c <__malloc_lock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	@ (800ae84 <__malloc_lock+0x8>)
 800ae7e:	f000 baac 	b.w	800b3da <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	24000898 	.word	0x24000898

0800ae88 <__malloc_unlock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	@ (800ae90 <__malloc_unlock+0x8>)
 800ae8a:	f000 baa7 	b.w	800b3dc <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	24000898 	.word	0x24000898

0800ae94 <_strtol_l.constprop.0>:
 800ae94:	2b24      	cmp	r3, #36	@ 0x24
 800ae96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9a:	4686      	mov	lr, r0
 800ae9c:	4690      	mov	r8, r2
 800ae9e:	d801      	bhi.n	800aea4 <_strtol_l.constprop.0+0x10>
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d106      	bne.n	800aeb2 <_strtol_l.constprop.0+0x1e>
 800aea4:	f000 fa6e 	bl	800b384 <__errno>
 800aea8:	2316      	movs	r3, #22
 800aeaa:	6003      	str	r3, [r0, #0]
 800aeac:	2000      	movs	r0, #0
 800aeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb2:	4834      	ldr	r0, [pc, #208]	@ (800af84 <_strtol_l.constprop.0+0xf0>)
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	462a      	mov	r2, r5
 800aeb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aebc:	5d06      	ldrb	r6, [r0, r4]
 800aebe:	f016 0608 	ands.w	r6, r6, #8
 800aec2:	d1f8      	bne.n	800aeb6 <_strtol_l.constprop.0+0x22>
 800aec4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aec6:	d12d      	bne.n	800af24 <_strtol_l.constprop.0+0x90>
 800aec8:	782c      	ldrb	r4, [r5, #0]
 800aeca:	2601      	movs	r6, #1
 800aecc:	1c95      	adds	r5, r2, #2
 800aece:	f033 0210 	bics.w	r2, r3, #16
 800aed2:	d109      	bne.n	800aee8 <_strtol_l.constprop.0+0x54>
 800aed4:	2c30      	cmp	r4, #48	@ 0x30
 800aed6:	d12a      	bne.n	800af2e <_strtol_l.constprop.0+0x9a>
 800aed8:	782a      	ldrb	r2, [r5, #0]
 800aeda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aede:	2a58      	cmp	r2, #88	@ 0x58
 800aee0:	d125      	bne.n	800af2e <_strtol_l.constprop.0+0x9a>
 800aee2:	786c      	ldrb	r4, [r5, #1]
 800aee4:	2310      	movs	r3, #16
 800aee6:	3502      	adds	r5, #2
 800aee8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aeec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aef0:	2200      	movs	r2, #0
 800aef2:	fbbc f9f3 	udiv	r9, ip, r3
 800aef6:	4610      	mov	r0, r2
 800aef8:	fb03 ca19 	mls	sl, r3, r9, ip
 800aefc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af00:	2f09      	cmp	r7, #9
 800af02:	d81b      	bhi.n	800af3c <_strtol_l.constprop.0+0xa8>
 800af04:	463c      	mov	r4, r7
 800af06:	42a3      	cmp	r3, r4
 800af08:	dd27      	ble.n	800af5a <_strtol_l.constprop.0+0xc6>
 800af0a:	1c57      	adds	r7, r2, #1
 800af0c:	d007      	beq.n	800af1e <_strtol_l.constprop.0+0x8a>
 800af0e:	4581      	cmp	r9, r0
 800af10:	d320      	bcc.n	800af54 <_strtol_l.constprop.0+0xc0>
 800af12:	d101      	bne.n	800af18 <_strtol_l.constprop.0+0x84>
 800af14:	45a2      	cmp	sl, r4
 800af16:	db1d      	blt.n	800af54 <_strtol_l.constprop.0+0xc0>
 800af18:	fb00 4003 	mla	r0, r0, r3, r4
 800af1c:	2201      	movs	r2, #1
 800af1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af22:	e7eb      	b.n	800aefc <_strtol_l.constprop.0+0x68>
 800af24:	2c2b      	cmp	r4, #43	@ 0x2b
 800af26:	bf04      	itt	eq
 800af28:	782c      	ldrbeq	r4, [r5, #0]
 800af2a:	1c95      	addeq	r5, r2, #2
 800af2c:	e7cf      	b.n	800aece <_strtol_l.constprop.0+0x3a>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1da      	bne.n	800aee8 <_strtol_l.constprop.0+0x54>
 800af32:	2c30      	cmp	r4, #48	@ 0x30
 800af34:	bf0c      	ite	eq
 800af36:	2308      	moveq	r3, #8
 800af38:	230a      	movne	r3, #10
 800af3a:	e7d5      	b.n	800aee8 <_strtol_l.constprop.0+0x54>
 800af3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af40:	2f19      	cmp	r7, #25
 800af42:	d801      	bhi.n	800af48 <_strtol_l.constprop.0+0xb4>
 800af44:	3c37      	subs	r4, #55	@ 0x37
 800af46:	e7de      	b.n	800af06 <_strtol_l.constprop.0+0x72>
 800af48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af4c:	2f19      	cmp	r7, #25
 800af4e:	d804      	bhi.n	800af5a <_strtol_l.constprop.0+0xc6>
 800af50:	3c57      	subs	r4, #87	@ 0x57
 800af52:	e7d8      	b.n	800af06 <_strtol_l.constprop.0+0x72>
 800af54:	f04f 32ff 	mov.w	r2, #4294967295
 800af58:	e7e1      	b.n	800af1e <_strtol_l.constprop.0+0x8a>
 800af5a:	1c53      	adds	r3, r2, #1
 800af5c:	d108      	bne.n	800af70 <_strtol_l.constprop.0+0xdc>
 800af5e:	2322      	movs	r3, #34	@ 0x22
 800af60:	f8ce 3000 	str.w	r3, [lr]
 800af64:	4660      	mov	r0, ip
 800af66:	f1b8 0f00 	cmp.w	r8, #0
 800af6a:	d0a0      	beq.n	800aeae <_strtol_l.constprop.0+0x1a>
 800af6c:	1e69      	subs	r1, r5, #1
 800af6e:	e006      	b.n	800af7e <_strtol_l.constprop.0+0xea>
 800af70:	b106      	cbz	r6, 800af74 <_strtol_l.constprop.0+0xe0>
 800af72:	4240      	negs	r0, r0
 800af74:	f1b8 0f00 	cmp.w	r8, #0
 800af78:	d099      	beq.n	800aeae <_strtol_l.constprop.0+0x1a>
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	d1f6      	bne.n	800af6c <_strtol_l.constprop.0+0xd8>
 800af7e:	f8c8 1000 	str.w	r1, [r8]
 800af82:	e794      	b.n	800aeae <_strtol_l.constprop.0+0x1a>
 800af84:	0800c3dd 	.word	0x0800c3dd

0800af88 <strtol>:
 800af88:	4613      	mov	r3, r2
 800af8a:	460a      	mov	r2, r1
 800af8c:	4601      	mov	r1, r0
 800af8e:	4802      	ldr	r0, [pc, #8]	@ (800af98 <strtol+0x10>)
 800af90:	6800      	ldr	r0, [r0, #0]
 800af92:	f7ff bf7f 	b.w	800ae94 <_strtol_l.constprop.0>
 800af96:	bf00      	nop
 800af98:	240000a8 	.word	0x240000a8

0800af9c <std>:
 800af9c:	2300      	movs	r3, #0
 800af9e:	b510      	push	{r4, lr}
 800afa0:	4604      	mov	r4, r0
 800afa2:	e9c0 3300 	strd	r3, r3, [r0]
 800afa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afaa:	6083      	str	r3, [r0, #8]
 800afac:	8181      	strh	r1, [r0, #12]
 800afae:	6643      	str	r3, [r0, #100]	@ 0x64
 800afb0:	81c2      	strh	r2, [r0, #14]
 800afb2:	6183      	str	r3, [r0, #24]
 800afb4:	4619      	mov	r1, r3
 800afb6:	2208      	movs	r2, #8
 800afb8:	305c      	adds	r0, #92	@ 0x5c
 800afba:	f000 f928 	bl	800b20e <memset>
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <std+0x58>)
 800afc0:	6263      	str	r3, [r4, #36]	@ 0x24
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <std+0x5c>)
 800afc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afc6:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <std+0x60>)
 800afc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <std+0x64>)
 800afcc:	6323      	str	r3, [r4, #48]	@ 0x30
 800afce:	4b0d      	ldr	r3, [pc, #52]	@ (800b004 <std+0x68>)
 800afd0:	6224      	str	r4, [r4, #32]
 800afd2:	429c      	cmp	r4, r3
 800afd4:	d006      	beq.n	800afe4 <std+0x48>
 800afd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afda:	4294      	cmp	r4, r2
 800afdc:	d002      	beq.n	800afe4 <std+0x48>
 800afde:	33d0      	adds	r3, #208	@ 0xd0
 800afe0:	429c      	cmp	r4, r3
 800afe2:	d105      	bne.n	800aff0 <std+0x54>
 800afe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f000 b9f4 	b.w	800b3d8 <__retarget_lock_init_recursive>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	0800b189 	.word	0x0800b189
 800aff8:	0800b1ab 	.word	0x0800b1ab
 800affc:	0800b1e3 	.word	0x0800b1e3
 800b000:	0800b207 	.word	0x0800b207
 800b004:	24000758 	.word	0x24000758

0800b008 <stdio_exit_handler>:
 800b008:	4a02      	ldr	r2, [pc, #8]	@ (800b014 <stdio_exit_handler+0xc>)
 800b00a:	4903      	ldr	r1, [pc, #12]	@ (800b018 <stdio_exit_handler+0x10>)
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <stdio_exit_handler+0x14>)
 800b00e:	f000 b869 	b.w	800b0e4 <_fwalk_sglue>
 800b012:	bf00      	nop
 800b014:	2400009c 	.word	0x2400009c
 800b018:	0800bba1 	.word	0x0800bba1
 800b01c:	240000ac 	.word	0x240000ac

0800b020 <cleanup_stdio>:
 800b020:	6841      	ldr	r1, [r0, #4]
 800b022:	4b0c      	ldr	r3, [pc, #48]	@ (800b054 <cleanup_stdio+0x34>)
 800b024:	4299      	cmp	r1, r3
 800b026:	b510      	push	{r4, lr}
 800b028:	4604      	mov	r4, r0
 800b02a:	d001      	beq.n	800b030 <cleanup_stdio+0x10>
 800b02c:	f000 fdb8 	bl	800bba0 <_fflush_r>
 800b030:	68a1      	ldr	r1, [r4, #8]
 800b032:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <cleanup_stdio+0x38>)
 800b034:	4299      	cmp	r1, r3
 800b036:	d002      	beq.n	800b03e <cleanup_stdio+0x1e>
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 fdb1 	bl	800bba0 <_fflush_r>
 800b03e:	68e1      	ldr	r1, [r4, #12]
 800b040:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <cleanup_stdio+0x3c>)
 800b042:	4299      	cmp	r1, r3
 800b044:	d004      	beq.n	800b050 <cleanup_stdio+0x30>
 800b046:	4620      	mov	r0, r4
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f000 bda8 	b.w	800bba0 <_fflush_r>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	24000758 	.word	0x24000758
 800b058:	240007c0 	.word	0x240007c0
 800b05c:	24000828 	.word	0x24000828

0800b060 <global_stdio_init.part.0>:
 800b060:	b510      	push	{r4, lr}
 800b062:	4b0b      	ldr	r3, [pc, #44]	@ (800b090 <global_stdio_init.part.0+0x30>)
 800b064:	4c0b      	ldr	r4, [pc, #44]	@ (800b094 <global_stdio_init.part.0+0x34>)
 800b066:	4a0c      	ldr	r2, [pc, #48]	@ (800b098 <global_stdio_init.part.0+0x38>)
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	4620      	mov	r0, r4
 800b06c:	2200      	movs	r2, #0
 800b06e:	2104      	movs	r1, #4
 800b070:	f7ff ff94 	bl	800af9c <std>
 800b074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b078:	2201      	movs	r2, #1
 800b07a:	2109      	movs	r1, #9
 800b07c:	f7ff ff8e 	bl	800af9c <std>
 800b080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b084:	2202      	movs	r2, #2
 800b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b08a:	2112      	movs	r1, #18
 800b08c:	f7ff bf86 	b.w	800af9c <std>
 800b090:	24000890 	.word	0x24000890
 800b094:	24000758 	.word	0x24000758
 800b098:	0800b009 	.word	0x0800b009

0800b09c <__sfp_lock_acquire>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__sfp_lock_acquire+0x8>)
 800b09e:	f000 b99c 	b.w	800b3da <__retarget_lock_acquire_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	24000899 	.word	0x24000899

0800b0a8 <__sfp_lock_release>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	@ (800b0b0 <__sfp_lock_release+0x8>)
 800b0aa:	f000 b997 	b.w	800b3dc <__retarget_lock_release_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	24000899 	.word	0x24000899

0800b0b4 <__sinit>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	f7ff fff0 	bl	800b09c <__sfp_lock_acquire>
 800b0bc:	6a23      	ldr	r3, [r4, #32]
 800b0be:	b11b      	cbz	r3, 800b0c8 <__sinit+0x14>
 800b0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c4:	f7ff bff0 	b.w	800b0a8 <__sfp_lock_release>
 800b0c8:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <__sinit+0x28>)
 800b0ca:	6223      	str	r3, [r4, #32]
 800b0cc:	4b04      	ldr	r3, [pc, #16]	@ (800b0e0 <__sinit+0x2c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f5      	bne.n	800b0c0 <__sinit+0xc>
 800b0d4:	f7ff ffc4 	bl	800b060 <global_stdio_init.part.0>
 800b0d8:	e7f2      	b.n	800b0c0 <__sinit+0xc>
 800b0da:	bf00      	nop
 800b0dc:	0800b021 	.word	0x0800b021
 800b0e0:	24000890 	.word	0x24000890

0800b0e4 <_fwalk_sglue>:
 800b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	4688      	mov	r8, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0f4:	f1b9 0901 	subs.w	r9, r9, #1
 800b0f8:	d505      	bpl.n	800b106 <_fwalk_sglue+0x22>
 800b0fa:	6824      	ldr	r4, [r4, #0]
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d1f7      	bne.n	800b0f0 <_fwalk_sglue+0xc>
 800b100:	4630      	mov	r0, r6
 800b102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d907      	bls.n	800b11c <_fwalk_sglue+0x38>
 800b10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b110:	3301      	adds	r3, #1
 800b112:	d003      	beq.n	800b11c <_fwalk_sglue+0x38>
 800b114:	4629      	mov	r1, r5
 800b116:	4638      	mov	r0, r7
 800b118:	47c0      	blx	r8
 800b11a:	4306      	orrs	r6, r0
 800b11c:	3568      	adds	r5, #104	@ 0x68
 800b11e:	e7e9      	b.n	800b0f4 <_fwalk_sglue+0x10>

0800b120 <sniprintf>:
 800b120:	b40c      	push	{r2, r3}
 800b122:	b530      	push	{r4, r5, lr}
 800b124:	4b17      	ldr	r3, [pc, #92]	@ (800b184 <sniprintf+0x64>)
 800b126:	1e0c      	subs	r4, r1, #0
 800b128:	681d      	ldr	r5, [r3, #0]
 800b12a:	b09d      	sub	sp, #116	@ 0x74
 800b12c:	da08      	bge.n	800b140 <sniprintf+0x20>
 800b12e:	238b      	movs	r3, #139	@ 0x8b
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f04f 30ff 	mov.w	r0, #4294967295
 800b136:	b01d      	add	sp, #116	@ 0x74
 800b138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b13c:	b002      	add	sp, #8
 800b13e:	4770      	bx	lr
 800b140:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b144:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b148:	bf14      	ite	ne
 800b14a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b14e:	4623      	moveq	r3, r4
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	9307      	str	r3, [sp, #28]
 800b154:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b158:	9002      	str	r0, [sp, #8]
 800b15a:	9006      	str	r0, [sp, #24]
 800b15c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b160:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b162:	ab21      	add	r3, sp, #132	@ 0x84
 800b164:	a902      	add	r1, sp, #8
 800b166:	4628      	mov	r0, r5
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	f000 fa0b 	bl	800b584 <_svfiprintf_r>
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	bfbc      	itt	lt
 800b172:	238b      	movlt	r3, #139	@ 0x8b
 800b174:	602b      	strlt	r3, [r5, #0]
 800b176:	2c00      	cmp	r4, #0
 800b178:	d0dd      	beq.n	800b136 <sniprintf+0x16>
 800b17a:	9b02      	ldr	r3, [sp, #8]
 800b17c:	2200      	movs	r2, #0
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	e7d9      	b.n	800b136 <sniprintf+0x16>
 800b182:	bf00      	nop
 800b184:	240000a8 	.word	0x240000a8

0800b188 <__sread>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	460c      	mov	r4, r1
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	f000 f8c4 	bl	800b31c <_read_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	bfab      	itete	ge
 800b198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b19a:	89a3      	ldrhlt	r3, [r4, #12]
 800b19c:	181b      	addge	r3, r3, r0
 800b19e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1a2:	bfac      	ite	ge
 800b1a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1a6:	81a3      	strhlt	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__swrite>:
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	898b      	ldrh	r3, [r1, #12]
 800b1b2:	05db      	lsls	r3, r3, #23
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	d505      	bpl.n	800b1c8 <__swrite+0x1e>
 800b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f000 f898 	bl	800b2f8 <_lseek_r>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1de:	f000 b8bf 	b.w	800b360 <_write_r>

0800b1e2 <__sseek>:
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 f885 	bl	800b2f8 <_lseek_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	bf15      	itete	ne
 800b1f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1fe:	81a3      	strheq	r3, [r4, #12]
 800b200:	bf18      	it	ne
 800b202:	81a3      	strhne	r3, [r4, #12]
 800b204:	bd10      	pop	{r4, pc}

0800b206 <__sclose>:
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	f000 b865 	b.w	800b2d8 <_close_r>

0800b20e <memset>:
 800b20e:	4402      	add	r2, r0
 800b210:	4603      	mov	r3, r0
 800b212:	4293      	cmp	r3, r2
 800b214:	d100      	bne.n	800b218 <memset+0xa>
 800b216:	4770      	bx	lr
 800b218:	f803 1b01 	strb.w	r1, [r3], #1
 800b21c:	e7f9      	b.n	800b212 <memset+0x4>
	...

0800b220 <strtok>:
 800b220:	4b16      	ldr	r3, [pc, #88]	@ (800b27c <strtok+0x5c>)
 800b222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b226:	681f      	ldr	r7, [r3, #0]
 800b228:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b22a:	4605      	mov	r5, r0
 800b22c:	460e      	mov	r6, r1
 800b22e:	b9ec      	cbnz	r4, 800b26c <strtok+0x4c>
 800b230:	2050      	movs	r0, #80	@ 0x50
 800b232:	f7ff fd79 	bl	800ad28 <malloc>
 800b236:	4602      	mov	r2, r0
 800b238:	6478      	str	r0, [r7, #68]	@ 0x44
 800b23a:	b920      	cbnz	r0, 800b246 <strtok+0x26>
 800b23c:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <strtok+0x60>)
 800b23e:	4811      	ldr	r0, [pc, #68]	@ (800b284 <strtok+0x64>)
 800b240:	215b      	movs	r1, #91	@ 0x5b
 800b242:	f000 f8db 	bl	800b3fc <__assert_func>
 800b246:	e9c0 4400 	strd	r4, r4, [r0]
 800b24a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b24e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b252:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b256:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b25a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b25e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b262:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b266:	6184      	str	r4, [r0, #24]
 800b268:	7704      	strb	r4, [r0, #28]
 800b26a:	6244      	str	r4, [r0, #36]	@ 0x24
 800b26c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	2301      	movs	r3, #1
 800b274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	f000 b806 	b.w	800b288 <__strtok_r>
 800b27c:	240000a8 	.word	0x240000a8
 800b280:	0800c4dd 	.word	0x0800c4dd
 800b284:	0800c4f4 	.word	0x0800c4f4

0800b288 <__strtok_r>:
 800b288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28a:	4604      	mov	r4, r0
 800b28c:	b908      	cbnz	r0, 800b292 <__strtok_r+0xa>
 800b28e:	6814      	ldr	r4, [r2, #0]
 800b290:	b144      	cbz	r4, 800b2a4 <__strtok_r+0x1c>
 800b292:	4620      	mov	r0, r4
 800b294:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b298:	460f      	mov	r7, r1
 800b29a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b29e:	b91e      	cbnz	r6, 800b2a8 <__strtok_r+0x20>
 800b2a0:	b965      	cbnz	r5, 800b2bc <__strtok_r+0x34>
 800b2a2:	6015      	str	r5, [r2, #0]
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e005      	b.n	800b2b4 <__strtok_r+0x2c>
 800b2a8:	42b5      	cmp	r5, r6
 800b2aa:	d1f6      	bne.n	800b29a <__strtok_r+0x12>
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1f0      	bne.n	800b292 <__strtok_r+0xa>
 800b2b0:	6014      	str	r4, [r2, #0]
 800b2b2:	7003      	strb	r3, [r0, #0]
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b6:	461c      	mov	r4, r3
 800b2b8:	e00c      	b.n	800b2d4 <__strtok_r+0x4c>
 800b2ba:	b915      	cbnz	r5, 800b2c2 <__strtok_r+0x3a>
 800b2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2c6:	42ab      	cmp	r3, r5
 800b2c8:	d1f7      	bne.n	800b2ba <__strtok_r+0x32>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0f3      	beq.n	800b2b6 <__strtok_r+0x2e>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2d4:	6014      	str	r4, [r2, #0]
 800b2d6:	e7ed      	b.n	800b2b4 <__strtok_r+0x2c>

0800b2d8 <_close_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d06      	ldr	r5, [pc, #24]	@ (800b2f4 <_close_r+0x1c>)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7f5 fffe 	bl	80012e4 <_close>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_close_r+0x1a>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_close_r+0x1a>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	24000894 	.word	0x24000894

0800b2f8 <_lseek_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d07      	ldr	r5, [pc, #28]	@ (800b318 <_lseek_r+0x20>)
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	2200      	movs	r2, #0
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f7f6 f813 	bl	8001332 <_lseek>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_lseek_r+0x1e>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_lseek_r+0x1e>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	24000894 	.word	0x24000894

0800b31c <_read_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4d07      	ldr	r5, [pc, #28]	@ (800b33c <_read_r+0x20>)
 800b320:	4604      	mov	r4, r0
 800b322:	4608      	mov	r0, r1
 800b324:	4611      	mov	r1, r2
 800b326:	2200      	movs	r2, #0
 800b328:	602a      	str	r2, [r5, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	f7f5 ffa1 	bl	8001272 <_read>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_read_r+0x1e>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_read_r+0x1e>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	24000894 	.word	0x24000894

0800b340 <_sbrk_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4d06      	ldr	r5, [pc, #24]	@ (800b35c <_sbrk_r+0x1c>)
 800b344:	2300      	movs	r3, #0
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	f7f5 fffe 	bl	800134c <_sbrk>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_sbrk_r+0x1a>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_sbrk_r+0x1a>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	24000894 	.word	0x24000894

0800b360 <_write_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d07      	ldr	r5, [pc, #28]	@ (800b380 <_write_r+0x20>)
 800b364:	4604      	mov	r4, r0
 800b366:	4608      	mov	r0, r1
 800b368:	4611      	mov	r1, r2
 800b36a:	2200      	movs	r2, #0
 800b36c:	602a      	str	r2, [r5, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f7f5 ff9c 	bl	80012ac <_write>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_write_r+0x1e>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_write_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	24000894 	.word	0x24000894

0800b384 <__errno>:
 800b384:	4b01      	ldr	r3, [pc, #4]	@ (800b38c <__errno+0x8>)
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	240000a8 	.word	0x240000a8

0800b390 <__libc_init_array>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	4d0d      	ldr	r5, [pc, #52]	@ (800b3c8 <__libc_init_array+0x38>)
 800b394:	4c0d      	ldr	r4, [pc, #52]	@ (800b3cc <__libc_init_array+0x3c>)
 800b396:	1b64      	subs	r4, r4, r5
 800b398:	10a4      	asrs	r4, r4, #2
 800b39a:	2600      	movs	r6, #0
 800b39c:	42a6      	cmp	r6, r4
 800b39e:	d109      	bne.n	800b3b4 <__libc_init_array+0x24>
 800b3a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b3d0 <__libc_init_array+0x40>)
 800b3a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b3d4 <__libc_init_array+0x44>)
 800b3a4:	f000 ff2a 	bl	800c1fc <_init>
 800b3a8:	1b64      	subs	r4, r4, r5
 800b3aa:	10a4      	asrs	r4, r4, #2
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	42a6      	cmp	r6, r4
 800b3b0:	d105      	bne.n	800b3be <__libc_init_array+0x2e>
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b8:	4798      	blx	r3
 800b3ba:	3601      	adds	r6, #1
 800b3bc:	e7ee      	b.n	800b39c <__libc_init_array+0xc>
 800b3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c2:	4798      	blx	r3
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	e7f2      	b.n	800b3ae <__libc_init_array+0x1e>
 800b3c8:	0800c5c8 	.word	0x0800c5c8
 800b3cc:	0800c5c8 	.word	0x0800c5c8
 800b3d0:	0800c5c8 	.word	0x0800c5c8
 800b3d4:	0800c5cc 	.word	0x0800c5cc

0800b3d8 <__retarget_lock_init_recursive>:
 800b3d8:	4770      	bx	lr

0800b3da <__retarget_lock_acquire_recursive>:
 800b3da:	4770      	bx	lr

0800b3dc <__retarget_lock_release_recursive>:
 800b3dc:	4770      	bx	lr

0800b3de <memcpy>:
 800b3de:	440a      	add	r2, r1
 800b3e0:	4291      	cmp	r1, r2
 800b3e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3e6:	d100      	bne.n	800b3ea <memcpy+0xc>
 800b3e8:	4770      	bx	lr
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3f4:	4291      	cmp	r1, r2
 800b3f6:	d1f9      	bne.n	800b3ec <memcpy+0xe>
 800b3f8:	bd10      	pop	{r4, pc}
	...

0800b3fc <__assert_func>:
 800b3fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3fe:	4614      	mov	r4, r2
 800b400:	461a      	mov	r2, r3
 800b402:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <__assert_func+0x2c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4605      	mov	r5, r0
 800b408:	68d8      	ldr	r0, [r3, #12]
 800b40a:	b954      	cbnz	r4, 800b422 <__assert_func+0x26>
 800b40c:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <__assert_func+0x30>)
 800b40e:	461c      	mov	r4, r3
 800b410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b414:	9100      	str	r1, [sp, #0]
 800b416:	462b      	mov	r3, r5
 800b418:	4905      	ldr	r1, [pc, #20]	@ (800b430 <__assert_func+0x34>)
 800b41a:	f000 fbe9 	bl	800bbf0 <fiprintf>
 800b41e:	f000 fc13 	bl	800bc48 <abort>
 800b422:	4b04      	ldr	r3, [pc, #16]	@ (800b434 <__assert_func+0x38>)
 800b424:	e7f4      	b.n	800b410 <__assert_func+0x14>
 800b426:	bf00      	nop
 800b428:	240000a8 	.word	0x240000a8
 800b42c:	0800c589 	.word	0x0800c589
 800b430:	0800c55b 	.word	0x0800c55b
 800b434:	0800c54e 	.word	0x0800c54e

0800b438 <_free_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4605      	mov	r5, r0
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d041      	beq.n	800b4c4 <_free_r+0x8c>
 800b440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b444:	1f0c      	subs	r4, r1, #4
 800b446:	2b00      	cmp	r3, #0
 800b448:	bfb8      	it	lt
 800b44a:	18e4      	addlt	r4, r4, r3
 800b44c:	f7ff fd16 	bl	800ae7c <__malloc_lock>
 800b450:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c8 <_free_r+0x90>)
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	b933      	cbnz	r3, 800b464 <_free_r+0x2c>
 800b456:	6063      	str	r3, [r4, #4]
 800b458:	6014      	str	r4, [r2, #0]
 800b45a:	4628      	mov	r0, r5
 800b45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b460:	f7ff bd12 	b.w	800ae88 <__malloc_unlock>
 800b464:	42a3      	cmp	r3, r4
 800b466:	d908      	bls.n	800b47a <_free_r+0x42>
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	1821      	adds	r1, r4, r0
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf01      	itttt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	1809      	addeq	r1, r1, r0
 800b476:	6021      	streq	r1, [r4, #0]
 800b478:	e7ed      	b.n	800b456 <_free_r+0x1e>
 800b47a:	461a      	mov	r2, r3
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b10b      	cbz	r3, 800b484 <_free_r+0x4c>
 800b480:	42a3      	cmp	r3, r4
 800b482:	d9fa      	bls.n	800b47a <_free_r+0x42>
 800b484:	6811      	ldr	r1, [r2, #0]
 800b486:	1850      	adds	r0, r2, r1
 800b488:	42a0      	cmp	r0, r4
 800b48a:	d10b      	bne.n	800b4a4 <_free_r+0x6c>
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	4401      	add	r1, r0
 800b490:	1850      	adds	r0, r2, r1
 800b492:	4283      	cmp	r3, r0
 800b494:	6011      	str	r1, [r2, #0]
 800b496:	d1e0      	bne.n	800b45a <_free_r+0x22>
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	6053      	str	r3, [r2, #4]
 800b49e:	4408      	add	r0, r1
 800b4a0:	6010      	str	r0, [r2, #0]
 800b4a2:	e7da      	b.n	800b45a <_free_r+0x22>
 800b4a4:	d902      	bls.n	800b4ac <_free_r+0x74>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	e7d6      	b.n	800b45a <_free_r+0x22>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	1821      	adds	r1, r4, r0
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf04      	itt	eq
 800b4b4:	6819      	ldreq	r1, [r3, #0]
 800b4b6:	685b      	ldreq	r3, [r3, #4]
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	bf04      	itt	eq
 800b4bc:	1809      	addeq	r1, r1, r0
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	6054      	str	r4, [r2, #4]
 800b4c2:	e7ca      	b.n	800b45a <_free_r+0x22>
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	24000754 	.word	0x24000754

0800b4cc <__ssputs_r>:
 800b4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d0:	688e      	ldr	r6, [r1, #8]
 800b4d2:	461f      	mov	r7, r3
 800b4d4:	42be      	cmp	r6, r7
 800b4d6:	680b      	ldr	r3, [r1, #0]
 800b4d8:	4682      	mov	sl, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	d82d      	bhi.n	800b53c <__ssputs_r+0x70>
 800b4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4e8:	d026      	beq.n	800b538 <__ssputs_r+0x6c>
 800b4ea:	6965      	ldr	r5, [r4, #20]
 800b4ec:	6909      	ldr	r1, [r1, #16]
 800b4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f2:	eba3 0901 	sub.w	r9, r3, r1
 800b4f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4fa:	1c7b      	adds	r3, r7, #1
 800b4fc:	444b      	add	r3, r9
 800b4fe:	106d      	asrs	r5, r5, #1
 800b500:	429d      	cmp	r5, r3
 800b502:	bf38      	it	cc
 800b504:	461d      	movcc	r5, r3
 800b506:	0553      	lsls	r3, r2, #21
 800b508:	d527      	bpl.n	800b55a <__ssputs_r+0x8e>
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7ff fc36 	bl	800ad7c <_malloc_r>
 800b510:	4606      	mov	r6, r0
 800b512:	b360      	cbz	r0, 800b56e <__ssputs_r+0xa2>
 800b514:	6921      	ldr	r1, [r4, #16]
 800b516:	464a      	mov	r2, r9
 800b518:	f7ff ff61 	bl	800b3de <memcpy>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	6126      	str	r6, [r4, #16]
 800b52a:	6165      	str	r5, [r4, #20]
 800b52c:	444e      	add	r6, r9
 800b52e:	eba5 0509 	sub.w	r5, r5, r9
 800b532:	6026      	str	r6, [r4, #0]
 800b534:	60a5      	str	r5, [r4, #8]
 800b536:	463e      	mov	r6, r7
 800b538:	42be      	cmp	r6, r7
 800b53a:	d900      	bls.n	800b53e <__ssputs_r+0x72>
 800b53c:	463e      	mov	r6, r7
 800b53e:	6820      	ldr	r0, [r4, #0]
 800b540:	4632      	mov	r2, r6
 800b542:	4641      	mov	r1, r8
 800b544:	f000 fb66 	bl	800bc14 <memmove>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	1b9b      	subs	r3, r3, r6
 800b54c:	60a3      	str	r3, [r4, #8]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	4433      	add	r3, r6
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	2000      	movs	r0, #0
 800b556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55a:	462a      	mov	r2, r5
 800b55c:	f000 fb7b 	bl	800bc56 <_realloc_r>
 800b560:	4606      	mov	r6, r0
 800b562:	2800      	cmp	r0, #0
 800b564:	d1e0      	bne.n	800b528 <__ssputs_r+0x5c>
 800b566:	6921      	ldr	r1, [r4, #16]
 800b568:	4650      	mov	r0, sl
 800b56a:	f7ff ff65 	bl	800b438 <_free_r>
 800b56e:	230c      	movs	r3, #12
 800b570:	f8ca 3000 	str.w	r3, [sl]
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57a:	81a3      	strh	r3, [r4, #12]
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	e7e9      	b.n	800b556 <__ssputs_r+0x8a>
	...

0800b584 <_svfiprintf_r>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	4698      	mov	r8, r3
 800b58a:	898b      	ldrh	r3, [r1, #12]
 800b58c:	061b      	lsls	r3, r3, #24
 800b58e:	b09d      	sub	sp, #116	@ 0x74
 800b590:	4607      	mov	r7, r0
 800b592:	460d      	mov	r5, r1
 800b594:	4614      	mov	r4, r2
 800b596:	d510      	bpl.n	800b5ba <_svfiprintf_r+0x36>
 800b598:	690b      	ldr	r3, [r1, #16]
 800b59a:	b973      	cbnz	r3, 800b5ba <_svfiprintf_r+0x36>
 800b59c:	2140      	movs	r1, #64	@ 0x40
 800b59e:	f7ff fbed 	bl	800ad7c <_malloc_r>
 800b5a2:	6028      	str	r0, [r5, #0]
 800b5a4:	6128      	str	r0, [r5, #16]
 800b5a6:	b930      	cbnz	r0, 800b5b6 <_svfiprintf_r+0x32>
 800b5a8:	230c      	movs	r3, #12
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	b01d      	add	sp, #116	@ 0x74
 800b5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b6:	2340      	movs	r3, #64	@ 0x40
 800b5b8:	616b      	str	r3, [r5, #20]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5be:	2320      	movs	r3, #32
 800b5c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c8:	2330      	movs	r3, #48	@ 0x30
 800b5ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b768 <_svfiprintf_r+0x1e4>
 800b5ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5d2:	f04f 0901 	mov.w	r9, #1
 800b5d6:	4623      	mov	r3, r4
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5de:	b10a      	cbz	r2, 800b5e4 <_svfiprintf_r+0x60>
 800b5e0:	2a25      	cmp	r2, #37	@ 0x25
 800b5e2:	d1f9      	bne.n	800b5d8 <_svfiprintf_r+0x54>
 800b5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e8:	d00b      	beq.n	800b602 <_svfiprintf_r+0x7e>
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ff6b 	bl	800b4cc <__ssputs_r>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f000 80a7 	beq.w	800b74a <_svfiprintf_r+0x1c6>
 800b5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5fe:	445a      	add	r2, fp
 800b600:	9209      	str	r2, [sp, #36]	@ 0x24
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 809f 	beq.w	800b74a <_svfiprintf_r+0x1c6>
 800b60c:	2300      	movs	r3, #0
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295
 800b612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b616:	f10a 0a01 	add.w	sl, sl, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	9307      	str	r3, [sp, #28]
 800b61e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b622:	931a      	str	r3, [sp, #104]	@ 0x68
 800b624:	4654      	mov	r4, sl
 800b626:	2205      	movs	r2, #5
 800b628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62c:	484e      	ldr	r0, [pc, #312]	@ (800b768 <_svfiprintf_r+0x1e4>)
 800b62e:	f7f4 fe7f 	bl	8000330 <memchr>
 800b632:	9a04      	ldr	r2, [sp, #16]
 800b634:	b9d8      	cbnz	r0, 800b66e <_svfiprintf_r+0xea>
 800b636:	06d0      	lsls	r0, r2, #27
 800b638:	bf44      	itt	mi
 800b63a:	2320      	movmi	r3, #32
 800b63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b640:	0711      	lsls	r1, r2, #28
 800b642:	bf44      	itt	mi
 800b644:	232b      	movmi	r3, #43	@ 0x2b
 800b646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b650:	d015      	beq.n	800b67e <_svfiprintf_r+0xfa>
 800b652:	9a07      	ldr	r2, [sp, #28]
 800b654:	4654      	mov	r4, sl
 800b656:	2000      	movs	r0, #0
 800b658:	f04f 0c0a 	mov.w	ip, #10
 800b65c:	4621      	mov	r1, r4
 800b65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b662:	3b30      	subs	r3, #48	@ 0x30
 800b664:	2b09      	cmp	r3, #9
 800b666:	d94b      	bls.n	800b700 <_svfiprintf_r+0x17c>
 800b668:	b1b0      	cbz	r0, 800b698 <_svfiprintf_r+0x114>
 800b66a:	9207      	str	r2, [sp, #28]
 800b66c:	e014      	b.n	800b698 <_svfiprintf_r+0x114>
 800b66e:	eba0 0308 	sub.w	r3, r0, r8
 800b672:	fa09 f303 	lsl.w	r3, r9, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	46a2      	mov	sl, r4
 800b67c:	e7d2      	b.n	800b624 <_svfiprintf_r+0xa0>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	1d19      	adds	r1, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9103      	str	r1, [sp, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfbb      	ittet	lt
 800b68a:	425b      	neglt	r3, r3
 800b68c:	f042 0202 	orrlt.w	r2, r2, #2
 800b690:	9307      	strge	r3, [sp, #28]
 800b692:	9307      	strlt	r3, [sp, #28]
 800b694:	bfb8      	it	lt
 800b696:	9204      	strlt	r2, [sp, #16]
 800b698:	7823      	ldrb	r3, [r4, #0]
 800b69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b69c:	d10a      	bne.n	800b6b4 <_svfiprintf_r+0x130>
 800b69e:	7863      	ldrb	r3, [r4, #1]
 800b6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a2:	d132      	bne.n	800b70a <_svfiprintf_r+0x186>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	9203      	str	r2, [sp, #12]
 800b6ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6b0:	3402      	adds	r4, #2
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b778 <_svfiprintf_r+0x1f4>
 800b6b8:	7821      	ldrb	r1, [r4, #0]
 800b6ba:	2203      	movs	r2, #3
 800b6bc:	4650      	mov	r0, sl
 800b6be:	f7f4 fe37 	bl	8000330 <memchr>
 800b6c2:	b138      	cbz	r0, 800b6d4 <_svfiprintf_r+0x150>
 800b6c4:	9b04      	ldr	r3, [sp, #16]
 800b6c6:	eba0 000a 	sub.w	r0, r0, sl
 800b6ca:	2240      	movs	r2, #64	@ 0x40
 800b6cc:	4082      	lsls	r2, r0
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	3401      	adds	r4, #1
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d8:	4824      	ldr	r0, [pc, #144]	@ (800b76c <_svfiprintf_r+0x1e8>)
 800b6da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6de:	2206      	movs	r2, #6
 800b6e0:	f7f4 fe26 	bl	8000330 <memchr>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d036      	beq.n	800b756 <_svfiprintf_r+0x1d2>
 800b6e8:	4b21      	ldr	r3, [pc, #132]	@ (800b770 <_svfiprintf_r+0x1ec>)
 800b6ea:	bb1b      	cbnz	r3, 800b734 <_svfiprintf_r+0x1b0>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	3307      	adds	r3, #7
 800b6f0:	f023 0307 	bic.w	r3, r3, #7
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fa:	4433      	add	r3, r6
 800b6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6fe:	e76a      	b.n	800b5d6 <_svfiprintf_r+0x52>
 800b700:	fb0c 3202 	mla	r2, ip, r2, r3
 800b704:	460c      	mov	r4, r1
 800b706:	2001      	movs	r0, #1
 800b708:	e7a8      	b.n	800b65c <_svfiprintf_r+0xd8>
 800b70a:	2300      	movs	r3, #0
 800b70c:	3401      	adds	r4, #1
 800b70e:	9305      	str	r3, [sp, #20]
 800b710:	4619      	mov	r1, r3
 800b712:	f04f 0c0a 	mov.w	ip, #10
 800b716:	4620      	mov	r0, r4
 800b718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b71c:	3a30      	subs	r2, #48	@ 0x30
 800b71e:	2a09      	cmp	r2, #9
 800b720:	d903      	bls.n	800b72a <_svfiprintf_r+0x1a6>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0c6      	beq.n	800b6b4 <_svfiprintf_r+0x130>
 800b726:	9105      	str	r1, [sp, #20]
 800b728:	e7c4      	b.n	800b6b4 <_svfiprintf_r+0x130>
 800b72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b72e:	4604      	mov	r4, r0
 800b730:	2301      	movs	r3, #1
 800b732:	e7f0      	b.n	800b716 <_svfiprintf_r+0x192>
 800b734:	ab03      	add	r3, sp, #12
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	462a      	mov	r2, r5
 800b73a:	4b0e      	ldr	r3, [pc, #56]	@ (800b774 <_svfiprintf_r+0x1f0>)
 800b73c:	a904      	add	r1, sp, #16
 800b73e:	4638      	mov	r0, r7
 800b740:	f3af 8000 	nop.w
 800b744:	1c42      	adds	r2, r0, #1
 800b746:	4606      	mov	r6, r0
 800b748:	d1d6      	bne.n	800b6f8 <_svfiprintf_r+0x174>
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	065b      	lsls	r3, r3, #25
 800b74e:	f53f af2d 	bmi.w	800b5ac <_svfiprintf_r+0x28>
 800b752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b754:	e72c      	b.n	800b5b0 <_svfiprintf_r+0x2c>
 800b756:	ab03      	add	r3, sp, #12
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	462a      	mov	r2, r5
 800b75c:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <_svfiprintf_r+0x1f0>)
 800b75e:	a904      	add	r1, sp, #16
 800b760:	4638      	mov	r0, r7
 800b762:	f000 f879 	bl	800b858 <_printf_i>
 800b766:	e7ed      	b.n	800b744 <_svfiprintf_r+0x1c0>
 800b768:	0800c58a 	.word	0x0800c58a
 800b76c:	0800c594 	.word	0x0800c594
 800b770:	00000000 	.word	0x00000000
 800b774:	0800b4cd 	.word	0x0800b4cd
 800b778:	0800c590 	.word	0x0800c590

0800b77c <_printf_common>:
 800b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	4616      	mov	r6, r2
 800b782:	4698      	mov	r8, r3
 800b784:	688a      	ldr	r2, [r1, #8]
 800b786:	690b      	ldr	r3, [r1, #16]
 800b788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bfb8      	it	lt
 800b790:	4613      	movlt	r3, r2
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b798:	4607      	mov	r7, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b10a      	cbz	r2, 800b7a2 <_printf_common+0x26>
 800b79e:	3301      	adds	r3, #1
 800b7a0:	6033      	str	r3, [r6, #0]
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	0699      	lsls	r1, r3, #26
 800b7a6:	bf42      	ittt	mi
 800b7a8:	6833      	ldrmi	r3, [r6, #0]
 800b7aa:	3302      	addmi	r3, #2
 800b7ac:	6033      	strmi	r3, [r6, #0]
 800b7ae:	6825      	ldr	r5, [r4, #0]
 800b7b0:	f015 0506 	ands.w	r5, r5, #6
 800b7b4:	d106      	bne.n	800b7c4 <_printf_common+0x48>
 800b7b6:	f104 0a19 	add.w	sl, r4, #25
 800b7ba:	68e3      	ldr	r3, [r4, #12]
 800b7bc:	6832      	ldr	r2, [r6, #0]
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	dc26      	bgt.n	800b812 <_printf_common+0x96>
 800b7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7c8:	6822      	ldr	r2, [r4, #0]
 800b7ca:	3b00      	subs	r3, #0
 800b7cc:	bf18      	it	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	0692      	lsls	r2, r2, #26
 800b7d2:	d42b      	bmi.n	800b82c <_printf_common+0xb0>
 800b7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7d8:	4641      	mov	r1, r8
 800b7da:	4638      	mov	r0, r7
 800b7dc:	47c8      	blx	r9
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d01e      	beq.n	800b820 <_printf_common+0xa4>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	6922      	ldr	r2, [r4, #16]
 800b7e6:	f003 0306 	and.w	r3, r3, #6
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	bf02      	ittt	eq
 800b7ee:	68e5      	ldreq	r5, [r4, #12]
 800b7f0:	6833      	ldreq	r3, [r6, #0]
 800b7f2:	1aed      	subeq	r5, r5, r3
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	bf0c      	ite	eq
 800b7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7fc:	2500      	movne	r5, #0
 800b7fe:	4293      	cmp	r3, r2
 800b800:	bfc4      	itt	gt
 800b802:	1a9b      	subgt	r3, r3, r2
 800b804:	18ed      	addgt	r5, r5, r3
 800b806:	2600      	movs	r6, #0
 800b808:	341a      	adds	r4, #26
 800b80a:	42b5      	cmp	r5, r6
 800b80c:	d11a      	bne.n	800b844 <_printf_common+0xc8>
 800b80e:	2000      	movs	r0, #0
 800b810:	e008      	b.n	800b824 <_printf_common+0xa8>
 800b812:	2301      	movs	r3, #1
 800b814:	4652      	mov	r2, sl
 800b816:	4641      	mov	r1, r8
 800b818:	4638      	mov	r0, r7
 800b81a:	47c8      	blx	r9
 800b81c:	3001      	adds	r0, #1
 800b81e:	d103      	bne.n	800b828 <_printf_common+0xac>
 800b820:	f04f 30ff 	mov.w	r0, #4294967295
 800b824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b828:	3501      	adds	r5, #1
 800b82a:	e7c6      	b.n	800b7ba <_printf_common+0x3e>
 800b82c:	18e1      	adds	r1, r4, r3
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	2030      	movs	r0, #48	@ 0x30
 800b832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b836:	4422      	add	r2, r4
 800b838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b840:	3302      	adds	r3, #2
 800b842:	e7c7      	b.n	800b7d4 <_printf_common+0x58>
 800b844:	2301      	movs	r3, #1
 800b846:	4622      	mov	r2, r4
 800b848:	4641      	mov	r1, r8
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c8      	blx	r9
 800b84e:	3001      	adds	r0, #1
 800b850:	d0e6      	beq.n	800b820 <_printf_common+0xa4>
 800b852:	3601      	adds	r6, #1
 800b854:	e7d9      	b.n	800b80a <_printf_common+0x8e>
	...

0800b858 <_printf_i>:
 800b858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	7e0f      	ldrb	r7, [r1, #24]
 800b85e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b860:	2f78      	cmp	r7, #120	@ 0x78
 800b862:	4691      	mov	r9, r2
 800b864:	4680      	mov	r8, r0
 800b866:	460c      	mov	r4, r1
 800b868:	469a      	mov	sl, r3
 800b86a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b86e:	d807      	bhi.n	800b880 <_printf_i+0x28>
 800b870:	2f62      	cmp	r7, #98	@ 0x62
 800b872:	d80a      	bhi.n	800b88a <_printf_i+0x32>
 800b874:	2f00      	cmp	r7, #0
 800b876:	f000 80d2 	beq.w	800ba1e <_printf_i+0x1c6>
 800b87a:	2f58      	cmp	r7, #88	@ 0x58
 800b87c:	f000 80b9 	beq.w	800b9f2 <_printf_i+0x19a>
 800b880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b888:	e03a      	b.n	800b900 <_printf_i+0xa8>
 800b88a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b88e:	2b15      	cmp	r3, #21
 800b890:	d8f6      	bhi.n	800b880 <_printf_i+0x28>
 800b892:	a101      	add	r1, pc, #4	@ (adr r1, 800b898 <_printf_i+0x40>)
 800b894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b898:	0800b8f1 	.word	0x0800b8f1
 800b89c:	0800b905 	.word	0x0800b905
 800b8a0:	0800b881 	.word	0x0800b881
 800b8a4:	0800b881 	.word	0x0800b881
 800b8a8:	0800b881 	.word	0x0800b881
 800b8ac:	0800b881 	.word	0x0800b881
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800b881 	.word	0x0800b881
 800b8b8:	0800b881 	.word	0x0800b881
 800b8bc:	0800b881 	.word	0x0800b881
 800b8c0:	0800b881 	.word	0x0800b881
 800b8c4:	0800ba05 	.word	0x0800ba05
 800b8c8:	0800b92f 	.word	0x0800b92f
 800b8cc:	0800b9bf 	.word	0x0800b9bf
 800b8d0:	0800b881 	.word	0x0800b881
 800b8d4:	0800b881 	.word	0x0800b881
 800b8d8:	0800ba27 	.word	0x0800ba27
 800b8dc:	0800b881 	.word	0x0800b881
 800b8e0:	0800b92f 	.word	0x0800b92f
 800b8e4:	0800b881 	.word	0x0800b881
 800b8e8:	0800b881 	.word	0x0800b881
 800b8ec:	0800b9c7 	.word	0x0800b9c7
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6032      	str	r2, [r6, #0]
 800b8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b900:	2301      	movs	r3, #1
 800b902:	e09d      	b.n	800ba40 <_printf_i+0x1e8>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	6820      	ldr	r0, [r4, #0]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	6031      	str	r1, [r6, #0]
 800b90c:	0606      	lsls	r6, r0, #24
 800b90e:	d501      	bpl.n	800b914 <_printf_i+0xbc>
 800b910:	681d      	ldr	r5, [r3, #0]
 800b912:	e003      	b.n	800b91c <_printf_i+0xc4>
 800b914:	0645      	lsls	r5, r0, #25
 800b916:	d5fb      	bpl.n	800b910 <_printf_i+0xb8>
 800b918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b91c:	2d00      	cmp	r5, #0
 800b91e:	da03      	bge.n	800b928 <_printf_i+0xd0>
 800b920:	232d      	movs	r3, #45	@ 0x2d
 800b922:	426d      	negs	r5, r5
 800b924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b928:	4859      	ldr	r0, [pc, #356]	@ (800ba90 <_printf_i+0x238>)
 800b92a:	230a      	movs	r3, #10
 800b92c:	e011      	b.n	800b952 <_printf_i+0xfa>
 800b92e:	6821      	ldr	r1, [r4, #0]
 800b930:	6833      	ldr	r3, [r6, #0]
 800b932:	0608      	lsls	r0, r1, #24
 800b934:	f853 5b04 	ldr.w	r5, [r3], #4
 800b938:	d402      	bmi.n	800b940 <_printf_i+0xe8>
 800b93a:	0649      	lsls	r1, r1, #25
 800b93c:	bf48      	it	mi
 800b93e:	b2ad      	uxthmi	r5, r5
 800b940:	2f6f      	cmp	r7, #111	@ 0x6f
 800b942:	4853      	ldr	r0, [pc, #332]	@ (800ba90 <_printf_i+0x238>)
 800b944:	6033      	str	r3, [r6, #0]
 800b946:	bf14      	ite	ne
 800b948:	230a      	movne	r3, #10
 800b94a:	2308      	moveq	r3, #8
 800b94c:	2100      	movs	r1, #0
 800b94e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b952:	6866      	ldr	r6, [r4, #4]
 800b954:	60a6      	str	r6, [r4, #8]
 800b956:	2e00      	cmp	r6, #0
 800b958:	bfa2      	ittt	ge
 800b95a:	6821      	ldrge	r1, [r4, #0]
 800b95c:	f021 0104 	bicge.w	r1, r1, #4
 800b960:	6021      	strge	r1, [r4, #0]
 800b962:	b90d      	cbnz	r5, 800b968 <_printf_i+0x110>
 800b964:	2e00      	cmp	r6, #0
 800b966:	d04b      	beq.n	800ba00 <_printf_i+0x1a8>
 800b968:	4616      	mov	r6, r2
 800b96a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b96e:	fb03 5711 	mls	r7, r3, r1, r5
 800b972:	5dc7      	ldrb	r7, [r0, r7]
 800b974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b978:	462f      	mov	r7, r5
 800b97a:	42bb      	cmp	r3, r7
 800b97c:	460d      	mov	r5, r1
 800b97e:	d9f4      	bls.n	800b96a <_printf_i+0x112>
 800b980:	2b08      	cmp	r3, #8
 800b982:	d10b      	bne.n	800b99c <_printf_i+0x144>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	07df      	lsls	r7, r3, #31
 800b988:	d508      	bpl.n	800b99c <_printf_i+0x144>
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4299      	cmp	r1, r3
 800b990:	bfde      	ittt	le
 800b992:	2330      	movle	r3, #48	@ 0x30
 800b994:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b99c:	1b92      	subs	r2, r2, r6
 800b99e:	6122      	str	r2, [r4, #16]
 800b9a0:	f8cd a000 	str.w	sl, [sp]
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	aa03      	add	r2, sp, #12
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	f7ff fee6 	bl	800b77c <_printf_common>
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d14a      	bne.n	800ba4a <_printf_i+0x1f2>
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	b004      	add	sp, #16
 800b9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	4833      	ldr	r0, [pc, #204]	@ (800ba94 <_printf_i+0x23c>)
 800b9c8:	2778      	movs	r7, #120	@ 0x78
 800b9ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6831      	ldr	r1, [r6, #0]
 800b9d2:	061f      	lsls	r7, r3, #24
 800b9d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9d8:	d402      	bmi.n	800b9e0 <_printf_i+0x188>
 800b9da:	065f      	lsls	r7, r3, #25
 800b9dc:	bf48      	it	mi
 800b9de:	b2ad      	uxthmi	r5, r5
 800b9e0:	6031      	str	r1, [r6, #0]
 800b9e2:	07d9      	lsls	r1, r3, #31
 800b9e4:	bf44      	itt	mi
 800b9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ea:	6023      	strmi	r3, [r4, #0]
 800b9ec:	b11d      	cbz	r5, 800b9f6 <_printf_i+0x19e>
 800b9ee:	2310      	movs	r3, #16
 800b9f0:	e7ac      	b.n	800b94c <_printf_i+0xf4>
 800b9f2:	4827      	ldr	r0, [pc, #156]	@ (800ba90 <_printf_i+0x238>)
 800b9f4:	e7e9      	b.n	800b9ca <_printf_i+0x172>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	f023 0320 	bic.w	r3, r3, #32
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	e7f6      	b.n	800b9ee <_printf_i+0x196>
 800ba00:	4616      	mov	r6, r2
 800ba02:	e7bd      	b.n	800b980 <_printf_i+0x128>
 800ba04:	6833      	ldr	r3, [r6, #0]
 800ba06:	6825      	ldr	r5, [r4, #0]
 800ba08:	6961      	ldr	r1, [r4, #20]
 800ba0a:	1d18      	adds	r0, r3, #4
 800ba0c:	6030      	str	r0, [r6, #0]
 800ba0e:	062e      	lsls	r6, r5, #24
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	d501      	bpl.n	800ba18 <_printf_i+0x1c0>
 800ba14:	6019      	str	r1, [r3, #0]
 800ba16:	e002      	b.n	800ba1e <_printf_i+0x1c6>
 800ba18:	0668      	lsls	r0, r5, #25
 800ba1a:	d5fb      	bpl.n	800ba14 <_printf_i+0x1bc>
 800ba1c:	8019      	strh	r1, [r3, #0]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	4616      	mov	r6, r2
 800ba24:	e7bc      	b.n	800b9a0 <_printf_i+0x148>
 800ba26:	6833      	ldr	r3, [r6, #0]
 800ba28:	1d1a      	adds	r2, r3, #4
 800ba2a:	6032      	str	r2, [r6, #0]
 800ba2c:	681e      	ldr	r6, [r3, #0]
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	2100      	movs	r1, #0
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7f4 fc7c 	bl	8000330 <memchr>
 800ba38:	b108      	cbz	r0, 800ba3e <_printf_i+0x1e6>
 800ba3a:	1b80      	subs	r0, r0, r6
 800ba3c:	6060      	str	r0, [r4, #4]
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	2300      	movs	r3, #0
 800ba44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba48:	e7aa      	b.n	800b9a0 <_printf_i+0x148>
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	4649      	mov	r1, r9
 800ba50:	4640      	mov	r0, r8
 800ba52:	47d0      	blx	sl
 800ba54:	3001      	adds	r0, #1
 800ba56:	d0ad      	beq.n	800b9b4 <_printf_i+0x15c>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	079b      	lsls	r3, r3, #30
 800ba5c:	d413      	bmi.n	800ba86 <_printf_i+0x22e>
 800ba5e:	68e0      	ldr	r0, [r4, #12]
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	4298      	cmp	r0, r3
 800ba64:	bfb8      	it	lt
 800ba66:	4618      	movlt	r0, r3
 800ba68:	e7a6      	b.n	800b9b8 <_printf_i+0x160>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4649      	mov	r1, r9
 800ba70:	4640      	mov	r0, r8
 800ba72:	47d0      	blx	sl
 800ba74:	3001      	adds	r0, #1
 800ba76:	d09d      	beq.n	800b9b4 <_printf_i+0x15c>
 800ba78:	3501      	adds	r5, #1
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	9903      	ldr	r1, [sp, #12]
 800ba7e:	1a5b      	subs	r3, r3, r1
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dcf2      	bgt.n	800ba6a <_printf_i+0x212>
 800ba84:	e7eb      	b.n	800ba5e <_printf_i+0x206>
 800ba86:	2500      	movs	r5, #0
 800ba88:	f104 0619 	add.w	r6, r4, #25
 800ba8c:	e7f5      	b.n	800ba7a <_printf_i+0x222>
 800ba8e:	bf00      	nop
 800ba90:	0800c59b 	.word	0x0800c59b
 800ba94:	0800c5ac 	.word	0x0800c5ac

0800ba98 <__sflush_r>:
 800ba98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa0:	0716      	lsls	r6, r2, #28
 800baa2:	4605      	mov	r5, r0
 800baa4:	460c      	mov	r4, r1
 800baa6:	d454      	bmi.n	800bb52 <__sflush_r+0xba>
 800baa8:	684b      	ldr	r3, [r1, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dc02      	bgt.n	800bab4 <__sflush_r+0x1c>
 800baae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dd48      	ble.n	800bb46 <__sflush_r+0xae>
 800bab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d045      	beq.n	800bb46 <__sflush_r+0xae>
 800baba:	2300      	movs	r3, #0
 800babc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bac0:	682f      	ldr	r7, [r5, #0]
 800bac2:	6a21      	ldr	r1, [r4, #32]
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	d030      	beq.n	800bb2a <__sflush_r+0x92>
 800bac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	0759      	lsls	r1, r3, #29
 800bace:	d505      	bpl.n	800badc <__sflush_r+0x44>
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	1ad2      	subs	r2, r2, r3
 800bad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bad6:	b10b      	cbz	r3, 800badc <__sflush_r+0x44>
 800bad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bada:	1ad2      	subs	r2, r2, r3
 800badc:	2300      	movs	r3, #0
 800bade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bae0:	6a21      	ldr	r1, [r4, #32]
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b0      	blx	r6
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	d106      	bne.n	800bafa <__sflush_r+0x62>
 800baec:	6829      	ldr	r1, [r5, #0]
 800baee:	291d      	cmp	r1, #29
 800baf0:	d82b      	bhi.n	800bb4a <__sflush_r+0xb2>
 800baf2:	4a2a      	ldr	r2, [pc, #168]	@ (800bb9c <__sflush_r+0x104>)
 800baf4:	410a      	asrs	r2, r1
 800baf6:	07d6      	lsls	r6, r2, #31
 800baf8:	d427      	bmi.n	800bb4a <__sflush_r+0xb2>
 800bafa:	2200      	movs	r2, #0
 800bafc:	6062      	str	r2, [r4, #4]
 800bafe:	04d9      	lsls	r1, r3, #19
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	6022      	str	r2, [r4, #0]
 800bb04:	d504      	bpl.n	800bb10 <__sflush_r+0x78>
 800bb06:	1c42      	adds	r2, r0, #1
 800bb08:	d101      	bne.n	800bb0e <__sflush_r+0x76>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	b903      	cbnz	r3, 800bb10 <__sflush_r+0x78>
 800bb0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb12:	602f      	str	r7, [r5, #0]
 800bb14:	b1b9      	cbz	r1, 800bb46 <__sflush_r+0xae>
 800bb16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb1a:	4299      	cmp	r1, r3
 800bb1c:	d002      	beq.n	800bb24 <__sflush_r+0x8c>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f7ff fc8a 	bl	800b438 <_free_r>
 800bb24:	2300      	movs	r3, #0
 800bb26:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb28:	e00d      	b.n	800bb46 <__sflush_r+0xae>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	47b0      	blx	r6
 800bb30:	4602      	mov	r2, r0
 800bb32:	1c50      	adds	r0, r2, #1
 800bb34:	d1c9      	bne.n	800baca <__sflush_r+0x32>
 800bb36:	682b      	ldr	r3, [r5, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d0c6      	beq.n	800baca <__sflush_r+0x32>
 800bb3c:	2b1d      	cmp	r3, #29
 800bb3e:	d001      	beq.n	800bb44 <__sflush_r+0xac>
 800bb40:	2b16      	cmp	r3, #22
 800bb42:	d11e      	bne.n	800bb82 <__sflush_r+0xea>
 800bb44:	602f      	str	r7, [r5, #0]
 800bb46:	2000      	movs	r0, #0
 800bb48:	e022      	b.n	800bb90 <__sflush_r+0xf8>
 800bb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb4e:	b21b      	sxth	r3, r3
 800bb50:	e01b      	b.n	800bb8a <__sflush_r+0xf2>
 800bb52:	690f      	ldr	r7, [r1, #16]
 800bb54:	2f00      	cmp	r7, #0
 800bb56:	d0f6      	beq.n	800bb46 <__sflush_r+0xae>
 800bb58:	0793      	lsls	r3, r2, #30
 800bb5a:	680e      	ldr	r6, [r1, #0]
 800bb5c:	bf08      	it	eq
 800bb5e:	694b      	ldreq	r3, [r1, #20]
 800bb60:	600f      	str	r7, [r1, #0]
 800bb62:	bf18      	it	ne
 800bb64:	2300      	movne	r3, #0
 800bb66:	eba6 0807 	sub.w	r8, r6, r7
 800bb6a:	608b      	str	r3, [r1, #8]
 800bb6c:	f1b8 0f00 	cmp.w	r8, #0
 800bb70:	dde9      	ble.n	800bb46 <__sflush_r+0xae>
 800bb72:	6a21      	ldr	r1, [r4, #32]
 800bb74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb76:	4643      	mov	r3, r8
 800bb78:	463a      	mov	r2, r7
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b0      	blx	r6
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	dc08      	bgt.n	800bb94 <__sflush_r+0xfc>
 800bb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb94:	4407      	add	r7, r0
 800bb96:	eba8 0800 	sub.w	r8, r8, r0
 800bb9a:	e7e7      	b.n	800bb6c <__sflush_r+0xd4>
 800bb9c:	dfbffffe 	.word	0xdfbffffe

0800bba0 <_fflush_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	690b      	ldr	r3, [r1, #16]
 800bba4:	4605      	mov	r5, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	b913      	cbnz	r3, 800bbb0 <_fflush_r+0x10>
 800bbaa:	2500      	movs	r5, #0
 800bbac:	4628      	mov	r0, r5
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	b118      	cbz	r0, 800bbba <_fflush_r+0x1a>
 800bbb2:	6a03      	ldr	r3, [r0, #32]
 800bbb4:	b90b      	cbnz	r3, 800bbba <_fflush_r+0x1a>
 800bbb6:	f7ff fa7d 	bl	800b0b4 <__sinit>
 800bbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0f3      	beq.n	800bbaa <_fflush_r+0xa>
 800bbc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbc4:	07d0      	lsls	r0, r2, #31
 800bbc6:	d404      	bmi.n	800bbd2 <_fflush_r+0x32>
 800bbc8:	0599      	lsls	r1, r3, #22
 800bbca:	d402      	bmi.n	800bbd2 <_fflush_r+0x32>
 800bbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbce:	f7ff fc04 	bl	800b3da <__retarget_lock_acquire_recursive>
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f7ff ff5f 	bl	800ba98 <__sflush_r>
 800bbda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbdc:	07da      	lsls	r2, r3, #31
 800bbde:	4605      	mov	r5, r0
 800bbe0:	d4e4      	bmi.n	800bbac <_fflush_r+0xc>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	059b      	lsls	r3, r3, #22
 800bbe6:	d4e1      	bmi.n	800bbac <_fflush_r+0xc>
 800bbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbea:	f7ff fbf7 	bl	800b3dc <__retarget_lock_release_recursive>
 800bbee:	e7dd      	b.n	800bbac <_fflush_r+0xc>

0800bbf0 <fiprintf>:
 800bbf0:	b40e      	push	{r1, r2, r3}
 800bbf2:	b503      	push	{r0, r1, lr}
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	4805      	ldr	r0, [pc, #20]	@ (800bc10 <fiprintf+0x20>)
 800bbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfe:	6800      	ldr	r0, [r0, #0]
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	f000 f87f 	bl	800bd04 <_vfiprintf_r>
 800bc06:	b002      	add	sp, #8
 800bc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc0c:	b003      	add	sp, #12
 800bc0e:	4770      	bx	lr
 800bc10:	240000a8 	.word	0x240000a8

0800bc14 <memmove>:
 800bc14:	4288      	cmp	r0, r1
 800bc16:	b510      	push	{r4, lr}
 800bc18:	eb01 0402 	add.w	r4, r1, r2
 800bc1c:	d902      	bls.n	800bc24 <memmove+0x10>
 800bc1e:	4284      	cmp	r4, r0
 800bc20:	4623      	mov	r3, r4
 800bc22:	d807      	bhi.n	800bc34 <memmove+0x20>
 800bc24:	1e43      	subs	r3, r0, #1
 800bc26:	42a1      	cmp	r1, r4
 800bc28:	d008      	beq.n	800bc3c <memmove+0x28>
 800bc2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc32:	e7f8      	b.n	800bc26 <memmove+0x12>
 800bc34:	4402      	add	r2, r0
 800bc36:	4601      	mov	r1, r0
 800bc38:	428a      	cmp	r2, r1
 800bc3a:	d100      	bne.n	800bc3e <memmove+0x2a>
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc46:	e7f7      	b.n	800bc38 <memmove+0x24>

0800bc48 <abort>:
 800bc48:	b508      	push	{r3, lr}
 800bc4a:	2006      	movs	r0, #6
 800bc4c:	f000 fa2e 	bl	800c0ac <raise>
 800bc50:	2001      	movs	r0, #1
 800bc52:	f7f5 fb03 	bl	800125c <_exit>

0800bc56 <_realloc_r>:
 800bc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4615      	mov	r5, r2
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b921      	cbnz	r1, 800bc6c <_realloc_r+0x16>
 800bc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc66:	4611      	mov	r1, r2
 800bc68:	f7ff b888 	b.w	800ad7c <_malloc_r>
 800bc6c:	b92a      	cbnz	r2, 800bc7a <_realloc_r+0x24>
 800bc6e:	f7ff fbe3 	bl	800b438 <_free_r>
 800bc72:	2400      	movs	r4, #0
 800bc74:	4620      	mov	r0, r4
 800bc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7a:	f000 fa33 	bl	800c0e4 <_malloc_usable_size_r>
 800bc7e:	4285      	cmp	r5, r0
 800bc80:	4606      	mov	r6, r0
 800bc82:	d802      	bhi.n	800bc8a <_realloc_r+0x34>
 800bc84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc88:	d8f4      	bhi.n	800bc74 <_realloc_r+0x1e>
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	f7ff f875 	bl	800ad7c <_malloc_r>
 800bc92:	4607      	mov	r7, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d0ec      	beq.n	800bc72 <_realloc_r+0x1c>
 800bc98:	42b5      	cmp	r5, r6
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	bf28      	it	cs
 800bca0:	4632      	movcs	r2, r6
 800bca2:	f7ff fb9c 	bl	800b3de <memcpy>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4640      	mov	r0, r8
 800bcaa:	f7ff fbc5 	bl	800b438 <_free_r>
 800bcae:	463c      	mov	r4, r7
 800bcb0:	e7e0      	b.n	800bc74 <_realloc_r+0x1e>

0800bcb2 <__sfputc_r>:
 800bcb2:	6893      	ldr	r3, [r2, #8]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	b410      	push	{r4}
 800bcba:	6093      	str	r3, [r2, #8]
 800bcbc:	da08      	bge.n	800bcd0 <__sfputc_r+0x1e>
 800bcbe:	6994      	ldr	r4, [r2, #24]
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	db01      	blt.n	800bcc8 <__sfputc_r+0x16>
 800bcc4:	290a      	cmp	r1, #10
 800bcc6:	d103      	bne.n	800bcd0 <__sfputc_r+0x1e>
 800bcc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bccc:	f000 b932 	b.w	800bf34 <__swbuf_r>
 800bcd0:	6813      	ldr	r3, [r2, #0]
 800bcd2:	1c58      	adds	r0, r3, #1
 800bcd4:	6010      	str	r0, [r2, #0]
 800bcd6:	7019      	strb	r1, [r3, #0]
 800bcd8:	4608      	mov	r0, r1
 800bcda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <__sfputs_r>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	4614      	mov	r4, r2
 800bce8:	18d5      	adds	r5, r2, r3
 800bcea:	42ac      	cmp	r4, r5
 800bcec:	d101      	bne.n	800bcf2 <__sfputs_r+0x12>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	e007      	b.n	800bd02 <__sfputs_r+0x22>
 800bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf6:	463a      	mov	r2, r7
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7ff ffda 	bl	800bcb2 <__sfputc_r>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d1f3      	bne.n	800bcea <__sfputs_r+0xa>
 800bd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd04 <_vfiprintf_r>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	460d      	mov	r5, r1
 800bd0a:	b09d      	sub	sp, #116	@ 0x74
 800bd0c:	4614      	mov	r4, r2
 800bd0e:	4698      	mov	r8, r3
 800bd10:	4606      	mov	r6, r0
 800bd12:	b118      	cbz	r0, 800bd1c <_vfiprintf_r+0x18>
 800bd14:	6a03      	ldr	r3, [r0, #32]
 800bd16:	b90b      	cbnz	r3, 800bd1c <_vfiprintf_r+0x18>
 800bd18:	f7ff f9cc 	bl	800b0b4 <__sinit>
 800bd1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd1e:	07d9      	lsls	r1, r3, #31
 800bd20:	d405      	bmi.n	800bd2e <_vfiprintf_r+0x2a>
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	059a      	lsls	r2, r3, #22
 800bd26:	d402      	bmi.n	800bd2e <_vfiprintf_r+0x2a>
 800bd28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd2a:	f7ff fb56 	bl	800b3da <__retarget_lock_acquire_recursive>
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	071b      	lsls	r3, r3, #28
 800bd32:	d501      	bpl.n	800bd38 <_vfiprintf_r+0x34>
 800bd34:	692b      	ldr	r3, [r5, #16]
 800bd36:	b99b      	cbnz	r3, 800bd60 <_vfiprintf_r+0x5c>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f938 	bl	800bfb0 <__swsetup_r>
 800bd40:	b170      	cbz	r0, 800bd60 <_vfiprintf_r+0x5c>
 800bd42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd44:	07dc      	lsls	r4, r3, #31
 800bd46:	d504      	bpl.n	800bd52 <_vfiprintf_r+0x4e>
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	b01d      	add	sp, #116	@ 0x74
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	0598      	lsls	r0, r3, #22
 800bd56:	d4f7      	bmi.n	800bd48 <_vfiprintf_r+0x44>
 800bd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd5a:	f7ff fb3f 	bl	800b3dc <__retarget_lock_release_recursive>
 800bd5e:	e7f3      	b.n	800bd48 <_vfiprintf_r+0x44>
 800bd60:	2300      	movs	r3, #0
 800bd62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd64:	2320      	movs	r3, #32
 800bd66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd6e:	2330      	movs	r3, #48	@ 0x30
 800bd70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf20 <_vfiprintf_r+0x21c>
 800bd74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd78:	f04f 0901 	mov.w	r9, #1
 800bd7c:	4623      	mov	r3, r4
 800bd7e:	469a      	mov	sl, r3
 800bd80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd84:	b10a      	cbz	r2, 800bd8a <_vfiprintf_r+0x86>
 800bd86:	2a25      	cmp	r2, #37	@ 0x25
 800bd88:	d1f9      	bne.n	800bd7e <_vfiprintf_r+0x7a>
 800bd8a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd8e:	d00b      	beq.n	800bda8 <_vfiprintf_r+0xa4>
 800bd90:	465b      	mov	r3, fp
 800bd92:	4622      	mov	r2, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7ff ffa2 	bl	800bce0 <__sfputs_r>
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	f000 80a7 	beq.w	800bef0 <_vfiprintf_r+0x1ec>
 800bda2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bda4:	445a      	add	r2, fp
 800bda6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 809f 	beq.w	800bef0 <_vfiprintf_r+0x1ec>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdbc:	f10a 0a01 	add.w	sl, sl, #1
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	9307      	str	r3, [sp, #28]
 800bdc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdca:	4654      	mov	r4, sl
 800bdcc:	2205      	movs	r2, #5
 800bdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd2:	4853      	ldr	r0, [pc, #332]	@ (800bf20 <_vfiprintf_r+0x21c>)
 800bdd4:	f7f4 faac 	bl	8000330 <memchr>
 800bdd8:	9a04      	ldr	r2, [sp, #16]
 800bdda:	b9d8      	cbnz	r0, 800be14 <_vfiprintf_r+0x110>
 800bddc:	06d1      	lsls	r1, r2, #27
 800bdde:	bf44      	itt	mi
 800bde0:	2320      	movmi	r3, #32
 800bde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde6:	0713      	lsls	r3, r2, #28
 800bde8:	bf44      	itt	mi
 800bdea:	232b      	movmi	r3, #43	@ 0x2b
 800bdec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdf6:	d015      	beq.n	800be24 <_vfiprintf_r+0x120>
 800bdf8:	9a07      	ldr	r2, [sp, #28]
 800bdfa:	4654      	mov	r4, sl
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	f04f 0c0a 	mov.w	ip, #10
 800be02:	4621      	mov	r1, r4
 800be04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be08:	3b30      	subs	r3, #48	@ 0x30
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	d94b      	bls.n	800bea6 <_vfiprintf_r+0x1a2>
 800be0e:	b1b0      	cbz	r0, 800be3e <_vfiprintf_r+0x13a>
 800be10:	9207      	str	r2, [sp, #28]
 800be12:	e014      	b.n	800be3e <_vfiprintf_r+0x13a>
 800be14:	eba0 0308 	sub.w	r3, r0, r8
 800be18:	fa09 f303 	lsl.w	r3, r9, r3
 800be1c:	4313      	orrs	r3, r2
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	46a2      	mov	sl, r4
 800be22:	e7d2      	b.n	800bdca <_vfiprintf_r+0xc6>
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	1d19      	adds	r1, r3, #4
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	9103      	str	r1, [sp, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	bfbb      	ittet	lt
 800be30:	425b      	neglt	r3, r3
 800be32:	f042 0202 	orrlt.w	r2, r2, #2
 800be36:	9307      	strge	r3, [sp, #28]
 800be38:	9307      	strlt	r3, [sp, #28]
 800be3a:	bfb8      	it	lt
 800be3c:	9204      	strlt	r2, [sp, #16]
 800be3e:	7823      	ldrb	r3, [r4, #0]
 800be40:	2b2e      	cmp	r3, #46	@ 0x2e
 800be42:	d10a      	bne.n	800be5a <_vfiprintf_r+0x156>
 800be44:	7863      	ldrb	r3, [r4, #1]
 800be46:	2b2a      	cmp	r3, #42	@ 0x2a
 800be48:	d132      	bne.n	800beb0 <_vfiprintf_r+0x1ac>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	1d1a      	adds	r2, r3, #4
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	9203      	str	r2, [sp, #12]
 800be52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be56:	3402      	adds	r4, #2
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf30 <_vfiprintf_r+0x22c>
 800be5e:	7821      	ldrb	r1, [r4, #0]
 800be60:	2203      	movs	r2, #3
 800be62:	4650      	mov	r0, sl
 800be64:	f7f4 fa64 	bl	8000330 <memchr>
 800be68:	b138      	cbz	r0, 800be7a <_vfiprintf_r+0x176>
 800be6a:	9b04      	ldr	r3, [sp, #16]
 800be6c:	eba0 000a 	sub.w	r0, r0, sl
 800be70:	2240      	movs	r2, #64	@ 0x40
 800be72:	4082      	lsls	r2, r0
 800be74:	4313      	orrs	r3, r2
 800be76:	3401      	adds	r4, #1
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7e:	4829      	ldr	r0, [pc, #164]	@ (800bf24 <_vfiprintf_r+0x220>)
 800be80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be84:	2206      	movs	r2, #6
 800be86:	f7f4 fa53 	bl	8000330 <memchr>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d03f      	beq.n	800bf0e <_vfiprintf_r+0x20a>
 800be8e:	4b26      	ldr	r3, [pc, #152]	@ (800bf28 <_vfiprintf_r+0x224>)
 800be90:	bb1b      	cbnz	r3, 800beda <_vfiprintf_r+0x1d6>
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	3307      	adds	r3, #7
 800be96:	f023 0307 	bic.w	r3, r3, #7
 800be9a:	3308      	adds	r3, #8
 800be9c:	9303      	str	r3, [sp, #12]
 800be9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea0:	443b      	add	r3, r7
 800bea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea4:	e76a      	b.n	800bd7c <_vfiprintf_r+0x78>
 800bea6:	fb0c 3202 	mla	r2, ip, r2, r3
 800beaa:	460c      	mov	r4, r1
 800beac:	2001      	movs	r0, #1
 800beae:	e7a8      	b.n	800be02 <_vfiprintf_r+0xfe>
 800beb0:	2300      	movs	r3, #0
 800beb2:	3401      	adds	r4, #1
 800beb4:	9305      	str	r3, [sp, #20]
 800beb6:	4619      	mov	r1, r3
 800beb8:	f04f 0c0a 	mov.w	ip, #10
 800bebc:	4620      	mov	r0, r4
 800bebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec2:	3a30      	subs	r2, #48	@ 0x30
 800bec4:	2a09      	cmp	r2, #9
 800bec6:	d903      	bls.n	800bed0 <_vfiprintf_r+0x1cc>
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0c6      	beq.n	800be5a <_vfiprintf_r+0x156>
 800becc:	9105      	str	r1, [sp, #20]
 800bece:	e7c4      	b.n	800be5a <_vfiprintf_r+0x156>
 800bed0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed4:	4604      	mov	r4, r0
 800bed6:	2301      	movs	r3, #1
 800bed8:	e7f0      	b.n	800bebc <_vfiprintf_r+0x1b8>
 800beda:	ab03      	add	r3, sp, #12
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	462a      	mov	r2, r5
 800bee0:	4b12      	ldr	r3, [pc, #72]	@ (800bf2c <_vfiprintf_r+0x228>)
 800bee2:	a904      	add	r1, sp, #16
 800bee4:	4630      	mov	r0, r6
 800bee6:	f3af 8000 	nop.w
 800beea:	4607      	mov	r7, r0
 800beec:	1c78      	adds	r0, r7, #1
 800beee:	d1d6      	bne.n	800be9e <_vfiprintf_r+0x19a>
 800bef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bef2:	07d9      	lsls	r1, r3, #31
 800bef4:	d405      	bmi.n	800bf02 <_vfiprintf_r+0x1fe>
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	059a      	lsls	r2, r3, #22
 800befa:	d402      	bmi.n	800bf02 <_vfiprintf_r+0x1fe>
 800befc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800befe:	f7ff fa6d 	bl	800b3dc <__retarget_lock_release_recursive>
 800bf02:	89ab      	ldrh	r3, [r5, #12]
 800bf04:	065b      	lsls	r3, r3, #25
 800bf06:	f53f af1f 	bmi.w	800bd48 <_vfiprintf_r+0x44>
 800bf0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf0c:	e71e      	b.n	800bd4c <_vfiprintf_r+0x48>
 800bf0e:	ab03      	add	r3, sp, #12
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	462a      	mov	r2, r5
 800bf14:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <_vfiprintf_r+0x228>)
 800bf16:	a904      	add	r1, sp, #16
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7ff fc9d 	bl	800b858 <_printf_i>
 800bf1e:	e7e4      	b.n	800beea <_vfiprintf_r+0x1e6>
 800bf20:	0800c58a 	.word	0x0800c58a
 800bf24:	0800c594 	.word	0x0800c594
 800bf28:	00000000 	.word	0x00000000
 800bf2c:	0800bce1 	.word	0x0800bce1
 800bf30:	0800c590 	.word	0x0800c590

0800bf34 <__swbuf_r>:
 800bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf36:	460e      	mov	r6, r1
 800bf38:	4614      	mov	r4, r2
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	b118      	cbz	r0, 800bf46 <__swbuf_r+0x12>
 800bf3e:	6a03      	ldr	r3, [r0, #32]
 800bf40:	b90b      	cbnz	r3, 800bf46 <__swbuf_r+0x12>
 800bf42:	f7ff f8b7 	bl	800b0b4 <__sinit>
 800bf46:	69a3      	ldr	r3, [r4, #24]
 800bf48:	60a3      	str	r3, [r4, #8]
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	071a      	lsls	r2, r3, #28
 800bf4e:	d501      	bpl.n	800bf54 <__swbuf_r+0x20>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	b943      	cbnz	r3, 800bf66 <__swbuf_r+0x32>
 800bf54:	4621      	mov	r1, r4
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 f82a 	bl	800bfb0 <__swsetup_r>
 800bf5c:	b118      	cbz	r0, 800bf66 <__swbuf_r+0x32>
 800bf5e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf62:	4638      	mov	r0, r7
 800bf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf66:	6823      	ldr	r3, [r4, #0]
 800bf68:	6922      	ldr	r2, [r4, #16]
 800bf6a:	1a98      	subs	r0, r3, r2
 800bf6c:	6963      	ldr	r3, [r4, #20]
 800bf6e:	b2f6      	uxtb	r6, r6
 800bf70:	4283      	cmp	r3, r0
 800bf72:	4637      	mov	r7, r6
 800bf74:	dc05      	bgt.n	800bf82 <__swbuf_r+0x4e>
 800bf76:	4621      	mov	r1, r4
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f7ff fe11 	bl	800bba0 <_fflush_r>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d1ed      	bne.n	800bf5e <__swbuf_r+0x2a>
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	60a3      	str	r3, [r4, #8]
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	6022      	str	r2, [r4, #0]
 800bf8e:	701e      	strb	r6, [r3, #0]
 800bf90:	6962      	ldr	r2, [r4, #20]
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d004      	beq.n	800bfa2 <__swbuf_r+0x6e>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	07db      	lsls	r3, r3, #31
 800bf9c:	d5e1      	bpl.n	800bf62 <__swbuf_r+0x2e>
 800bf9e:	2e0a      	cmp	r6, #10
 800bfa0:	d1df      	bne.n	800bf62 <__swbuf_r+0x2e>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f7ff fdfb 	bl	800bba0 <_fflush_r>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d0d9      	beq.n	800bf62 <__swbuf_r+0x2e>
 800bfae:	e7d6      	b.n	800bf5e <__swbuf_r+0x2a>

0800bfb0 <__swsetup_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4b29      	ldr	r3, [pc, #164]	@ (800c058 <__swsetup_r+0xa8>)
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	460c      	mov	r4, r1
 800bfba:	b118      	cbz	r0, 800bfc4 <__swsetup_r+0x14>
 800bfbc:	6a03      	ldr	r3, [r0, #32]
 800bfbe:	b90b      	cbnz	r3, 800bfc4 <__swsetup_r+0x14>
 800bfc0:	f7ff f878 	bl	800b0b4 <__sinit>
 800bfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc8:	0719      	lsls	r1, r3, #28
 800bfca:	d422      	bmi.n	800c012 <__swsetup_r+0x62>
 800bfcc:	06da      	lsls	r2, r3, #27
 800bfce:	d407      	bmi.n	800bfe0 <__swsetup_r+0x30>
 800bfd0:	2209      	movs	r2, #9
 800bfd2:	602a      	str	r2, [r5, #0]
 800bfd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	f04f 30ff 	mov.w	r0, #4294967295
 800bfde:	e033      	b.n	800c048 <__swsetup_r+0x98>
 800bfe0:	0758      	lsls	r0, r3, #29
 800bfe2:	d512      	bpl.n	800c00a <__swsetup_r+0x5a>
 800bfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfe6:	b141      	cbz	r1, 800bffa <__swsetup_r+0x4a>
 800bfe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfec:	4299      	cmp	r1, r3
 800bfee:	d002      	beq.n	800bff6 <__swsetup_r+0x46>
 800bff0:	4628      	mov	r0, r5
 800bff2:	f7ff fa21 	bl	800b438 <_free_r>
 800bff6:	2300      	movs	r3, #0
 800bff8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	2300      	movs	r3, #0
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f043 0308 	orr.w	r3, r3, #8
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	b94b      	cbnz	r3, 800c02a <__swsetup_r+0x7a>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c020:	d003      	beq.n	800c02a <__swsetup_r+0x7a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f88b 	bl	800c140 <__smakebuf_r>
 800c02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02e:	f013 0201 	ands.w	r2, r3, #1
 800c032:	d00a      	beq.n	800c04a <__swsetup_r+0x9a>
 800c034:	2200      	movs	r2, #0
 800c036:	60a2      	str	r2, [r4, #8]
 800c038:	6962      	ldr	r2, [r4, #20]
 800c03a:	4252      	negs	r2, r2
 800c03c:	61a2      	str	r2, [r4, #24]
 800c03e:	6922      	ldr	r2, [r4, #16]
 800c040:	b942      	cbnz	r2, 800c054 <__swsetup_r+0xa4>
 800c042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c046:	d1c5      	bne.n	800bfd4 <__swsetup_r+0x24>
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	0799      	lsls	r1, r3, #30
 800c04c:	bf58      	it	pl
 800c04e:	6962      	ldrpl	r2, [r4, #20]
 800c050:	60a2      	str	r2, [r4, #8]
 800c052:	e7f4      	b.n	800c03e <__swsetup_r+0x8e>
 800c054:	2000      	movs	r0, #0
 800c056:	e7f7      	b.n	800c048 <__swsetup_r+0x98>
 800c058:	240000a8 	.word	0x240000a8

0800c05c <_raise_r>:
 800c05c:	291f      	cmp	r1, #31
 800c05e:	b538      	push	{r3, r4, r5, lr}
 800c060:	4605      	mov	r5, r0
 800c062:	460c      	mov	r4, r1
 800c064:	d904      	bls.n	800c070 <_raise_r+0x14>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c072:	b112      	cbz	r2, 800c07a <_raise_r+0x1e>
 800c074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c078:	b94b      	cbnz	r3, 800c08e <_raise_r+0x32>
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 f830 	bl	800c0e0 <_getpid_r>
 800c080:	4622      	mov	r2, r4
 800c082:	4601      	mov	r1, r0
 800c084:	4628      	mov	r0, r5
 800c086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08a:	f000 b817 	b.w	800c0bc <_kill_r>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d00a      	beq.n	800c0a8 <_raise_r+0x4c>
 800c092:	1c59      	adds	r1, r3, #1
 800c094:	d103      	bne.n	800c09e <_raise_r+0x42>
 800c096:	2316      	movs	r3, #22
 800c098:	6003      	str	r3, [r0, #0]
 800c09a:	2001      	movs	r0, #1
 800c09c:	e7e7      	b.n	800c06e <_raise_r+0x12>
 800c09e:	2100      	movs	r1, #0
 800c0a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	4798      	blx	r3
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7e0      	b.n	800c06e <_raise_r+0x12>

0800c0ac <raise>:
 800c0ac:	4b02      	ldr	r3, [pc, #8]	@ (800c0b8 <raise+0xc>)
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	f7ff bfd3 	b.w	800c05c <_raise_r>
 800c0b6:	bf00      	nop
 800c0b8:	240000a8 	.word	0x240000a8

0800c0bc <_kill_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	@ (800c0dc <_kill_r+0x20>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	f7f5 f8b7 	bl	800123c <_kill>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d102      	bne.n	800c0d8 <_kill_r+0x1c>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	b103      	cbz	r3, 800c0d8 <_kill_r+0x1c>
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	24000894 	.word	0x24000894

0800c0e0 <_getpid_r>:
 800c0e0:	f7f5 b8a4 	b.w	800122c <_getpid>

0800c0e4 <_malloc_usable_size_r>:
 800c0e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e8:	1f18      	subs	r0, r3, #4
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bfbc      	itt	lt
 800c0ee:	580b      	ldrlt	r3, [r1, r0]
 800c0f0:	18c0      	addlt	r0, r0, r3
 800c0f2:	4770      	bx	lr

0800c0f4 <__swhatbuf_r>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	b096      	sub	sp, #88	@ 0x58
 800c100:	4615      	mov	r5, r2
 800c102:	461e      	mov	r6, r3
 800c104:	da0d      	bge.n	800c122 <__swhatbuf_r+0x2e>
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c10c:	f04f 0100 	mov.w	r1, #0
 800c110:	bf14      	ite	ne
 800c112:	2340      	movne	r3, #64	@ 0x40
 800c114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c118:	2000      	movs	r0, #0
 800c11a:	6031      	str	r1, [r6, #0]
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	b016      	add	sp, #88	@ 0x58
 800c120:	bd70      	pop	{r4, r5, r6, pc}
 800c122:	466a      	mov	r2, sp
 800c124:	f000 f848 	bl	800c1b8 <_fstat_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	dbec      	blt.n	800c106 <__swhatbuf_r+0x12>
 800c12c:	9901      	ldr	r1, [sp, #4]
 800c12e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c136:	4259      	negs	r1, r3
 800c138:	4159      	adcs	r1, r3
 800c13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c13e:	e7eb      	b.n	800c118 <__swhatbuf_r+0x24>

0800c140 <__smakebuf_r>:
 800c140:	898b      	ldrh	r3, [r1, #12]
 800c142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c144:	079d      	lsls	r5, r3, #30
 800c146:	4606      	mov	r6, r0
 800c148:	460c      	mov	r4, r1
 800c14a:	d507      	bpl.n	800c15c <__smakebuf_r+0x1c>
 800c14c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	6123      	str	r3, [r4, #16]
 800c154:	2301      	movs	r3, #1
 800c156:	6163      	str	r3, [r4, #20]
 800c158:	b003      	add	sp, #12
 800c15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15c:	ab01      	add	r3, sp, #4
 800c15e:	466a      	mov	r2, sp
 800c160:	f7ff ffc8 	bl	800c0f4 <__swhatbuf_r>
 800c164:	9f00      	ldr	r7, [sp, #0]
 800c166:	4605      	mov	r5, r0
 800c168:	4639      	mov	r1, r7
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7fe fe06 	bl	800ad7c <_malloc_r>
 800c170:	b948      	cbnz	r0, 800c186 <__smakebuf_r+0x46>
 800c172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c176:	059a      	lsls	r2, r3, #22
 800c178:	d4ee      	bmi.n	800c158 <__smakebuf_r+0x18>
 800c17a:	f023 0303 	bic.w	r3, r3, #3
 800c17e:	f043 0302 	orr.w	r3, r3, #2
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	e7e2      	b.n	800c14c <__smakebuf_r+0xc>
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	6020      	str	r0, [r4, #0]
 800c18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	9b01      	ldr	r3, [sp, #4]
 800c192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c196:	b15b      	cbz	r3, 800c1b0 <__smakebuf_r+0x70>
 800c198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f000 f81d 	bl	800c1dc <_isatty_r>
 800c1a2:	b128      	cbz	r0, 800c1b0 <__smakebuf_r+0x70>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f023 0303 	bic.w	r3, r3, #3
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	431d      	orrs	r5, r3
 800c1b4:	81a5      	strh	r5, [r4, #12]
 800c1b6:	e7cf      	b.n	800c158 <__smakebuf_r+0x18>

0800c1b8 <_fstat_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d07      	ldr	r5, [pc, #28]	@ (800c1d8 <_fstat_r+0x20>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	602b      	str	r3, [r5, #0]
 800c1c6:	f7f5 f899 	bl	80012fc <_fstat>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d102      	bne.n	800c1d4 <_fstat_r+0x1c>
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	b103      	cbz	r3, 800c1d4 <_fstat_r+0x1c>
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	bd38      	pop	{r3, r4, r5, pc}
 800c1d6:	bf00      	nop
 800c1d8:	24000894 	.word	0x24000894

0800c1dc <_isatty_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d06      	ldr	r5, [pc, #24]	@ (800c1f8 <_isatty_r+0x1c>)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	f7f5 f898 	bl	800131c <_isatty>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_isatty_r+0x1a>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_isatty_r+0x1a>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	24000894 	.word	0x24000894

0800c1fc <_init>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	bf00      	nop
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr

0800c208 <_fini>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	bf00      	nop
 800c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20e:	bc08      	pop	{r3}
 800c210:	469e      	mov	lr, r3
 800c212:	4770      	bx	lr


lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be58  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800c128  0800c128  0000d128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4d4  0800c4d4  0000d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4dc  0800c4dc  0000d4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c4e0  0800c4e0  0000d4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800c4e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000740  24000104  0800c5e8  0000e104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000844  0800c5e8  0000e844  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000199d2  00000000  00000000  0000e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ad5  00000000  00000000  00027b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d0  00000000  00000000  0002b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cad  00000000  00000000  0002c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035dff  00000000  00000000  0002d35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001beb7  00000000  00000000  0006315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001499a0  00000000  00000000  0007f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c89b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004de8  00000000  00000000  001c89f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001cd7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000104 	.word	0x24000104
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c110 	.word	0x0800c110

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000108 	.word	0x24000108
 800030c:	0800c110 	.word	0x0800c110

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a f9c5 	bl	800aa58 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a f9c1 	bl	800aa70 <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fd15 	bl	800b122 <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fd0f 	bl	800b122 <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000320 	.word	0x24000320
 8000710:	24000120 	.word	0x24000120

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a f9a6 	bl	800aa90 <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a fa2d 	bl	800abaa <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000120 	.word	0x24000120

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fcd8 	bl	800b134 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fccb 	bl	800b134 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fbd8 	bl	800b034 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fc7a 	bl	800818a <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	2400006c 	.word	0x2400006c
 80008a4:	0800c16c 	.word	0x0800c16c
 80008a8:	24000120 	.word	0x24000120
 80008ac:	24000320 	.word	0x24000320
 80008b0:	24000348 	.word	0x24000348
 80008b4:	0800c170 	.word	0x0800c170
 80008b8:	0800c184 	.word	0x0800c184
 80008bc:	24000570 	.word	0x24000570

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 ffe4 	bl	800a8a8 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fb95 	bl	800b034 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fc38 	bl	800818a <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c188 	.word	0x0800c188
 8000928:	24000570 	.word	0x24000570

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fbeb 	bl	800b134 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a f966 	bl	800ac34 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fbd8 	bl	800b134 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fbc0 	bl	800b134 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a f93b 	bl	800ac34 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fbad 	bl	800b134 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 ff0d 	bl	800a818 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fb15 	bl	800b034 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fbb8 	bl	800818a <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c1d4 	.word	0x0800c1d4
 8000a28:	0800c1bc 	.word	0x0800c1bc
 8000a2c:	0800c1c0 	.word	0x0800c1c0
 8000a30:	0800c1c4 	.word	0x0800c1c4
 8000a34:	24000570 	.word	0x24000570

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fb65 	bl	800b134 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a f8e0 	bl	800ac34 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fb52 	bl	800b134 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fb3a 	bl	800b134 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a f8b5 	bl	800ac34 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fb27 	bl	800b134 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 fefd 	bl	800a904 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fa8f 	bl	800b034 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fb32 	bl	800818a <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c1d4 	.word	0x0800c1d4
 8000b34:	0800c1bc 	.word	0x0800c1bc
 8000b38:	0800c1c0 	.word	0x0800c1c0
 8000b3c:	0800c1d8 	.word	0x0800c1d8
 8000b40:	24000570 	.word	0x24000570

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <setCSleep+0x34>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f00a fa6d 	bl	800b034 <sniprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <setCSleep+0x38>)
 8000b66:	f007 fb10 	bl	800818a <HAL_UART_Transmit>

	startSleepMode();
 8000b6a:	f009 fded 	bl	800a748 <startSleepMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800c1e8 	.word	0x0800c1e8
 8000b7c:	24000570 	.word	0x24000570

08000b80 <setStopMode>:

static void setStopMode(char ** args, char *response)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	startStopMode();
 8000b8a:	f009 fded 	bl	800a768 <startStopMode>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <setStandby>:

static void setStandby(char ** args, char *response)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
	setStndMode(true);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f009 fe07 	bl	800a7b4 <setStndMode>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	491f      	ldr	r1, [pc, #124]	@ (8000c44 <setGreenLed+0x94>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fba2 	bl	8000310 <strcmp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10d      	bne.n	8000bee <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <setGreenLed+0x98>)
 8000bd8:	f003 fe7e 	bl	80048d8 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <setGreenLed+0x9c>)
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	6838      	ldr	r0, [r7, #0]
 8000be4:	f00a fa26 	bl	800b034 <sniprintf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81fb      	strh	r3, [r7, #14]
 8000bec:	e01f      	b.n	8000c2e <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4916      	ldr	r1, [pc, #88]	@ (8000c50 <setGreenLed+0xa0>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb8a 	bl	8000310 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10d      	bne.n	8000c1e <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <setGreenLed+0x98>)
 8000c08:	f003 fe66 	bl	80048d8 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000c0c:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <setGreenLed+0xa4>)
 8000c0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f00a fa0e 	bl	800b034 <sniprintf>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	e007      	b.n	8000c2e <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <setGreenLed+0xa8>)
 8000c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c24:	6838      	ldr	r0, [r7, #0]
 8000c26:	f00a fa05 	bl	800b034 <sniprintf>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	2364      	movs	r3, #100	@ 0x64
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <setGreenLed+0xac>)
 8000c36:	f007 faa8 	bl	800818a <HAL_UART_Transmit>
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800c208 	.word	0x0800c208
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	0800c20c 	.word	0x0800c20c
 8000c50:	0800c21c 	.word	0x0800c21c
 8000c54:	0800c220 	.word	0x0800c220
 8000c58:	0800c234 	.word	0x0800c234
 8000c5c:	24000570 	.word	0x24000570

08000c60 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c64:	f009 feda 	bl	800aa1c <debugUartInit>

	RTCInit();
 8000c68:	f009 fdb4 	bl	800a7d4 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <systemInit+0x2c>)
 8000c72:	f003 fe31 	bl	80048d8 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c76:	2210      	movs	r2, #16
 8000c78:	4905      	ldr	r1, [pc, #20]	@ (8000c90 <systemInit+0x30>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <systemInit+0x34>)
 8000c7c:	f007 fb14 	bl	80082a8 <HAL_UART_Transmit_IT>

	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4);
 8000c80:	2008      	movs	r0, #8
 8000c82:	f003 fe69 	bl	8004958 <HAL_PWR_DisableWakeUpPin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58020400 	.word	0x58020400
 8000c90:	0800c240 	.word	0x0800c240
 8000c94:	24000570 	.word	0x24000570

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <MX_DMA_Init+0x3c>)
 8000ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd4 <MX_DMA_Init+0x3c>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_DMA_Init+0x3c>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	200b      	movs	r0, #11
 8000cc2:	f000 fdf4 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cc6:	200b      	movs	r0, #11
 8000cc8:	f000 fe0b 	bl	80018e2 <HAL_NVIC_EnableIRQ>

}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b43      	ldr	r3, [pc, #268]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a41      	ldr	r2, [pc, #260]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4a3a      	ldr	r2, [pc, #232]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b34      	ldr	r3, [pc, #208]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a32      	ldr	r2, [pc, #200]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a23      	ldr	r2, [pc, #140]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <MX_GPIO_Init+0x124>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000da8:	4815      	ldr	r0, [pc, #84]	@ (8000e00 <MX_GPIO_Init+0x128>)
 8000daa:	f003 fd95 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	4814      	ldr	r0, [pc, #80]	@ (8000e04 <MX_GPIO_Init+0x12c>)
 8000db4:	f003 fd90 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000db8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <MX_GPIO_Init+0x128>)
 8000dd2:	f003 fbd9 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_GPIO_Init+0x12c>)
 8000dee:	f003 fbcb 	bl	8004588 <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	@ 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58020400 	.word	0x58020400
 8000e04:	58021000 	.word	0x58021000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fbe2 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f810 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f7ff ff60 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e18:	f7ff ff3e 	bl	8000c98 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e1c:	f000 fac0 	bl	80013a0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000e20:	f000 f888 	bl	8000f34 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000e24:	f7ff ff1c 	bl	8000c60 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000e28:	f7ff fc4a 	bl	80006c0 <debugCLITask>

	  standbyModeTask();
 8000e2c:	f009 fc62 	bl	800a6f4 <standbyModeTask>
	  debugCLITask();
 8000e30:	bf00      	nop
 8000e32:	e7f9      	b.n	8000e28 <main+0x20>

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09c      	sub	sp, #112	@ 0x70
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	224c      	movs	r2, #76	@ 0x4c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f00a f96d 	bl	800b122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00a f967 	bl	800b122 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f003 fe17 	bl	8004a88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <SystemClock_Config+0xec>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <SystemClock_Config+0xec>)
 8000e64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <SystemClock_Config+0xec>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e76:	bf00      	nop
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <SystemClock_Config+0xec>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e84:	d1f8      	bne.n	8000e78 <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e86:	f003 fd41 	bl	800490c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <SystemClock_Config+0xf0>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e8e:	4a25      	ldr	r2, [pc, #148]	@ (8000f24 <SystemClock_Config+0xf0>)
 8000e90:	f023 0318 	bic.w	r3, r3, #24
 8000e94:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e96:	2305      	movs	r3, #5
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000eb0:	f240 1313 	movw	r3, #275	@ 0x113
 8000eb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fe64 	bl	8004ba0 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ede:	f000 f823 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	233f      	movs	r3, #63	@ 0x3f
 8000ee4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ef2:	2340      	movs	r3, #64	@ 0x40
 8000ef4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f00:	2340      	movs	r3, #64	@ 0x40
 8000f02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2103      	movs	r1, #3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f004 fa23 	bl	8005354 <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f14:	f000 f808 	bl	8000f28 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3770      	adds	r7, #112	@ 0x70
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	58024800 	.word	0x58024800
 8000f24:	58024400 	.word	0x58024400

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <Error_Handler+0x8>

08000f34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f4e:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <MX_RTC_Init+0xb4>)
 8000f50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f52:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f5a:	227f      	movs	r2, #127	@ 0x7f
 8000f5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f60:	22ff      	movs	r2, #255	@ 0xff
 8000f62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f7c:	4819      	ldr	r0, [pc, #100]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000f7e:	f006 fb37 	bl	80075f0 <HAL_RTC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000f88:	f7ff ffce 	bl	8000f28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480f      	ldr	r0, [pc, #60]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000fa8:	f006 fba4 	bl	80076f4 <HAL_RTC_SetTime>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000fb2:	f7ff ffb9 	bl	8000f28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_RTC_Init+0xb0>)
 8000fce:	f006 fc8b 	bl	80078e8 <HAL_RTC_SetDate>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000fd8:	f7ff ffa6 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	24000548 	.word	0x24000548
 8000fe8:	58004000 	.word	0x58004000

08000fec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0b0      	sub	sp, #192	@ 0xc0
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	22b8      	movs	r2, #184	@ 0xb8
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00a f890 	bl	800b122 <memset>
  if(rtcHandle->Instance==RTC)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a10      	ldr	r2, [pc, #64]	@ (8001048 <HAL_RTC_MspInit+0x5c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d119      	bne.n	8001040 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800100c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fd21 	bl	8005a6c <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001030:	f7ff ff7a 	bl	8000f28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_RTC_MspInit+0x60>)
 8001036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_RTC_MspInit+0x60>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	37c0      	adds	r7, #192	@ 0xc0
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58004000 	.word	0x58004000
 800104c:	58024400 	.word	0x58024400

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_MspInit+0x3c>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_MspInit+0x3c>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x3c>)
 8001068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2001      	movs	r0, #1
 800107a:	f000 fc18 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 fc2f 	bl	80018e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 fae7 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD/AVD through EXTI Line detection Interrupt.
  */
void PVD_AVD_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80010f2:	f003 fd03 	bl	8004afc <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DMA1_Stream0_IRQHandler+0x10>)
 8001102:	f001 ff2f 	bl	8002f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24000604 	.word	0x24000604

08001110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <USART3_IRQHandler+0x10>)
 8001116:	f007 f9a7 	bl	8008468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	24000570 	.word	0x24000570

08001124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_kill>:

int _kill(int pid, int sig)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800113e:	f00a f8ab 	bl	800b298 <__errno>
 8001142:	4603      	mov	r3, r0
 8001144:	2216      	movs	r2, #22
 8001146:	601a      	str	r2, [r3, #0]
  return -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_exit>:

void _exit (int status)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ffe7 	bl	8001134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <_exit+0x12>

0800116a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e00a      	b.n	8001192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800117c:	f3af 8000 	nop.w
 8001180:	4601      	mov	r1, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbf0      	blt.n	800117c <_read+0x12>
  }

  return len;
 800119a:	687b      	ldr	r3, [r7, #4]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e009      	b.n	80011ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	60ba      	str	r2, [r7, #8]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbf1      	blt.n	80011b6 <_write+0x12>
  }
  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_close>:

int _close(int file)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001204:	605a      	str	r2, [r3, #4]
  return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_isatty>:

int _isatty(int file)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f00a f810 	bl	800b298 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24050000 	.word	0x24050000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	2400056c 	.word	0x2400056c
 80012ac:	24000848 	.word	0x24000848

080012b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b4:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <SystemInit+0xd0>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ba:	4a31      	ldr	r2, [pc, #196]	@ (8001380 <SystemInit+0xd0>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <SystemInit+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d807      	bhi.n	80012e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <SystemInit+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 030f 	bic.w	r3, r3, #15
 80012d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <SystemInit+0xd4>)
 80012da:	f043 0307 	orr.w	r3, r3, #7
 80012de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <SystemInit+0xd8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <SystemInit+0xd8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <SystemInit+0xd8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemInit+0xd8>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4924      	ldr	r1, [pc, #144]	@ (8001388 <SystemInit+0xd8>)
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <SystemInit+0xdc>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <SystemInit+0xd4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <SystemInit+0xd4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 030f 	bic.w	r3, r3, #15
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <SystemInit+0xd4>)
 8001314:	f043 0307 	orr.w	r3, r3, #7
 8001318:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <SystemInit+0xd8>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <SystemInit+0xd8>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <SystemInit+0xd8>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <SystemInit+0xd8>)
 800132e:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <SystemInit+0xe0>)
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <SystemInit+0xd8>)
 8001334:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <SystemInit+0xe4>)
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <SystemInit+0xd8>)
 800133a:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <SystemInit+0xe8>)
 800133c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <SystemInit+0xd8>)
 8001340:	2200      	movs	r2, #0
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <SystemInit+0xd8>)
 8001346:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <SystemInit+0xe8>)
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <SystemInit+0xd8>)
 800134c:	2200      	movs	r2, #0
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <SystemInit+0xd8>)
 8001352:	4a11      	ldr	r2, [pc, #68]	@ (8001398 <SystemInit+0xe8>)
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <SystemInit+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <SystemInit+0xd8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <SystemInit+0xd8>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <SystemInit+0xd8>)
 800136a:	2200      	movs	r2, #0
 800136c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <SystemInit+0xec>)
 8001370:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001374:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	52002000 	.word	0x52002000
 8001388:	58024400 	.word	0x58024400
 800138c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001390:	02020200 	.word	0x02020200
 8001394:	01ff0000 	.word	0x01ff0000
 8001398:	01010280 	.word	0x01010280
 800139c:	52004000 	.word	0x52004000

080013a0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a4:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013a6:	4a23      	ldr	r2, [pc, #140]	@ (8001434 <MX_USART3_UART_Init+0x94>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e8:	4811      	ldr	r0, [pc, #68]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013ea:	f006 fe7e 	bl	80080ea <HAL_UART_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013f4:	f7ff fd98 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f8:	2100      	movs	r1, #0
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 80013fc:	f009 f8af 	bl	800a55e <HAL_UARTEx_SetTxFifoThreshold>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001406:	f7ff fd8f 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 800140e:	f009 f8e4 	bl	800a5da <HAL_UARTEx_SetRxFifoThreshold>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001418:	f7ff fd86 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_USART3_UART_Init+0x90>)
 800141e:	f009 f865 	bl	800a4ec <HAL_UARTEx_DisableFifoMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001428:	f7ff fd7e 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	24000570 	.word	0x24000570
 8001434:	40004800 	.word	0x40004800

08001438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b8      	sub	sp, #224	@ 0xe0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	22b8      	movs	r2, #184	@ 0xb8
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fe62 	bl	800b122 <memset>
  if(uartHandle->Instance==USART3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a42      	ldr	r2, [pc, #264]	@ (800156c <HAL_UART_MspInit+0x134>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d17d      	bne.n	8001564 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001468:	f04f 0202 	mov.w	r2, #2
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f004 faf4 	bl	8005a6c <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800148a:	f7ff fd4d 	bl	8000f28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_UART_MspInit+0x138>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001494:	4a36      	ldr	r2, [pc, #216]	@ (8001570 <HAL_UART_MspInit+0x138>)
 8001496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <HAL_UART_MspInit+0x138>)
 80014a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <HAL_UART_MspInit+0x138>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <HAL_UART_MspInit+0x138>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <HAL_UART_MspInit+0x138>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80014ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e4:	2307      	movs	r3, #7
 80014e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014ee:	4619      	mov	r1, r3
 80014f0:	4820      	ldr	r0, [pc, #128]	@ (8001574 <HAL_UART_MspInit+0x13c>)
 80014f2:	f003 f849 	bl	8004588 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_UART_MspInit+0x140>)
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <HAL_UART_MspInit+0x144>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_UART_MspInit+0x140>)
 80014fe:	222d      	movs	r2, #45	@ 0x2d
 8001500:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_UART_MspInit+0x140>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_UART_MspInit+0x140>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001528:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_UART_MspInit+0x140>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001536:	4810      	ldr	r0, [pc, #64]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001538:	f000 f9ee 	bl	8001918 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001542:	f7ff fcf1 	bl	8000f28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_UART_MspInit+0x140>)
 800154a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_UART_MspInit+0x140>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2027      	movs	r0, #39	@ 0x27
 800155a:	f000 f9a8 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800155e:	2027      	movs	r0, #39	@ 0x27
 8001560:	f000 f9bf 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	37e0      	adds	r7, #224	@ 0xe0
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004800 	.word	0x40004800
 8001570:	58024400 	.word	0x58024400
 8001574:	58020c00 	.word	0x58020c00
 8001578:	24000604 	.word	0x24000604
 800157c:	40020010 	.word	0x40020010

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001584:	f7ff fe94 	bl	80012b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f009 fe79 	bl	800b2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff fc29 	bl	8000e08 <main>
  bx  lr
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80015c4:	0800c4e4 	.word	0x0800c4e4
  ldr r2, =_sbss
 80015c8:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 80015cc:	24000844 	.word	0x24000844

080015d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC3_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f000 f95c 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e0:	f004 f86e 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	4913      	ldr	r1, [pc, #76]	@ (8001640 <HAL_Init+0x6c>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_Init+0x68>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <HAL_Init+0x6c>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <HAL_Init+0x70>)
 8001616:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_Init+0x74>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f814 	bl	800164c <HAL_InitTick>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e002      	b.n	8001634 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800162e:	f7ff fd0f 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	58024400 	.word	0x58024400
 8001640:	0800c2b0 	.word	0x0800c2b0
 8001644:	24000094 	.word	0x24000094
 8001648:	24000090 	.word	0x24000090

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_InitTick+0x60>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e021      	b.n	80016a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <HAL_InitTick+0x64>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_InitTick+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f941 	bl	80018fe <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f90b 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x68>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2400009c 	.word	0x2400009c
 80016b0:	24000090 	.word	0x24000090
 80016b4:	24000098 	.word	0x24000098

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2400009c 	.word	0x2400009c
 80016dc:	2400067c 	.word	0x2400067c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2400067c 	.word	0x2400067c

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <__NVIC_SetPriorityGrouping+0x40>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	4313      	orrs	r3, r2
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <__NVIC_SetPriorityGrouping+0x40>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00
 800173c:	05fa0000 	.word	0x05fa0000

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	@ (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff40 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff90 	bl	80017ec <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5f 	bl	8001798 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff33 	bl	800175c <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa4 	bl	8001854 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fede 	bl	80016e0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e312      	b.n	8001f56 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a66      	ldr	r2, [pc, #408]	@ (8001ad0 <HAL_DMA_Init+0x1b8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d04a      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <HAL_DMA_Init+0x1bc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d045      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a63      	ldr	r2, [pc, #396]	@ (8001ad8 <HAL_DMA_Init+0x1c0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a62      	ldr	r2, [pc, #392]	@ (8001adc <HAL_DMA_Init+0x1c4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d03b      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a60      	ldr	r2, [pc, #384]	@ (8001ae0 <HAL_DMA_Init+0x1c8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d036      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_DMA_Init+0x1cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d031      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae8 <HAL_DMA_Init+0x1d0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02c      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5c      	ldr	r2, [pc, #368]	@ (8001aec <HAL_DMA_Init+0x1d4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d027      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <HAL_DMA_Init+0x1d8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a59      	ldr	r2, [pc, #356]	@ (8001af4 <HAL_DMA_Init+0x1dc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01d      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a57      	ldr	r2, [pc, #348]	@ (8001af8 <HAL_DMA_Init+0x1e0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d018      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a56      	ldr	r2, [pc, #344]	@ (8001afc <HAL_DMA_Init+0x1e4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a54      	ldr	r2, [pc, #336]	@ (8001b00 <HAL_DMA_Init+0x1e8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00e      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a53      	ldr	r2, [pc, #332]	@ (8001b04 <HAL_DMA_Init+0x1ec>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a51      	ldr	r2, [pc, #324]	@ (8001b08 <HAL_DMA_Init+0x1f0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Init+0xb8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a50      	ldr	r2, [pc, #320]	@ (8001b0c <HAL_DMA_Init+0x1f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Init+0xbc>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_DMA_Init+0xbe>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 813c 	beq.w	8001c54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a37      	ldr	r2, [pc, #220]	@ (8001ad0 <HAL_DMA_Init+0x1b8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d04a      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a36      	ldr	r2, [pc, #216]	@ (8001ad4 <HAL_DMA_Init+0x1bc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d045      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a34      	ldr	r2, [pc, #208]	@ (8001ad8 <HAL_DMA_Init+0x1c0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d040      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a33      	ldr	r2, [pc, #204]	@ (8001adc <HAL_DMA_Init+0x1c4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d03b      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <HAL_DMA_Init+0x1c8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d036      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <HAL_DMA_Init+0x1cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d031      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae8 <HAL_DMA_Init+0x1d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02c      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2d      	ldr	r2, [pc, #180]	@ (8001aec <HAL_DMA_Init+0x1d4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d027      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2b      	ldr	r2, [pc, #172]	@ (8001af0 <HAL_DMA_Init+0x1d8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d022      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_DMA_Init+0x1dc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01d      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <HAL_DMA_Init+0x1e0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d018      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_DMA_Init+0x1e4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d013      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a25      	ldr	r2, [pc, #148]	@ (8001b00 <HAL_DMA_Init+0x1e8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00e      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <HAL_DMA_Init+0x1ec>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d009      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <HAL_DMA_Init+0x1f0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <HAL_DMA_Init+0x174>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a21      	ldr	r2, [pc, #132]	@ (8001b0c <HAL_DMA_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d108      	bne.n	8001a9e <HAL_DMA_Init+0x186>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_DMA_Init+0x196>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aae:	e02f      	b.n	8001b10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab0:	f7ff fe16 	bl	80016e0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d928      	bls.n	8001b10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e242      	b.n	8001f56 <HAL_DMA_Init+0x63e>
 8001ad0:	40020010 	.word	0x40020010
 8001ad4:	40020028 	.word	0x40020028
 8001ad8:	40020040 	.word	0x40020040
 8001adc:	40020058 	.word	0x40020058
 8001ae0:	40020070 	.word	0x40020070
 8001ae4:	40020088 	.word	0x40020088
 8001ae8:	400200a0 	.word	0x400200a0
 8001aec:	400200b8 	.word	0x400200b8
 8001af0:	40020410 	.word	0x40020410
 8001af4:	40020428 	.word	0x40020428
 8001af8:	40020440 	.word	0x40020440
 8001afc:	40020458 	.word	0x40020458
 8001b00:	40020470 	.word	0x40020470
 8001b04:	40020488 	.word	0x40020488
 8001b08:	400204a0 	.word	0x400204a0
 8001b0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1c8      	bne.n	8001ab0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4b83      	ldr	r3, [pc, #524]	@ (8001d38 <HAL_DMA_Init+0x420>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d107      	bne.n	8001b74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b28      	cmp	r3, #40	@ 0x28
 8001b7a:	d903      	bls.n	8001b84 <HAL_DMA_Init+0x26c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b82:	d91f      	bls.n	8001bc4 <HAL_DMA_Init+0x2ac>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b8a:	d903      	bls.n	8001b94 <HAL_DMA_Init+0x27c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b42      	cmp	r3, #66	@ 0x42
 8001b92:	d917      	bls.n	8001bc4 <HAL_DMA_Init+0x2ac>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b46      	cmp	r3, #70	@ 0x46
 8001b9a:	d903      	bls.n	8001ba4 <HAL_DMA_Init+0x28c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b48      	cmp	r3, #72	@ 0x48
 8001ba2:	d90f      	bls.n	8001bc4 <HAL_DMA_Init+0x2ac>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001baa:	d903      	bls.n	8001bb4 <HAL_DMA_Init+0x29c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b52      	cmp	r3, #82	@ 0x52
 8001bb2:	d907      	bls.n	8001bc4 <HAL_DMA_Init+0x2ac>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b73      	cmp	r3, #115	@ 0x73
 8001bba:	d905      	bls.n	8001bc8 <HAL_DMA_Init+0x2b0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b77      	cmp	r3, #119	@ 0x77
 8001bc2:	d801      	bhi.n	8001bc8 <HAL_DMA_Init+0x2b0>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_DMA_Init+0x2b2>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f023 0307 	bic.w	r3, r3, #7
 8001bec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d117      	bne.n	8001c30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f002 fb2e 	bl	8004274 <DMA_CheckFifoParam>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2240      	movs	r2, #64	@ 0x40
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e192      	b.n	8001f56 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f002 fa69 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	223f      	movs	r2, #63	@ 0x3f
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	e0c8      	b.n	8001de6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a38      	ldr	r2, [pc, #224]	@ (8001d3c <HAL_DMA_Init+0x424>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a37      	ldr	r2, [pc, #220]	@ (8001d40 <HAL_DMA_Init+0x428>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01d      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a35      	ldr	r2, [pc, #212]	@ (8001d44 <HAL_DMA_Init+0x42c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a34      	ldr	r2, [pc, #208]	@ (8001d48 <HAL_DMA_Init+0x430>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a32      	ldr	r2, [pc, #200]	@ (8001d4c <HAL_DMA_Init+0x434>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a31      	ldr	r2, [pc, #196]	@ (8001d50 <HAL_DMA_Init+0x438>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2f      	ldr	r2, [pc, #188]	@ (8001d54 <HAL_DMA_Init+0x43c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Init+0x38c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d58 <HAL_DMA_Init+0x440>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x390>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_Init+0x392>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8092 	beq.w	8001dd4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <HAL_DMA_Init+0x424>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d021      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <HAL_DMA_Init+0x428>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d01c      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_DMA_Init+0x42c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d017      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d48 <HAL_DMA_Init+0x430>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d012      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_DMA_Init+0x434>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <HAL_DMA_Init+0x438>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	@ (8001d54 <HAL_DMA_Init+0x43c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_DMA_Init+0x3e6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a17      	ldr	r2, [pc, #92]	@ (8001d58 <HAL_DMA_Init+0x440>)
 8001cfc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_DMA_Init+0x444>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b40      	cmp	r3, #64	@ 0x40
 8001d24:	d01c      	beq.n	8001d60 <HAL_DMA_Init+0x448>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d102      	bne.n	8001d34 <HAL_DMA_Init+0x41c>
 8001d2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d32:	e016      	b.n	8001d62 <HAL_DMA_Init+0x44a>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e014      	b.n	8001d62 <HAL_DMA_Init+0x44a>
 8001d38:	fe10803f 	.word	0xfe10803f
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	5802541c 	.word	0x5802541c
 8001d44:	58025430 	.word	0x58025430
 8001d48:	58025444 	.word	0x58025444
 8001d4c:	58025458 	.word	0x58025458
 8001d50:	5802546c 	.word	0x5802546c
 8001d54:	58025480 	.word	0x58025480
 8001d58:	58025494 	.word	0x58025494
 8001d5c:	fffe000f 	.word	0xfffe000f
 8001d60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68d2      	ldr	r2, [r2, #12]
 8001d66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f60 <HAL_DMA_Init+0x648>)
 8001da8:	4413      	add	r3, r2
 8001daa:	4a6e      	ldr	r2, [pc, #440]	@ (8001f64 <HAL_DMA_Init+0x64c>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	009a      	lsls	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f002 f9a9 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2201      	movs	r2, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	e008      	b.n	8001de6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0b7      	b.n	8001f56 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5f      	ldr	r2, [pc, #380]	@ (8001f68 <HAL_DMA_Init+0x650>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d072      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f6c <HAL_DMA_Init+0x654>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d06d      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8001f70 <HAL_DMA_Init+0x658>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d068      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_DMA_Init+0x65c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d063      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a59      	ldr	r2, [pc, #356]	@ (8001f78 <HAL_DMA_Init+0x660>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_DMA_Init+0x664>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d059      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a56      	ldr	r2, [pc, #344]	@ (8001f80 <HAL_DMA_Init+0x668>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d054      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a54      	ldr	r2, [pc, #336]	@ (8001f84 <HAL_DMA_Init+0x66c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d04f      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a53      	ldr	r2, [pc, #332]	@ (8001f88 <HAL_DMA_Init+0x670>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a51      	ldr	r2, [pc, #324]	@ (8001f8c <HAL_DMA_Init+0x674>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a50      	ldr	r2, [pc, #320]	@ (8001f90 <HAL_DMA_Init+0x678>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	@ (8001f94 <HAL_DMA_Init+0x67c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_DMA_Init+0x680>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_DMA_Init+0x684>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa0 <HAL_DMA_Init+0x688>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a48      	ldr	r2, [pc, #288]	@ (8001fa4 <HAL_DMA_Init+0x68c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a47      	ldr	r2, [pc, #284]	@ (8001fa8 <HAL_DMA_Init+0x690>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <HAL_DMA_Init+0x694>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <HAL_DMA_Init+0x698>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a42      	ldr	r2, [pc, #264]	@ (8001fb4 <HAL_DMA_Init+0x69c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <HAL_DMA_Init+0x6a0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8001fbc <HAL_DMA_Init+0x6a4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc0 <HAL_DMA_Init+0x6a8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_Init+0x5be>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc4 <HAL_DMA_Init+0x6ac>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Init+0x5c2>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_DMA_Init+0x5c4>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d032      	beq.n	8001f46 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f002 fa43 	bl	800436c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b80      	cmp	r3, #128	@ 0x80
 8001eec:	d102      	bne.n	8001ef4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_DMA_Init+0x61c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d80c      	bhi.n	8001f34 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f002 fac0 	bl	80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	e008      	b.n	8001f46 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	a7fdabf8 	.word	0xa7fdabf8
 8001f64:	cccccccd 	.word	0xcccccccd
 8001f68:	40020010 	.word	0x40020010
 8001f6c:	40020028 	.word	0x40020028
 8001f70:	40020040 	.word	0x40020040
 8001f74:	40020058 	.word	0x40020058
 8001f78:	40020070 	.word	0x40020070
 8001f7c:	40020088 	.word	0x40020088
 8001f80:	400200a0 	.word	0x400200a0
 8001f84:	400200b8 	.word	0x400200b8
 8001f88:	40020410 	.word	0x40020410
 8001f8c:	40020428 	.word	0x40020428
 8001f90:	40020440 	.word	0x40020440
 8001f94:	40020458 	.word	0x40020458
 8001f98:	40020470 	.word	0x40020470
 8001f9c:	40020488 	.word	0x40020488
 8001fa0:	400204a0 	.word	0x400204a0
 8001fa4:	400204b8 	.word	0x400204b8
 8001fa8:	58025408 	.word	0x58025408
 8001fac:	5802541c 	.word	0x5802541c
 8001fb0:	58025430 	.word	0x58025430
 8001fb4:	58025444 	.word	0x58025444
 8001fb8:	58025458 	.word	0x58025458
 8001fbc:	5802546c 	.word	0x5802546c
 8001fc0:	58025480 	.word	0x58025480
 8001fc4:	58025494 	.word	0x58025494

08001fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e226      	b.n	8002432 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Start_IT+0x2a>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e21f      	b.n	8002432 <HAL_DMA_Start_IT+0x46a>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 820a 	bne.w	800241c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a68      	ldr	r2, [pc, #416]	@ (80021bc <HAL_DMA_Start_IT+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04a      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a66      	ldr	r2, [pc, #408]	@ (80021c0 <HAL_DMA_Start_IT+0x1f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d045      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a65      	ldr	r2, [pc, #404]	@ (80021c4 <HAL_DMA_Start_IT+0x1fc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d040      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a63      	ldr	r2, [pc, #396]	@ (80021c8 <HAL_DMA_Start_IT+0x200>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d03b      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a62      	ldr	r2, [pc, #392]	@ (80021cc <HAL_DMA_Start_IT+0x204>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d036      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a60      	ldr	r2, [pc, #384]	@ (80021d0 <HAL_DMA_Start_IT+0x208>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a5f      	ldr	r2, [pc, #380]	@ (80021d4 <HAL_DMA_Start_IT+0x20c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d02c      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a5d      	ldr	r2, [pc, #372]	@ (80021d8 <HAL_DMA_Start_IT+0x210>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d027      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a5c      	ldr	r2, [pc, #368]	@ (80021dc <HAL_DMA_Start_IT+0x214>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d022      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5a      	ldr	r2, [pc, #360]	@ (80021e0 <HAL_DMA_Start_IT+0x218>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01d      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a59      	ldr	r2, [pc, #356]	@ (80021e4 <HAL_DMA_Start_IT+0x21c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a57      	ldr	r2, [pc, #348]	@ (80021e8 <HAL_DMA_Start_IT+0x220>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a56      	ldr	r2, [pc, #344]	@ (80021ec <HAL_DMA_Start_IT+0x224>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00e      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a54      	ldr	r2, [pc, #336]	@ (80021f0 <HAL_DMA_Start_IT+0x228>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a53      	ldr	r2, [pc, #332]	@ (80021f4 <HAL_DMA_Start_IT+0x22c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Start_IT+0xee>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a51      	ldr	r2, [pc, #324]	@ (80021f8 <HAL_DMA_Start_IT+0x230>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <HAL_DMA_Start_IT+0x100>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e007      	b.n	80020d8 <HAL_DMA_Start_IT+0x110>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f001 fe6a 	bl	8003db8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_DMA_Start_IT+0x1f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04a      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <HAL_DMA_Start_IT+0x1f8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d045      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a31      	ldr	r2, [pc, #196]	@ (80021c4 <HAL_DMA_Start_IT+0x1fc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <HAL_DMA_Start_IT+0x200>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d03b      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <HAL_DMA_Start_IT+0x204>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d036      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <HAL_DMA_Start_IT+0x208>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d031      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_DMA_Start_IT+0x20c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02c      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_DMA_Start_IT+0x210>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d027      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_DMA_Start_IT+0x214>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_DMA_Start_IT+0x218>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d01d      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_DMA_Start_IT+0x21c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_DMA_Start_IT+0x220>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_DMA_Start_IT+0x224>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_DMA_Start_IT+0x228>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	@ (80021f4 <HAL_DMA_Start_IT+0x22c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_DMA_Start_IT+0x1bc>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_DMA_Start_IT+0x230>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Start_IT+0x1c0>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_DMA_Start_IT+0x1c2>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 021e 	bic.w	r2, r3, #30
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0216 	orr.w	r2, r2, #22
 80021a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03e      	beq.n	8002228 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0208 	orr.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e035      	b.n	8002228 <HAL_DMA_Start_IT+0x260>
 80021bc:	40020010 	.word	0x40020010
 80021c0:	40020028 	.word	0x40020028
 80021c4:	40020040 	.word	0x40020040
 80021c8:	40020058 	.word	0x40020058
 80021cc:	40020070 	.word	0x40020070
 80021d0:	40020088 	.word	0x40020088
 80021d4:	400200a0 	.word	0x400200a0
 80021d8:	400200b8 	.word	0x400200b8
 80021dc:	40020410 	.word	0x40020410
 80021e0:	40020428 	.word	0x40020428
 80021e4:	40020440 	.word	0x40020440
 80021e8:	40020458 	.word	0x40020458
 80021ec:	40020470 	.word	0x40020470
 80021f0:	40020488 	.word	0x40020488
 80021f4:	400204a0 	.word	0x400204a0
 80021f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 020e 	bic.w	r2, r3, #14
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 020a 	orr.w	r2, r2, #10
 800220e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0204 	orr.w	r2, r2, #4
 8002226:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a83      	ldr	r2, [pc, #524]	@ (800243c <HAL_DMA_Start_IT+0x474>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d072      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a82      	ldr	r2, [pc, #520]	@ (8002440 <HAL_DMA_Start_IT+0x478>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d06d      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a80      	ldr	r2, [pc, #512]	@ (8002444 <HAL_DMA_Start_IT+0x47c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d068      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7f      	ldr	r2, [pc, #508]	@ (8002448 <HAL_DMA_Start_IT+0x480>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d063      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a7d      	ldr	r2, [pc, #500]	@ (800244c <HAL_DMA_Start_IT+0x484>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d05e      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7c      	ldr	r2, [pc, #496]	@ (8002450 <HAL_DMA_Start_IT+0x488>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d059      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7a      	ldr	r2, [pc, #488]	@ (8002454 <HAL_DMA_Start_IT+0x48c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d054      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a79      	ldr	r2, [pc, #484]	@ (8002458 <HAL_DMA_Start_IT+0x490>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04f      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a77      	ldr	r2, [pc, #476]	@ (800245c <HAL_DMA_Start_IT+0x494>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d04a      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a76      	ldr	r2, [pc, #472]	@ (8002460 <HAL_DMA_Start_IT+0x498>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d045      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a74      	ldr	r2, [pc, #464]	@ (8002464 <HAL_DMA_Start_IT+0x49c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d040      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a73      	ldr	r2, [pc, #460]	@ (8002468 <HAL_DMA_Start_IT+0x4a0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d03b      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a71      	ldr	r2, [pc, #452]	@ (800246c <HAL_DMA_Start_IT+0x4a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d036      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a70      	ldr	r2, [pc, #448]	@ (8002470 <HAL_DMA_Start_IT+0x4a8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d031      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002474 <HAL_DMA_Start_IT+0x4ac>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02c      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002478 <HAL_DMA_Start_IT+0x4b0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d027      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6b      	ldr	r2, [pc, #428]	@ (800247c <HAL_DMA_Start_IT+0x4b4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d022      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002480 <HAL_DMA_Start_IT+0x4b8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01d      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a68      	ldr	r2, [pc, #416]	@ (8002484 <HAL_DMA_Start_IT+0x4bc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d018      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a67      	ldr	r2, [pc, #412]	@ (8002488 <HAL_DMA_Start_IT+0x4c0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a65      	ldr	r2, [pc, #404]	@ (800248c <HAL_DMA_Start_IT+0x4c4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00e      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a64      	ldr	r2, [pc, #400]	@ (8002490 <HAL_DMA_Start_IT+0x4c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a62      	ldr	r2, [pc, #392]	@ (8002494 <HAL_DMA_Start_IT+0x4cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Start_IT+0x350>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a61      	ldr	r2, [pc, #388]	@ (8002498 <HAL_DMA_Start_IT+0x4d0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_DMA_Start_IT+0x354>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_DMA_Start_IT+0x356>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002352:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002356:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a37      	ldr	r2, [pc, #220]	@ (800243c <HAL_DMA_Start_IT+0x474>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d04a      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a36      	ldr	r2, [pc, #216]	@ (8002440 <HAL_DMA_Start_IT+0x478>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d045      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a34      	ldr	r2, [pc, #208]	@ (8002444 <HAL_DMA_Start_IT+0x47c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d040      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a33      	ldr	r2, [pc, #204]	@ (8002448 <HAL_DMA_Start_IT+0x480>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d03b      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a31      	ldr	r2, [pc, #196]	@ (800244c <HAL_DMA_Start_IT+0x484>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d036      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <HAL_DMA_Start_IT+0x488>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d031      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2e      	ldr	r2, [pc, #184]	@ (8002454 <HAL_DMA_Start_IT+0x48c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02c      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002458 <HAL_DMA_Start_IT+0x490>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d027      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <HAL_DMA_Start_IT+0x494>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d022      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002460 <HAL_DMA_Start_IT+0x498>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d01d      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a28      	ldr	r2, [pc, #160]	@ (8002464 <HAL_DMA_Start_IT+0x49c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <HAL_DMA_Start_IT+0x4a0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a25      	ldr	r2, [pc, #148]	@ (800246c <HAL_DMA_Start_IT+0x4a4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <HAL_DMA_Start_IT+0x4a8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a22      	ldr	r2, [pc, #136]	@ (8002474 <HAL_DMA_Start_IT+0x4ac>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_Start_IT+0x430>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a21      	ldr	r2, [pc, #132]	@ (8002478 <HAL_DMA_Start_IT+0x4b0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d108      	bne.n	800240a <HAL_DMA_Start_IT+0x442>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e012      	b.n	8002430 <HAL_DMA_Start_IT+0x468>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e009      	b.n	8002430 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020010 	.word	0x40020010
 8002440:	40020028 	.word	0x40020028
 8002444:	40020040 	.word	0x40020040
 8002448:	40020058 	.word	0x40020058
 800244c:	40020070 	.word	0x40020070
 8002450:	40020088 	.word	0x40020088
 8002454:	400200a0 	.word	0x400200a0
 8002458:	400200b8 	.word	0x400200b8
 800245c:	40020410 	.word	0x40020410
 8002460:	40020428 	.word	0x40020428
 8002464:	40020440 	.word	0x40020440
 8002468:	40020458 	.word	0x40020458
 800246c:	40020470 	.word	0x40020470
 8002470:	40020488 	.word	0x40020488
 8002474:	400204a0 	.word	0x400204a0
 8002478:	400204b8 	.word	0x400204b8
 800247c:	58025408 	.word	0x58025408
 8002480:	5802541c 	.word	0x5802541c
 8002484:	58025430 	.word	0x58025430
 8002488:	58025444 	.word	0x58025444
 800248c:	58025458 	.word	0x58025458
 8002490:	5802546c 	.word	0x5802546c
 8002494:	58025480 	.word	0x58025480
 8002498:	58025494 	.word	0x58025494

0800249c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff f91c 	bl	80016e0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e2dc      	b.n	8002a6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d008      	beq.n	80024d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e2cd      	b.n	8002a6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a76      	ldr	r2, [pc, #472]	@ (80026b0 <HAL_DMA_Abort+0x214>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04a      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a74      	ldr	r2, [pc, #464]	@ (80026b4 <HAL_DMA_Abort+0x218>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d045      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	@ (80026b8 <HAL_DMA_Abort+0x21c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d040      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a71      	ldr	r2, [pc, #452]	@ (80026bc <HAL_DMA_Abort+0x220>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d03b      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a70      	ldr	r2, [pc, #448]	@ (80026c0 <HAL_DMA_Abort+0x224>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d036      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_DMA_Abort+0x228>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6d      	ldr	r2, [pc, #436]	@ (80026c8 <HAL_DMA_Abort+0x22c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d02c      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	@ (80026cc <HAL_DMA_Abort+0x230>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d027      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6a      	ldr	r2, [pc, #424]	@ (80026d0 <HAL_DMA_Abort+0x234>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	@ (80026d4 <HAL_DMA_Abort+0x238>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01d      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a67      	ldr	r2, [pc, #412]	@ (80026d8 <HAL_DMA_Abort+0x23c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d018      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_DMA_Abort+0x240>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a64      	ldr	r2, [pc, #400]	@ (80026e0 <HAL_DMA_Abort+0x244>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a62      	ldr	r2, [pc, #392]	@ (80026e4 <HAL_DMA_Abort+0x248>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a61      	ldr	r2, [pc, #388]	@ (80026e8 <HAL_DMA_Abort+0x24c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_Abort+0xd6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5f      	ldr	r2, [pc, #380]	@ (80026ec <HAL_DMA_Abort+0x250>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Abort+0xda>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_DMA_Abort+0xdc>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 021e 	bic.w	r2, r2, #30
 800258a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e00a      	b.n	80025ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 020e 	bic.w	r2, r2, #14
 80025b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3c      	ldr	r2, [pc, #240]	@ (80026b0 <HAL_DMA_Abort+0x214>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d072      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3a      	ldr	r2, [pc, #232]	@ (80026b4 <HAL_DMA_Abort+0x218>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d06d      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a39      	ldr	r2, [pc, #228]	@ (80026b8 <HAL_DMA_Abort+0x21c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d068      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a37      	ldr	r2, [pc, #220]	@ (80026bc <HAL_DMA_Abort+0x220>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d063      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <HAL_DMA_Abort+0x224>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d05e      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	@ (80026c4 <HAL_DMA_Abort+0x228>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d059      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a33      	ldr	r2, [pc, #204]	@ (80026c8 <HAL_DMA_Abort+0x22c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d054      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a31      	ldr	r2, [pc, #196]	@ (80026cc <HAL_DMA_Abort+0x230>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04f      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a30      	ldr	r2, [pc, #192]	@ (80026d0 <HAL_DMA_Abort+0x234>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d04a      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2e      	ldr	r2, [pc, #184]	@ (80026d4 <HAL_DMA_Abort+0x238>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d045      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2d      	ldr	r2, [pc, #180]	@ (80026d8 <HAL_DMA_Abort+0x23c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d040      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2b      	ldr	r2, [pc, #172]	@ (80026dc <HAL_DMA_Abort+0x240>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d03b      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2a      	ldr	r2, [pc, #168]	@ (80026e0 <HAL_DMA_Abort+0x244>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d036      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <HAL_DMA_Abort+0x248>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d031      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a27      	ldr	r2, [pc, #156]	@ (80026e8 <HAL_DMA_Abort+0x24c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d02c      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a25      	ldr	r2, [pc, #148]	@ (80026ec <HAL_DMA_Abort+0x250>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d027      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a24      	ldr	r2, [pc, #144]	@ (80026f0 <HAL_DMA_Abort+0x254>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a22      	ldr	r2, [pc, #136]	@ (80026f4 <HAL_DMA_Abort+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01d      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a21      	ldr	r2, [pc, #132]	@ (80026f8 <HAL_DMA_Abort+0x25c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d018      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_DMA_Abort+0x260>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_DMA_Abort+0x264>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_DMA_Abort+0x268>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_DMA_Abort+0x26c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_DMA_Abort+0x20e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_DMA_Abort+0x270>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d132      	bne.n	8002710 <HAL_DMA_Abort+0x274>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e031      	b.n	8002712 <HAL_DMA_Abort+0x276>
 80026ae:	bf00      	nop
 80026b0:	40020010 	.word	0x40020010
 80026b4:	40020028 	.word	0x40020028
 80026b8:	40020040 	.word	0x40020040
 80026bc:	40020058 	.word	0x40020058
 80026c0:	40020070 	.word	0x40020070
 80026c4:	40020088 	.word	0x40020088
 80026c8:	400200a0 	.word	0x400200a0
 80026cc:	400200b8 	.word	0x400200b8
 80026d0:	40020410 	.word	0x40020410
 80026d4:	40020428 	.word	0x40020428
 80026d8:	40020440 	.word	0x40020440
 80026dc:	40020458 	.word	0x40020458
 80026e0:	40020470 	.word	0x40020470
 80026e4:	40020488 	.word	0x40020488
 80026e8:	400204a0 	.word	0x400204a0
 80026ec:	400204b8 	.word	0x400204b8
 80026f0:	58025408 	.word	0x58025408
 80026f4:	5802541c 	.word	0x5802541c
 80026f8:	58025430 	.word	0x58025430
 80026fc:	58025444 	.word	0x58025444
 8002700:	58025458 	.word	0x58025458
 8002704:	5802546c 	.word	0x5802546c
 8002708:	58025480 	.word	0x58025480
 800270c:	58025494 	.word	0x58025494
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002724:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6d      	ldr	r2, [pc, #436]	@ (80028e0 <HAL_DMA_Abort+0x444>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6b      	ldr	r2, [pc, #428]	@ (80028e4 <HAL_DMA_Abort+0x448>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6a      	ldr	r2, [pc, #424]	@ (80028e8 <HAL_DMA_Abort+0x44c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a68      	ldr	r2, [pc, #416]	@ (80028ec <HAL_DMA_Abort+0x450>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a67      	ldr	r2, [pc, #412]	@ (80028f0 <HAL_DMA_Abort+0x454>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_DMA_Abort+0x458>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a64      	ldr	r2, [pc, #400]	@ (80028f8 <HAL_DMA_Abort+0x45c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a62      	ldr	r2, [pc, #392]	@ (80028fc <HAL_DMA_Abort+0x460>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a61      	ldr	r2, [pc, #388]	@ (8002900 <HAL_DMA_Abort+0x464>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <HAL_DMA_Abort+0x468>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <HAL_DMA_Abort+0x46c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5c      	ldr	r2, [pc, #368]	@ (800290c <HAL_DMA_Abort+0x470>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002910 <HAL_DMA_Abort+0x474>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a59      	ldr	r2, [pc, #356]	@ (8002914 <HAL_DMA_Abort+0x478>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a58      	ldr	r2, [pc, #352]	@ (8002918 <HAL_DMA_Abort+0x47c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort+0x32a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a56      	ldr	r2, [pc, #344]	@ (800291c <HAL_DMA_Abort+0x480>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d108      	bne.n	80027d8 <HAL_DMA_Abort+0x33c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e007      	b.n	80027e8 <HAL_DMA_Abort+0x34c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027e8:	e013      	b.n	8002812 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ea:	f7fe ff79 	bl	80016e0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d90c      	bls.n	8002812 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e12d      	b.n	8002a6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e5      	bne.n	80027ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2f      	ldr	r2, [pc, #188]	@ (80028e0 <HAL_DMA_Abort+0x444>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d04a      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2d      	ldr	r2, [pc, #180]	@ (80028e4 <HAL_DMA_Abort+0x448>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d045      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2c      	ldr	r2, [pc, #176]	@ (80028e8 <HAL_DMA_Abort+0x44c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d040      	beq.n	80028be <HAL_DMA_Abort+0x422>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2a      	ldr	r2, [pc, #168]	@ (80028ec <HAL_DMA_Abort+0x450>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d03b      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_DMA_Abort+0x454>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d036      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_DMA_Abort+0x458>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d031      	beq.n	80028be <HAL_DMA_Abort+0x422>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <HAL_DMA_Abort+0x45c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d02c      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a24      	ldr	r2, [pc, #144]	@ (80028fc <HAL_DMA_Abort+0x460>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d027      	beq.n	80028be <HAL_DMA_Abort+0x422>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a23      	ldr	r2, [pc, #140]	@ (8002900 <HAL_DMA_Abort+0x464>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <HAL_DMA_Abort+0x468>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01d      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_DMA_Abort+0x46c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d018      	beq.n	80028be <HAL_DMA_Abort+0x422>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_DMA_Abort+0x470>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_DMA_Abort+0x422>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1d      	ldr	r2, [pc, #116]	@ (8002910 <HAL_DMA_Abort+0x474>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Abort+0x422>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_DMA_Abort+0x478>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_DMA_Abort+0x422>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002918 <HAL_DMA_Abort+0x47c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_DMA_Abort+0x422>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <HAL_DMA_Abort+0x480>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_DMA_Abort+0x426>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_DMA_Abort+0x428>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02b      	beq.n	8002920 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	223f      	movs	r2, #63	@ 0x3f
 80028d8:	409a      	lsls	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	e02a      	b.n	8002936 <HAL_DMA_Abort+0x49a>
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4f      	ldr	r2, [pc, #316]	@ (8002a78 <HAL_DMA_Abort+0x5dc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d072      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <HAL_DMA_Abort+0x5e0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d06d      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a80 <HAL_DMA_Abort+0x5e4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d068      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <HAL_DMA_Abort+0x5e8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d063      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a49      	ldr	r2, [pc, #292]	@ (8002a88 <HAL_DMA_Abort+0x5ec>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d05e      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a47      	ldr	r2, [pc, #284]	@ (8002a8c <HAL_DMA_Abort+0x5f0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d059      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a46      	ldr	r2, [pc, #280]	@ (8002a90 <HAL_DMA_Abort+0x5f4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d054      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a44      	ldr	r2, [pc, #272]	@ (8002a94 <HAL_DMA_Abort+0x5f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d04f      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a43      	ldr	r2, [pc, #268]	@ (8002a98 <HAL_DMA_Abort+0x5fc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04a      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a41      	ldr	r2, [pc, #260]	@ (8002a9c <HAL_DMA_Abort+0x600>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d045      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a40      	ldr	r2, [pc, #256]	@ (8002aa0 <HAL_DMA_Abort+0x604>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa4 <HAL_DMA_Abort+0x608>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d03b      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa8 <HAL_DMA_Abort+0x60c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3b      	ldr	r2, [pc, #236]	@ (8002aac <HAL_DMA_Abort+0x610>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab0 <HAL_DMA_Abort+0x614>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02c      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a38      	ldr	r2, [pc, #224]	@ (8002ab4 <HAL_DMA_Abort+0x618>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a37      	ldr	r2, [pc, #220]	@ (8002ab8 <HAL_DMA_Abort+0x61c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a35      	ldr	r2, [pc, #212]	@ (8002abc <HAL_DMA_Abort+0x620>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a34      	ldr	r2, [pc, #208]	@ (8002ac0 <HAL_DMA_Abort+0x624>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a32      	ldr	r2, [pc, #200]	@ (8002ac4 <HAL_DMA_Abort+0x628>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a31      	ldr	r2, [pc, #196]	@ (8002ac8 <HAL_DMA_Abort+0x62c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002acc <HAL_DMA_Abort+0x630>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad0 <HAL_DMA_Abort+0x634>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_DMA_Abort+0x58a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad4 <HAL_DMA_Abort+0x638>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_DMA_Abort+0x58e>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_DMA_Abort+0x590>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40020010 	.word	0x40020010
 8002a7c:	40020028 	.word	0x40020028
 8002a80:	40020040 	.word	0x40020040
 8002a84:	40020058 	.word	0x40020058
 8002a88:	40020070 	.word	0x40020070
 8002a8c:	40020088 	.word	0x40020088
 8002a90:	400200a0 	.word	0x400200a0
 8002a94:	400200b8 	.word	0x400200b8
 8002a98:	40020410 	.word	0x40020410
 8002a9c:	40020428 	.word	0x40020428
 8002aa0:	40020440 	.word	0x40020440
 8002aa4:	40020458 	.word	0x40020458
 8002aa8:	40020470 	.word	0x40020470
 8002aac:	40020488 	.word	0x40020488
 8002ab0:	400204a0 	.word	0x400204a0
 8002ab4:	400204b8 	.word	0x400204b8
 8002ab8:	58025408 	.word	0x58025408
 8002abc:	5802541c 	.word	0x5802541c
 8002ac0:	58025430 	.word	0x58025430
 8002ac4:	58025444 	.word	0x58025444
 8002ac8:	58025458 	.word	0x58025458
 8002acc:	5802546c 	.word	0x5802546c
 8002ad0:	58025480 	.word	0x58025480
 8002ad4:	58025494 	.word	0x58025494

08002ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e237      	b.n	8002f5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d004      	beq.n	8002b00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e22c      	b.n	8002f5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5c      	ldr	r2, [pc, #368]	@ (8002c78 <HAL_DMA_Abort_IT+0x1a0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d04a      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c7c <HAL_DMA_Abort_IT+0x1a4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d045      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a59      	ldr	r2, [pc, #356]	@ (8002c80 <HAL_DMA_Abort_IT+0x1a8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a58      	ldr	r2, [pc, #352]	@ (8002c84 <HAL_DMA_Abort_IT+0x1ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d03b      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <HAL_DMA_Abort_IT+0x1b0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d036      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a55      	ldr	r2, [pc, #340]	@ (8002c8c <HAL_DMA_Abort_IT+0x1b4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d031      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a53      	ldr	r2, [pc, #332]	@ (8002c90 <HAL_DMA_Abort_IT+0x1b8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d02c      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_DMA_Abort_IT+0x1bc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d027      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a50      	ldr	r2, [pc, #320]	@ (8002c98 <HAL_DMA_Abort_IT+0x1c0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8002c9c <HAL_DMA_Abort_IT+0x1c4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d01d      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1c8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d018      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1cc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1d0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00e      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a49      	ldr	r2, [pc, #292]	@ (8002cac <HAL_DMA_Abort_IT+0x1d4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a47      	ldr	r2, [pc, #284]	@ (8002cb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xc8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a46      	ldr	r2, [pc, #280]	@ (8002cb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Abort_IT+0xcc>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_Abort_IT+0xce>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8086 	beq.w	8002cb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <HAL_DMA_Abort_IT+0x1a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <HAL_DMA_Abort_IT+0x1a4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d045      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c80 <HAL_DMA_Abort_IT+0x1a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d040      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <HAL_DMA_Abort_IT+0x1ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d03b      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a29      	ldr	r2, [pc, #164]	@ (8002c88 <HAL_DMA_Abort_IT+0x1b0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <HAL_DMA_Abort_IT+0x1b4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d031      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <HAL_DMA_Abort_IT+0x1b8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02c      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_DMA_Abort_IT+0x1bc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <HAL_DMA_Abort_IT+0x1c0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <HAL_DMA_Abort_IT+0x1c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01d      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1d0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_DMA_Abort_IT+0x1d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x17c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <HAL_DMA_Abort_IT+0x18e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e178      	b.n	8002f58 <HAL_DMA_Abort_IT+0x480>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e16f      	b.n	8002f58 <HAL_DMA_Abort_IT+0x480>
 8002c78:	40020010 	.word	0x40020010
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	40020040 	.word	0x40020040
 8002c84:	40020058 	.word	0x40020058
 8002c88:	40020070 	.word	0x40020070
 8002c8c:	40020088 	.word	0x40020088
 8002c90:	400200a0 	.word	0x400200a0
 8002c94:	400200b8 	.word	0x400200b8
 8002c98:	40020410 	.word	0x40020410
 8002c9c:	40020428 	.word	0x40020428
 8002ca0:	40020440 	.word	0x40020440
 8002ca4:	40020458 	.word	0x40020458
 8002ca8:	40020470 	.word	0x40020470
 8002cac:	40020488 	.word	0x40020488
 8002cb0:	400204a0 	.word	0x400204a0
 8002cb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 020e 	bic.w	r2, r2, #14
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6c      	ldr	r2, [pc, #432]	@ (8002e80 <HAL_DMA_Abort_IT+0x3a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04a      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002e84 <HAL_DMA_Abort_IT+0x3ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d045      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a69      	ldr	r2, [pc, #420]	@ (8002e88 <HAL_DMA_Abort_IT+0x3b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d040      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a68      	ldr	r2, [pc, #416]	@ (8002e8c <HAL_DMA_Abort_IT+0x3b4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d03b      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a66      	ldr	r2, [pc, #408]	@ (8002e90 <HAL_DMA_Abort_IT+0x3b8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d036      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a65      	ldr	r2, [pc, #404]	@ (8002e94 <HAL_DMA_Abort_IT+0x3bc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d031      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_DMA_Abort_IT+0x3c0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02c      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a62      	ldr	r2, [pc, #392]	@ (8002e9c <HAL_DMA_Abort_IT+0x3c4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d027      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d022      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3cc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01d      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3d0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_DMA_Abort_IT+0x3d4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb0 <HAL_DMA_Abort_IT+0x3d8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a59      	ldr	r2, [pc, #356]	@ (8002eb4 <HAL_DMA_Abort_IT+0x3dc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a57      	ldr	r2, [pc, #348]	@ (8002eb8 <HAL_DMA_Abort_IT+0x3e0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x290>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <HAL_DMA_Abort_IT+0x3e4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d108      	bne.n	8002d7a <HAL_DMA_Abort_IT+0x2a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e007      	b.n	8002d8a <HAL_DMA_Abort_IT+0x2b2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e80 <HAL_DMA_Abort_IT+0x3a8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d072      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_DMA_Abort_IT+0x3ac>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d06d      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a39      	ldr	r2, [pc, #228]	@ (8002e88 <HAL_DMA_Abort_IT+0x3b0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d068      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a37      	ldr	r2, [pc, #220]	@ (8002e8c <HAL_DMA_Abort_IT+0x3b4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d063      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a36      	ldr	r2, [pc, #216]	@ (8002e90 <HAL_DMA_Abort_IT+0x3b8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d05e      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a34      	ldr	r2, [pc, #208]	@ (8002e94 <HAL_DMA_Abort_IT+0x3bc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d059      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a33      	ldr	r2, [pc, #204]	@ (8002e98 <HAL_DMA_Abort_IT+0x3c0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d054      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <HAL_DMA_Abort_IT+0x3c4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d04f      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3c8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04a      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3cc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d045      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3d0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002eac <HAL_DMA_Abort_IT+0x3d4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d03b      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb0 <HAL_DMA_Abort_IT+0x3d8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d036      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a28      	ldr	r2, [pc, #160]	@ (8002eb4 <HAL_DMA_Abort_IT+0x3dc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d031      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a27      	ldr	r2, [pc, #156]	@ (8002eb8 <HAL_DMA_Abort_IT+0x3e0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d02c      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a25      	ldr	r2, [pc, #148]	@ (8002ebc <HAL_DMA_Abort_IT+0x3e4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d027      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ec0 <HAL_DMA_Abort_IT+0x3e8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <HAL_DMA_Abort_IT+0x3ec>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01d      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a21      	ldr	r2, [pc, #132]	@ (8002ec8 <HAL_DMA_Abort_IT+0x3f0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ecc <HAL_DMA_Abort_IT+0x3f4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_DMA_Abort_IT+0x3f8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed4 <HAL_DMA_Abort_IT+0x3fc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <HAL_DMA_Abort_IT+0x400>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x3a2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_DMA_Abort_IT+0x404>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d132      	bne.n	8002ee0 <HAL_DMA_Abort_IT+0x408>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e031      	b.n	8002ee2 <HAL_DMA_Abort_IT+0x40a>
 8002e7e:	bf00      	nop
 8002e80:	40020010 	.word	0x40020010
 8002e84:	40020028 	.word	0x40020028
 8002e88:	40020040 	.word	0x40020040
 8002e8c:	40020058 	.word	0x40020058
 8002e90:	40020070 	.word	0x40020070
 8002e94:	40020088 	.word	0x40020088
 8002e98:	400200a0 	.word	0x400200a0
 8002e9c:	400200b8 	.word	0x400200b8
 8002ea0:	40020410 	.word	0x40020410
 8002ea4:	40020428 	.word	0x40020428
 8002ea8:	40020440 	.word	0x40020440
 8002eac:	40020458 	.word	0x40020458
 8002eb0:	40020470 	.word	0x40020470
 8002eb4:	40020488 	.word	0x40020488
 8002eb8:	400204a0 	.word	0x400204a0
 8002ebc:	400204b8 	.word	0x400204b8
 8002ec0:	58025408 	.word	0x58025408
 8002ec4:	5802541c 	.word	0x5802541c
 8002ec8:	58025430 	.word	0x58025430
 8002ecc:	58025444 	.word	0x58025444
 8002ed0:	58025458 	.word	0x58025458
 8002ed4:	5802546c 	.word	0x5802546c
 8002ed8:	58025480 	.word	0x58025480
 8002edc:	58025494 	.word	0x58025494
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2201      	movs	r2, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop

08002f64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f70:	4b67      	ldr	r3, [pc, #412]	@ (8003110 <HAL_DMA_IRQHandler+0x1ac>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_DMA_IRQHandler+0x1b0>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003118 <HAL_DMA_IRQHandler+0x1b4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04a      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800311c <HAL_DMA_IRQHandler+0x1b8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d045      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5c      	ldr	r2, [pc, #368]	@ (8003120 <HAL_DMA_IRQHandler+0x1bc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d040      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003124 <HAL_DMA_IRQHandler+0x1c0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d03b      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a59      	ldr	r2, [pc, #356]	@ (8003128 <HAL_DMA_IRQHandler+0x1c4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d036      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_DMA_IRQHandler+0x1c8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d031      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a56      	ldr	r2, [pc, #344]	@ (8003130 <HAL_DMA_IRQHandler+0x1cc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02c      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	@ (8003134 <HAL_DMA_IRQHandler+0x1d0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a53      	ldr	r2, [pc, #332]	@ (8003138 <HAL_DMA_IRQHandler+0x1d4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	@ (800313c <HAL_DMA_IRQHandler+0x1d8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a50      	ldr	r2, [pc, #320]	@ (8003140 <HAL_DMA_IRQHandler+0x1dc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a4e      	ldr	r2, [pc, #312]	@ (8003144 <HAL_DMA_IRQHandler+0x1e0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4d      	ldr	r2, [pc, #308]	@ (8003148 <HAL_DMA_IRQHandler+0x1e4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4b      	ldr	r2, [pc, #300]	@ (800314c <HAL_DMA_IRQHandler+0x1e8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4a      	ldr	r2, [pc, #296]	@ (8003150 <HAL_DMA_IRQHandler+0x1ec>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_IRQHandler+0xd2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a48      	ldr	r2, [pc, #288]	@ (8003154 <HAL_DMA_IRQHandler+0x1f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_DMA_IRQHandler+0xd6>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_DMA_IRQHandler+0xd8>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 842b 	beq.w	8003898 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2208      	movs	r2, #8
 800304c:	409a      	lsls	r2, r3
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a2 	beq.w	800319c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2e      	ldr	r2, [pc, #184]	@ (8003118 <HAL_DMA_IRQHandler+0x1b4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d04a      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2d      	ldr	r2, [pc, #180]	@ (800311c <HAL_DMA_IRQHandler+0x1b8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d045      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2b      	ldr	r2, [pc, #172]	@ (8003120 <HAL_DMA_IRQHandler+0x1bc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d040      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2a      	ldr	r2, [pc, #168]	@ (8003124 <HAL_DMA_IRQHandler+0x1c0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d03b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a28      	ldr	r2, [pc, #160]	@ (8003128 <HAL_DMA_IRQHandler+0x1c4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d036      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a27      	ldr	r2, [pc, #156]	@ (800312c <HAL_DMA_IRQHandler+0x1c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d031      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a25      	ldr	r2, [pc, #148]	@ (8003130 <HAL_DMA_IRQHandler+0x1cc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a24      	ldr	r2, [pc, #144]	@ (8003134 <HAL_DMA_IRQHandler+0x1d0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d027      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a22      	ldr	r2, [pc, #136]	@ (8003138 <HAL_DMA_IRQHandler+0x1d4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a21      	ldr	r2, [pc, #132]	@ (800313c <HAL_DMA_IRQHandler+0x1d8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01d      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <HAL_DMA_IRQHandler+0x1dc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <HAL_DMA_IRQHandler+0x1e0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003148 <HAL_DMA_IRQHandler+0x1e4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1b      	ldr	r2, [pc, #108]	@ (800314c <HAL_DMA_IRQHandler+0x1e8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <HAL_DMA_IRQHandler+0x1ec>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x194>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <HAL_DMA_IRQHandler+0x1f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d12f      	bne.n	8003158 <HAL_DMA_IRQHandler+0x1f4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e02e      	b.n	800316c <HAL_DMA_IRQHandler+0x208>
 800310e:	bf00      	nop
 8003110:	24000090 	.word	0x24000090
 8003114:	1b4e81b5 	.word	0x1b4e81b5
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2208      	movs	r2, #8
 800318a:	409a      	lsls	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d06e      	beq.n	8003290 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a69      	ldr	r2, [pc, #420]	@ (800335c <HAL_DMA_IRQHandler+0x3f8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04a      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a67      	ldr	r2, [pc, #412]	@ (8003360 <HAL_DMA_IRQHandler+0x3fc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d045      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a66      	ldr	r2, [pc, #408]	@ (8003364 <HAL_DMA_IRQHandler+0x400>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d040      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a64      	ldr	r2, [pc, #400]	@ (8003368 <HAL_DMA_IRQHandler+0x404>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d03b      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a63      	ldr	r2, [pc, #396]	@ (800336c <HAL_DMA_IRQHandler+0x408>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d036      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a61      	ldr	r2, [pc, #388]	@ (8003370 <HAL_DMA_IRQHandler+0x40c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d031      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a60      	ldr	r2, [pc, #384]	@ (8003374 <HAL_DMA_IRQHandler+0x410>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d02c      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003378 <HAL_DMA_IRQHandler+0x414>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d027      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a5d      	ldr	r2, [pc, #372]	@ (800337c <HAL_DMA_IRQHandler+0x418>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a5b      	ldr	r2, [pc, #364]	@ (8003380 <HAL_DMA_IRQHandler+0x41c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01d      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5a      	ldr	r2, [pc, #360]	@ (8003384 <HAL_DMA_IRQHandler+0x420>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a58      	ldr	r2, [pc, #352]	@ (8003388 <HAL_DMA_IRQHandler+0x424>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a57      	ldr	r2, [pc, #348]	@ (800338c <HAL_DMA_IRQHandler+0x428>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a55      	ldr	r2, [pc, #340]	@ (8003390 <HAL_DMA_IRQHandler+0x42c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a54      	ldr	r2, [pc, #336]	@ (8003394 <HAL_DMA_IRQHandler+0x430>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2ee>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_DMA_IRQHandler+0x434>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10a      	bne.n	8003268 <HAL_DMA_IRQHandler+0x304>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e003      	b.n	8003270 <HAL_DMA_IRQHandler+0x30c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2204      	movs	r2, #4
 800329a:	409a      	lsls	r2, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 808f 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <HAL_DMA_IRQHandler+0x3f8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <HAL_DMA_IRQHandler+0x3fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <HAL_DMA_IRQHandler+0x400>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <HAL_DMA_IRQHandler+0x404>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a26      	ldr	r2, [pc, #152]	@ (800336c <HAL_DMA_IRQHandler+0x408>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a24      	ldr	r2, [pc, #144]	@ (8003370 <HAL_DMA_IRQHandler+0x40c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <HAL_DMA_IRQHandler+0x410>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <HAL_DMA_IRQHandler+0x414>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a20      	ldr	r2, [pc, #128]	@ (800337c <HAL_DMA_IRQHandler+0x418>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_DMA_IRQHandler+0x41c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1d      	ldr	r2, [pc, #116]	@ (8003384 <HAL_DMA_IRQHandler+0x420>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <HAL_DMA_IRQHandler+0x424>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <HAL_DMA_IRQHandler+0x428>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <HAL_DMA_IRQHandler+0x42c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_DMA_IRQHandler+0x430>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_IRQHandler+0x3e2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a15      	ldr	r2, [pc, #84]	@ (8003398 <HAL_DMA_IRQHandler+0x434>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12a      	bne.n	800339c <HAL_DMA_IRQHandler+0x438>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e023      	b.n	80033a4 <HAL_DMA_IRQHandler+0x440>
 800335c:	40020010 	.word	0x40020010
 8003360:	40020028 	.word	0x40020028
 8003364:	40020040 	.word	0x40020040
 8003368:	40020058 	.word	0x40020058
 800336c:	40020070 	.word	0x40020070
 8003370:	40020088 	.word	0x40020088
 8003374:	400200a0 	.word	0x400200a0
 8003378:	400200b8 	.word	0x400200b8
 800337c:	40020410 	.word	0x40020410
 8003380:	40020428 	.word	0x40020428
 8003384:	40020440 	.word	0x40020440
 8003388:	40020458 	.word	0x40020458
 800338c:	40020470 	.word	0x40020470
 8003390:	40020488 	.word	0x40020488
 8003394:	400204a0 	.word	0x400204a0
 8003398:	400204b8 	.word	0x400204b8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2210      	movs	r2, #16
 80033ce:	409a      	lsls	r2, r3
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a6 	beq.w	8003526 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a85      	ldr	r2, [pc, #532]	@ (80035f4 <HAL_DMA_IRQHandler+0x690>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d04a      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a83      	ldr	r2, [pc, #524]	@ (80035f8 <HAL_DMA_IRQHandler+0x694>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d045      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a82      	ldr	r2, [pc, #520]	@ (80035fc <HAL_DMA_IRQHandler+0x698>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d040      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a80      	ldr	r2, [pc, #512]	@ (8003600 <HAL_DMA_IRQHandler+0x69c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03b      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7f      	ldr	r2, [pc, #508]	@ (8003604 <HAL_DMA_IRQHandler+0x6a0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d036      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7d      	ldr	r2, [pc, #500]	@ (8003608 <HAL_DMA_IRQHandler+0x6a4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d031      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7c      	ldr	r2, [pc, #496]	@ (800360c <HAL_DMA_IRQHandler+0x6a8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d02c      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7a      	ldr	r2, [pc, #488]	@ (8003610 <HAL_DMA_IRQHandler+0x6ac>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d027      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a79      	ldr	r2, [pc, #484]	@ (8003614 <HAL_DMA_IRQHandler+0x6b0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a77      	ldr	r2, [pc, #476]	@ (8003618 <HAL_DMA_IRQHandler+0x6b4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a76      	ldr	r2, [pc, #472]	@ (800361c <HAL_DMA_IRQHandler+0x6b8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a74      	ldr	r2, [pc, #464]	@ (8003620 <HAL_DMA_IRQHandler+0x6bc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a73      	ldr	r2, [pc, #460]	@ (8003624 <HAL_DMA_IRQHandler+0x6c0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a71      	ldr	r2, [pc, #452]	@ (8003628 <HAL_DMA_IRQHandler+0x6c4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a70      	ldr	r2, [pc, #448]	@ (800362c <HAL_DMA_IRQHandler+0x6c8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_DMA_IRQHandler+0x516>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_DMA_IRQHandler+0x6cc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d10a      	bne.n	8003490 <HAL_DMA_IRQHandler+0x52c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e009      	b.n	80034a4 <HAL_DMA_IRQHandler+0x540>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03e      	beq.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2210      	movs	r2, #16
 80034b2:	409a      	lsls	r2, r3
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d108      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d024      	beq.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
 80034e4:	e01f      	b.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01b      	beq.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
 80034f6:	e016      	b.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2220      	movs	r2, #32
 8003530:	409a      	lsls	r2, r3
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8110 	beq.w	800375c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <HAL_DMA_IRQHandler+0x690>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04a      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2b      	ldr	r2, [pc, #172]	@ (80035f8 <HAL_DMA_IRQHandler+0x694>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d045      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a29      	ldr	r2, [pc, #164]	@ (80035fc <HAL_DMA_IRQHandler+0x698>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d040      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a28      	ldr	r2, [pc, #160]	@ (8003600 <HAL_DMA_IRQHandler+0x69c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d03b      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a26      	ldr	r2, [pc, #152]	@ (8003604 <HAL_DMA_IRQHandler+0x6a0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d036      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a25      	ldr	r2, [pc, #148]	@ (8003608 <HAL_DMA_IRQHandler+0x6a4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d031      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_DMA_IRQHandler+0x6a8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02c      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a22      	ldr	r2, [pc, #136]	@ (8003610 <HAL_DMA_IRQHandler+0x6ac>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d027      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <HAL_DMA_IRQHandler+0x6b0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1f      	ldr	r2, [pc, #124]	@ (8003618 <HAL_DMA_IRQHandler+0x6b4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01d      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_DMA_IRQHandler+0x6b8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <HAL_DMA_IRQHandler+0x6bc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_DMA_IRQHandler+0x6c0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a19      	ldr	r2, [pc, #100]	@ (8003628 <HAL_DMA_IRQHandler+0x6c4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a17      	ldr	r2, [pc, #92]	@ (800362c <HAL_DMA_IRQHandler+0x6c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_DMA_IRQHandler+0x678>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <HAL_DMA_IRQHandler+0x6cc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12b      	bne.n	8003634 <HAL_DMA_IRQHandler+0x6d0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e02a      	b.n	8003648 <HAL_DMA_IRQHandler+0x6e4>
 80035f2:	bf00      	nop
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8087 	beq.w	800375c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2220      	movs	r2, #32
 8003658:	409a      	lsls	r2, r3
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b04      	cmp	r3, #4
 8003668:	d139      	bne.n	80036de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0216 	bic.w	r2, r2, #22
 8003678:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003688:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <HAL_DMA_IRQHandler+0x736>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0208 	bic.w	r2, r2, #8
 80036a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	223f      	movs	r2, #63	@ 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 834a 	beq.w	8003d68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
          }
          return;
 80036dc:	e344      	b.n	8003d68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02c      	beq.n	800375c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e027      	b.n	800375c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e01e      	b.n	800375c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8306 	beq.w	8003d72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8088 	beq.w	8003884 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2204      	movs	r2, #4
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7a      	ldr	r2, [pc, #488]	@ (800396c <HAL_DMA_IRQHandler+0xa08>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	@ (8003970 <HAL_DMA_IRQHandler+0xa0c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_DMA_IRQHandler+0xa10>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a76      	ldr	r2, [pc, #472]	@ (8003978 <HAL_DMA_IRQHandler+0xa14>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a74      	ldr	r2, [pc, #464]	@ (800397c <HAL_DMA_IRQHandler+0xa18>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_DMA_IRQHandler+0xa1c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <HAL_DMA_IRQHandler+0xa20>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a70      	ldr	r2, [pc, #448]	@ (8003988 <HAL_DMA_IRQHandler+0xa24>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	@ (800398c <HAL_DMA_IRQHandler+0xa28>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6d      	ldr	r2, [pc, #436]	@ (8003990 <HAL_DMA_IRQHandler+0xa2c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003994 <HAL_DMA_IRQHandler+0xa30>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003998 <HAL_DMA_IRQHandler+0xa34>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a68      	ldr	r2, [pc, #416]	@ (800399c <HAL_DMA_IRQHandler+0xa38>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_DMA_IRQHandler+0xa3c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_DMA_IRQHandler+0xa40>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_IRQHandler+0x8b8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a64      	ldr	r2, [pc, #400]	@ (80039a8 <HAL_DMA_IRQHandler+0xa44>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <HAL_DMA_IRQHandler+0x8ca>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e007      	b.n	800383e <HAL_DMA_IRQHandler+0x8da>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3301      	adds	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003846:	429a      	cmp	r2, r3
 8003848:	d307      	bcc.n	800385a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f2      	bne.n	800383e <HAL_DMA_IRQHandler+0x8da>
 8003858:	e000      	b.n	800385c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800385a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2203      	movs	r2, #3
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003872:	e003      	b.n	800387c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8272 	beq.w	8003d72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e26c      	b.n	8003d72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a43      	ldr	r2, [pc, #268]	@ (80039ac <HAL_DMA_IRQHandler+0xa48>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d022      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a42      	ldr	r2, [pc, #264]	@ (80039b0 <HAL_DMA_IRQHandler+0xa4c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d01d      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a40      	ldr	r2, [pc, #256]	@ (80039b4 <HAL_DMA_IRQHandler+0xa50>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3f      	ldr	r2, [pc, #252]	@ (80039b8 <HAL_DMA_IRQHandler+0xa54>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3d      	ldr	r2, [pc, #244]	@ (80039bc <HAL_DMA_IRQHandler+0xa58>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	@ (80039c0 <HAL_DMA_IRQHandler+0xa5c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3a      	ldr	r2, [pc, #232]	@ (80039c4 <HAL_DMA_IRQHandler+0xa60>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x984>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a39      	ldr	r2, [pc, #228]	@ (80039c8 <HAL_DMA_IRQHandler+0xa64>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_IRQHandler+0x988>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_DMA_IRQHandler+0x98a>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 823f 	beq.w	8003d72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2204      	movs	r2, #4
 8003906:	409a      	lsls	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80cd 	beq.w	8003aac <HAL_DMA_IRQHandler+0xb48>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80c7 	beq.w	8003aac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2204      	movs	r2, #4
 8003928:	409a      	lsls	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d049      	beq.n	80039cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8210 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003954:	e20a      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8206 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003968:	e200      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe08>
 800396a:	bf00      	nop
 800396c:	40020010 	.word	0x40020010
 8003970:	40020028 	.word	0x40020028
 8003974:	40020040 	.word	0x40020040
 8003978:	40020058 	.word	0x40020058
 800397c:	40020070 	.word	0x40020070
 8003980:	40020088 	.word	0x40020088
 8003984:	400200a0 	.word	0x400200a0
 8003988:	400200b8 	.word	0x400200b8
 800398c:	40020410 	.word	0x40020410
 8003990:	40020428 	.word	0x40020428
 8003994:	40020440 	.word	0x40020440
 8003998:	40020458 	.word	0x40020458
 800399c:	40020470 	.word	0x40020470
 80039a0:	40020488 	.word	0x40020488
 80039a4:	400204a0 	.word	0x400204a0
 80039a8:	400204b8 	.word	0x400204b8
 80039ac:	58025408 	.word	0x58025408
 80039b0:	5802541c 	.word	0x5802541c
 80039b4:	58025430 	.word	0x58025430
 80039b8:	58025444 	.word	0x58025444
 80039bc:	58025458 	.word	0x58025458
 80039c0:	5802546c 	.word	0x5802546c
 80039c4:	58025480 	.word	0x58025480
 80039c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d160      	bne.n	8003a98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc74>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04a      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7d      	ldr	r2, [pc, #500]	@ (8003bdc <HAL_DMA_IRQHandler+0xc78>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d045      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7c      	ldr	r2, [pc, #496]	@ (8003be0 <HAL_DMA_IRQHandler+0xc7c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d040      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7a      	ldr	r2, [pc, #488]	@ (8003be4 <HAL_DMA_IRQHandler+0xc80>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d03b      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a79      	ldr	r2, [pc, #484]	@ (8003be8 <HAL_DMA_IRQHandler+0xc84>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d036      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a77      	ldr	r2, [pc, #476]	@ (8003bec <HAL_DMA_IRQHandler+0xc88>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d031      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a76      	ldr	r2, [pc, #472]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc8c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d02c      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc90>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d027      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a73      	ldr	r2, [pc, #460]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc94>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a71      	ldr	r2, [pc, #452]	@ (8003bfc <HAL_DMA_IRQHandler+0xc98>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a70      	ldr	r2, [pc, #448]	@ (8003c00 <HAL_DMA_IRQHandler+0xc9c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6e      	ldr	r2, [pc, #440]	@ (8003c04 <HAL_DMA_IRQHandler+0xca0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6d      	ldr	r2, [pc, #436]	@ (8003c08 <HAL_DMA_IRQHandler+0xca4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003c0c <HAL_DMA_IRQHandler+0xca8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6a      	ldr	r2, [pc, #424]	@ (8003c10 <HAL_DMA_IRQHandler+0xcac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xb12>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	@ (8003c14 <HAL_DMA_IRQHandler+0xcb0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0xb24>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e007      	b.n	8003a98 <HAL_DMA_IRQHandler+0xb34>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8165 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aaa:	e15f      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80c5 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xce8>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80bf 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 813a 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b04:	e134      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8130 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b18:	e12a      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 8089 	bne.w	8003c38 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc74>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04a      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a29      	ldr	r2, [pc, #164]	@ (8003bdc <HAL_DMA_IRQHandler+0xc78>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d045      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a28      	ldr	r2, [pc, #160]	@ (8003be0 <HAL_DMA_IRQHandler+0xc7c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a26      	ldr	r2, [pc, #152]	@ (8003be4 <HAL_DMA_IRQHandler+0xc80>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_DMA_IRQHandler+0xc84>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	@ (8003bec <HAL_DMA_IRQHandler+0xc88>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc8c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a20      	ldr	r2, [pc, #128]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc90>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc94>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <HAL_DMA_IRQHandler+0xc98>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_DMA_IRQHandler+0xc9c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1a      	ldr	r2, [pc, #104]	@ (8003c04 <HAL_DMA_IRQHandler+0xca0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_DMA_IRQHandler+0xca4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <HAL_DMA_IRQHandler+0xca8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <HAL_DMA_IRQHandler+0xcac>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xc62>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <HAL_DMA_IRQHandler+0xcb0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d128      	bne.n	8003c18 <HAL_DMA_IRQHandler+0xcb4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0214 	bic.w	r2, r2, #20
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e027      	b.n	8003c28 <HAL_DMA_IRQHandler+0xcc4>
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020a 	bic.w	r2, r2, #10
 8003c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8097 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4a:	e091      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2208      	movs	r2, #8
 8003c56:	409a      	lsls	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8088 	beq.w	8003d72 <HAL_DMA_IRQHandler+0xe0e>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8082 	beq.w	8003d72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a41      	ldr	r2, [pc, #260]	@ (8003d78 <HAL_DMA_IRQHandler+0xe14>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04a      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d7c <HAL_DMA_IRQHandler+0xe18>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d045      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	@ (8003d80 <HAL_DMA_IRQHandler+0xe1c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3c      	ldr	r2, [pc, #240]	@ (8003d84 <HAL_DMA_IRQHandler+0xe20>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03b      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d88 <HAL_DMA_IRQHandler+0xe24>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d036      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	@ (8003d8c <HAL_DMA_IRQHandler+0xe28>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a38      	ldr	r2, [pc, #224]	@ (8003d90 <HAL_DMA_IRQHandler+0xe2c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d02c      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a36      	ldr	r2, [pc, #216]	@ (8003d94 <HAL_DMA_IRQHandler+0xe30>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d027      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a35      	ldr	r2, [pc, #212]	@ (8003d98 <HAL_DMA_IRQHandler+0xe34>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <HAL_DMA_IRQHandler+0xe38>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a32      	ldr	r2, [pc, #200]	@ (8003da0 <HAL_DMA_IRQHandler+0xe3c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a30      	ldr	r2, [pc, #192]	@ (8003da4 <HAL_DMA_IRQHandler+0xe40>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2f      	ldr	r2, [pc, #188]	@ (8003da8 <HAL_DMA_IRQHandler+0xe44>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8003dac <HAL_DMA_IRQHandler+0xe48>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8003db0 <HAL_DMA_IRQHandler+0xe4c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xdaa>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2a      	ldr	r2, [pc, #168]	@ (8003db4 <HAL_DMA_IRQHandler+0xe50>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0xdbc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 021c 	bic.w	r2, r2, #28
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <HAL_DMA_IRQHandler+0xdcc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020e 	bic.w	r2, r2, #14
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
 8003d66:	e004      	b.n	8003d72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d68:	bf00      	nop
 8003d6a:	e002      	b.n	8003d72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d72:	3728      	adds	r7, #40	@ 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8

08003db8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd4 <DMA_SetConfig+0x21c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d072      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a7d      	ldr	r2, [pc, #500]	@ (8003fd8 <DMA_SetConfig+0x220>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d06d      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7c      	ldr	r2, [pc, #496]	@ (8003fdc <DMA_SetConfig+0x224>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d068      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe0 <DMA_SetConfig+0x228>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d063      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a79      	ldr	r2, [pc, #484]	@ (8003fe4 <DMA_SetConfig+0x22c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d05e      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a77      	ldr	r2, [pc, #476]	@ (8003fe8 <DMA_SetConfig+0x230>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d059      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a76      	ldr	r2, [pc, #472]	@ (8003fec <DMA_SetConfig+0x234>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d054      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a74      	ldr	r2, [pc, #464]	@ (8003ff0 <DMA_SetConfig+0x238>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04f      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a73      	ldr	r2, [pc, #460]	@ (8003ff4 <DMA_SetConfig+0x23c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a71      	ldr	r2, [pc, #452]	@ (8003ff8 <DMA_SetConfig+0x240>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a70      	ldr	r2, [pc, #448]	@ (8003ffc <DMA_SetConfig+0x244>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	@ (8004000 <DMA_SetConfig+0x248>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8004004 <DMA_SetConfig+0x24c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6b      	ldr	r2, [pc, #428]	@ (8004008 <DMA_SetConfig+0x250>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6a      	ldr	r2, [pc, #424]	@ (800400c <DMA_SetConfig+0x254>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a68      	ldr	r2, [pc, #416]	@ (8004010 <DMA_SetConfig+0x258>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a67      	ldr	r2, [pc, #412]	@ (8004014 <DMA_SetConfig+0x25c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a65      	ldr	r2, [pc, #404]	@ (8004018 <DMA_SetConfig+0x260>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a64      	ldr	r2, [pc, #400]	@ (800401c <DMA_SetConfig+0x264>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a62      	ldr	r2, [pc, #392]	@ (8004020 <DMA_SetConfig+0x268>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a61      	ldr	r2, [pc, #388]	@ (8004024 <DMA_SetConfig+0x26c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8004028 <DMA_SetConfig+0x270>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800402c <DMA_SetConfig+0x274>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <DMA_SetConfig+0x10a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a5c      	ldr	r2, [pc, #368]	@ (8004030 <DMA_SetConfig+0x278>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <DMA_SetConfig+0x10e>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <DMA_SetConfig+0x110>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ed4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ee6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a39      	ldr	r2, [pc, #228]	@ (8003fd4 <DMA_SetConfig+0x21c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d04a      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a38      	ldr	r2, [pc, #224]	@ (8003fd8 <DMA_SetConfig+0x220>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d045      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a36      	ldr	r2, [pc, #216]	@ (8003fdc <DMA_SetConfig+0x224>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d040      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a35      	ldr	r2, [pc, #212]	@ (8003fe0 <DMA_SetConfig+0x228>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a33      	ldr	r2, [pc, #204]	@ (8003fe4 <DMA_SetConfig+0x22c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d036      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a32      	ldr	r2, [pc, #200]	@ (8003fe8 <DMA_SetConfig+0x230>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d031      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a30      	ldr	r2, [pc, #192]	@ (8003fec <DMA_SetConfig+0x234>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02c      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff0 <DMA_SetConfig+0x238>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d027      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff4 <DMA_SetConfig+0x23c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <DMA_SetConfig+0x240>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <DMA_SetConfig+0x244>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <DMA_SetConfig+0x248>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a27      	ldr	r2, [pc, #156]	@ (8004004 <DMA_SetConfig+0x24c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a26      	ldr	r2, [pc, #152]	@ (8004008 <DMA_SetConfig+0x250>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a24      	ldr	r2, [pc, #144]	@ (800400c <DMA_SetConfig+0x254>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <DMA_SetConfig+0x1d0>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a23      	ldr	r2, [pc, #140]	@ (8004010 <DMA_SetConfig+0x258>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <DMA_SetConfig+0x1d4>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <DMA_SetConfig+0x1d6>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d059      	beq.n	8004046 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	223f      	movs	r2, #63	@ 0x3f
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d138      	bne.n	8004034 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fd2:	e086      	b.n	80040e2 <DMA_SetConfig+0x32a>
 8003fd4:	40020010 	.word	0x40020010
 8003fd8:	40020028 	.word	0x40020028
 8003fdc:	40020040 	.word	0x40020040
 8003fe0:	40020058 	.word	0x40020058
 8003fe4:	40020070 	.word	0x40020070
 8003fe8:	40020088 	.word	0x40020088
 8003fec:	400200a0 	.word	0x400200a0
 8003ff0:	400200b8 	.word	0x400200b8
 8003ff4:	40020410 	.word	0x40020410
 8003ff8:	40020428 	.word	0x40020428
 8003ffc:	40020440 	.word	0x40020440
 8004000:	40020458 	.word	0x40020458
 8004004:	40020470 	.word	0x40020470
 8004008:	40020488 	.word	0x40020488
 800400c:	400204a0 	.word	0x400204a0
 8004010:	400204b8 	.word	0x400204b8
 8004014:	58025408 	.word	0x58025408
 8004018:	5802541c 	.word	0x5802541c
 800401c:	58025430 	.word	0x58025430
 8004020:	58025444 	.word	0x58025444
 8004024:	58025458 	.word	0x58025458
 8004028:	5802546c 	.word	0x5802546c
 800402c:	58025480 	.word	0x58025480
 8004030:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	e04d      	b.n	80040e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a29      	ldr	r2, [pc, #164]	@ (80040f0 <DMA_SetConfig+0x338>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <DMA_SetConfig+0x2de>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a27      	ldr	r2, [pc, #156]	@ (80040f4 <DMA_SetConfig+0x33c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01d      	beq.n	8004096 <DMA_SetConfig+0x2de>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a26      	ldr	r2, [pc, #152]	@ (80040f8 <DMA_SetConfig+0x340>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <DMA_SetConfig+0x2de>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a24      	ldr	r2, [pc, #144]	@ (80040fc <DMA_SetConfig+0x344>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <DMA_SetConfig+0x2de>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <DMA_SetConfig+0x348>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <DMA_SetConfig+0x2de>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <DMA_SetConfig+0x34c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <DMA_SetConfig+0x2de>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a20      	ldr	r2, [pc, #128]	@ (8004108 <DMA_SetConfig+0x350>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <DMA_SetConfig+0x2de>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1e      	ldr	r2, [pc, #120]	@ (800410c <DMA_SetConfig+0x354>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <DMA_SetConfig+0x2e2>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <DMA_SetConfig+0x2e4>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b40      	cmp	r3, #64	@ 0x40
 80040be:	d108      	bne.n	80040d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	60da      	str	r2, [r3, #12]
}
 80040d0:	e007      	b.n	80040e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58025408 	.word	0x58025408
 80040f4:	5802541c 	.word	0x5802541c
 80040f8:	58025430 	.word	0x58025430
 80040fc:	58025444 	.word	0x58025444
 8004100:	58025458 	.word	0x58025458
 8004104:	5802546c 	.word	0x5802546c
 8004108:	58025480 	.word	0x58025480
 800410c:	58025494 	.word	0x58025494

08004110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a42      	ldr	r2, [pc, #264]	@ (8004228 <DMA_CalcBaseAndBitshift+0x118>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d04a      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a41      	ldr	r2, [pc, #260]	@ (800422c <DMA_CalcBaseAndBitshift+0x11c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d045      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3f      	ldr	r2, [pc, #252]	@ (8004230 <DMA_CalcBaseAndBitshift+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d040      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3e      	ldr	r2, [pc, #248]	@ (8004234 <DMA_CalcBaseAndBitshift+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d03b      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a3c      	ldr	r2, [pc, #240]	@ (8004238 <DMA_CalcBaseAndBitshift+0x128>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d036      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a3b      	ldr	r2, [pc, #236]	@ (800423c <DMA_CalcBaseAndBitshift+0x12c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d031      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a39      	ldr	r2, [pc, #228]	@ (8004240 <DMA_CalcBaseAndBitshift+0x130>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02c      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a38      	ldr	r2, [pc, #224]	@ (8004244 <DMA_CalcBaseAndBitshift+0x134>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d027      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a36      	ldr	r2, [pc, #216]	@ (8004248 <DMA_CalcBaseAndBitshift+0x138>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a35      	ldr	r2, [pc, #212]	@ (800424c <DMA_CalcBaseAndBitshift+0x13c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d01d      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <DMA_CalcBaseAndBitshift+0x140>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <DMA_CalcBaseAndBitshift+0x144>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a30      	ldr	r2, [pc, #192]	@ (8004258 <DMA_CalcBaseAndBitshift+0x148>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2f      	ldr	r2, [pc, #188]	@ (800425c <DMA_CalcBaseAndBitshift+0x14c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004260 <DMA_CalcBaseAndBitshift+0x150>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <DMA_CalcBaseAndBitshift+0xa8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004264 <DMA_CalcBaseAndBitshift+0x154>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <DMA_CalcBaseAndBitshift+0xac>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <DMA_CalcBaseAndBitshift+0xae>
 80041bc:	2300      	movs	r3, #0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d024      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3b10      	subs	r3, #16
 80041ca:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <DMA_CalcBaseAndBitshift+0x158>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	4a24      	ldr	r2, [pc, #144]	@ (800426c <DMA_CalcBaseAndBitshift+0x15c>)
 80041dc:	5cd3      	ldrb	r3, [r2, r3]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d908      	bls.n	80041fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <DMA_CalcBaseAndBitshift+0x160>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	1d1a      	adds	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80041fa:	e00d      	b.n	8004218 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <DMA_CalcBaseAndBitshift+0x160>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6593      	str	r3, [r2, #88]	@ 0x58
 800420a:	e005      	b.n	8004218 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40020010 	.word	0x40020010
 800422c:	40020028 	.word	0x40020028
 8004230:	40020040 	.word	0x40020040
 8004234:	40020058 	.word	0x40020058
 8004238:	40020070 	.word	0x40020070
 800423c:	40020088 	.word	0x40020088
 8004240:	400200a0 	.word	0x400200a0
 8004244:	400200b8 	.word	0x400200b8
 8004248:	40020410 	.word	0x40020410
 800424c:	40020428 	.word	0x40020428
 8004250:	40020440 	.word	0x40020440
 8004254:	40020458 	.word	0x40020458
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	400204a0 	.word	0x400204a0
 8004264:	400204b8 	.word	0x400204b8
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	0800c2c0 	.word	0x0800c2c0
 8004270:	fffffc00 	.word	0xfffffc00

08004274 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d120      	bne.n	80042ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	2b03      	cmp	r3, #3
 800428e:	d858      	bhi.n	8004342 <DMA_CheckFifoParam+0xce>
 8004290:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <DMA_CheckFifoParam+0x24>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	08004343 	.word	0x08004343
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d048      	beq.n	8004346 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042b8:	e045      	b.n	8004346 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042c2:	d142      	bne.n	800434a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042c8:	e03f      	b.n	800434a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d2:	d123      	bne.n	800431c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d838      	bhi.n	800434e <DMA_CheckFifoParam+0xda>
 80042dc:	a201      	add	r2, pc, #4	@ (adr r2, 80042e4 <DMA_CheckFifoParam+0x70>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	080042fb 	.word	0x080042fb
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800430d 	.word	0x0800430d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
        break;
 80042f8:	e030      	b.n	800435c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d025      	beq.n	8004352 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800430a:	e022      	b.n	8004352 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004314:	d11f      	bne.n	8004356 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800431a:	e01c      	b.n	8004356 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	2b02      	cmp	r3, #2
 8004322:	d902      	bls.n	800432a <DMA_CheckFifoParam+0xb6>
 8004324:	2b03      	cmp	r3, #3
 8004326:	d003      	beq.n	8004330 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004328:	e018      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
        break;
 800432e:	e015      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
    break;
 8004340:	e00b      	b.n	800435a <DMA_CheckFifoParam+0xe6>
        break;
 8004342:	bf00      	nop
 8004344:	e00a      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        break;
 8004346:	bf00      	nop
 8004348:	e008      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        break;
 800434a:	bf00      	nop
 800434c:	e006      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <DMA_CheckFifoParam+0xe8>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <DMA_CheckFifoParam+0xe8>
    break;
 800435a:	bf00      	nop
    }
  }

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a36      	ldr	r2, [pc, #216]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a35      	ldr	r2, [pc, #212]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a33      	ldr	r2, [pc, #204]	@ (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a32      	ldr	r2, [pc, #200]	@ (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a30      	ldr	r2, [pc, #192]	@ (8004474 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2d      	ldr	r2, [pc, #180]	@ (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01a      	beq.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3b08      	subs	r3, #8
 80043dc:	4a28      	ldr	r2, [pc, #160]	@ (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a24      	ldr	r2, [pc, #144]	@ (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2201      	movs	r2, #1
 8004402:	409a      	lsls	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004408:	e024      	b.n	8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3b10      	subs	r3, #16
 8004412:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a1c      	ldr	r2, [pc, #112]	@ (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d806      	bhi.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a1b      	ldr	r2, [pc, #108]	@ (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d902      	bls.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3308      	adds	r3, #8
 8004430:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a16      	ldr	r2, [pc, #88]	@ (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004444:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	58025408 	.word	0x58025408
 8004464:	5802541c 	.word	0x5802541c
 8004468:	58025430 	.word	0x58025430
 800446c:	58025444 	.word	0x58025444
 8004470:	58025458 	.word	0x58025458
 8004474:	5802546c 	.word	0x5802546c
 8004478:	58025480 	.word	0x58025480
 800447c:	58025494 	.word	0x58025494
 8004480:	cccccccd 	.word	0xcccccccd
 8004484:	16009600 	.word	0x16009600
 8004488:	58025880 	.word	0x58025880
 800448c:	aaaaaaab 	.word	0xaaaaaaab
 8004490:	400204b8 	.word	0x400204b8
 8004494:	4002040f 	.word	0x4002040f
 8004498:	10008200 	.word	0x10008200
 800449c:	40020880 	.word	0x40020880

080044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04a      	beq.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d847      	bhi.n	800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a25      	ldr	r2, [pc, #148]	@ (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a24      	ldr	r2, [pc, #144]	@ (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d01d      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a22      	ldr	r2, [pc, #136]	@ (8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a21      	ldr	r2, [pc, #132]	@ (8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1e      	ldr	r2, [pc, #120]	@ (800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1b      	ldr	r2, [pc, #108]	@ (8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004528:	671a      	str	r2, [r3, #112]	@ 0x70
 800452a:	e009      	b.n	8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	461a      	mov	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a11      	ldr	r2, [pc, #68]	@ (8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800453e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3b01      	subs	r3, #1
 8004544:	2201      	movs	r2, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	58025408 	.word	0x58025408
 800455c:	5802541c 	.word	0x5802541c
 8004560:	58025430 	.word	0x58025430
 8004564:	58025444 	.word	0x58025444
 8004568:	58025458 	.word	0x58025458
 800456c:	5802546c 	.word	0x5802546c
 8004570:	58025480 	.word	0x58025480
 8004574:	58025494 	.word	0x58025494
 8004578:	1600963f 	.word	0x1600963f
 800457c:	58025940 	.word	0x58025940
 8004580:	1000823f 	.word	0x1000823f
 8004584:	40020940 	.word	0x40020940

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	@ 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004596:	4b86      	ldr	r3, [pc, #536]	@ (80047b0 <HAL_GPIO_Init+0x228>)
 8004598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800459a:	e18c      	b.n	80048b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 817e 	beq.w	80048b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d005      	beq.n	80045cc <HAL_GPIO_Init+0x44>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d130      	bne.n	800462e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	2203      	movs	r2, #3
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004602:	2201      	movs	r2, #1
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0201 	and.w	r2, r3, #1
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b03      	cmp	r3, #3
 8004638:	d017      	beq.n	800466a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	2203      	movs	r2, #3
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d123      	bne.n	80046be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	08da      	lsrs	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3208      	adds	r2, #8
 800467e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	220f      	movs	r2, #15
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	08da      	lsrs	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3208      	adds	r2, #8
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0203 	and.w	r2, r3, #3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80d8 	beq.w	80048b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004700:	4b2c      	ldr	r3, [pc, #176]	@ (80047b4 <HAL_GPIO_Init+0x22c>)
 8004702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004706:	4a2b      	ldr	r2, [pc, #172]	@ (80047b4 <HAL_GPIO_Init+0x22c>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <HAL_GPIO_Init+0x22c>)
 8004712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800471e:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <HAL_GPIO_Init+0x230>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1d      	ldr	r2, [pc, #116]	@ (80047bc <HAL_GPIO_Init+0x234>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d04a      	beq.n	80047e0 <HAL_GPIO_Init+0x258>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1c      	ldr	r2, [pc, #112]	@ (80047c0 <HAL_GPIO_Init+0x238>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02b      	beq.n	80047aa <HAL_GPIO_Init+0x222>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <HAL_GPIO_Init+0x23c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d025      	beq.n	80047a6 <HAL_GPIO_Init+0x21e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1a      	ldr	r2, [pc, #104]	@ (80047c8 <HAL_GPIO_Init+0x240>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01f      	beq.n	80047a2 <HAL_GPIO_Init+0x21a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <HAL_GPIO_Init+0x244>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d019      	beq.n	800479e <HAL_GPIO_Init+0x216>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <HAL_GPIO_Init+0x248>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_GPIO_Init+0x212>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a17      	ldr	r2, [pc, #92]	@ (80047d4 <HAL_GPIO_Init+0x24c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00d      	beq.n	8004796 <HAL_GPIO_Init+0x20e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a16      	ldr	r2, [pc, #88]	@ (80047d8 <HAL_GPIO_Init+0x250>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <HAL_GPIO_Init+0x20a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <HAL_GPIO_Init+0x254>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_GPIO_Init+0x206>
 800478a:	2309      	movs	r3, #9
 800478c:	e029      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 800478e:	230a      	movs	r3, #10
 8004790:	e027      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 8004792:	2307      	movs	r3, #7
 8004794:	e025      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 8004796:	2306      	movs	r3, #6
 8004798:	e023      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 800479a:	2305      	movs	r3, #5
 800479c:	e021      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 800479e:	2304      	movs	r3, #4
 80047a0:	e01f      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e01d      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e01b      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e019      	b.n	80047e2 <HAL_GPIO_Init+0x25a>
 80047ae:	bf00      	nop
 80047b0:	58000080 	.word	0x58000080
 80047b4:	58024400 	.word	0x58024400
 80047b8:	58000400 	.word	0x58000400
 80047bc:	58020000 	.word	0x58020000
 80047c0:	58020400 	.word	0x58020400
 80047c4:	58020800 	.word	0x58020800
 80047c8:	58020c00 	.word	0x58020c00
 80047cc:	58021000 	.word	0x58021000
 80047d0:	58021400 	.word	0x58021400
 80047d4:	58021800 	.word	0x58021800
 80047d8:	58021c00 	.word	0x58021c00
 80047dc:	58022400 	.word	0x58022400
 80047e0:	2300      	movs	r3, #0
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	f002 0203 	and.w	r2, r2, #3
 80047e8:	0092      	lsls	r2, r2, #2
 80047ea:	4093      	lsls	r3, r2
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f2:	4938      	ldr	r1, [pc, #224]	@ (80048d4 <HAL_GPIO_Init+0x34c>)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f ae6b 	bne.w	800459c <HAL_GPIO_Init+0x14>
  }
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	3724      	adds	r7, #36	@ 0x24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	58000400 	.word	0x58000400

080048d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
 80048e4:	4613      	mov	r3, r2
 80048e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048e8:	787b      	ldrb	r3, [r7, #1]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048f4:	e003      	b.n	80048fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	041a      	lsls	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	619a      	str	r2, [r3, #24]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	58024800 	.word	0x58024800

0800492c <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8004934:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_PWR_EnableWakeUpPin+0x24>)
 8004936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_PWR_EnableWakeUpPin+0x28>)
 800493a:	4013      	ands	r3, r2
 800493c:	4904      	ldr	r1, [pc, #16]	@ (8004950 <HAL_PWR_EnableWakeUpPin+0x24>)
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	58024800 	.word	0x58024800
 8004954:	f000c0c0 	.word	0xf000c0c0

08004958 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <HAL_PWR_DisableWakeUpPin+0x28>)
 8004962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496a:	43db      	mvns	r3, r3
 800496c:	4904      	ldr	r1, [pc, #16]	@ (8004980 <HAL_PWR_DisableWakeUpPin+0x28>)
 800496e:	4013      	ands	r3, r2
 8004970:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	58024800 	.word	0x58024800

08004984 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004990:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	4a07      	ldr	r2, [pc, #28]	@ (80049b4 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80049a2:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 80049a4:	e000      	b.n	80049a8 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 80049a6:	bf20      	wfe
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80049c4:	4b18      	ldr	r3, [pc, #96]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 0201 	bic.w	r2, r3, #1
 80049cc:	4916      	ldr	r1, [pc, #88]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80049d4:	4b14      	ldr	r3, [pc, #80]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4a13      	ldr	r2, [pc, #76]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049da:	f023 0305 	bic.w	r3, r3, #5
 80049de:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80049e0:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <HAL_PWR_EnterSTOPMode+0x70>)
 80049e6:	f023 0302 	bic.w	r3, r3, #2
 80049ea:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80049ec:	4b0f      	ldr	r3, [pc, #60]	@ (8004a2c <HAL_PWR_EnterSTOPMode+0x74>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	@ (8004a2c <HAL_PWR_EnterSTOPMode+0x74>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049f8:	f3bf 8f4f 	dsb	sy
}
 80049fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049fe:	f3bf 8f6f 	isb	sy
}
 8004a02:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004a0a:	bf30      	wfi
 8004a0c:	e000      	b.n	8004a10 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8004a0e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_PWR_EnterSTOPMode+0x74>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	4a05      	ldr	r2, [pc, #20]	@ (8004a2c <HAL_PWR_EnterSTOPMode+0x74>)
 8004a16:	f023 0304 	bic.w	r3, r3, #4
 8004a1a:	6113      	str	r3, [r2, #16]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	58024800 	.word	0x58024800
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004a34:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004a3a:	f043 0305 	orr.w	r3, r3, #5
 8004a3e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004a46:	f043 0302 	orr.w	r3, r3, #2
 8004a4a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004a4c:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	4a08      	ldr	r2, [pc, #32]	@ (8004a74 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a58:	f3bf 8f4f 	dsb	sy
}
 8004a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a5e:	f3bf 8f6f 	isb	sy
}
 8004a62:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
 8004a64:	bf30      	wfi
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	58024800 	.word	0x58024800
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a90:	4b19      	ldr	r3, [pc, #100]	@ (8004af8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d001      	beq.n	8004aae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e01f      	b.n	8004aee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e01d      	b.n	8004aee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ab2:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <HAL_PWREx_ConfigSupply+0x70>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 0207 	bic.w	r2, r3, #7
 8004aba:	490f      	ldr	r1, [pc, #60]	@ (8004af8 <HAL_PWREx_ConfigSupply+0x70>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ac2:	f7fc fe0d 	bl	80016e0 <HAL_GetTick>
 8004ac6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ac8:	e009      	b.n	8004ade <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004aca:	f7fc fe09 	bl	80016e0 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad8:	d901      	bls.n	8004ade <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e007      	b.n	8004aee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ade:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <HAL_PWREx_ConfigSupply+0x70>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aea:	d1ee      	bne.n	8004aca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	58024800 	.word	0x58024800

08004afc <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8004b00:	4b22      	ldr	r3, [pc, #136]	@ (8004b8c <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1c:	d112      	bne.n	8004b44 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8004b1e:	f7ff ffab 	bl	8004a78 <HAL_PWR_PVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
 8004b22:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2e:	d009      	beq.n	8004b44 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01a      	beq.n	8004b86 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b60:	d111      	bne.n	8004b86 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8004b62:	f000 f815 	bl	8004b90 <HAL_PWREx_AVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
 8004b66:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d009      	beq.n	8004b86 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        }
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	58024800 	.word	0x58024800

08004b90 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	@ 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e3c8      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8087 	beq.w	8004cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc0:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bca:	4b86      	ldr	r3, [pc, #536]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d007      	beq.n	8004be6 <HAL_RCC_OscConfig+0x46>
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	2b18      	cmp	r3, #24
 8004bda:	d110      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5e>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be6:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d06c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x12c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d168      	bne.n	8004ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e3a2      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x76>
 8004c08:	4b76      	ldr	r3, [pc, #472]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a75      	ldr	r2, [pc, #468]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e02e      	b.n	8004c74 <HAL_RCC_OscConfig+0xd4>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b71      	ldr	r3, [pc, #452]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a70      	ldr	r2, [pc, #448]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e01d      	b.n	8004c74 <HAL_RCC_OscConfig+0xd4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0xbc>
 8004c42:	4b68      	ldr	r3, [pc, #416]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a67      	ldr	r2, [pc, #412]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a64      	ldr	r2, [pc, #400]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0xd4>
 8004c5c:	4b61      	ldr	r3, [pc, #388]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a60      	ldr	r2, [pc, #384]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b5e      	ldr	r3, [pc, #376]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fd30 	bl	80016e0 <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fc fd2c 	bl	80016e0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	@ 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e356      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c96:	4b53      	ldr	r3, [pc, #332]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0xe4>
 8004ca2:	e014      	b.n	8004cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fc fd1c 	bl	80016e0 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fc fd18 	bl	80016e0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e342      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cbe:	4b49      	ldr	r3, [pc, #292]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x10c>
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 808c 	beq.w	8004df4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cdc:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCC_OscConfig+0x162>
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2b18      	cmp	r3, #24
 8004cf6:	d137      	bne.n	8004d68 <HAL_RCC_OscConfig+0x1c8>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d132      	bne.n	8004d68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d02:	4b38      	ldr	r3, [pc, #224]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCC_OscConfig+0x17a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e314      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d1a:	4b32      	ldr	r3, [pc, #200]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 0219 	bic.w	r2, r3, #25
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	492f      	ldr	r1, [pc, #188]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fcd8 	bl	80016e0 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d34:	f7fc fcd4 	bl	80016e0 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e2fe      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d46:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d52:	4b24      	ldr	r3, [pc, #144]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	4920      	ldr	r1, [pc, #128]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d66:	e045      	b.n	8004df4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d026      	beq.n	8004dbe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d70:	4b1c      	ldr	r3, [pc, #112]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 0219 	bic.w	r2, r3, #25
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4919      	ldr	r1, [pc, #100]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fc fcad 	bl	80016e0 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fc fca9 	bl	80016e0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e2d3      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b0e      	ldr	r3, [pc, #56]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	490b      	ldr	r1, [pc, #44]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	e01a      	b.n	8004df4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fc fc89 	bl	80016e0 <HAL_GetTick>
 8004dce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fc fc85 	bl	80016e0 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d903      	bls.n	8004de8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e2af      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
 8004de4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004de8:	4b96      	ldr	r3, [pc, #600]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ee      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d06a      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e00:	4b90      	ldr	r3, [pc, #576]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e0a:	4b8e      	ldr	r3, [pc, #568]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d007      	beq.n	8004e26 <HAL_RCC_OscConfig+0x286>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b18      	cmp	r3, #24
 8004e1a:	d11b      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d116      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e26:	4b87      	ldr	r3, [pc, #540]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_RCC_OscConfig+0x29e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e282      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e3e:	4b81      	ldr	r3, [pc, #516]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	497d      	ldr	r1, [pc, #500]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e52:	e040      	b.n	8004ed6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d023      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e5c:	4b79      	ldr	r3, [pc, #484]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a78      	ldr	r2, [pc, #480]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fc fc3a 	bl	80016e0 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e70:	f7fc fc36 	bl	80016e0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e260      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e82:	4b70      	ldr	r3, [pc, #448]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	061b      	lsls	r3, r3, #24
 8004e9c:	4969      	ldr	r1, [pc, #420]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60cb      	str	r3, [r1, #12]
 8004ea2:	e018      	b.n	8004ed6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ea4:	4b67      	ldr	r3, [pc, #412]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fc fc16 	bl	80016e0 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004eb8:	f7fc fc12 	bl	80016e0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e23c      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eca:	4b5e      	ldr	r3, [pc, #376]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d036      	beq.n	8004f50 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d019      	beq.n	8004f1e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eea:	4b56      	ldr	r3, [pc, #344]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eee:	4a55      	ldr	r2, [pc, #340]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fc fbf3 	bl	80016e0 <HAL_GetTick>
 8004efa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efe:	f7fc fbef 	bl	80016e0 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e219      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f10:	4b4c      	ldr	r3, [pc, #304]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x35e>
 8004f1c:	e018      	b.n	8004f50 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1e:	4b49      	ldr	r3, [pc, #292]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f22:	4a48      	ldr	r2, [pc, #288]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fc fbd9 	bl	80016e0 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f32:	f7fc fbd5 	bl	80016e0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1ff      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f44:	4b3f      	ldr	r3, [pc, #252]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d036      	beq.n	8004fca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d019      	beq.n	8004f98 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f64:	4b37      	ldr	r3, [pc, #220]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f70:	f7fc fbb6 	bl	80016e0 <HAL_GetTick>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f78:	f7fc fbb2 	bl	80016e0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1dc      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3d8>
 8004f96:	e018      	b.n	8004fca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f98:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a29      	ldr	r2, [pc, #164]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fa4:	f7fc fb9c 	bl	80016e0 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fac:	f7fc fb98 	bl	80016e0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1c2      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fbe:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8086 	beq.w	80050e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005048 <HAL_RCC_OscConfig+0x4a8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8005048 <HAL_RCC_OscConfig+0x4a8>)
 8004fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe4:	f7fc fb7c 	bl	80016e0 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fec:	f7fc fb78 	bl	80016e0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e1a2      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffe:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <HAL_RCC_OscConfig+0x4a8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x480>
 8005012:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	4a0b      	ldr	r2, [pc, #44]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6713      	str	r3, [r2, #112]	@ 0x70
 800501e:	e032      	b.n	8005086 <HAL_RCC_OscConfig+0x4e6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <HAL_RCC_OscConfig+0x4ac>
 8005028:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a05      	ldr	r2, [pc, #20]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a02      	ldr	r2, [pc, #8]	@ (8005044 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005040:	e021      	b.n	8005086 <HAL_RCC_OscConfig+0x4e6>
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	58024800 	.word	0x58024800
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x4ce>
 8005054:	4b83      	ldr	r3, [pc, #524]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a82      	ldr	r2, [pc, #520]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800505a:	f043 0304 	orr.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005060:	4b80      	ldr	r3, [pc, #512]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005064:	4a7f      	ldr	r2, [pc, #508]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	@ 0x70
 800506c:	e00b      	b.n	8005086 <HAL_RCC_OscConfig+0x4e6>
 800506e:	4b7d      	ldr	r3, [pc, #500]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a7c      	ldr	r2, [pc, #496]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	4b7a      	ldr	r3, [pc, #488]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a79      	ldr	r2, [pc, #484]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fc fb27 	bl	80016e0 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fc fb23 	bl	80016e0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e14b      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCC_OscConfig+0x4f6>
 80050b8:	e014      	b.n	80050e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fc fb11 	bl	80016e0 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fc fb0d 	bl	80016e0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e135      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d8:	4b62      	ldr	r3, [pc, #392]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 812a 	beq.w	8005342 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050f6:	2b18      	cmp	r3, #24
 80050f8:	f000 80ba 	beq.w	8005270 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	2b02      	cmp	r3, #2
 8005102:	f040 8095 	bne.w	8005230 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005106:	4b57      	ldr	r3, [pc, #348]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a56      	ldr	r2, [pc, #344]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800510c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc fae5 	bl	80016e0 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7fc fae1 	bl	80016e0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e10b      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512c:	4b4d      	ldr	r3, [pc, #308]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005138:	4b4a      	ldr	r3, [pc, #296]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800513a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800513c:	4b4a      	ldr	r3, [pc, #296]	@ (8005268 <HAL_RCC_OscConfig+0x6c8>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	430a      	orrs	r2, r1
 800514c:	4945      	ldr	r1, [pc, #276]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	628b      	str	r3, [r1, #40]	@ 0x28
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	3b01      	subs	r3, #1
 8005158:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005160:	3b01      	subs	r3, #1
 8005162:	025b      	lsls	r3, r3, #9
 8005164:	b29b      	uxth	r3, r3
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	3b01      	subs	r3, #1
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005182:	4938      	ldr	r1, [pc, #224]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005188:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a35      	ldr	r2, [pc, #212]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005194:	4b33      	ldr	r3, [pc, #204]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005198:	4b34      	ldr	r3, [pc, #208]	@ (800526c <HAL_RCC_OscConfig+0x6cc>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051a0:	00d2      	lsls	r2, r2, #3
 80051a2:	4930      	ldr	r1, [pc, #192]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	f023 020c 	bic.w	r2, r3, #12
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	492b      	ldr	r1, [pc, #172]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	f023 0202 	bic.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	4927      	ldr	r1, [pc, #156]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	4a24      	ldr	r2, [pc, #144]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d8:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	4a21      	ldr	r2, [pc, #132]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fc:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fa6a 	bl	80016e0 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fc fa66 	bl	80016e0 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e090      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x670>
 800522e:	e088      	b.n	8005342 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0b      	ldr	r2, [pc, #44]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800523a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fc fa50 	bl	80016e0 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fa4c 	bl	80016e0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e076      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005256:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_OscConfig+0x6c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x6a4>
 8005262:	e06e      	b.n	8005342 <HAL_RCC_OscConfig+0x7a2>
 8005264:	58024400 	.word	0x58024400
 8005268:	fffffc0c 	.word	0xfffffc0c
 800526c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005270:	4b36      	ldr	r3, [pc, #216]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005276:	4b35      	ldr	r3, [pc, #212]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d031      	beq.n	80052e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f003 0203 	and.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d12a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d122      	bne.n	80052e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d11a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	0a5b      	lsrs	r3, r3, #9
 80052b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d111      	bne.n	80052e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d108      	bne.n	80052e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	0e1b      	lsrs	r3, r3, #24
 80052da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02b      	b.n	8005344 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052ec:	4b17      	ldr	r3, [pc, #92]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	08db      	lsrs	r3, r3, #3
 80052f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d01f      	beq.n	8005342 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005302:	4b12      	ldr	r3, [pc, #72]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	4a11      	ldr	r2, [pc, #68]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800530e:	f7fc f9e7 	bl	80016e0 <HAL_GetTick>
 8005312:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005314:	bf00      	nop
 8005316:	f7fc f9e3 	bl	80016e0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	4293      	cmp	r3, r2
 8005320:	d0f9      	beq.n	8005316 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005322:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <HAL_RCC_OscConfig+0x7b0>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800532e:	00d2      	lsls	r2, r2, #3
 8005330:	4906      	ldr	r1, [pc, #24]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005332:	4313      	orrs	r3, r2
 8005334:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	4a04      	ldr	r2, [pc, #16]	@ (800534c <HAL_RCC_OscConfig+0x7ac>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3730      	adds	r7, #48	@ 0x30
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	58024400 	.word	0x58024400
 8005350:	ffff0007 	.word	0xffff0007

08005354 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e19c      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b8a      	ldr	r3, [pc, #552]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b87      	ldr	r3, [pc, #540]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	4985      	ldr	r1, [pc, #532]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b83      	ldr	r3, [pc, #524]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e184      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d908      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053b4:	4b78      	ldr	r3, [pc, #480]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	4975      	ldr	r1, [pc, #468]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d010      	beq.n	80053f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	4b70      	ldr	r3, [pc, #448]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053de:	429a      	cmp	r2, r3
 80053e0:	d908      	bls.n	80053f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	496a      	ldr	r1, [pc, #424]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	4b64      	ldr	r3, [pc, #400]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800540c:	429a      	cmp	r2, r3
 800540e:	d908      	bls.n	8005422 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005410:	4b61      	ldr	r3, [pc, #388]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	495e      	ldr	r1, [pc, #376]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 800541e:	4313      	orrs	r3, r2
 8005420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	4b59      	ldr	r3, [pc, #356]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800543a:	429a      	cmp	r2, r3
 800543c:	d908      	bls.n	8005450 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800543e:	4b56      	ldr	r3, [pc, #344]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4953      	ldr	r1, [pc, #332]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	4b4d      	ldr	r3, [pc, #308]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	429a      	cmp	r2, r3
 800546a:	d908      	bls.n	800547e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546c:	4b4a      	ldr	r3, [pc, #296]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f023 020f 	bic.w	r2, r3, #15
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4947      	ldr	r1, [pc, #284]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 800547a:	4313      	orrs	r3, r2
 800547c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d055      	beq.n	8005536 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800548a:	4b43      	ldr	r3, [pc, #268]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4940      	ldr	r1, [pc, #256]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005498:	4313      	orrs	r3, r2
 800549a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d121      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0f6      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054bc:	4b36      	ldr	r3, [pc, #216]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0ea      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054d4:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0de      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0d6      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f4:	4b28      	ldr	r3, [pc, #160]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f023 0207 	bic.w	r2, r3, #7
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4925      	ldr	r1, [pc, #148]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005502:	4313      	orrs	r3, r2
 8005504:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fc f8eb 	bl	80016e0 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550c:	e00a      	b.n	8005524 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550e:	f7fc f8e7 	bl	80016e0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551c:	4293      	cmp	r3, r2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0be      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005524:	4b1c      	ldr	r3, [pc, #112]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	429a      	cmp	r2, r3
 8005534:	d1eb      	bne.n	800550e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	429a      	cmp	r2, r3
 8005550:	d208      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	490e      	ldr	r1, [pc, #56]	@ (8005598 <HAL_RCC_ClockConfig+0x244>)
 8005560:	4313      	orrs	r3, r2
 8005562:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d214      	bcs.n	800559c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 020f 	bic.w	r2, r3, #15
 800557a:	4906      	ldr	r1, [pc, #24]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <HAL_RCC_ClockConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e086      	b.n	80056a2 <HAL_RCC_ClockConfig+0x34e>
 8005594:	52002000 	.word	0x52002000
 8005598:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d010      	beq.n	80055ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	4b3f      	ldr	r3, [pc, #252]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d208      	bcs.n	80055ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055b8:	4b3c      	ldr	r3, [pc, #240]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	4939      	ldr	r1, [pc, #228]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	4b34      	ldr	r3, [pc, #208]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d208      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055e6:	4b31      	ldr	r3, [pc, #196]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	492e      	ldr	r1, [pc, #184]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	d010      	beq.n	8005626 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	4b28      	ldr	r3, [pc, #160]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005610:	429a      	cmp	r2, r3
 8005612:	d208      	bcs.n	8005626 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005614:	4b25      	ldr	r3, [pc, #148]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	4922      	ldr	r1, [pc, #136]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005622:	4313      	orrs	r3, r2
 8005624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d010      	beq.n	8005654 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800563e:	429a      	cmp	r2, r3
 8005640:	d208      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005642:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4917      	ldr	r1, [pc, #92]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005650:	4313      	orrs	r3, r2
 8005652:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005654:	f000 f834 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	4912      	ldr	r1, [pc, #72]	@ (80056b0 <HAL_RCC_ClockConfig+0x35c>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005672:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <HAL_RCC_ClockConfig+0x358>)
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	4a0d      	ldr	r2, [pc, #52]	@ (80056b0 <HAL_RCC_ClockConfig+0x35c>)
 800567c:	5cd3      	ldrb	r3, [r2, r3]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
 8005688:	4a0a      	ldr	r2, [pc, #40]	@ (80056b4 <HAL_RCC_ClockConfig+0x360>)
 800568a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800568c:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <HAL_RCC_ClockConfig+0x364>)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005692:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x368>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fb ffd8 	bl	800164c <HAL_InitTick>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	58024400 	.word	0x58024400
 80056b0:	0800c2b0 	.word	0x0800c2b0
 80056b4:	24000094 	.word	0x24000094
 80056b8:	24000090 	.word	0x24000090
 80056bc:	24000098 	.word	0x24000098

080056c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	@ 0x24
 80056c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056c6:	4bb3      	ldr	r3, [pc, #716]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ce:	2b18      	cmp	r3, #24
 80056d0:	f200 8155 	bhi.w	800597e <HAL_RCC_GetSysClockFreq+0x2be>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005741 	.word	0x08005741
 80056e0:	0800597f 	.word	0x0800597f
 80056e4:	0800597f 	.word	0x0800597f
 80056e8:	0800597f 	.word	0x0800597f
 80056ec:	0800597f 	.word	0x0800597f
 80056f0:	0800597f 	.word	0x0800597f
 80056f4:	0800597f 	.word	0x0800597f
 80056f8:	0800597f 	.word	0x0800597f
 80056fc:	08005767 	.word	0x08005767
 8005700:	0800597f 	.word	0x0800597f
 8005704:	0800597f 	.word	0x0800597f
 8005708:	0800597f 	.word	0x0800597f
 800570c:	0800597f 	.word	0x0800597f
 8005710:	0800597f 	.word	0x0800597f
 8005714:	0800597f 	.word	0x0800597f
 8005718:	0800597f 	.word	0x0800597f
 800571c:	0800576d 	.word	0x0800576d
 8005720:	0800597f 	.word	0x0800597f
 8005724:	0800597f 	.word	0x0800597f
 8005728:	0800597f 	.word	0x0800597f
 800572c:	0800597f 	.word	0x0800597f
 8005730:	0800597f 	.word	0x0800597f
 8005734:	0800597f 	.word	0x0800597f
 8005738:	0800597f 	.word	0x0800597f
 800573c:	08005773 	.word	0x08005773
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005740:	4b94      	ldr	r3, [pc, #592]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800574c:	4b91      	ldr	r3, [pc, #580]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	4a90      	ldr	r2, [pc, #576]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800575e:	e111      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005760:	4b8d      	ldr	r3, [pc, #564]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005762:	61bb      	str	r3, [r7, #24]
      break;
 8005764:	e10e      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005766:	4b8d      	ldr	r3, [pc, #564]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005768:	61bb      	str	r3, [r7, #24]
      break;
 800576a:	e10b      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800576c:	4b8c      	ldr	r3, [pc, #560]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800576e:	61bb      	str	r3, [r7, #24]
      break;
 8005770:	e108      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005772:	4b88      	ldr	r3, [pc, #544]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800577c:	4b85      	ldr	r3, [pc, #532]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005786:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005788:	4b82      	ldr	r3, [pc, #520]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005792:	4b80      	ldr	r3, [pc, #512]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	08db      	lsrs	r3, r3, #3
 8005798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80e1 	beq.w	8005978 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	f000 8083 	beq.w	80058c4 <HAL_RCC_GetSysClockFreq+0x204>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	f200 80a1 	bhi.w	8005908 <HAL_RCC_GetSysClockFreq+0x248>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x114>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d056      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057d2:	e099      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02d      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
 80057f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b62      	ldr	r3, [pc, #392]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a02 	vldr	s12, [r7, #8]
 800581e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800583a:	e087      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800584a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584e:	4b51      	ldr	r3, [pc, #324]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005862:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800587e:	e065      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005892:	4b40      	ldr	r3, [pc, #256]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058c2:	e043      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005906:	e021      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b1e      	ldr	r3, [pc, #120]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a02 	vldr	s12, [r7, #8]
 800592e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800594a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800594c:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005956:	3301      	adds	r3, #1
 8005958:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005964:	edd7 6a07 	vldr	s13, [r7, #28]
 8005968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005970:	ee17 3a90 	vmov	r3, s15
 8005974:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005976:	e005      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
      break;
 800597c:	e002      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800597e:	4b07      	ldr	r3, [pc, #28]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005980:	61bb      	str	r3, [r7, #24]
      break;
 8005982:	bf00      	nop
  }

  return sysclockfreq;
 8005984:	69bb      	ldr	r3, [r7, #24]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3724      	adds	r7, #36	@ 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
 8005998:	03d09000 	.word	0x03d09000
 800599c:	003d0900 	.word	0x003d0900
 80059a0:	007a1200 	.word	0x007a1200
 80059a4:	46000000 	.word	0x46000000
 80059a8:	4c742400 	.word	0x4c742400
 80059ac:	4a742400 	.word	0x4a742400
 80059b0:	4af42400 	.word	0x4af42400

080059b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059ba:	f7ff fe81 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	490f      	ldr	r1, [pc, #60]	@ (8005a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	4a07      	ldr	r2, [pc, #28]	@ (8005a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80059f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059f2:	4a07      	ldr	r2, [pc, #28]	@ (8005a10 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059f8:	4b04      	ldr	r3, [pc, #16]	@ (8005a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	58024400 	.word	0x58024400
 8005a08:	0800c2b0 	.word	0x0800c2b0
 8005a0c:	24000094 	.word	0x24000094
 8005a10:	24000090 	.word	0x24000090

08005a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a18:	f7ff ffcc 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4904      	ldr	r1, [pc, #16]	@ (8005a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	0800c2b0 	.word	0x0800c2b0

08005a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a44:	f7ff ffb6 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	4904      	ldr	r1, [pc, #16]	@ (8005a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a56:	5ccb      	ldrb	r3, [r1, r3]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	58024400 	.word	0x58024400
 8005a68:	0800c2b0 	.word	0x0800c2b0

08005a6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a70:	b0c6      	sub	sp, #280	@ 0x118
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a90:	2500      	movs	r5, #0
 8005a92:	ea54 0305 	orrs.w	r3, r4, r5
 8005a96:	d049      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aa2:	d02f      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005aa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aa8:	d828      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aae:	d01a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ab0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ab4:	d822      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005abe:	d007      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ac0:	e01c      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac2:	4bab      	ldr	r3, [pc, #684]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	4aaa      	ldr	r2, [pc, #680]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ace:	e01a      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fc25 	bl	8007328 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ae4:	e00f      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aea:	3328      	adds	r3, #40	@ 0x28
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fccc 	bl	800748c <RCCEx_PLL3_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b0e:	4b98      	ldr	r3, [pc, #608]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	4a94      	ldr	r2, [pc, #592]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b38:	f04f 0900 	mov.w	r9, #0
 8005b3c:	ea58 0309 	orrs.w	r3, r8, r9
 8005b40:	d047      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d82a      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b69 	.word	0x08005b69
 8005b58:	08005b77 	.word	0x08005b77
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005bab 	.word	0x08005bab
 8005b64:	08005bab 	.word	0x08005bab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b68:	4b81      	ldr	r3, [pc, #516]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4a80      	ldr	r2, [pc, #512]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b74:	e01a      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fbd2 	bl	8007328 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e00f      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	3328      	adds	r3, #40	@ 0x28
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 fc79 	bl	800748c <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bb4:	4b6e      	ldr	r3, [pc, #440]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb8:	f023 0107 	bic.w	r1, r3, #7
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005bde:	f04f 0b00 	mov.w	fp, #0
 8005be2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005be6:	d05b      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bf0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005bf4:	d03b      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005bf6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005bfa:	d834      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c00:	d037      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c06:	d82e      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c0c:	d033      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c12:	d828      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c18:	d01a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c1e:	d822      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c28:	d007      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c2a:	e01c      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	4a4f      	ldr	r2, [pc, #316]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c38:	e01e      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3e:	3308      	adds	r3, #8
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 fb70 	bl	8007328 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c4e:	e013      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	3328      	adds	r3, #40	@ 0x28
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fc17 	bl	800748c <RCCEx_PLL3_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c80:	4b3b      	ldr	r3, [pc, #236]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c90:	4a37      	ldr	r2, [pc, #220]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d05d      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cc8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ccc:	d03b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cd2:	d834      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cd8:	d037      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005cda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cde:	d82e      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ce0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ce4:	d033      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005ce6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cea:	d828      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf0:	d01a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005cf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf6:	d822      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d00:	d007      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d02:	e01c      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4b1a      	ldr	r3, [pc, #104]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d10:	e01e      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	3308      	adds	r3, #8
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fb04 	bl	8007328 <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d26:	e013      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	3328      	adds	r3, #40	@ 0x28
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fbab 	bl	800748c <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e008      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10d      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d68:	4a01      	ldr	r2, [pc, #4]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d6e:	e005      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d03a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	2b30      	cmp	r3, #48	@ 0x30
 8005da4:	d01f      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005da6:	2b30      	cmp	r3, #48	@ 0x30
 8005da8:	d819      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d815      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d019      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d111      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dba:	4baa      	ldr	r3, [pc, #680]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	4aa9      	ldr	r2, [pc, #676]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dc6:	e011      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	3308      	adds	r3, #8
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 faa9 	bl	8007328 <RCCEx_PLL2_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ddc:	e006      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005de4:	e002      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005de6:	bf00      	nop
 8005de8:	e000      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005df4:	4b9b      	ldr	r3, [pc, #620]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e02:	4a98      	ldr	r2, [pc, #608]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	d051      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e3c:	d035      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e42:	d82e      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e48:	d031      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e4e:	d828      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e54:	d01a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5a:	d822      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e64:	d007      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e66:	e01c      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e68:	4b7e      	ldr	r3, [pc, #504]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e74:	e01c      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 fa52 	bl	8007328 <RCCEx_PLL2_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e8a:	e011      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	3328      	adds	r3, #40	@ 0x28
 8005e92:	2100      	movs	r1, #0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 faf9 	bl	800748c <RCCEx_PLL3_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea0:	e006      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ea8:	e002      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec6:	4a67      	ldr	r2, [pc, #412]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ecc:	e003      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	d053      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f00:	d033      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f06:	d82c      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f0c:	d02f      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f12:	d826      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f18:	d02b      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f1e:	d820      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f24:	d012      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2a:	d81a      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d022      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f34:	d115      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f9f2 	bl	8007328 <RCCEx_PLL2_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f4a:	e015      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	3328      	adds	r3, #40	@ 0x28
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fa99 	bl	800748c <RCCEx_PLL3_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f60:	e00a      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f68:	e006      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e004      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f6e:	bf00      	nop
 8005f70:	e002      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f80:	4b38      	ldr	r3, [pc, #224]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8e:	4a35      	ldr	r2, [pc, #212]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fb4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	d058      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fca:	d033      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd0:	d82c      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd6:	d02f      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fdc:	d826      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fe2:	d02b      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005fe4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fe8:	d820      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fee:	d012      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff4:	d81a      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d022      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ffe:	d115      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	3308      	adds	r3, #8
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f98d 	bl	8007328 <RCCEx_PLL2_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006014:	e015      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	3328      	adds	r3, #40	@ 0x28
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fa34 	bl	800748c <RCCEx_PLL3_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800602a:	e00a      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006032:	e006      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006034:	bf00      	nop
 8006036:	e004      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10e      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800604a:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800605a:	4a02      	ldr	r2, [pc, #8]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605c:	430b      	orrs	r3, r1
 800605e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006062:	bf00      	nop
 8006064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800606c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006086:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d037      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609a:	d00e      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800609c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a0:	d816      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060aa:	d111      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ac:	4bc4      	ldr	r3, [pc, #784]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4ac3      	ldr	r2, [pc, #780]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060b8:	e00f      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	3308      	adds	r3, #8
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f930 	bl	8007328 <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ce:	e004      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060e2:	4bb7      	ldr	r3, [pc, #732]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060f0:	4ab3      	ldr	r2, [pc, #716]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060f6:	e003      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800610c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d039      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006126:	2b03      	cmp	r3, #3
 8006128:	d81c      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	0800616d 	.word	0x0800616d
 8006134:	08006141 	.word	0x08006141
 8006138:	0800614f 	.word	0x0800614f
 800613c:	0800616d 	.word	0x0800616d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006140:	4b9f      	ldr	r3, [pc, #636]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	4a9e      	ldr	r2, [pc, #632]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800614c:	e00f      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	3308      	adds	r3, #8
 8006154:	2102      	movs	r1, #2
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f8e6 	bl	8007328 <RCCEx_PLL2_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006162:	e004      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800616c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006176:	4b92      	ldr	r3, [pc, #584]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	f023 0103 	bic.w	r1, r3, #3
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006184:	4a8e      	ldr	r2, [pc, #568]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006186:	430b      	orrs	r3, r1
 8006188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800618a:	e003      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f000 8099 	beq.w	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b6:	4b83      	ldr	r3, [pc, #524]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a82      	ldr	r2, [pc, #520]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c2:	f7fb fa8d 	bl	80016e0 <HAL_GetTick>
 80061c6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ca:	e00b      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061cc:	f7fb fa88 	bl	80016e0 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b64      	cmp	r3, #100	@ 0x64
 80061da:	d903      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e2:	e005      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e4:	4b77      	ldr	r3, [pc, #476]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0ed      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d173      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061f8:	4b71      	ldr	r3, [pc, #452]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006204:	4053      	eors	r3, r2
 8006206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800620e:	4b6c      	ldr	r3, [pc, #432]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006216:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800621a:	4b69      	ldr	r3, [pc, #420]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	4a68      	ldr	r2, [pc, #416]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006226:	4b66      	ldr	r3, [pc, #408]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	4a65      	ldr	r2, [pc, #404]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800622c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006230:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006232:	4a63      	ldr	r2, [pc, #396]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006238:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006246:	d118      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fb fa4a 	bl	80016e0 <HAL_GetTick>
 800624c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006250:	e00d      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fb fa45 	bl	80016e0 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006262:	429a      	cmp	r2, r3
 8006264:	d903      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800626c:	e005      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626e:	4b54      	ldr	r3, [pc, #336]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0eb      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800627a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627e:	2b00      	cmp	r3, #0
 8006280:	d129      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006292:	d10e      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006294:	4b4a      	ldr	r3, [pc, #296]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062a4:	091a      	lsrs	r2, r3, #4
 80062a6:	4b48      	ldr	r3, [pc, #288]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	4a45      	ldr	r2, [pc, #276]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6113      	str	r3, [r2, #16]
 80062b0:	e005      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062b2:	4b43      	ldr	r3, [pc, #268]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	4a42      	ldr	r2, [pc, #264]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062bc:	6113      	str	r3, [r2, #16]
 80062be:	4b40      	ldr	r3, [pc, #256]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ce:	4a3c      	ldr	r2, [pc, #240]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d4:	e008      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80062de:	e003      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f002 0301 	and.w	r3, r2, #1
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006302:	460b      	mov	r3, r1
 8006304:	4313      	orrs	r3, r2
 8006306:	f000 808f 	beq.w	8006428 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006310:	2b28      	cmp	r3, #40	@ 0x28
 8006312:	d871      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006314:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006401 	.word	0x08006401
 8006320:	080063f9 	.word	0x080063f9
 8006324:	080063f9 	.word	0x080063f9
 8006328:	080063f9 	.word	0x080063f9
 800632c:	080063f9 	.word	0x080063f9
 8006330:	080063f9 	.word	0x080063f9
 8006334:	080063f9 	.word	0x080063f9
 8006338:	080063f9 	.word	0x080063f9
 800633c:	080063cd 	.word	0x080063cd
 8006340:	080063f9 	.word	0x080063f9
 8006344:	080063f9 	.word	0x080063f9
 8006348:	080063f9 	.word	0x080063f9
 800634c:	080063f9 	.word	0x080063f9
 8006350:	080063f9 	.word	0x080063f9
 8006354:	080063f9 	.word	0x080063f9
 8006358:	080063f9 	.word	0x080063f9
 800635c:	080063e3 	.word	0x080063e3
 8006360:	080063f9 	.word	0x080063f9
 8006364:	080063f9 	.word	0x080063f9
 8006368:	080063f9 	.word	0x080063f9
 800636c:	080063f9 	.word	0x080063f9
 8006370:	080063f9 	.word	0x080063f9
 8006374:	080063f9 	.word	0x080063f9
 8006378:	080063f9 	.word	0x080063f9
 800637c:	08006401 	.word	0x08006401
 8006380:	080063f9 	.word	0x080063f9
 8006384:	080063f9 	.word	0x080063f9
 8006388:	080063f9 	.word	0x080063f9
 800638c:	080063f9 	.word	0x080063f9
 8006390:	080063f9 	.word	0x080063f9
 8006394:	080063f9 	.word	0x080063f9
 8006398:	080063f9 	.word	0x080063f9
 800639c:	08006401 	.word	0x08006401
 80063a0:	080063f9 	.word	0x080063f9
 80063a4:	080063f9 	.word	0x080063f9
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	080063f9 	.word	0x080063f9
 80063b0:	080063f9 	.word	0x080063f9
 80063b4:	080063f9 	.word	0x080063f9
 80063b8:	080063f9 	.word	0x080063f9
 80063bc:	08006401 	.word	0x08006401
 80063c0:	58024400 	.word	0x58024400
 80063c4:	58024800 	.word	0x58024800
 80063c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	3308      	adds	r3, #8
 80063d2:	2101      	movs	r1, #1
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 ffa7 	bl	8007328 <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063e0:	e00f      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	3328      	adds	r3, #40	@ 0x28
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 f84e 	bl	800748c <RCCEx_PLL3_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063f6:	e004      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800640a:	4bbf      	ldr	r3, [pc, #764]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006418:	4abb      	ldr	r2, [pc, #748]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800641a:	430b      	orrs	r3, r1
 800641c:	6553      	str	r3, [r2, #84]	@ 0x54
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006424:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f002 0302 	and.w	r3, r2, #2
 8006434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800643e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006442:	460b      	mov	r3, r1
 8006444:	4313      	orrs	r3, r2
 8006446:	d041      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644e:	2b05      	cmp	r3, #5
 8006450:	d824      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006452:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	080064a5 	.word	0x080064a5
 800645c:	08006471 	.word	0x08006471
 8006460:	08006487 	.word	0x08006487
 8006464:	080064a5 	.word	0x080064a5
 8006468:	080064a5 	.word	0x080064a5
 800646c:	080064a5 	.word	0x080064a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	3308      	adds	r3, #8
 8006476:	2101      	movs	r1, #1
 8006478:	4618      	mov	r0, r3
 800647a:	f000 ff55 	bl	8007328 <RCCEx_PLL2_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006484:	e00f      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	3328      	adds	r3, #40	@ 0x28
 800648c:	2101      	movs	r1, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fffc 	bl	800748c <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800649a:	e004      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ae:	4b96      	ldr	r3, [pc, #600]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b2:	f023 0107 	bic.w	r1, r3, #7
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	4a92      	ldr	r2, [pc, #584]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f002 0304 	and.w	r3, r2, #4
 80064d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d044      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f4:	2b05      	cmp	r3, #5
 80064f6:	d825      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80064f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	0800654d 	.word	0x0800654d
 8006504:	08006519 	.word	0x08006519
 8006508:	0800652f 	.word	0x0800652f
 800650c:	0800654d 	.word	0x0800654d
 8006510:	0800654d 	.word	0x0800654d
 8006514:	0800654d 	.word	0x0800654d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	3308      	adds	r3, #8
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 ff01 	bl	8007328 <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800652c:	e00f      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	3328      	adds	r3, #40	@ 0x28
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 ffa8 	bl	800748c <RCCEx_PLL3_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006542:	e004      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800654c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006556:	4b6c      	ldr	r3, [pc, #432]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f023 0107 	bic.w	r1, r3, #7
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006566:	4a68      	ldr	r2, [pc, #416]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6593      	str	r3, [r2, #88]	@ 0x58
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006572:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f002 0320 	and.w	r3, r2, #32
 8006582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006586:	2300      	movs	r3, #0
 8006588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800658c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d055      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800659e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065a2:	d033      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065a8:	d82c      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ae:	d02f      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b4:	d826      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ba:	d02b      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c0:	d820      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c6:	d012      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065cc:	d81a      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d022      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d6:	d115      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	3308      	adds	r3, #8
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fea1 	bl	8007328 <RCCEx_PLL2_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065ec:	e015      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	3328      	adds	r3, #40	@ 0x28
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff48 	bl	800748c <RCCEx_PLL3_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006602:	e00a      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800660a:	e006      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800660c:	bf00      	nop
 800660e:	e004      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006610:	bf00      	nop
 8006612:	e002      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006614:	bf00      	nop
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006622:	4b39      	ldr	r3, [pc, #228]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006632:	4a35      	ldr	r2, [pc, #212]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6553      	str	r3, [r2, #84]	@ 0x54
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800664e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006658:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d058      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800666a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800666e:	d033      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006670:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006674:	d82c      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667a:	d02f      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006680:	d826      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006682:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006686:	d02b      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668c:	d820      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800668e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006692:	d012      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006698:	d81a      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d022      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a2:	d115      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	3308      	adds	r3, #8
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fe3b 	bl	8007328 <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066b8:	e015      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fee2 	bl	800748c <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ce:	e00a      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066d6:	e006      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066d8:	bf00      	nop
 80066da:	e004      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066dc:	bf00      	nop
 80066de:	e002      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e0:	bf00      	nop
 80066e2:	e000      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10e      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066ee:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066fe:	4a02      	ldr	r2, [pc, #8]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006700:	430b      	orrs	r3, r1
 8006702:	6593      	str	r3, [r2, #88]	@ 0x58
 8006704:	e006      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006706:	bf00      	nop
 8006708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006720:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800672a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	d055      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800673c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006740:	d033      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006742:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006746:	d82c      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800674c:	d02f      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006752:	d826      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006754:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006758:	d02b      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800675a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800675e:	d820      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006764:	d012      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676a:	d81a      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d022      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006774:	d115      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677a:	3308      	adds	r3, #8
 800677c:	2100      	movs	r1, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fdd2 	bl	8007328 <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800678a:	e015      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	3328      	adds	r3, #40	@ 0x28
 8006792:	2102      	movs	r1, #2
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fe79 	bl	800748c <RCCEx_PLL3_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a0:	e00a      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067aa:	bf00      	nop
 80067ac:	e004      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ae:	bf00      	nop
 80067b0:	e002      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10b      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067c0:	4ba0      	ldr	r3, [pc, #640]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d0:	4a9c      	ldr	r2, [pc, #624]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 0308 	and.w	r3, r2, #8
 80067ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067fa:	460b      	mov	r3, r1
 80067fc:	4313      	orrs	r3, r2
 80067fe:	d01e      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680c:	d10c      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	3328      	adds	r3, #40	@ 0x28
 8006814:	2102      	movs	r1, #2
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fe38 	bl	800748c <RCCEx_PLL3_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006828:	4b86      	ldr	r3, [pc, #536]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800682a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006838:	4a82      	ldr	r2, [pc, #520]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800683a:	430b      	orrs	r3, r1
 800683c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f002 0310 	and.w	r3, r2, #16
 800684a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800684e:	2300      	movs	r3, #0
 8006850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006854:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006858:	460b      	mov	r3, r1
 800685a:	4313      	orrs	r3, r2
 800685c:	d01e      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686a:	d10c      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	3328      	adds	r3, #40	@ 0x28
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fe09 	bl	800748c <RCCEx_PLL3_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006886:	4b6f      	ldr	r3, [pc, #444]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006896:	4a6b      	ldr	r2, [pc, #428]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006898:	430b      	orrs	r3, r1
 800689a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068aa:	2300      	movs	r3, #0
 80068ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d03e      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068c4:	d022      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ca:	d81b      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d4:	d00b      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068d6:	e015      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	3308      	adds	r3, #8
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fd21 	bl	8007328 <RCCEx_PLL2_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ec:	e00f      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	3328      	adds	r3, #40	@ 0x28
 80068f4:	2102      	movs	r1, #2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fdc8 	bl	800748c <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006902:	e004      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800690a:	e000      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800690c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006916:	4b4b      	ldr	r3, [pc, #300]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006926:	4a47      	ldr	r2, [pc, #284]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006928:	430b      	orrs	r3, r1
 800692a:	6593      	str	r3, [r2, #88]	@ 0x58
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006932:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006942:	673b      	str	r3, [r7, #112]	@ 0x70
 8006944:	2300      	movs	r3, #0
 8006946:	677b      	str	r3, [r7, #116]	@ 0x74
 8006948:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d03b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800695e:	d01f      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006964:	d818      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696a:	d003      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800696c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006970:	d007      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006972:	e011      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b33      	ldr	r3, [pc, #204]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4a32      	ldr	r2, [pc, #200]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	3328      	adds	r3, #40	@ 0x28
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fd7e 	bl	800748c <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069aa:	4b26      	ldr	r3, [pc, #152]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ba:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6553      	str	r3, [r2, #84]	@ 0x54
 80069c0:	e003      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069d8:	2300      	movs	r3, #0
 80069da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069e0:	460b      	mov	r3, r1
 80069e2:	4313      	orrs	r3, r2
 80069e4:	d034      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f4:	d007      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80069f6:	e011      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f8:	4b12      	ldr	r3, [pc, #72]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	4a11      	ldr	r2, [pc, #68]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a04:	e00e      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fc8a 	bl	8007328 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10d      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3a:	4a02      	ldr	r2, [pc, #8]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a40:	e006      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a5e:	2300      	movs	r3, #0
 8006a60:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a62:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a66:	460b      	mov	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	d00c      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	3328      	adds	r3, #40	@ 0x28
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd09 	bl	800748c <RCCEx_PLL3_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a94:	2300      	movs	r3, #0
 8006a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a98:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	d036      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aac:	d018      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab2:	d811      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab8:	d014      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006abe:	d80b      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d011      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aca:	4bb7      	ldr	r3, [pc, #732]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	4ab6      	ldr	r2, [pc, #728]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ad6:	e008      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ade:	e004      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ae0:	bf00      	nop
 8006ae2:	e002      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006af2:	4bad      	ldr	r3, [pc, #692]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b00:	4aa9      	ldr	r2, [pc, #676]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1e:	2300      	movs	r3, #0
 8006b20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b2c:	4b9e      	ldr	r3, [pc, #632]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	4a9b      	ldr	r2, [pc, #620]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b4e:	2300      	movs	r3, #0
 8006b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b56:	460b      	mov	r3, r1
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b5c:	4b92      	ldr	r3, [pc, #584]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b60:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b6a:	4a8f      	ldr	r2, [pc, #572]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b7e:	2300      	movs	r3, #0
 8006b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b8c:	4b86      	ldr	r3, [pc, #536]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	4a85      	ldr	r2, [pc, #532]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b96:	6113      	str	r3, [r2, #16]
 8006b98:	4b83      	ldr	r3, [pc, #524]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9a:	6919      	ldr	r1, [r3, #16]
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ba4:	4a80      	ldr	r2, [pc, #512]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bc6:	4b78      	ldr	r3, [pc, #480]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd4:	4a74      	ldr	r2, [pc, #464]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be8:	2300      	movs	r3, #0
 8006bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	4a68      	ldr	r2, [pc, #416]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	2100      	movs	r1, #0
 8006c16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c22:	460b      	mov	r3, r1
 8006c24:	4313      	orrs	r3, r2
 8006c26:	d011      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fb79 	bl	8007328 <RCCEx_PLL2_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	2100      	movs	r1, #0
 8006c56:	6239      	str	r1, [r7, #32]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d011      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fb59 	bl	8007328 <RCCEx_PLL2_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	2100      	movs	r1, #0
 8006c96:	61b9      	str	r1, [r7, #24]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d011      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	3308      	adds	r3, #8
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fb39 	bl	8007328 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6139      	str	r1, [r7, #16]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d011      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	3328      	adds	r3, #40	@ 0x28
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fbcb 	bl	800748c <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	2100      	movs	r1, #0
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d011      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	3328      	adds	r3, #40	@ 0x28
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fbab 	bl	800748c <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	2100      	movs	r1, #0
 8006d56:	6039      	str	r1, [r7, #0]
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d011      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	3328      	adds	r3, #40	@ 0x28
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fb8b 	bl	800748c <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006d8c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	58024400 	.word	0x58024400

08006dac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006db0:	f7fe fe00 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4904      	ldr	r1, [pc, #16]	@ (8006dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	0800c2b0 	.word	0x0800c2b0

08006dd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b089      	sub	sp, #36	@ 0x24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006de0:	4ba1      	ldr	r3, [pc, #644]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dea:	4b9f      	ldr	r3, [pc, #636]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	0b1b      	lsrs	r3, r3, #12
 8006df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006df4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006df6:	4b9c      	ldr	r3, [pc, #624]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e02:	4b99      	ldr	r3, [pc, #612]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8111 	beq.w	8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f000 8083 	beq.w	8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	f200 80a1 	bhi.w	8006f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d056      	beq.n	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e42:	e099      	b.n	8006f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e44:	4b88      	ldr	r3, [pc, #544]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0320 	and.w	r3, r3, #32
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d02d      	beq.n	8006eac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e50:	4b85      	ldr	r3, [pc, #532]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	08db      	lsrs	r3, r3, #3
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	4a84      	ldr	r2, [pc, #528]	@ (800706c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eaa:	e087      	b.n	8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eee:	e065      	b.n	8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b59      	ldr	r3, [pc, #356]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f32:	e043      	b.n	8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b48      	ldr	r3, [pc, #288]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f76:	e021      	b.n	8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b37      	ldr	r3, [pc, #220]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	0a5b      	lsrs	r3, r3, #9
 8006fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe2:	ee17 2a90 	vmov	r2, s15
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007004:	edd7 6a07 	vldr	s13, [r7, #28]
 8007008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007010:	ee17 2a90 	vmov	r2, s15
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007018:	4b13      	ldr	r3, [pc, #76]	@ (8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	0e1b      	lsrs	r3, r3, #24
 800701e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800702e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007032:	edd7 6a07 	vldr	s13, [r7, #28]
 8007036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800703a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703e:	ee17 2a90 	vmov	r2, s15
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007046:	e008      	b.n	800705a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	609a      	str	r2, [r3, #8]
}
 800705a:	bf00      	nop
 800705c:	3724      	adds	r7, #36	@ 0x24
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	46000000 	.word	0x46000000
 8007074:	4c742400 	.word	0x4c742400
 8007078:	4a742400 	.word	0x4a742400
 800707c:	4af42400 	.word	0x4af42400

08007080 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	@ 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007088:	4ba1      	ldr	r3, [pc, #644]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007092:	4b9f      	ldr	r3, [pc, #636]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	0d1b      	lsrs	r3, r3, #20
 8007098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800709c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800709e:	4b9c      	ldr	r3, [pc, #624]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070aa:	4b99      	ldr	r3, [pc, #612]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ae:	08db      	lsrs	r3, r3, #3
 80070b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8111 	beq.w	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	f000 8083 	beq.w	80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	f200 80a1 	bhi.w	8007220 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d056      	beq.n	8007198 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070ea:	e099      	b.n	8007220 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ec:	4b88      	ldr	r3, [pc, #544]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02d      	beq.n	8007154 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070f8:	4b85      	ldr	r3, [pc, #532]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	08db      	lsrs	r3, r3, #3
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	4a84      	ldr	r2, [pc, #528]	@ (8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
 8007108:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b7b      	ldr	r3, [pc, #492]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a03 	vldr	s12, [r7, #12]
 8007136:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007152:	e087      	b.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800731c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b6a      	ldr	r3, [pc, #424]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a03 	vldr	s12, [r7, #12]
 800717a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	e065      	b.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b59      	ldr	r3, [pc, #356]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80071be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071da:	e043      	b.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b48      	ldr	r3, [pc, #288]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007202:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721e:	e021      	b.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800722e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007232:	4b37      	ldr	r3, [pc, #220]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007242:	ed97 6a03 	vldr	s12, [r7, #12]
 8007246:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800724a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007262:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007264:	4b2a      	ldr	r3, [pc, #168]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007268:	0a5b      	lsrs	r3, r3, #9
 800726a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800727e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728a:	ee17 2a90 	vmov	r2, s15
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007292:	4b1f      	ldr	r3, [pc, #124]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b8:	ee17 2a90 	vmov	r2, s15
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072c0:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072da:	edd7 6a07 	vldr	s13, [r7, #28]
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e6:	ee17 2a90 	vmov	r2, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072ee:	e008      	b.n	8007302 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	bf00      	nop
 8007304:	3724      	adds	r7, #36	@ 0x24
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
 8007314:	03d09000 	.word	0x03d09000
 8007318:	46000000 	.word	0x46000000
 800731c:	4c742400 	.word	0x4c742400
 8007320:	4a742400 	.word	0x4a742400
 8007324:	4af42400 	.word	0x4af42400

08007328 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007336:	4b53      	ldr	r3, [pc, #332]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d101      	bne.n	8007346 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e099      	b.n	800747a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007346:	4b4f      	ldr	r3, [pc, #316]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a4e      	ldr	r2, [pc, #312]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800734c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007352:	f7fa f9c5 	bl	80016e0 <HAL_GetTick>
 8007356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007358:	e008      	b.n	800736c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800735a:	f7fa f9c1 	bl	80016e0 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e086      	b.n	800747a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800736c:	4b45      	ldr	r3, [pc, #276]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f0      	bne.n	800735a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007378:	4b42      	ldr	r3, [pc, #264]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	031b      	lsls	r3, r3, #12
 8007386:	493f      	ldr	r1, [pc, #252]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007388:	4313      	orrs	r3, r2
 800738a:	628b      	str	r3, [r1, #40]	@ 0x28
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	3b01      	subs	r3, #1
 8007392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	3b01      	subs	r3, #1
 800739c:	025b      	lsls	r3, r3, #9
 800739e:	b29b      	uxth	r3, r3
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	061b      	lsls	r3, r3, #24
 80073b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073bc:	4931      	ldr	r1, [pc, #196]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073c2:	4b30      	ldr	r3, [pc, #192]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	492d      	ldr	r1, [pc, #180]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	f023 0220 	bic.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	4928      	ldr	r1, [pc, #160]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073e6:	4b27      	ldr	r3, [pc, #156]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	4a26      	ldr	r2, [pc, #152]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073f2:	4b24      	ldr	r3, [pc, #144]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f6:	4b24      	ldr	r3, [pc, #144]	@ (8007488 <RCCEx_PLL2_Config+0x160>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	69d2      	ldr	r2, [r2, #28]
 80073fe:	00d2      	lsls	r2, r2, #3
 8007400:	4920      	ldr	r1, [pc, #128]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007402:	4313      	orrs	r3, r2
 8007404:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007406:	4b1f      	ldr	r3, [pc, #124]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	4a1e      	ldr	r2, [pc, #120]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800740c:	f043 0310 	orr.w	r3, r3, #16
 8007410:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007418:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	4a19      	ldr	r2, [pc, #100]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800741e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007424:	e00f      	b.n	8007446 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d106      	bne.n	800743a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800742c:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	4a14      	ldr	r2, [pc, #80]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007438:	e005      	b.n	8007446 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4a11      	ldr	r2, [pc, #68]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007444:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a0e      	ldr	r2, [pc, #56]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007452:	f7fa f945 	bl	80016e0 <HAL_GetTick>
 8007456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007458:	e008      	b.n	800746c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800745a:	f7fa f941 	bl	80016e0 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e006      	b.n	800747a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <RCCEx_PLL2_Config+0x15c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f0      	beq.n	800745a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	58024400 	.word	0x58024400
 8007488:	ffff0007 	.word	0xffff0007

0800748c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800749a:	4b53      	ldr	r3, [pc, #332]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d101      	bne.n	80074aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e099      	b.n	80075de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074aa:	4b4f      	ldr	r3, [pc, #316]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a4e      	ldr	r2, [pc, #312]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80074b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b6:	f7fa f913 	bl	80016e0 <HAL_GetTick>
 80074ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074bc:	e008      	b.n	80074d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074be:	f7fa f90f 	bl	80016e0 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e086      	b.n	80075de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d0:	4b45      	ldr	r3, [pc, #276]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f0      	bne.n	80074be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074dc:	4b42      	ldr	r3, [pc, #264]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80074de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	051b      	lsls	r3, r3, #20
 80074ea:	493f      	ldr	r1, [pc, #252]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	3b01      	subs	r3, #1
 8007500:	025b      	lsls	r3, r3, #9
 8007502:	b29b      	uxth	r3, r3
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	3b01      	subs	r3, #1
 800750c:	041b      	lsls	r3, r3, #16
 800750e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	3b01      	subs	r3, #1
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007520:	4931      	ldr	r1, [pc, #196]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007522:	4313      	orrs	r3, r2
 8007524:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007526:	4b30      	ldr	r3, [pc, #192]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	492d      	ldr	r1, [pc, #180]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007534:	4313      	orrs	r3, r2
 8007536:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007538:	4b2b      	ldr	r3, [pc, #172]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	4928      	ldr	r1, [pc, #160]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007546:	4313      	orrs	r3, r2
 8007548:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800754a:	4b27      	ldr	r3, [pc, #156]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	4a26      	ldr	r2, [pc, #152]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007554:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007556:	4b24      	ldr	r3, [pc, #144]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755a:	4b24      	ldr	r3, [pc, #144]	@ (80075ec <RCCEx_PLL3_Config+0x160>)
 800755c:	4013      	ands	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	69d2      	ldr	r2, [r2, #28]
 8007562:	00d2      	lsls	r2, r2, #3
 8007564:	4920      	ldr	r1, [pc, #128]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007566:	4313      	orrs	r3, r2
 8007568:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800756a:	4b1f      	ldr	r3, [pc, #124]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	4a1e      	ldr	r2, [pc, #120]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007574:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800757c:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4a19      	ldr	r2, [pc, #100]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007588:	e00f      	b.n	80075aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d106      	bne.n	800759e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007590:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	4a14      	ldr	r2, [pc, #80]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 8007596:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800759a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800759c:	e005      	b.n	80075aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800759e:	4b12      	ldr	r3, [pc, #72]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	4a11      	ldr	r2, [pc, #68]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80075a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075aa:	4b0f      	ldr	r3, [pc, #60]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a0e      	ldr	r2, [pc, #56]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b6:	f7fa f893 	bl	80016e0 <HAL_GetTick>
 80075ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075bc:	e008      	b.n	80075d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075be:	f7fa f88f 	bl	80016e0 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e006      	b.n	80075de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0f0      	beq.n	80075be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	ffff0007 	.word	0xffff0007

080075f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d071      	beq.n	80076e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7f9 fce8 	bl	8000fec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b10      	cmp	r3, #16
 8007630:	d050      	beq.n	80076d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	22ca      	movs	r2, #202	@ 0xca
 8007638:	625a      	str	r2, [r3, #36]	@ 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2253      	movs	r2, #83	@ 0x53
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb88 	bl	8007d58 <RTC_EnterInitMode>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d124      	bne.n	800769c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6899      	ldr	r1, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b24      	ldr	r3, [pc, #144]	@ (80076f0 <HAL_RTC_Init+0x100>)
 800765e:	400b      	ands	r3, r1
 8007660:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6899      	ldr	r1, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	0419      	lsls	r1, r3, #16
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb94 	bl	8007dc0 <RTC_ExitInitMode>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d113      	bne.n	80076ca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0203 	bic.w	r2, r2, #3
 80076b0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	22ff      	movs	r2, #255	@ 0xff
 80076d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80076d2:	e001      	b.n	80076d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	ff8fffbf 	.word	0xff8fffbf

080076f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_RTC_SetTime+0x1a>
 800770a:	2302      	movs	r3, #2
 800770c:	e089      	b.n	8007822 <HAL_RTC_SetTime+0x12e>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	22ca      	movs	r2, #202	@ 0xca
 8007724:	625a      	str	r2, [r3, #36]	@ 0x24
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2253      	movs	r2, #83	@ 0x53
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fb12 	bl	8007d58 <RTC_EnterInitMode>
 8007734:	4603      	mov	r3, r0
 8007736:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007738:	7cfb      	ldrb	r3, [r7, #19]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d161      	bne.n	8007802 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d126      	bne.n	8007792 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fb6d 	bl	8007e3c <RTC_ByteToBcd2>
 8007762:	4603      	mov	r3, r0
 8007764:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fb66 	bl	8007e3c <RTC_ByteToBcd2>
 8007770:	4603      	mov	r3, r0
 8007772:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007774:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	789b      	ldrb	r3, [r3, #2]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fb5e 	bl	8007e3c <RTC_ByteToBcd2>
 8007780:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007782:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	78db      	ldrb	r3, [r3, #3]
 800778a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e018      	b.n	80077c4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	78db      	ldrb	r3, [r3, #3]
 80077be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	4b18      	ldr	r3, [pc, #96]	@ (800782c <HAL_RTC_SetTime+0x138>)
 80077cc:	400b      	ands	r3, r1
 80077ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fae1 	bl	8007dc0 <RTC_ExitInitMode>
 80077fe:	4603      	mov	r3, r0
 8007800:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	22ff      	movs	r2, #255	@ 0xff
 8007808:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800780a:	7cfb      	ldrb	r3, [r7, #19]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007820:	7cfb      	ldrb	r3, [r7, #19]
}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd90      	pop	{r4, r7, pc}
 800782a:	bf00      	nop
 800782c:	007f7f7f 	.word	0x007f7f7f

08007830 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b22      	ldr	r3, [pc, #136]	@ (80078e4 <HAL_RTC_GetTime+0xb4>)
 800785c:	4013      	ands	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	0d9b      	lsrs	r3, r3, #22
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11a      	bne.n	80078da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fae7 	bl	8007e7c <RTC_Bcd2ToByte>
 80078ae:	4603      	mov	r3, r0
 80078b0:	461a      	mov	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fade 	bl	8007e7c <RTC_Bcd2ToByte>
 80078c0:	4603      	mov	r3, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	789b      	ldrb	r3, [r3, #2]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fad5 	bl	8007e7c <RTC_Bcd2ToByte>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	007f7f7f 	.word	0x007f7f7f

080078e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_RTC_SetDate+0x1a>
 80078fe:	2302      	movs	r3, #2
 8007900:	e073      	b.n	80079ea <HAL_RTC_SetDate+0x102>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10e      	bne.n	8007936 <HAL_RTC_SetDate+0x4e>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	b2db      	uxtb	r3, r3
 800792e:	330a      	adds	r3, #10
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11c      	bne.n	8007976 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	78db      	ldrb	r3, [r3, #3]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fa7b 	bl	8007e3c <RTC_ByteToBcd2>
 8007946:	4603      	mov	r3, r0
 8007948:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fa74 	bl	8007e3c <RTC_ByteToBcd2>
 8007954:	4603      	mov	r3, r0
 8007956:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007958:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fa6c 	bl	8007e3c <RTC_ByteToBcd2>
 8007964:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007966:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e00e      	b.n	8007994 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	78db      	ldrb	r3, [r3, #3]
 800797a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007982:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007988:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	22ca      	movs	r2, #202	@ 0xca
 800799a:	625a      	str	r2, [r3, #36]	@ 0x24
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2253      	movs	r2, #83	@ 0x53
 80079a2:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f9d7 	bl	8007d58 <RTC_EnterInitMode>
 80079aa:	4603      	mov	r3, r0
 80079ac:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079ae:	7cfb      	ldrb	r3, [r7, #19]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	4b0e      	ldr	r3, [pc, #56]	@ (80079f4 <HAL_RTC_SetDate+0x10c>)
 80079bc:	400b      	ands	r3, r1
 80079be:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f9fd 	bl	8007dc0 <RTC_ExitInitMode>
 80079c6:	4603      	mov	r3, r0
 80079c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	22ff      	movs	r2, #255	@ 0xff
 80079d0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80079d2:	7cfb      	ldrb	r3, [r7, #19]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80079e8:	7cfb      	ldrb	r3, [r7, #19]


}
 80079ea:	4618      	mov	r0, r3
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd90      	pop	{r4, r7, pc}
 80079f2:	bf00      	nop
 80079f4:	00ffff3f 	.word	0x00ffff3f

080079f8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	4b21      	ldr	r3, [pc, #132]	@ (8007a90 <HAL_RTC_GetDate+0x98>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	0a1b      	lsrs	r3, r3, #8
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	0b5b      	lsrs	r3, r3, #13
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11a      	bne.n	8007a84 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	78db      	ldrb	r3, [r3, #3]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fa12 	bl	8007e7c <RTC_Bcd2ToByte>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fa09 	bl	8007e7c <RTC_Bcd2ToByte>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	789b      	ldrb	r3, [r3, #2]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa00 	bl	8007e7c <RTC_Bcd2ToByte>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	00ffff3f 	.word	0x00ffff3f

08007a94 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b089      	sub	sp, #36	@ 0x24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_RTC_SetAlarm_IT+0x1a>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e129      	b.n	8007d02 <HAL_RTC_SetAlarm_IT+0x26e>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d137      	bne.n	8007b34 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f9ad 	bl	8007e3c <RTC_ByteToBcd2>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f9a6 	bl	8007e3c <RTC_ByteToBcd2>
 8007af0:	4603      	mov	r3, r0
 8007af2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007af4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	789b      	ldrb	r3, [r3, #2]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f99e 	bl	8007e3c <RTC_ByteToBcd2>
 8007b00:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b02:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b0c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 f990 	bl	8007e3c <RTC_ByteToBcd2>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e023      	b.n	8007b7c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b54:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007b5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	78db      	ldrb	r3, [r3, #3]
 8007b60:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007b62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007b6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007b72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	22ca      	movs	r2, #202	@ 0xca
 8007b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2253      	movs	r2, #83	@ 0x53
 8007b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba0:	d14a      	bne.n	8007c38 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bb0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007bc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007bc4:	f7f9 fd8c 	bl	80016e0 <HAL_GetTick>
 8007bc8:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007bca:	e015      	b.n	8007bf8 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bcc:	f7f9 fd88 	bl	80016e0 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bda:	d90d      	bls.n	8007bf8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	22ff      	movs	r2, #255	@ 0xff
 8007be2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e084      	b.n	8007d02 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0e2      	beq.n	8007bcc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c24:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c34:	609a      	str	r2, [r3, #8]
 8007c36:	e049      	b.n	8007ccc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c46:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007c58:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c5a:	f7f9 fd41 	bl	80016e0 <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c60:	e015      	b.n	8007c8e <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c62:	f7f9 fd3d 	bl	80016e0 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c70:	d90d      	bls.n	8007c8e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	22ff      	movs	r2, #255	@ 0xff
 8007c78:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e039      	b.n	8007d02 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0e2      	beq.n	8007c62 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cca:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <HAL_RTC_SetAlarm_IT+0x278>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8007d0c <HAL_RTC_SetAlarm_IT+0x278>)
 8007cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cd6:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce6:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	22ff      	movs	r2, #255	@ 0xff
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3724      	adds	r7, #36	@ 0x24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	58000080 	.word	0x58000080

08007d10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8007d54 <HAL_RTC_WaitForSynchro+0x44>)
 8007d1e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007d20:	f7f9 fcde 	bl	80016e0 <HAL_GetTick>
 8007d24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d26:	e009      	b.n	8007d3c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d28:	f7f9 fcda 	bl	80016e0 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d36:	d901      	bls.n	8007d3c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e007      	b.n	8007d4c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0ee      	beq.n	8007d28 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	0003ff5f 	.word	0x0003ff5f

08007d58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d120      	bne.n	8007db4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d7c:	f7f9 fcb0 	bl	80016e0 <HAL_GetTick>
 8007d80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d82:	e00d      	b.n	8007da0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d84:	f7f9 fcac 	bl	80016e0 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d92:	d905      	bls.n	8007da0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <RTC_EnterInitMode+0x5c>
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d1e7      	bne.n	8007d84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	4a19      	ldr	r2, [pc, #100]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dd6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007dd8:	4b17      	ldr	r3, [pc, #92]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 0320 	and.w	r3, r3, #32
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10c      	bne.n	8007dfe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ff93 	bl	8007d10 <HAL_RTC_WaitForSynchro>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01e      	beq.n	8007e2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2203      	movs	r2, #3
 8007df4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e017      	b.n	8007e2e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	4a0d      	ldr	r2, [pc, #52]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007e04:	f023 0320 	bic.w	r3, r3, #32
 8007e08:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff ff80 	bl	8007d10 <HAL_RTC_WaitForSynchro>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2203      	movs	r2, #3
 8007e1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e22:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	4a04      	ldr	r2, [pc, #16]	@ (8007e38 <RTC_ExitInitMode+0x78>)
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	58004000 	.word	0x58004000

08007e3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007e4e:	e005      	b.n	8007e5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	3b0a      	subs	r3, #10
 8007e5a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d8f6      	bhi.n	8007e50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	b2db      	uxtb	r3, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	091b      	lsrs	r3, r3, #4
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	b2db      	uxtb	r3, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d101      	bne.n	8007eca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e07b      	b.n	8007fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	22ca      	movs	r2, #202	@ 0xca
 8007ee0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2253      	movs	r2, #83	@ 0x53
 8007ee8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007eea:	4b38      	ldr	r3, [pc, #224]	@ (8007fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4a37      	ldr	r2, [pc, #220]	@ (8007fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ef4:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8007ef6:	4b35      	ldr	r3, [pc, #212]	@ (8007fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d120      	bne.n	8007f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8007f02:	f7f9 fbed 	bl	80016e0 <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f08:	e015      	b.n	8007f36 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f0a:	f7f9 fbe9 	bl	80016e0 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f18:	d90d      	bls.n	8007f36 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	22ff      	movs	r2, #255	@ 0xff
 8007f20:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2203      	movs	r2, #3
 8007f26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e045      	b.n	8007fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0e2      	beq.n	8007f0a <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f023 0307 	bic.w	r3, r3, #7
 8007f5a:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007f6c:	4b18      	ldr	r3, [pc, #96]	@ (8007fd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a17      	ldr	r2, [pc, #92]	@ (8007fd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007f72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f86:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f96:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fa6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	22ff      	movs	r2, #255	@ 0xff
 8007fae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	58004000 	.word	0x58004000
 8007fd0:	58000080 	.word	0x58000080

08007fd4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e04d      	b.n	8008086 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	22ca      	movs	r2, #202	@ 0xca
 8008000:	625a      	str	r2, [r3, #36]	@ 0x24
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2253      	movs	r2, #83	@ 0x53
 8008008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008018:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008028:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800802a:	f7f9 fb59 	bl	80016e0 <HAL_GetTick>
 800802e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
#if defined(TAMP)
  while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008030:	e015      	b.n	800805e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
#endif /* TAMP */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008032:	f7f9 fb55 	bl	80016e0 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008040:	d90d      	bls.n	800805e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	22ff      	movs	r2, #255	@ 0xff
 8008048:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2203      	movs	r2, #3
 800804e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e013      	b.n	8008086 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0e2      	beq.n	8008032 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	22ff      	movs	r2, #255	@ 0xff
 8008072:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800808e:	b480      	push	{r7}
 8008090:	b087      	sub	sp, #28
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3350      	adds	r3, #80	@ 0x50
 80080a0:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3350      	adds	r3, #80	@ 0x50
 80080ce:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e042      	b.n	8008182 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f9 f992 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2224      	movs	r2, #36	@ 0x24
 8008118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fbdd 	bl	80098f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fd6e 	bl	8008c1c <UART_SetConfig>
 8008140:	4603      	mov	r3, r0
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e01b      	b.n	8008182 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008168:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fc5c 	bl	8009a38 <UART_CheckIdleState>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08a      	sub	sp, #40	@ 0x28
 800818e:	af02      	add	r7, sp, #8
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d17b      	bne.n	800829c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <HAL_UART_Transmit+0x26>
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e074      	b.n	800829e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2221      	movs	r2, #33	@ 0x21
 80081c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081c4:	f7f9 fa8c 	bl	80016e0 <HAL_GetTick>
 80081c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e2:	d108      	bne.n	80081f6 <HAL_UART_Transmit+0x6c>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e003      	b.n	80081fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081fe:	e030      	b.n	8008262 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2200      	movs	r2, #0
 8008208:	2180      	movs	r1, #128	@ 0x80
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f001 fcbe 	bl	8009b8c <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e03d      	b.n	800829e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008236:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	3302      	adds	r3, #2
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	e007      	b.n	8008250 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	781a      	ldrb	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	3301      	adds	r3, #1
 800824e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1c8      	bne.n	8008200 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2200      	movs	r2, #0
 8008276:	2140      	movs	r1, #64	@ 0x40
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 fc87 	bl	8009b8c <UART_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e006      	b.n	800829e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2220      	movs	r2, #32
 8008294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	e000      	b.n	800829e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800829c:	2302      	movs	r3, #2
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b091      	sub	sp, #68	@ 0x44
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082bc:	2b20      	cmp	r3, #32
 80082be:	d178      	bne.n	80083b2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <HAL_UART_Transmit_IT+0x24>
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e071      	b.n	80083b4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2221      	movs	r2, #33	@ 0x21
 80082f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008304:	d12a      	bne.n	800835c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830e:	d107      	bne.n	8008320 <HAL_UART_Transmit_IT+0x78>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a29      	ldr	r2, [pc, #164]	@ (80083c0 <HAL_UART_Transmit_IT+0x118>)
 800831c:	679a      	str	r2, [r3, #120]	@ 0x78
 800831e:	e002      	b.n	8008326 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a28      	ldr	r2, [pc, #160]	@ (80083c4 <HAL_UART_Transmit_IT+0x11c>)
 8008324:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800833c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008346:	637a      	str	r2, [r7, #52]	@ 0x34
 8008348:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800834c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e5      	bne.n	8008326 <HAL_UART_Transmit_IT+0x7e>
 800835a:	e028      	b.n	80083ae <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008364:	d107      	bne.n	8008376 <HAL_UART_Transmit_IT+0xce>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4a15      	ldr	r2, [pc, #84]	@ (80083c8 <HAL_UART_Transmit_IT+0x120>)
 8008372:	679a      	str	r2, [r3, #120]	@ 0x78
 8008374:	e002      	b.n	800837c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4a14      	ldr	r2, [pc, #80]	@ (80083cc <HAL_UART_Transmit_IT+0x124>)
 800837a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	613b      	str	r3, [r7, #16]
   return(result);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839a:	623b      	str	r3, [r7, #32]
 800839c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	69f9      	ldr	r1, [r7, #28]
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e6      	bne.n	800837c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3744      	adds	r7, #68	@ 0x44
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	0800a371 	.word	0x0800a371
 80083c4:	0800a291 	.word	0x0800a291
 80083c8:	0800a1cf 	.word	0x0800a1cf
 80083cc:	0800a117 	.word	0x0800a117

080083d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	@ 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d137      	bne.n	8008458 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_UART_Receive_DMA+0x24>
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e030      	b.n	800845a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a18      	ldr	r2, [pc, #96]	@ (8008464 <HAL_UART_Receive_DMA+0x94>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d01f      	beq.n	8008448 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	613b      	str	r3, [r7, #16]
   return(result);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	623b      	str	r3, [r7, #32]
 8008436:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	69f9      	ldr	r1, [r7, #28]
 800843a:	6a3a      	ldr	r2, [r7, #32]
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	61bb      	str	r3, [r7, #24]
   return(result);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e6      	bne.n	8008416 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	461a      	mov	r2, r3
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f001 fc0a 	bl	8009c68 <UART_Start_Receive_DMA>
 8008454:	4603      	mov	r3, r0
 8008456:	e000      	b.n	800845a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	3728      	adds	r7, #40	@ 0x28
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	58000c00 	.word	0x58000c00

08008468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b0ba      	sub	sp, #232	@ 0xe8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800848e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008492:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008496:	4013      	ands	r3, r2
 8008498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800849c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d11b      	bne.n	80084dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d015      	beq.n	80084dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d105      	bne.n	80084c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8377 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
      }
      return;
 80084da:	e371      	b.n	8008bc0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8123 	beq.w	800872c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084ea:	4b8d      	ldr	r3, [pc, #564]	@ (8008720 <HAL_UART_IRQHandler+0x2b8>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084f6:	4b8b      	ldr	r3, [pc, #556]	@ (8008724 <HAL_UART_IRQHandler+0x2bc>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 8116 	beq.w	800872c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d011      	beq.n	8008530 <HAL_UART_IRQHandler+0xc8>
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2201      	movs	r2, #1
 800851e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008526:	f043 0201 	orr.w	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d011      	beq.n	8008560 <HAL_UART_IRQHandler+0xf8>
 800853c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <HAL_UART_IRQHandler+0x128>
 800856c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2204      	movs	r2, #4
 800857e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008586:	f043 0202 	orr.w	r2, r3, #2
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800859c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008720 <HAL_UART_IRQHandler+0x2b8>)
 80085ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2208      	movs	r2, #8
 80085ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c2:	f043 0208 	orr.w	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d012      	beq.n	80085fe <HAL_UART_IRQHandler+0x196>
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 82dd 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d013      	beq.n	800863e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008644:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008652:	2b40      	cmp	r3, #64	@ 0x40
 8008654:	d005      	beq.n	8008662 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800865a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800865e:	2b00      	cmp	r3, #0
 8008660:	d054      	beq.n	800870c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fbe8 	bl	8009e38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	d146      	bne.n	8008704 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3308      	adds	r3, #8
 800867c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800868c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3308      	adds	r3, #8
 800869e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1d9      	bne.n	8008676 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d017      	beq.n	80086fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	4a15      	ldr	r2, [pc, #84]	@ (8008728 <HAL_UART_IRQHandler+0x2c0>)
 80086d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fa f9fb 	bl	8002ad8 <HAL_DMA_Abort_IT>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d019      	beq.n	800871c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fa:	e00f      	b.n	800871c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa77 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008702:	e00b      	b.n	800871c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fa73 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870a:	e007      	b.n	800871c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa6f 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800871a:	e253      	b.n	8008bc4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	bf00      	nop
    return;
 800871e:	e251      	b.n	8008bc4 <HAL_UART_IRQHandler+0x75c>
 8008720:	10000001 	.word	0x10000001
 8008724:	04000120 	.word	0x04000120
 8008728:	0800a0eb 	.word	0x0800a0eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008730:	2b01      	cmp	r3, #1
 8008732:	f040 81e7 	bne.w	8008b04 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873a:	f003 0310 	and.w	r3, r3, #16
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 81e0 	beq.w	8008b04 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 81d9 	beq.w	8008b04 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2210      	movs	r2, #16
 8008758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	f040 8151 	bne.w	8008a0c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a96      	ldr	r2, [pc, #600]	@ (80089cc <HAL_UART_IRQHandler+0x564>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d068      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a93      	ldr	r2, [pc, #588]	@ (80089d0 <HAL_UART_IRQHandler+0x568>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d061      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a91      	ldr	r2, [pc, #580]	@ (80089d4 <HAL_UART_IRQHandler+0x56c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d05a      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a8e      	ldr	r2, [pc, #568]	@ (80089d8 <HAL_UART_IRQHandler+0x570>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d053      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a8c      	ldr	r2, [pc, #560]	@ (80089dc <HAL_UART_IRQHandler+0x574>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d04c      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a89      	ldr	r2, [pc, #548]	@ (80089e0 <HAL_UART_IRQHandler+0x578>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d045      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a87      	ldr	r2, [pc, #540]	@ (80089e4 <HAL_UART_IRQHandler+0x57c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d03e      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a84      	ldr	r2, [pc, #528]	@ (80089e8 <HAL_UART_IRQHandler+0x580>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d037      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a82      	ldr	r2, [pc, #520]	@ (80089ec <HAL_UART_IRQHandler+0x584>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d030      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a7f      	ldr	r2, [pc, #508]	@ (80089f0 <HAL_UART_IRQHandler+0x588>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d029      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7d      	ldr	r2, [pc, #500]	@ (80089f4 <HAL_UART_IRQHandler+0x58c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d022      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7a      	ldr	r2, [pc, #488]	@ (80089f8 <HAL_UART_IRQHandler+0x590>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01b      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a78      	ldr	r2, [pc, #480]	@ (80089fc <HAL_UART_IRQHandler+0x594>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d014      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a75      	ldr	r2, [pc, #468]	@ (8008a00 <HAL_UART_IRQHandler+0x598>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00d      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a73      	ldr	r2, [pc, #460]	@ (8008a04 <HAL_UART_IRQHandler+0x59c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d006      	beq.n	800884a <HAL_UART_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a70      	ldr	r2, [pc, #448]	@ (8008a08 <HAL_UART_IRQHandler+0x5a0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d106      	bne.n	8008858 <HAL_UART_IRQHandler+0x3f0>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	b29b      	uxth	r3, r3
 8008856:	e005      	b.n	8008864 <HAL_UART_IRQHandler+0x3fc>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b29b      	uxth	r3, r3
 8008864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 81ab 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800887c:	429a      	cmp	r2, r3
 800887e:	f080 81a3 	bcs.w	8008bc8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008888:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008898:	f000 8087 	beq.w	80089aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1da      	bne.n	800889c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800890a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800890e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800891c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e1      	bne.n	80088e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3308      	adds	r3, #8
 8008942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008948:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800894c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e3      	bne.n	8008922 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2220      	movs	r2, #32
 800895e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008978:	f023 0310 	bic.w	r3, r3, #16
 800897c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800898c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e4      	bne.n	8008968 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f9 fd79 	bl	800249c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089bc:	b29b      	uxth	r3, r3
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f91d 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ca:	e0fd      	b.n	8008bc8 <HAL_UART_IRQHandler+0x760>
 80089cc:	40020010 	.word	0x40020010
 80089d0:	40020028 	.word	0x40020028
 80089d4:	40020040 	.word	0x40020040
 80089d8:	40020058 	.word	0x40020058
 80089dc:	40020070 	.word	0x40020070
 80089e0:	40020088 	.word	0x40020088
 80089e4:	400200a0 	.word	0x400200a0
 80089e8:	400200b8 	.word	0x400200b8
 80089ec:	40020410 	.word	0x40020410
 80089f0:	40020428 	.word	0x40020428
 80089f4:	40020440 	.word	0x40020440
 80089f8:	40020458 	.word	0x40020458
 80089fc:	40020470 	.word	0x40020470
 8008a00:	40020488 	.word	0x40020488
 8008a04:	400204a0 	.word	0x400204a0
 8008a08:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80cf 	beq.w	8008bcc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80ca 	beq.w	8008bcc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e4      	bne.n	8008a38 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7e:	6a3a      	ldr	r2, [r7, #32]
 8008a80:	4b55      	ldr	r3, [pc, #340]	@ (8008bd8 <HAL_UART_IRQHandler+0x770>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008adc:	61fb      	str	r3, [r7, #28]
 8008ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	69b9      	ldr	r1, [r7, #24]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e4      	bne.n	8008aba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f881 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b02:	e063      	b.n	8008bcc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00e      	beq.n	8008b2e <HAL_UART_IRQHandler+0x6c6>
 8008b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d008      	beq.n	8008b2e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fcc2 	bl	800a4b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b2c:	e051      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d014      	beq.n	8008b64 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d105      	bne.n	8008b52 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d03a      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
    }
    return;
 8008b62:	e035      	b.n	8008bd0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <HAL_UART_IRQHandler+0x71c>
 8008b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fc6c 	bl	800a45a <UART_EndTransmit_IT>
    return;
 8008b82:	e026      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x73c>
 8008b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fc9b 	bl	800a4d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ba2:	e016      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da0c      	bge.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 fc83 	bl	800a4c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bbe:	e008      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8008bc0:	bf00      	nop
 8008bc2:	e006      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8008bc4:	bf00      	nop
 8008bc6:	e004      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8008bc8:	bf00      	nop
 8008bca:	e002      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8008bcc:	bf00      	nop
 8008bce:	e000      	b.n	8008bd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8008bd0:	bf00      	nop
  }
}
 8008bd2:	37e8      	adds	r7, #232	@ 0xe8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	effffffe 	.word	0xeffffffe

08008bdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c20:	b092      	sub	sp, #72	@ 0x48
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4bbe      	ldr	r3, [pc, #760]	@ (8008f44 <UART_SetConfig+0x328>)
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c54:	430b      	orrs	r3, r1
 8008c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4ab3      	ldr	r2, [pc, #716]	@ (8008f48 <UART_SetConfig+0x32c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c84:	4313      	orrs	r3, r2
 8008c86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	4baf      	ldr	r3, [pc, #700]	@ (8008f4c <UART_SetConfig+0x330>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	f023 010f 	bic.w	r1, r3, #15
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8008f50 <UART_SetConfig+0x334>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d177      	bne.n	8008dac <UART_SetConfig+0x190>
 8008cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8008f54 <UART_SetConfig+0x338>)
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cc4:	2b28      	cmp	r3, #40	@ 0x28
 8008cc6:	d86d      	bhi.n	8008da4 <UART_SetConfig+0x188>
 8008cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <UART_SetConfig+0xb4>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008d75 	.word	0x08008d75
 8008cd4:	08008da5 	.word	0x08008da5
 8008cd8:	08008da5 	.word	0x08008da5
 8008cdc:	08008da5 	.word	0x08008da5
 8008ce0:	08008da5 	.word	0x08008da5
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008da5 	.word	0x08008da5
 8008cec:	08008da5 	.word	0x08008da5
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008da5 	.word	0x08008da5
 8008cf8:	08008da5 	.word	0x08008da5
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008da5 	.word	0x08008da5
 8008d0c:	08008da5 	.word	0x08008da5
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008da5 	.word	0x08008da5
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008da5 	.word	0x08008da5
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008da5 	.word	0x08008da5
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008da5 	.word	0x08008da5
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008da5 	.word	0x08008da5
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	08008da5 	.word	0x08008da5
 8008d6c:	08008da5 	.word	0x08008da5
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e326      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e322      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e31e      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e31a      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e316      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008d9c:	2340      	movs	r3, #64	@ 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e312      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008da4:	2380      	movs	r3, #128	@ 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e30e      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a69      	ldr	r2, [pc, #420]	@ (8008f58 <UART_SetConfig+0x33c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d130      	bne.n	8008e18 <UART_SetConfig+0x1fc>
 8008db6:	4b67      	ldr	r3, [pc, #412]	@ (8008f54 <UART_SetConfig+0x338>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d826      	bhi.n	8008e10 <UART_SetConfig+0x1f4>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0x1ac>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e2f0      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e2ec      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e2e8      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e2e4      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e2e0      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e08:	2340      	movs	r3, #64	@ 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e2dc      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e10:	2380      	movs	r3, #128	@ 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e2d8      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8008f5c <UART_SetConfig+0x340>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d130      	bne.n	8008e84 <UART_SetConfig+0x268>
 8008e22:	4b4c      	ldr	r3, [pc, #304]	@ (8008f54 <UART_SetConfig+0x338>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d826      	bhi.n	8008e7c <UART_SetConfig+0x260>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <UART_SetConfig+0x218>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e55 	.word	0x08008e55
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e2ba      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e2b6      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e2b2      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e2ae      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e2aa      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e74:	2340      	movs	r3, #64	@ 0x40
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e2a6      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e7c:	2380      	movs	r3, #128	@ 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e2a2      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a35      	ldr	r2, [pc, #212]	@ (8008f60 <UART_SetConfig+0x344>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d130      	bne.n	8008ef0 <UART_SetConfig+0x2d4>
 8008e8e:	4b31      	ldr	r3, [pc, #196]	@ (8008f54 <UART_SetConfig+0x338>)
 8008e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	d826      	bhi.n	8008ee8 <UART_SetConfig+0x2cc>
 8008e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <UART_SetConfig+0x284>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008eb9 	.word	0x08008eb9
 8008ea4:	08008ec1 	.word	0x08008ec1
 8008ea8:	08008ec9 	.word	0x08008ec9
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e284      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e280      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e27c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e278      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e274      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ee0:	2340      	movs	r3, #64	@ 0x40
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e270      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ee8:	2380      	movs	r3, #128	@ 0x80
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e26c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <UART_SetConfig+0x348>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d142      	bne.n	8008f80 <UART_SetConfig+0x364>
 8008efa:	4b16      	ldr	r3, [pc, #88]	@ (8008f54 <UART_SetConfig+0x338>)
 8008efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	d838      	bhi.n	8008f78 <UART_SetConfig+0x35c>
 8008f06:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <UART_SetConfig+0x2f0>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f25 	.word	0x08008f25
 8008f10:	08008f2d 	.word	0x08008f2d
 8008f14:	08008f35 	.word	0x08008f35
 8008f18:	08008f3d 	.word	0x08008f3d
 8008f1c:	08008f69 	.word	0x08008f69
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	2300      	movs	r3, #0
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e24e      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f2c:	2304      	movs	r3, #4
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e24a      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f34:	2308      	movs	r3, #8
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e246      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e242      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f44:	cfff69f3 	.word	0xcfff69f3
 8008f48:	58000c00 	.word	0x58000c00
 8008f4c:	11fff4ff 	.word	0x11fff4ff
 8008f50:	40011000 	.word	0x40011000
 8008f54:	58024400 	.word	0x58024400
 8008f58:	40004400 	.word	0x40004400
 8008f5c:	40004800 	.word	0x40004800
 8008f60:	40004c00 	.word	0x40004c00
 8008f64:	40005000 	.word	0x40005000
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e22c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f70:	2340      	movs	r3, #64	@ 0x40
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e228      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f78:	2380      	movs	r3, #128	@ 0x80
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e224      	b.n	80093ca <UART_SetConfig+0x7ae>
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4ab1      	ldr	r2, [pc, #708]	@ (800924c <UART_SetConfig+0x630>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d176      	bne.n	8009078 <UART_SetConfig+0x45c>
 8008f8a:	4bb1      	ldr	r3, [pc, #708]	@ (8009250 <UART_SetConfig+0x634>)
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f92:	2b28      	cmp	r3, #40	@ 0x28
 8008f94:	d86c      	bhi.n	8009070 <UART_SetConfig+0x454>
 8008f96:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <UART_SetConfig+0x380>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08009041 	.word	0x08009041
 8008fa0:	08009071 	.word	0x08009071
 8008fa4:	08009071 	.word	0x08009071
 8008fa8:	08009071 	.word	0x08009071
 8008fac:	08009071 	.word	0x08009071
 8008fb0:	08009071 	.word	0x08009071
 8008fb4:	08009071 	.word	0x08009071
 8008fb8:	08009071 	.word	0x08009071
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009071 	.word	0x08009071
 8008fc4:	08009071 	.word	0x08009071
 8008fc8:	08009071 	.word	0x08009071
 8008fcc:	08009071 	.word	0x08009071
 8008fd0:	08009071 	.word	0x08009071
 8008fd4:	08009071 	.word	0x08009071
 8008fd8:	08009071 	.word	0x08009071
 8008fdc:	08009051 	.word	0x08009051
 8008fe0:	08009071 	.word	0x08009071
 8008fe4:	08009071 	.word	0x08009071
 8008fe8:	08009071 	.word	0x08009071
 8008fec:	08009071 	.word	0x08009071
 8008ff0:	08009071 	.word	0x08009071
 8008ff4:	08009071 	.word	0x08009071
 8008ff8:	08009071 	.word	0x08009071
 8008ffc:	08009059 	.word	0x08009059
 8009000:	08009071 	.word	0x08009071
 8009004:	08009071 	.word	0x08009071
 8009008:	08009071 	.word	0x08009071
 800900c:	08009071 	.word	0x08009071
 8009010:	08009071 	.word	0x08009071
 8009014:	08009071 	.word	0x08009071
 8009018:	08009071 	.word	0x08009071
 800901c:	08009061 	.word	0x08009061
 8009020:	08009071 	.word	0x08009071
 8009024:	08009071 	.word	0x08009071
 8009028:	08009071 	.word	0x08009071
 800902c:	08009071 	.word	0x08009071
 8009030:	08009071 	.word	0x08009071
 8009034:	08009071 	.word	0x08009071
 8009038:	08009071 	.word	0x08009071
 800903c:	08009069 	.word	0x08009069
 8009040:	2301      	movs	r3, #1
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e1c0      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e1bc      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e1b8      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e1b4      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e1b0      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009068:	2340      	movs	r3, #64	@ 0x40
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e1ac      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e1a8      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a75      	ldr	r2, [pc, #468]	@ (8009254 <UART_SetConfig+0x638>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d130      	bne.n	80090e4 <UART_SetConfig+0x4c8>
 8009082:	4b73      	ldr	r3, [pc, #460]	@ (8009250 <UART_SetConfig+0x634>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b05      	cmp	r3, #5
 800908c:	d826      	bhi.n	80090dc <UART_SetConfig+0x4c0>
 800908e:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <UART_SetConfig+0x478>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090ad 	.word	0x080090ad
 8009098:	080090b5 	.word	0x080090b5
 800909c:	080090bd 	.word	0x080090bd
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	080090cd 	.word	0x080090cd
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e18a      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090b4:	2304      	movs	r3, #4
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e186      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090bc:	2308      	movs	r3, #8
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e182      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090c4:	2310      	movs	r3, #16
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e17e      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090cc:	2320      	movs	r3, #32
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e17a      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090d4:	2340      	movs	r3, #64	@ 0x40
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e176      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090dc:	2380      	movs	r3, #128	@ 0x80
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e172      	b.n	80093ca <UART_SetConfig+0x7ae>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a5b      	ldr	r2, [pc, #364]	@ (8009258 <UART_SetConfig+0x63c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d130      	bne.n	8009150 <UART_SetConfig+0x534>
 80090ee:	4b58      	ldr	r3, [pc, #352]	@ (8009250 <UART_SetConfig+0x634>)
 80090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b05      	cmp	r3, #5
 80090f8:	d826      	bhi.n	8009148 <UART_SetConfig+0x52c>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x4e4>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009119 	.word	0x08009119
 8009104:	08009121 	.word	0x08009121
 8009108:	08009129 	.word	0x08009129
 800910c:	08009131 	.word	0x08009131
 8009110:	08009139 	.word	0x08009139
 8009114:	08009141 	.word	0x08009141
 8009118:	2300      	movs	r3, #0
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e154      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009120:	2304      	movs	r3, #4
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e150      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009128:	2308      	movs	r3, #8
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e14c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009130:	2310      	movs	r3, #16
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e148      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009138:	2320      	movs	r3, #32
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e144      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009140:	2340      	movs	r3, #64	@ 0x40
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e140      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009148:	2380      	movs	r3, #128	@ 0x80
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e13c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a41      	ldr	r2, [pc, #260]	@ (800925c <UART_SetConfig+0x640>)
 8009156:	4293      	cmp	r3, r2
 8009158:	f040 8082 	bne.w	8009260 <UART_SetConfig+0x644>
 800915c:	4b3c      	ldr	r3, [pc, #240]	@ (8009250 <UART_SetConfig+0x634>)
 800915e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009164:	2b28      	cmp	r3, #40	@ 0x28
 8009166:	d86d      	bhi.n	8009244 <UART_SetConfig+0x628>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <UART_SetConfig+0x554>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009215 	.word	0x08009215
 8009174:	08009245 	.word	0x08009245
 8009178:	08009245 	.word	0x08009245
 800917c:	08009245 	.word	0x08009245
 8009180:	08009245 	.word	0x08009245
 8009184:	08009245 	.word	0x08009245
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	0800921d 	.word	0x0800921d
 8009194:	08009245 	.word	0x08009245
 8009198:	08009245 	.word	0x08009245
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009245 	.word	0x08009245
 80091a4:	08009245 	.word	0x08009245
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009245 	.word	0x08009245
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009245 	.word	0x08009245
 80091b8:	08009245 	.word	0x08009245
 80091bc:	08009245 	.word	0x08009245
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009245 	.word	0x08009245
 80091c8:	08009245 	.word	0x08009245
 80091cc:	08009245 	.word	0x08009245
 80091d0:	0800922d 	.word	0x0800922d
 80091d4:	08009245 	.word	0x08009245
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009245 	.word	0x08009245
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009245 	.word	0x08009245
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009245 	.word	0x08009245
 80091fc:	08009245 	.word	0x08009245
 8009200:	08009245 	.word	0x08009245
 8009204:	08009245 	.word	0x08009245
 8009208:	08009245 	.word	0x08009245
 800920c:	08009245 	.word	0x08009245
 8009210:	0800923d 	.word	0x0800923d
 8009214:	2301      	movs	r3, #1
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e0d6      	b.n	80093ca <UART_SetConfig+0x7ae>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e0d2      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e0ce      	b.n	80093ca <UART_SetConfig+0x7ae>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e0ca      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009234:	2320      	movs	r3, #32
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e0c6      	b.n	80093ca <UART_SetConfig+0x7ae>
 800923c:	2340      	movs	r3, #64	@ 0x40
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e0c2      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009244:	2380      	movs	r3, #128	@ 0x80
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e0be      	b.n	80093ca <UART_SetConfig+0x7ae>
 800924c:	40011400 	.word	0x40011400
 8009250:	58024400 	.word	0x58024400
 8009254:	40007800 	.word	0x40007800
 8009258:	40007c00 	.word	0x40007c00
 800925c:	40011800 	.word	0x40011800
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4aad      	ldr	r2, [pc, #692]	@ (800951c <UART_SetConfig+0x900>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d176      	bne.n	8009358 <UART_SetConfig+0x73c>
 800926a:	4bad      	ldr	r3, [pc, #692]	@ (8009520 <UART_SetConfig+0x904>)
 800926c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009272:	2b28      	cmp	r3, #40	@ 0x28
 8009274:	d86c      	bhi.n	8009350 <UART_SetConfig+0x734>
 8009276:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <UART_SetConfig+0x660>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	08009321 	.word	0x08009321
 8009280:	08009351 	.word	0x08009351
 8009284:	08009351 	.word	0x08009351
 8009288:	08009351 	.word	0x08009351
 800928c:	08009351 	.word	0x08009351
 8009290:	08009351 	.word	0x08009351
 8009294:	08009351 	.word	0x08009351
 8009298:	08009351 	.word	0x08009351
 800929c:	08009329 	.word	0x08009329
 80092a0:	08009351 	.word	0x08009351
 80092a4:	08009351 	.word	0x08009351
 80092a8:	08009351 	.word	0x08009351
 80092ac:	08009351 	.word	0x08009351
 80092b0:	08009351 	.word	0x08009351
 80092b4:	08009351 	.word	0x08009351
 80092b8:	08009351 	.word	0x08009351
 80092bc:	08009331 	.word	0x08009331
 80092c0:	08009351 	.word	0x08009351
 80092c4:	08009351 	.word	0x08009351
 80092c8:	08009351 	.word	0x08009351
 80092cc:	08009351 	.word	0x08009351
 80092d0:	08009351 	.word	0x08009351
 80092d4:	08009351 	.word	0x08009351
 80092d8:	08009351 	.word	0x08009351
 80092dc:	08009339 	.word	0x08009339
 80092e0:	08009351 	.word	0x08009351
 80092e4:	08009351 	.word	0x08009351
 80092e8:	08009351 	.word	0x08009351
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009351 	.word	0x08009351
 80092f4:	08009351 	.word	0x08009351
 80092f8:	08009351 	.word	0x08009351
 80092fc:	08009341 	.word	0x08009341
 8009300:	08009351 	.word	0x08009351
 8009304:	08009351 	.word	0x08009351
 8009308:	08009351 	.word	0x08009351
 800930c:	08009351 	.word	0x08009351
 8009310:	08009351 	.word	0x08009351
 8009314:	08009351 	.word	0x08009351
 8009318:	08009351 	.word	0x08009351
 800931c:	08009349 	.word	0x08009349
 8009320:	2301      	movs	r3, #1
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009326:	e050      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009328:	2304      	movs	r3, #4
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e04c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009330:	2308      	movs	r3, #8
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e048      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009338:	2310      	movs	r3, #16
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e044      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009340:	2320      	movs	r3, #32
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e040      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009348:	2340      	movs	r3, #64	@ 0x40
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e03c      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009350:	2380      	movs	r3, #128	@ 0x80
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e038      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a71      	ldr	r2, [pc, #452]	@ (8009524 <UART_SetConfig+0x908>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d130      	bne.n	80093c4 <UART_SetConfig+0x7a8>
 8009362:	4b6f      	ldr	r3, [pc, #444]	@ (8009520 <UART_SetConfig+0x904>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b05      	cmp	r3, #5
 800936c:	d826      	bhi.n	80093bc <UART_SetConfig+0x7a0>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <UART_SetConfig+0x758>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	0800938d 	.word	0x0800938d
 8009378:	08009395 	.word	0x08009395
 800937c:	0800939d 	.word	0x0800939d
 8009380:	080093a5 	.word	0x080093a5
 8009384:	080093ad 	.word	0x080093ad
 8009388:	080093b5 	.word	0x080093b5
 800938c:	2302      	movs	r3, #2
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e01a      	b.n	80093ca <UART_SetConfig+0x7ae>
 8009394:	2304      	movs	r3, #4
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e016      	b.n	80093ca <UART_SetConfig+0x7ae>
 800939c:	2308      	movs	r3, #8
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e012      	b.n	80093ca <UART_SetConfig+0x7ae>
 80093a4:	2310      	movs	r3, #16
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e00e      	b.n	80093ca <UART_SetConfig+0x7ae>
 80093ac:	2320      	movs	r3, #32
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e00a      	b.n	80093ca <UART_SetConfig+0x7ae>
 80093b4:	2340      	movs	r3, #64	@ 0x40
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e006      	b.n	80093ca <UART_SetConfig+0x7ae>
 80093bc:	2380      	movs	r3, #128	@ 0x80
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e002      	b.n	80093ca <UART_SetConfig+0x7ae>
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a55      	ldr	r2, [pc, #340]	@ (8009524 <UART_SetConfig+0x908>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	f040 80f8 	bne.w	80095c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093da:	2b20      	cmp	r3, #32
 80093dc:	dc46      	bgt.n	800946c <UART_SetConfig+0x850>
 80093de:	2b02      	cmp	r3, #2
 80093e0:	db75      	blt.n	80094ce <UART_SetConfig+0x8b2>
 80093e2:	3b02      	subs	r3, #2
 80093e4:	2b1e      	cmp	r3, #30
 80093e6:	d872      	bhi.n	80094ce <UART_SetConfig+0x8b2>
 80093e8:	a201      	add	r2, pc, #4	@ (adr r2, 80093f0 <UART_SetConfig+0x7d4>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009473 	.word	0x08009473
 80093f4:	080094cf 	.word	0x080094cf
 80093f8:	0800947b 	.word	0x0800947b
 80093fc:	080094cf 	.word	0x080094cf
 8009400:	080094cf 	.word	0x080094cf
 8009404:	080094cf 	.word	0x080094cf
 8009408:	0800948b 	.word	0x0800948b
 800940c:	080094cf 	.word	0x080094cf
 8009410:	080094cf 	.word	0x080094cf
 8009414:	080094cf 	.word	0x080094cf
 8009418:	080094cf 	.word	0x080094cf
 800941c:	080094cf 	.word	0x080094cf
 8009420:	080094cf 	.word	0x080094cf
 8009424:	080094cf 	.word	0x080094cf
 8009428:	0800949b 	.word	0x0800949b
 800942c:	080094cf 	.word	0x080094cf
 8009430:	080094cf 	.word	0x080094cf
 8009434:	080094cf 	.word	0x080094cf
 8009438:	080094cf 	.word	0x080094cf
 800943c:	080094cf 	.word	0x080094cf
 8009440:	080094cf 	.word	0x080094cf
 8009444:	080094cf 	.word	0x080094cf
 8009448:	080094cf 	.word	0x080094cf
 800944c:	080094cf 	.word	0x080094cf
 8009450:	080094cf 	.word	0x080094cf
 8009454:	080094cf 	.word	0x080094cf
 8009458:	080094cf 	.word	0x080094cf
 800945c:	080094cf 	.word	0x080094cf
 8009460:	080094cf 	.word	0x080094cf
 8009464:	080094cf 	.word	0x080094cf
 8009468:	080094c1 	.word	0x080094c1
 800946c:	2b40      	cmp	r3, #64	@ 0x40
 800946e:	d02a      	beq.n	80094c6 <UART_SetConfig+0x8aa>
 8009470:	e02d      	b.n	80094ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009472:	f7fd fc9b 	bl	8006dac <HAL_RCCEx_GetD3PCLK1Freq>
 8009476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009478:	e02f      	b.n	80094da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800947e:	4618      	mov	r0, r3
 8009480:	f7fd fcaa 	bl	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009488:	e027      	b.n	80094da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800948a:	f107 0318 	add.w	r3, r7, #24
 800948e:	4618      	mov	r0, r3
 8009490:	f7fd fdf6 	bl	8007080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009498:	e01f      	b.n	80094da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800949a:	4b21      	ldr	r3, [pc, #132]	@ (8009520 <UART_SetConfig+0x904>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009520 <UART_SetConfig+0x904>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	08db      	lsrs	r3, r3, #3
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009528 <UART_SetConfig+0x90c>)
 80094b2:	fa22 f303 	lsr.w	r3, r2, r3
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094b8:	e00f      	b.n	80094da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80094ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <UART_SetConfig+0x90c>)
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094be:	e00c      	b.n	80094da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094c0:	4b1a      	ldr	r3, [pc, #104]	@ (800952c <UART_SetConfig+0x910>)
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c4:	e009      	b.n	80094da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	e005      	b.n	80094da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 81ee 	beq.w	80098be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	4a12      	ldr	r2, [pc, #72]	@ (8009530 <UART_SetConfig+0x914>)
 80094e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094f4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	4613      	mov	r3, r2
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	4413      	add	r3, r2
 8009500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009502:	429a      	cmp	r2, r3
 8009504:	d305      	bcc.n	8009512 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800950c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950e:	429a      	cmp	r2, r3
 8009510:	d910      	bls.n	8009534 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009518:	e1d1      	b.n	80098be <UART_SetConfig+0xca2>
 800951a:	bf00      	nop
 800951c:	40011c00 	.word	0x40011c00
 8009520:	58024400 	.word	0x58024400
 8009524:	58000c00 	.word	0x58000c00
 8009528:	03d09000 	.word	0x03d09000
 800952c:	003d0900 	.word	0x003d0900
 8009530:	0800c2c8 	.word	0x0800c2c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009536:	2200      	movs	r2, #0
 8009538:	60bb      	str	r3, [r7, #8]
 800953a:	60fa      	str	r2, [r7, #12]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009540:	4ac0      	ldr	r2, [pc, #768]	@ (8009844 <UART_SetConfig+0xc28>)
 8009542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009546:	b29b      	uxth	r3, r3
 8009548:	2200      	movs	r2, #0
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	607a      	str	r2, [r7, #4]
 800954e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009556:	f7f6 ff3b 	bl	80003d0 <__aeabi_uldivmod>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4610      	mov	r0, r2
 8009560:	4619      	mov	r1, r3
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	020b      	lsls	r3, r1, #8
 800956c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009570:	0202      	lsls	r2, r0, #8
 8009572:	6979      	ldr	r1, [r7, #20]
 8009574:	6849      	ldr	r1, [r1, #4]
 8009576:	0849      	lsrs	r1, r1, #1
 8009578:	2000      	movs	r0, #0
 800957a:	460c      	mov	r4, r1
 800957c:	4605      	mov	r5, r0
 800957e:	eb12 0804 	adds.w	r8, r2, r4
 8009582:	eb43 0905 	adc.w	r9, r3, r5
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	469a      	mov	sl, r3
 800958e:	4693      	mov	fp, r2
 8009590:	4652      	mov	r2, sl
 8009592:	465b      	mov	r3, fp
 8009594:	4640      	mov	r0, r8
 8009596:	4649      	mov	r1, r9
 8009598:	f7f6 ff1a 	bl	80003d0 <__aeabi_uldivmod>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4613      	mov	r3, r2
 80095a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095aa:	d308      	bcc.n	80095be <UART_SetConfig+0x9a2>
 80095ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095b2:	d204      	bcs.n	80095be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095ba:	60da      	str	r2, [r3, #12]
 80095bc:	e17f      	b.n	80098be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095c4:	e17b      	b.n	80098be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ce:	f040 80bd 	bne.w	800974c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80095d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	dc48      	bgt.n	800966c <UART_SetConfig+0xa50>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	db7b      	blt.n	80096d6 <UART_SetConfig+0xaba>
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d879      	bhi.n	80096d6 <UART_SetConfig+0xaba>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x9cc>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009673 	.word	0x08009673
 80095ec:	0800967b 	.word	0x0800967b
 80095f0:	080096d7 	.word	0x080096d7
 80095f4:	080096d7 	.word	0x080096d7
 80095f8:	08009683 	.word	0x08009683
 80095fc:	080096d7 	.word	0x080096d7
 8009600:	080096d7 	.word	0x080096d7
 8009604:	080096d7 	.word	0x080096d7
 8009608:	08009693 	.word	0x08009693
 800960c:	080096d7 	.word	0x080096d7
 8009610:	080096d7 	.word	0x080096d7
 8009614:	080096d7 	.word	0x080096d7
 8009618:	080096d7 	.word	0x080096d7
 800961c:	080096d7 	.word	0x080096d7
 8009620:	080096d7 	.word	0x080096d7
 8009624:	080096d7 	.word	0x080096d7
 8009628:	080096a3 	.word	0x080096a3
 800962c:	080096d7 	.word	0x080096d7
 8009630:	080096d7 	.word	0x080096d7
 8009634:	080096d7 	.word	0x080096d7
 8009638:	080096d7 	.word	0x080096d7
 800963c:	080096d7 	.word	0x080096d7
 8009640:	080096d7 	.word	0x080096d7
 8009644:	080096d7 	.word	0x080096d7
 8009648:	080096d7 	.word	0x080096d7
 800964c:	080096d7 	.word	0x080096d7
 8009650:	080096d7 	.word	0x080096d7
 8009654:	080096d7 	.word	0x080096d7
 8009658:	080096d7 	.word	0x080096d7
 800965c:	080096d7 	.word	0x080096d7
 8009660:	080096d7 	.word	0x080096d7
 8009664:	080096d7 	.word	0x080096d7
 8009668:	080096c9 	.word	0x080096c9
 800966c:	2b40      	cmp	r3, #64	@ 0x40
 800966e:	d02e      	beq.n	80096ce <UART_SetConfig+0xab2>
 8009670:	e031      	b.n	80096d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009672:	f7fc f9cf 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 8009676:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009678:	e033      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800967a:	f7fc f9e1 	bl	8005a40 <HAL_RCC_GetPCLK2Freq>
 800967e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009680:	e02f      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd fba6 	bl	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009690:	e027      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009692:	f107 0318 	add.w	r3, r7, #24
 8009696:	4618      	mov	r0, r3
 8009698:	f7fd fcf2 	bl	8007080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a0:	e01f      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a2:	4b69      	ldr	r3, [pc, #420]	@ (8009848 <UART_SetConfig+0xc2c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d009      	beq.n	80096c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ae:	4b66      	ldr	r3, [pc, #408]	@ (8009848 <UART_SetConfig+0xc2c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	08db      	lsrs	r3, r3, #3
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	4a64      	ldr	r2, [pc, #400]	@ (800984c <UART_SetConfig+0xc30>)
 80096ba:	fa22 f303 	lsr.w	r3, r2, r3
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096c0:	e00f      	b.n	80096e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80096c2:	4b62      	ldr	r3, [pc, #392]	@ (800984c <UART_SetConfig+0xc30>)
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c6:	e00c      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096c8:	4b61      	ldr	r3, [pc, #388]	@ (8009850 <UART_SetConfig+0xc34>)
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096cc:	e009      	b.n	80096e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d4:	e005      	b.n	80096e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80ea 	beq.w	80098be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ee:	4a55      	ldr	r2, [pc, #340]	@ (8009844 <UART_SetConfig+0xc28>)
 80096f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80096fc:	005a      	lsls	r2, r3, #1
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	441a      	add	r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	fbb2 f3f3 	udiv	r3, r2, r3
 800970e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	2b0f      	cmp	r3, #15
 8009714:	d916      	bls.n	8009744 <UART_SetConfig+0xb28>
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800971c:	d212      	bcs.n	8009744 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	b29b      	uxth	r3, r3
 8009722:	f023 030f 	bic.w	r3, r3, #15
 8009726:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	b29b      	uxth	r3, r3
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	b29a      	uxth	r2, r3
 8009734:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009736:	4313      	orrs	r3, r2
 8009738:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009740:	60da      	str	r2, [r3, #12]
 8009742:	e0bc      	b.n	80098be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800974a:	e0b8      	b.n	80098be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800974c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009750:	2b20      	cmp	r3, #32
 8009752:	dc4b      	bgt.n	80097ec <UART_SetConfig+0xbd0>
 8009754:	2b00      	cmp	r3, #0
 8009756:	f2c0 8087 	blt.w	8009868 <UART_SetConfig+0xc4c>
 800975a:	2b20      	cmp	r3, #32
 800975c:	f200 8084 	bhi.w	8009868 <UART_SetConfig+0xc4c>
 8009760:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <UART_SetConfig+0xb4c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	080097f3 	.word	0x080097f3
 800976c:	080097fb 	.word	0x080097fb
 8009770:	08009869 	.word	0x08009869
 8009774:	08009869 	.word	0x08009869
 8009778:	08009803 	.word	0x08009803
 800977c:	08009869 	.word	0x08009869
 8009780:	08009869 	.word	0x08009869
 8009784:	08009869 	.word	0x08009869
 8009788:	08009813 	.word	0x08009813
 800978c:	08009869 	.word	0x08009869
 8009790:	08009869 	.word	0x08009869
 8009794:	08009869 	.word	0x08009869
 8009798:	08009869 	.word	0x08009869
 800979c:	08009869 	.word	0x08009869
 80097a0:	08009869 	.word	0x08009869
 80097a4:	08009869 	.word	0x08009869
 80097a8:	08009823 	.word	0x08009823
 80097ac:	08009869 	.word	0x08009869
 80097b0:	08009869 	.word	0x08009869
 80097b4:	08009869 	.word	0x08009869
 80097b8:	08009869 	.word	0x08009869
 80097bc:	08009869 	.word	0x08009869
 80097c0:	08009869 	.word	0x08009869
 80097c4:	08009869 	.word	0x08009869
 80097c8:	08009869 	.word	0x08009869
 80097cc:	08009869 	.word	0x08009869
 80097d0:	08009869 	.word	0x08009869
 80097d4:	08009869 	.word	0x08009869
 80097d8:	08009869 	.word	0x08009869
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009869 	.word	0x08009869
 80097e4:	08009869 	.word	0x08009869
 80097e8:	0800985b 	.word	0x0800985b
 80097ec:	2b40      	cmp	r3, #64	@ 0x40
 80097ee:	d037      	beq.n	8009860 <UART_SetConfig+0xc44>
 80097f0:	e03a      	b.n	8009868 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f2:	f7fc f90f 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 80097f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097f8:	e03c      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097fa:	f7fc f921 	bl	8005a40 <HAL_RCC_GetPCLK2Freq>
 80097fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009800:	e038      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd fae6 	bl	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009810:	e030      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009812:	f107 0318 	add.w	r3, r7, #24
 8009816:	4618      	mov	r0, r3
 8009818:	f7fd fc32 	bl	8007080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009820:	e028      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009822:	4b09      	ldr	r3, [pc, #36]	@ (8009848 <UART_SetConfig+0xc2c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d012      	beq.n	8009854 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800982e:	4b06      	ldr	r3, [pc, #24]	@ (8009848 <UART_SetConfig+0xc2c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	08db      	lsrs	r3, r3, #3
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	4a04      	ldr	r2, [pc, #16]	@ (800984c <UART_SetConfig+0xc30>)
 800983a:	fa22 f303 	lsr.w	r3, r2, r3
 800983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009840:	e018      	b.n	8009874 <UART_SetConfig+0xc58>
 8009842:	bf00      	nop
 8009844:	0800c2c8 	.word	0x0800c2c8
 8009848:	58024400 	.word	0x58024400
 800984c:	03d09000 	.word	0x03d09000
 8009850:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009854:	4b24      	ldr	r3, [pc, #144]	@ (80098e8 <UART_SetConfig+0xccc>)
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009858:	e00c      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800985a:	4b24      	ldr	r3, [pc, #144]	@ (80098ec <UART_SetConfig+0xcd0>)
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985e:	e009      	b.n	8009874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009866:	e005      	b.n	8009874 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009872:	bf00      	nop
    }

    if (pclk != 0U)
 8009874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d021      	beq.n	80098be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987e:	4a1c      	ldr	r2, [pc, #112]	@ (80098f0 <UART_SetConfig+0xcd4>)
 8009880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009884:	461a      	mov	r2, r3
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	fbb3 f2f2 	udiv	r2, r3, r2
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	441a      	add	r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	fbb2 f3f3 	udiv	r3, r2, r3
 800989c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d909      	bls.n	80098b8 <UART_SetConfig+0xc9c>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098aa:	d205      	bcs.n	80098b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	e002      	b.n	80098be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2200      	movs	r2, #0
 80098d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	2200      	movs	r2, #0
 80098d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3748      	adds	r7, #72	@ 0x48
 80098e2:	46bd      	mov	sp, r7
 80098e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098e8:	03d09000 	.word	0x03d09000
 80098ec:	003d0900 	.word	0x003d0900
 80098f0:	0800c2c8 	.word	0x0800c2c8

080098f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00a      	beq.n	80099a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01a      	beq.n	8009a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f2:	d10a      	bne.n	8009a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	605a      	str	r2, [r3, #4]
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b098      	sub	sp, #96	@ 0x60
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a48:	f7f7 fe4a 	bl	80016e0 <HAL_GetTick>
 8009a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d12f      	bne.n	8009abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a64:	2200      	movs	r2, #0
 8009a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f88e 	bl	8009b8c <UART_WaitOnFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d022      	beq.n	8009abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e063      	b.n	8009b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0304 	and.w	r3, r3, #4
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d149      	bne.n	8009b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f857 	bl	8009b8c <UART_WaitOnFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d03c      	beq.n	8009b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	623b      	str	r3, [r7, #32]
   return(result);
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e6      	bne.n	8009ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f023 0301 	bic.w	r3, r3, #1
 8009b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b36:	61fa      	str	r2, [r7, #28]
 8009b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	69b9      	ldr	r1, [r7, #24]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	617b      	str	r3, [r7, #20]
   return(result);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e5      	bne.n	8009b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e012      	b.n	8009b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3758      	adds	r7, #88	@ 0x58
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9c:	e04f      	b.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d04b      	beq.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba6:	f7f7 fd9b 	bl	80016e0 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e04e      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d037      	beq.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b80      	cmp	r3, #128	@ 0x80
 8009bd2:	d034      	beq.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b40      	cmp	r3, #64	@ 0x40
 8009bd8:	d031      	beq.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d110      	bne.n	8009c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2208      	movs	r2, #8
 8009bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f921 	bl	8009e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e029      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c18:	d111      	bne.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f907 	bl	8009e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e00f      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	69da      	ldr	r2, [r3, #28]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4013      	ands	r3, r2
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	2300      	movne	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d0a0      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b096      	sub	sp, #88	@ 0x58
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2222      	movs	r2, #34	@ 0x22
 8009c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d02d      	beq.n	8009cfa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca4:	4a40      	ldr	r2, [pc, #256]	@ (8009da8 <UART_Start_Receive_DMA+0x140>)
 8009ca6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cae:	4a3f      	ldr	r2, [pc, #252]	@ (8009dac <UART_Start_Receive_DMA+0x144>)
 8009cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8009db0 <UART_Start_Receive_DMA+0x148>)
 8009cba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3324      	adds	r3, #36	@ 0x24
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd8:	461a      	mov	r2, r3
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	f7f8 f974 	bl	8001fc8 <HAL_DMA_Start_IT>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2210      	movs	r2, #16
 8009cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e051      	b.n	8009d9e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d018      	beq.n	8009d34 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d22:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d54:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e5      	bne.n	8009d34 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	613b      	str	r3, [r7, #16]
   return(result);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3308      	adds	r3, #8
 8009d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d88:	623a      	str	r2, [r7, #32]
 8009d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	69f9      	ldr	r1, [r7, #28]
 8009d8e:	6a3a      	ldr	r2, [r7, #32]
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e5      	bne.n	8009d68 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3758      	adds	r7, #88	@ 0x58
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08009f05 	.word	0x08009f05
 8009dac:	0800a02d 	.word	0x0800a02d
 8009db0:	0800a06b 	.word	0x0800a06b

08009db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b08f      	sub	sp, #60	@ 0x3c
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ddc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e6      	bne.n	8009dbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e0e:	61ba      	str	r2, [r7, #24]
 8009e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6979      	ldr	r1, [r7, #20]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e5      	bne.n	8009dee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e2a:	bf00      	nop
 8009e2c:	373c      	adds	r7, #60	@ 0x3c
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b095      	sub	sp, #84	@ 0x54
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e6      	bne.n	8009e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	4b1e      	ldr	r3, [pc, #120]	@ (8009f00 <UART_EndRxTransfer+0xc8>)
 8009e86:	4013      	ands	r3, r2
 8009e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e5      	bne.n	8009e72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d118      	bne.n	8009ee0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f023 0310 	bic.w	r3, r3, #16
 8009ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6979      	ldr	r1, [r7, #20]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e6      	bne.n	8009eae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ef4:	bf00      	nop
 8009ef6:	3754      	adds	r7, #84	@ 0x54
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	effffffe 	.word	0xeffffffe

08009f04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b09c      	sub	sp, #112	@ 0x70
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f1a:	d071      	beq.n	800a000 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e6      	bne.n	8009f24 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e5      	bne.n	8009f56 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	623b      	str	r3, [r7, #32]
   return(result);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e5      	bne.n	8009f8a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d118      	bne.n	800a000 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0310 	bic.w	r3, r3, #16
 8009fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69b9      	ldr	r1, [r7, #24]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a002:	2200      	movs	r2, #0
 800a004:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d107      	bne.n	800a01e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a014:	4619      	mov	r1, r3
 800a016:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a018:	f7fe fdf4 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a01c:	e002      	b.n	800a024 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a01e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a020:	f000 fcaa 	bl	800a978 <HAL_UART_RxCpltCallback>
}
 800a024:	bf00      	nop
 800a026:	3770      	adds	r7, #112	@ 0x70
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a038:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a044:	2b01      	cmp	r3, #1
 800a046:	d109      	bne.n	800a05c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	4619      	mov	r1, r3
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7fe fdd5 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a05a:	e002      	b.n	800a062 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7fe fdbd 	bl	8008bdc <HAL_UART_RxHalfCpltCallback>
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b086      	sub	sp, #24
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a076:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a07e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a086:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a092:	2b80      	cmp	r3, #128	@ 0x80
 800a094:	d109      	bne.n	800a0aa <UART_DMAError+0x40>
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	2b21      	cmp	r3, #33	@ 0x21
 800a09a:	d106      	bne.n	800a0aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a0a4:	6978      	ldr	r0, [r7, #20]
 800a0a6:	f7ff fe85 	bl	8009db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b4:	2b40      	cmp	r3, #64	@ 0x40
 800a0b6:	d109      	bne.n	800a0cc <UART_DMAError+0x62>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b22      	cmp	r3, #34	@ 0x22
 800a0bc:	d106      	bne.n	800a0cc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a0c6:	6978      	ldr	r0, [r7, #20]
 800a0c8:	f7ff feb6 	bl	8009e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0d2:	f043 0210 	orr.w	r2, r3, #16
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f7fe fd87 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0e2:	bf00      	nop
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7fe fd71 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a116:	b480      	push	{r7}
 800a118:	b08f      	sub	sp, #60	@ 0x3c
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a124:	2b21      	cmp	r3, #33	@ 0x21
 800a126:	d14c      	bne.n	800a1c2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a12e:	b29b      	uxth	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d132      	bne.n	800a19a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	61fb      	str	r3, [r7, #28]
   return(result);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a148:	637b      	str	r3, [r7, #52]	@ 0x34
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a154:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e6      	bne.n	800a134 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	60bb      	str	r3, [r7, #8]
   return(result);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6979      	ldr	r1, [r7, #20]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	613b      	str	r3, [r7, #16]
   return(result);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a198:	e013      	b.n	800a1c2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19e:	781a      	ldrb	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a1c2:	bf00      	nop
 800a1c4:	373c      	adds	r7, #60	@ 0x3c
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b091      	sub	sp, #68	@ 0x44
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1dc:	2b21      	cmp	r3, #33	@ 0x21
 800a1de:	d151      	bne.n	800a284 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d132      	bne.n	800a252 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a200:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a20c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e6      	bne.n	800a1ec <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23c:	61fb      	str	r3, [r7, #28]
 800a23e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	617b      	str	r3, [r7, #20]
   return(result);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e6      	bne.n	800a21e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a250:	e018      	b.n	800a284 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a266:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a26c:	1c9a      	adds	r2, r3, #2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a284:	bf00      	nop
 800a286:	3744      	adds	r7, #68	@ 0x44
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b091      	sub	sp, #68	@ 0x44
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a29e:	2b21      	cmp	r3, #33	@ 0x21
 800a2a0:	d160      	bne.n	800a364 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a2aa:	e057      	b.n	800a35c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d133      	bne.n	800a320 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3308      	adds	r3, #8
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e5      	bne.n	800a2b8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	69b9      	ldr	r1, [r7, #24]
 800a310:	69fa      	ldr	r2, [r7, #28]
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	617b      	str	r3, [r7, #20]
   return(result);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e6      	bne.n	800a2ec <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a31e:	e021      	b.n	800a364 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d013      	beq.n	800a356 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a356:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a358:	3b01      	subs	r3, #1
 800a35a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a35c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1a4      	bne.n	800a2ac <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a362:	e7ff      	b.n	800a364 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a364:	bf00      	nop
 800a366:	3744      	adds	r7, #68	@ 0x44
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a370:	b480      	push	{r7}
 800a372:	b091      	sub	sp, #68	@ 0x44
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a37e:	2b21      	cmp	r3, #33	@ 0x21
 800a380:	d165      	bne.n	800a44e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a388:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a38a:	e05c      	b.n	800a446 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a392:	b29b      	uxth	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d133      	bne.n	800a400 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e5      	bne.n	800a398 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e6      	bne.n	800a3cc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a3fe:	e026      	b.n	800a44e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d018      	beq.n	800a440 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a412:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a422:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a428:	1c9a      	adds	r2, r3, #2
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a434:	b29b      	uxth	r3, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a440:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a442:	3b01      	subs	r3, #1
 800a444:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a446:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d19f      	bne.n	800a38c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a44c:	e7ff      	b.n	800a44e <UART_TxISR_16BIT_FIFOEN+0xde>
 800a44e:	bf00      	nop
 800a450:	3744      	adds	r7, #68	@ 0x44
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b088      	sub	sp, #32
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e853 3f00 	ldrex	r3, [r3]
 800a46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	461a      	mov	r2, r3
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	6979      	ldr	r1, [r7, #20]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	613b      	str	r3, [r7, #16]
   return(result);
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e6      	bne.n	800a462 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa78 	bl	800a998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a8:	bf00      	nop
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d101      	bne.n	800a502 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4fe:	2302      	movs	r3, #2
 800a500:	e027      	b.n	800a552 <HAL_UARTEx_DisableFifoMode+0x66>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2224      	movs	r2, #36	@ 0x24
 800a50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0201 	bic.w	r2, r2, #1
 800a528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a572:	2302      	movs	r3, #2
 800a574:	e02d      	b.n	800a5d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2224      	movs	r2, #36	@ 0x24
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0201 	bic.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f850 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e02d      	b.n	800a64e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2224      	movs	r2, #36	@ 0x24
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0201 	bic.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f812 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a678:	e031      	b.n	800a6de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a67a:	2310      	movs	r3, #16
 800a67c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a67e:	2310      	movs	r3, #16
 800a680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	0e5b      	lsrs	r3, r3, #25
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	0f5b      	lsrs	r3, r3, #29
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	7b3a      	ldrb	r2, [r7, #12]
 800a6a6:	4911      	ldr	r1, [pc, #68]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6a8:	5c8a      	ldrb	r2, [r1, r2]
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ae:	7b3a      	ldrb	r2, [r7, #12]
 800a6b0:	490f      	ldr	r1, [pc, #60]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	7b7a      	ldrb	r2, [r7, #13]
 800a6c4:	4909      	ldr	r1, [pc, #36]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6c6:	5c8a      	ldrb	r2, [r1, r2]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6cc:	7b7a      	ldrb	r2, [r7, #13]
 800a6ce:	4908      	ldr	r1, [pc, #32]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6de:	bf00      	nop
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	0800c2e0 	.word	0x0800c2e0
 800a6f0:	0800c2e8 	.word	0x0800c2e8

0800a6f4 <standbyModeTask>:

}


void standbyModeTask(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
	if(standbyModeTriggd == true)
 800a6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a738 <standbyModeTask+0x44>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d015      	beq.n	800a72e <standbyModeTask+0x3a>
	{
		standbyModeTriggd = false;
 800a702:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <standbyModeTask+0x44>)
 800a704:	2200      	movs	r2, #0
 800a706:	701a      	strb	r2, [r3, #0]
//		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
//		{
//			Error_Handler();
//		}

	    uint16_t length = snprintf(res, 512, "Stop Mode Triggered \r\n");
 800a708:	4a0c      	ldr	r2, [pc, #48]	@ (800a73c <standbyModeTask+0x48>)
 800a70a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a70e:	480c      	ldr	r0, [pc, #48]	@ (800a740 <standbyModeTask+0x4c>)
 800a710:	f000 fc90 	bl	800b034 <sniprintf>
 800a714:	4603      	mov	r3, r0
 800a716:	80fb      	strh	r3, [r7, #6]

	    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 800a718:	2008      	movs	r0, #8
 800a71a:	f7fa f907 	bl	800492c <HAL_PWR_EnableWakeUpPin>

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a71e:	88fa      	ldrh	r2, [r7, #6]
 800a720:	2364      	movs	r3, #100	@ 0x64
 800a722:	4907      	ldr	r1, [pc, #28]	@ (800a740 <standbyModeTask+0x4c>)
 800a724:	4807      	ldr	r0, [pc, #28]	@ (800a744 <standbyModeTask+0x50>)
 800a726:	f7fd fd30 	bl	800818a <HAL_UART_Transmit>

		HAL_PWR_EnterSTANDBYMode();
 800a72a:	f7fa f981 	bl	8004a30 <HAL_PWR_EnterSTANDBYMode>

	}
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	240006e4 	.word	0x240006e4
 800a73c:	0800c254 	.word	0x0800c254
 800a740:	24000680 	.word	0x24000680
 800a744:	24000570 	.word	0x24000570

0800a748 <startSleepMode>:

void startSleepMode(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a74c:	4805      	ldr	r0, [pc, #20]	@ (800a764 <startSleepMode+0x1c>)
 800a74e:	f7fd fc41 	bl	8007fd4 <HAL_RTCEx_DeactivateWakeUpTimer>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a752:	2101      	movs	r1, #1
 800a754:	2000      	movs	r0, #0
 800a756:	f7fa f915 	bl	8004984 <HAL_PWR_EnterSLEEPMode>

	HAL_SuspendTick();
 800a75a:	f000 f81b 	bl	800a794 <HAL_SuspendTick>
}
 800a75e:	bf00      	nop
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	24000548 	.word	0x24000548

0800a768 <startStopMode>:

void startStopMode(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800a76c:	2200      	movs	r2, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	4807      	ldr	r0, [pc, #28]	@ (800a790 <startStopMode+0x28>)
 800a772:	f7fd fb9d 	bl	8007eb0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <startStopMode+0x18>
	{
		Error_Handler();
 800a77c:	f7f6 fbd4 	bl	8000f28 <Error_Handler>
	}

	HAL_SuspendTick();
 800a780:	f000 f808 	bl	800a794 <HAL_SuspendTick>

	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a784:	2101      	movs	r1, #1
 800a786:	2000      	movs	r0, #0
 800a788:	f7fa f916 	bl	80049b8 <HAL_PWR_EnterSTOPMode>
}
 800a78c:	bf00      	nop
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	24000548 	.word	0x24000548

0800a794 <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a798:	4b05      	ldr	r3, [pc, #20]	@ (800a7b0 <HAL_SuspendTick+0x1c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a04      	ldr	r2, [pc, #16]	@ (800a7b0 <HAL_SuspendTick+0x1c>)
 800a79e:	f023 0302 	bic.w	r3, r3, #2
 800a7a2:	6013      	str	r3, [r2, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	e000e010 	.word	0xe000e010

0800a7b4 <setStndMode>:
{
	return standbyModeTriggd;
}

void setStndMode(bool flag)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
	standbyModeTriggd = flag;
 800a7be:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <setStndMode+0x1c>)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	7013      	strb	r3, [r2, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	240006e4 	.word	0x240006e4

0800a7d4 <RTCInit>:

	rtcAlarmTriggered = true;
}

void RTCInit(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a7d8:	2101      	movs	r1, #1
 800a7da:	480b      	ldr	r0, [pc, #44]	@ (800a808 <RTCInit+0x34>)
 800a7dc:	f7fd fc6f 	bl	80080be <HAL_RTCEx_BKUPRead>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d008      	beq.n	800a7fc <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a7ea:	4808      	ldr	r0, [pc, #32]	@ (800a80c <RTCInit+0x38>)
 800a7ec:	f000 f814 	bl	800a818 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a7f0:	2364      	movs	r3, #100	@ 0x64
 800a7f2:	220d      	movs	r2, #13
 800a7f4:	4906      	ldr	r1, [pc, #24]	@ (800a810 <RTCInit+0x3c>)
 800a7f6:	4807      	ldr	r0, [pc, #28]	@ (800a814 <RTCInit+0x40>)
 800a7f8:	f7fd fcc7 	bl	800818a <HAL_UART_Transmit>
	}
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a7fc:	4802      	ldr	r0, [pc, #8]	@ (800a808 <RTCInit+0x34>)
 800a7fe:	f7fd fbe9 	bl	8007fd4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800a802:	bf00      	nop
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	24000548 	.word	0x24000548
 800a80c:	240000a0 	.word	0x240000a0
 800a810:	0800c26c 	.word	0x0800c26c
 800a814:	24000570 	.word	0x24000570

0800a818 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a820:	f107 030c 	add.w	r3, r7, #12
 800a824:	2200      	movs	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	605a      	str	r2, [r3, #4]
 800a82a:	609a      	str	r2, [r3, #8]
 800a82c:	60da      	str	r2, [r3, #12]
 800a82e:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	789b      	ldrb	r3, [r3, #2]
 800a840:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a842:	2300      	movs	r3, #0
 800a844:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a846:	2300      	movs	r3, #0
 800a848:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a84a:	2300      	movs	r3, #0
 800a84c:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	78db      	ldrb	r3, [r3, #3]
 800a852:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	795b      	ldrb	r3, [r3, #5]
 800a858:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	791b      	ldrb	r3, [r3, #4]
 800a85e:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	799b      	ldrb	r3, [r3, #6]
 800a864:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a866:	f107 030c 	add.w	r3, r7, #12
 800a86a:	2200      	movs	r2, #0
 800a86c:	4619      	mov	r1, r3
 800a86e:	480d      	ldr	r0, [pc, #52]	@ (800a8a4 <setRTCData+0x8c>)
 800a870:	f7fc ff40 	bl	80076f4 <HAL_RTC_SetTime>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10f      	bne.n	800a89a <setRTCData+0x82>
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	2200      	movs	r2, #0
 800a880:	4619      	mov	r1, r3
 800a882:	4808      	ldr	r0, [pc, #32]	@ (800a8a4 <setRTCData+0x8c>)
 800a884:	f7fd f830 	bl	80078e8 <HAL_RTC_SetDate>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a88e:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a892:	2101      	movs	r1, #1
 800a894:	4803      	ldr	r0, [pc, #12]	@ (800a8a4 <setRTCData+0x8c>)
 800a896:	f7fd fbfa 	bl	800808e <HAL_RTCEx_BKUPWrite>
	}
}
 800a89a:	bf00      	nop
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	24000548 	.word	0x24000548

0800a8a8 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a8b0:	f107 0308 	add.w	r3, r7, #8
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4811      	ldr	r0, [pc, #68]	@ (800a900 <getRTCData+0x58>)
 800a8ba:	f7fc ffb9 	bl	8007830 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a8be:	f107 031c 	add.w	r3, r7, #28
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	480e      	ldr	r0, [pc, #56]	@ (800a900 <getRTCData+0x58>)
 800a8c8:	f7fd f896 	bl	80079f8 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a8cc:	7fba      	ldrb	r2, [r7, #30]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a8d2:	7f3a      	ldrb	r2, [r7, #28]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a8d8:	7f7a      	ldrb	r2, [r7, #29]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a8de:	7ffa      	ldrb	r2, [r7, #31]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a8e4:	7a3a      	ldrb	r2, [r7, #8]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a8ea:	7a7a      	ldrb	r2, [r7, #9]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a8f0:	7aba      	ldrb	r2, [r7, #10]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	709a      	strb	r2, [r3, #2]
}
 800a8f6:	bf00      	nop
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	24000548 	.word	0x24000548

0800a904 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08c      	sub	sp, #48	@ 0x30
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a90c:	f107 0308 	add.w	r3, r7, #8
 800a910:	2228      	movs	r2, #40	@ 0x28
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fc04 	bl	800b122 <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	789b      	ldrb	r3, [r3, #2]
 800a92a:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a934:	2300      	movs	r3, #0
 800a936:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a938:	2300      	movs	r3, #0
 800a93a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800a940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a944:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	78db      	ldrb	r3, [r3, #3]
 800a94a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800a94e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a952:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a954:	f107 0308 	add.w	r3, r7, #8
 800a958:	2200      	movs	r2, #0
 800a95a:	4619      	mov	r1, r3
 800a95c:	4805      	ldr	r0, [pc, #20]	@ (800a974 <setRTCAlarm+0x70>)
 800a95e:	f7fd f899 	bl	8007a94 <HAL_RTC_SetAlarm_IT>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <setRTCAlarm+0x68>
	{
		Error_Handler();
 800a968:	f7f6 fade 	bl	8000f28 <Error_Handler>
	}
}
 800a96c:	bf00      	nop
 800a96e:	3730      	adds	r7, #48	@ 0x30
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	24000548 	.word	0x24000548

0800a978 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800a980:	4b04      	ldr	r3, [pc, #16]	@ (800a994 <HAL_UART_RxCpltCallback+0x1c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]

	fptr();
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4798      	blx	r3
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	240006e8 	.word	0x240006e8

0800a998 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]

}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a9b4:	4a04      	ldr	r2, [pc, #16]	@ (800a9c8 <uartInit+0x1c>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6013      	str	r3, [r2, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	240006e8 	.word	0x240006e8

0800a9cc <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	4803      	ldr	r0, [pc, #12]	@ (800a9e8 <receptionItrOn+0x1c>)
 800a9da:	f7fd fcf9 	bl	80083d0 <HAL_UART_Receive_DMA>
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	24000570 	.word	0x24000570

0800a9ec <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a9f0:	4b07      	ldr	r3, [pc, #28]	@ (800aa10 <debugRxCallback+0x24>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b0d      	cmp	r3, #13
 800a9f6:	d102      	bne.n	800a9fe <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a9f8:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <debugRxCallback+0x28>)
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a9fe:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <debugRxCallback+0x2c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4903      	ldr	r1, [pc, #12]	@ (800aa10 <debugRxCallback+0x24>)
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 f888 	bl	800ab1a <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800aa0a:	bf00      	nop
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	240006ec 	.word	0x240006ec
 800aa14:	240006f4 	.word	0x240006f4
 800aa18:	240006f0 	.word	0x240006f0

0800aa1c <debugUartInit>:
{

}

void debugUartInit(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800aa22:	4b0a      	ldr	r3, [pc, #40]	@ (800aa4c <debugUartInit+0x30>)
 800aa24:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800aa26:	4b0a      	ldr	r3, [pc, #40]	@ (800aa50 <debugUartInit+0x34>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f839 	bl	800aaa8 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff ffb8 	bl	800a9ac <uartInit>

	receptionItrOn(&data);
 800aa3c:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <debugUartInit+0x38>)
 800aa3e:	f7ff ffc5 	bl	800a9cc <receptionItrOn>
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800a9ed 	.word	0x0800a9ed
 800aa50:	240006f0 	.word	0x240006f0
 800aa54:	240006ec 	.word	0x240006ec

0800aa58 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800aa5c:	4b03      	ldr	r3, [pc, #12]	@ (800aa6c <getCmdReceivedFlag+0x14>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	240006f4 	.word	0x240006f4

0800aa70 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800aa7a:	4a04      	ldr	r2, [pc, #16]	@ (800aa8c <setCmdReceivedFlag+0x1c>)
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	7013      	strb	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	240006f4 	.word	0x240006f4

0800aa90 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800aa90:	b480      	push	{r7}
 800aa92:	af00      	add	r7, sp, #0
	return rxBuffer;
 800aa94:	4b03      	ldr	r3, [pc, #12]	@ (800aaa4 <getRxBuffer+0x14>)
 800aa96:	681b      	ldr	r3, [r3, #0]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	240006f0 	.word	0x240006f0

0800aaa8 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	807b      	strh	r3, [r7, #2]
 800aab4:	4613      	mov	r3, r2
 800aab6:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	883a      	ldrh	r2, [r7, #0]
 800aacc:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	887a      	ldrh	r2, [r7, #2]
 800aad2:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800aad4:	887b      	ldrh	r3, [r7, #2]
 800aad6:	883a      	ldrh	r2, [r7, #0]
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 f8ad 	bl	800ac3c <malloc>
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68d8      	ldr	r0, [r3, #12]
 800aafc:	887b      	ldrh	r3, [r7, #2]
 800aafe:	883a      	ldrh	r2, [r7, #0]
 800ab00:	fb02 f303 	mul.w	r3, r2, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	2100      	movs	r1, #0
 800ab08:	f000 fb0b 	bl	800b122 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800ab24:	2303      	movs	r3, #3
 800ab26:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	889b      	ldrh	r3, [r3, #4]
 800ab34:	89ba      	ldrh	r2, [r7, #12]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d301      	bcc.n	800ab3e <circularBufferEnqueue+0x24>
    {
        next = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	89ba      	ldrh	r2, [r7, #12]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d02b      	beq.n	800aba0 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	8812      	ldrh	r2, [r2, #0]
 800ab50:	4611      	mov	r1, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	88d2      	ldrh	r2, [r2, #6]
 800ab56:	fb01 f202 	mul.w	r2, r1, r2
 800ab5a:	1898      	adds	r0, r3, r2
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	88db      	ldrh	r3, [r3, #6]
 800ab60:	461a      	mov	r2, r3
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	f000 fbc5 	bl	800b2f2 <memcpy>
 800ab68:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d017      	beq.n	800aba0 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	89ba      	ldrh	r2, [r7, #12]
 800ab74:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800ab76:	2302      	movs	r3, #2
 800ab78:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	889b      	ldrh	r3, [r3, #4]
 800ab84:	4413      	add	r3, r2
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	8852      	ldrh	r2, [r2, #2]
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	8892      	ldrh	r2, [r2, #4]
 800ab90:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab94:	fb01 f202 	mul.w	r2, r1, r2
 800ab98:	1a9b      	subs	r3, r3, r2
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800abb4:	2305      	movs	r3, #5
 800abb6:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	885a      	ldrh	r2, [r3, #2]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d032      	beq.n	800ac2a <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	885b      	ldrh	r3, [r3, #2]
 800abc8:	3301      	adds	r3, #1
 800abca:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	889b      	ldrh	r3, [r3, #4]
 800abd0:	89ba      	ldrh	r2, [r7, #12]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d301      	bcc.n	800abda <circularBufferDequeue+0x30>
        {
            next = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	8852      	ldrh	r2, [r2, #2]
 800abe2:	4611      	mov	r1, r2
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	88d2      	ldrh	r2, [r2, #6]
 800abe8:	fb01 f202 	mul.w	r2, r1, r2
 800abec:	1899      	adds	r1, r3, r2
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	88db      	ldrh	r3, [r3, #6]
 800abf2:	461a      	mov	r2, r3
 800abf4:	6838      	ldr	r0, [r7, #0]
 800abf6:	f000 fb7c 	bl	800b2f2 <memcpy>

        cBuff->tail = next;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	89ba      	ldrh	r2, [r7, #12]
 800abfe:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	889b      	ldrh	r3, [r3, #4]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	8852      	ldrh	r2, [r2, #2]
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	8892      	ldrh	r2, [r2, #4]
 800ac16:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac1a:	fb01 f202 	mul.w	r2, r1, r2
 800ac1e:	1a9b      	subs	r3, r3, r2
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ac26:	2304      	movs	r3, #4
 800ac28:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <atoi>:
 800ac34:	220a      	movs	r2, #10
 800ac36:	2100      	movs	r1, #0
 800ac38:	f000 b930 	b.w	800ae9c <strtol>

0800ac3c <malloc>:
 800ac3c:	4b02      	ldr	r3, [pc, #8]	@ (800ac48 <malloc+0xc>)
 800ac3e:	4601      	mov	r1, r0
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f000 b825 	b.w	800ac90 <_malloc_r>
 800ac46:	bf00      	nop
 800ac48:	240000b4 	.word	0x240000b4

0800ac4c <sbrk_aligned>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ac8c <sbrk_aligned+0x40>)
 800ac50:	460c      	mov	r4, r1
 800ac52:	6831      	ldr	r1, [r6, #0]
 800ac54:	4605      	mov	r5, r0
 800ac56:	b911      	cbnz	r1, 800ac5e <sbrk_aligned+0x12>
 800ac58:	f000 fafc 	bl	800b254 <_sbrk_r>
 800ac5c:	6030      	str	r0, [r6, #0]
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4628      	mov	r0, r5
 800ac62:	f000 faf7 	bl	800b254 <_sbrk_r>
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	d103      	bne.n	800ac72 <sbrk_aligned+0x26>
 800ac6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac6e:	4620      	mov	r0, r4
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	1cc4      	adds	r4, r0, #3
 800ac74:	f024 0403 	bic.w	r4, r4, #3
 800ac78:	42a0      	cmp	r0, r4
 800ac7a:	d0f8      	beq.n	800ac6e <sbrk_aligned+0x22>
 800ac7c:	1a21      	subs	r1, r4, r0
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f000 fae8 	bl	800b254 <_sbrk_r>
 800ac84:	3001      	adds	r0, #1
 800ac86:	d1f2      	bne.n	800ac6e <sbrk_aligned+0x22>
 800ac88:	e7ef      	b.n	800ac6a <sbrk_aligned+0x1e>
 800ac8a:	bf00      	nop
 800ac8c:	240006f8 	.word	0x240006f8

0800ac90 <_malloc_r>:
 800ac90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac94:	1ccd      	adds	r5, r1, #3
 800ac96:	f025 0503 	bic.w	r5, r5, #3
 800ac9a:	3508      	adds	r5, #8
 800ac9c:	2d0c      	cmp	r5, #12
 800ac9e:	bf38      	it	cc
 800aca0:	250c      	movcc	r5, #12
 800aca2:	2d00      	cmp	r5, #0
 800aca4:	4606      	mov	r6, r0
 800aca6:	db01      	blt.n	800acac <_malloc_r+0x1c>
 800aca8:	42a9      	cmp	r1, r5
 800acaa:	d904      	bls.n	800acb6 <_malloc_r+0x26>
 800acac:	230c      	movs	r3, #12
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	2000      	movs	r0, #0
 800acb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad8c <_malloc_r+0xfc>
 800acba:	f000 f869 	bl	800ad90 <__malloc_lock>
 800acbe:	f8d8 3000 	ldr.w	r3, [r8]
 800acc2:	461c      	mov	r4, r3
 800acc4:	bb44      	cbnz	r4, 800ad18 <_malloc_r+0x88>
 800acc6:	4629      	mov	r1, r5
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff ffbf 	bl	800ac4c <sbrk_aligned>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	4604      	mov	r4, r0
 800acd2:	d158      	bne.n	800ad86 <_malloc_r+0xf6>
 800acd4:	f8d8 4000 	ldr.w	r4, [r8]
 800acd8:	4627      	mov	r7, r4
 800acda:	2f00      	cmp	r7, #0
 800acdc:	d143      	bne.n	800ad66 <_malloc_r+0xd6>
 800acde:	2c00      	cmp	r4, #0
 800ace0:	d04b      	beq.n	800ad7a <_malloc_r+0xea>
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	4639      	mov	r1, r7
 800ace6:	4630      	mov	r0, r6
 800ace8:	eb04 0903 	add.w	r9, r4, r3
 800acec:	f000 fab2 	bl	800b254 <_sbrk_r>
 800acf0:	4581      	cmp	r9, r0
 800acf2:	d142      	bne.n	800ad7a <_malloc_r+0xea>
 800acf4:	6821      	ldr	r1, [r4, #0]
 800acf6:	1a6d      	subs	r5, r5, r1
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ffa6 	bl	800ac4c <sbrk_aligned>
 800ad00:	3001      	adds	r0, #1
 800ad02:	d03a      	beq.n	800ad7a <_malloc_r+0xea>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	442b      	add	r3, r5
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	bb62      	cbnz	r2, 800ad6c <_malloc_r+0xdc>
 800ad12:	f8c8 7000 	str.w	r7, [r8]
 800ad16:	e00f      	b.n	800ad38 <_malloc_r+0xa8>
 800ad18:	6822      	ldr	r2, [r4, #0]
 800ad1a:	1b52      	subs	r2, r2, r5
 800ad1c:	d420      	bmi.n	800ad60 <_malloc_r+0xd0>
 800ad1e:	2a0b      	cmp	r2, #11
 800ad20:	d917      	bls.n	800ad52 <_malloc_r+0xc2>
 800ad22:	1961      	adds	r1, r4, r5
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	6025      	str	r5, [r4, #0]
 800ad28:	bf18      	it	ne
 800ad2a:	6059      	strne	r1, [r3, #4]
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	bf08      	it	eq
 800ad30:	f8c8 1000 	streq.w	r1, [r8]
 800ad34:	5162      	str	r2, [r4, r5]
 800ad36:	604b      	str	r3, [r1, #4]
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 f82f 	bl	800ad9c <__malloc_unlock>
 800ad3e:	f104 000b 	add.w	r0, r4, #11
 800ad42:	1d23      	adds	r3, r4, #4
 800ad44:	f020 0007 	bic.w	r0, r0, #7
 800ad48:	1ac2      	subs	r2, r0, r3
 800ad4a:	bf1c      	itt	ne
 800ad4c:	1a1b      	subne	r3, r3, r0
 800ad4e:	50a3      	strne	r3, [r4, r2]
 800ad50:	e7af      	b.n	800acb2 <_malloc_r+0x22>
 800ad52:	6862      	ldr	r2, [r4, #4]
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	bf0c      	ite	eq
 800ad58:	f8c8 2000 	streq.w	r2, [r8]
 800ad5c:	605a      	strne	r2, [r3, #4]
 800ad5e:	e7eb      	b.n	800ad38 <_malloc_r+0xa8>
 800ad60:	4623      	mov	r3, r4
 800ad62:	6864      	ldr	r4, [r4, #4]
 800ad64:	e7ae      	b.n	800acc4 <_malloc_r+0x34>
 800ad66:	463c      	mov	r4, r7
 800ad68:	687f      	ldr	r7, [r7, #4]
 800ad6a:	e7b6      	b.n	800acda <_malloc_r+0x4a>
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	d1fb      	bne.n	800ad6c <_malloc_r+0xdc>
 800ad74:	2300      	movs	r3, #0
 800ad76:	6053      	str	r3, [r2, #4]
 800ad78:	e7de      	b.n	800ad38 <_malloc_r+0xa8>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	6033      	str	r3, [r6, #0]
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f000 f80c 	bl	800ad9c <__malloc_unlock>
 800ad84:	e794      	b.n	800acb0 <_malloc_r+0x20>
 800ad86:	6005      	str	r5, [r0, #0]
 800ad88:	e7d6      	b.n	800ad38 <_malloc_r+0xa8>
 800ad8a:	bf00      	nop
 800ad8c:	240006fc 	.word	0x240006fc

0800ad90 <__malloc_lock>:
 800ad90:	4801      	ldr	r0, [pc, #4]	@ (800ad98 <__malloc_lock+0x8>)
 800ad92:	f000 baac 	b.w	800b2ee <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	24000840 	.word	0x24000840

0800ad9c <__malloc_unlock>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	@ (800ada4 <__malloc_unlock+0x8>)
 800ad9e:	f000 baa7 	b.w	800b2f0 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	24000840 	.word	0x24000840

0800ada8 <_strtol_l.constprop.0>:
 800ada8:	2b24      	cmp	r3, #36	@ 0x24
 800adaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adae:	4686      	mov	lr, r0
 800adb0:	4690      	mov	r8, r2
 800adb2:	d801      	bhi.n	800adb8 <_strtol_l.constprop.0+0x10>
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d106      	bne.n	800adc6 <_strtol_l.constprop.0+0x1e>
 800adb8:	f000 fa6e 	bl	800b298 <__errno>
 800adbc:	2316      	movs	r3, #22
 800adbe:	6003      	str	r3, [r0, #0]
 800adc0:	2000      	movs	r0, #0
 800adc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc6:	4834      	ldr	r0, [pc, #208]	@ (800ae98 <_strtol_l.constprop.0+0xf0>)
 800adc8:	460d      	mov	r5, r1
 800adca:	462a      	mov	r2, r5
 800adcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800add0:	5d06      	ldrb	r6, [r0, r4]
 800add2:	f016 0608 	ands.w	r6, r6, #8
 800add6:	d1f8      	bne.n	800adca <_strtol_l.constprop.0+0x22>
 800add8:	2c2d      	cmp	r4, #45	@ 0x2d
 800adda:	d12d      	bne.n	800ae38 <_strtol_l.constprop.0+0x90>
 800addc:	782c      	ldrb	r4, [r5, #0]
 800adde:	2601      	movs	r6, #1
 800ade0:	1c95      	adds	r5, r2, #2
 800ade2:	f033 0210 	bics.w	r2, r3, #16
 800ade6:	d109      	bne.n	800adfc <_strtol_l.constprop.0+0x54>
 800ade8:	2c30      	cmp	r4, #48	@ 0x30
 800adea:	d12a      	bne.n	800ae42 <_strtol_l.constprop.0+0x9a>
 800adec:	782a      	ldrb	r2, [r5, #0]
 800adee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adf2:	2a58      	cmp	r2, #88	@ 0x58
 800adf4:	d125      	bne.n	800ae42 <_strtol_l.constprop.0+0x9a>
 800adf6:	786c      	ldrb	r4, [r5, #1]
 800adf8:	2310      	movs	r3, #16
 800adfa:	3502      	adds	r5, #2
 800adfc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae00:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae04:	2200      	movs	r2, #0
 800ae06:	fbbc f9f3 	udiv	r9, ip, r3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae14:	2f09      	cmp	r7, #9
 800ae16:	d81b      	bhi.n	800ae50 <_strtol_l.constprop.0+0xa8>
 800ae18:	463c      	mov	r4, r7
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	dd27      	ble.n	800ae6e <_strtol_l.constprop.0+0xc6>
 800ae1e:	1c57      	adds	r7, r2, #1
 800ae20:	d007      	beq.n	800ae32 <_strtol_l.constprop.0+0x8a>
 800ae22:	4581      	cmp	r9, r0
 800ae24:	d320      	bcc.n	800ae68 <_strtol_l.constprop.0+0xc0>
 800ae26:	d101      	bne.n	800ae2c <_strtol_l.constprop.0+0x84>
 800ae28:	45a2      	cmp	sl, r4
 800ae2a:	db1d      	blt.n	800ae68 <_strtol_l.constprop.0+0xc0>
 800ae2c:	fb00 4003 	mla	r0, r0, r3, r4
 800ae30:	2201      	movs	r2, #1
 800ae32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae36:	e7eb      	b.n	800ae10 <_strtol_l.constprop.0+0x68>
 800ae38:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae3a:	bf04      	itt	eq
 800ae3c:	782c      	ldrbeq	r4, [r5, #0]
 800ae3e:	1c95      	addeq	r5, r2, #2
 800ae40:	e7cf      	b.n	800ade2 <_strtol_l.constprop.0+0x3a>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1da      	bne.n	800adfc <_strtol_l.constprop.0+0x54>
 800ae46:	2c30      	cmp	r4, #48	@ 0x30
 800ae48:	bf0c      	ite	eq
 800ae4a:	2308      	moveq	r3, #8
 800ae4c:	230a      	movne	r3, #10
 800ae4e:	e7d5      	b.n	800adfc <_strtol_l.constprop.0+0x54>
 800ae50:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae54:	2f19      	cmp	r7, #25
 800ae56:	d801      	bhi.n	800ae5c <_strtol_l.constprop.0+0xb4>
 800ae58:	3c37      	subs	r4, #55	@ 0x37
 800ae5a:	e7de      	b.n	800ae1a <_strtol_l.constprop.0+0x72>
 800ae5c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae60:	2f19      	cmp	r7, #25
 800ae62:	d804      	bhi.n	800ae6e <_strtol_l.constprop.0+0xc6>
 800ae64:	3c57      	subs	r4, #87	@ 0x57
 800ae66:	e7d8      	b.n	800ae1a <_strtol_l.constprop.0+0x72>
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6c:	e7e1      	b.n	800ae32 <_strtol_l.constprop.0+0x8a>
 800ae6e:	1c53      	adds	r3, r2, #1
 800ae70:	d108      	bne.n	800ae84 <_strtol_l.constprop.0+0xdc>
 800ae72:	2322      	movs	r3, #34	@ 0x22
 800ae74:	f8ce 3000 	str.w	r3, [lr]
 800ae78:	4660      	mov	r0, ip
 800ae7a:	f1b8 0f00 	cmp.w	r8, #0
 800ae7e:	d0a0      	beq.n	800adc2 <_strtol_l.constprop.0+0x1a>
 800ae80:	1e69      	subs	r1, r5, #1
 800ae82:	e006      	b.n	800ae92 <_strtol_l.constprop.0+0xea>
 800ae84:	b106      	cbz	r6, 800ae88 <_strtol_l.constprop.0+0xe0>
 800ae86:	4240      	negs	r0, r0
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	d099      	beq.n	800adc2 <_strtol_l.constprop.0+0x1a>
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	d1f6      	bne.n	800ae80 <_strtol_l.constprop.0+0xd8>
 800ae92:	f8c8 1000 	str.w	r1, [r8]
 800ae96:	e794      	b.n	800adc2 <_strtol_l.constprop.0+0x1a>
 800ae98:	0800c2f1 	.word	0x0800c2f1

0800ae9c <strtol>:
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	460a      	mov	r2, r1
 800aea0:	4601      	mov	r1, r0
 800aea2:	4802      	ldr	r0, [pc, #8]	@ (800aeac <strtol+0x10>)
 800aea4:	6800      	ldr	r0, [r0, #0]
 800aea6:	f7ff bf7f 	b.w	800ada8 <_strtol_l.constprop.0>
 800aeaa:	bf00      	nop
 800aeac:	240000b4 	.word	0x240000b4

0800aeb0 <std>:
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aebe:	6083      	str	r3, [r0, #8]
 800aec0:	8181      	strh	r1, [r0, #12]
 800aec2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aec4:	81c2      	strh	r2, [r0, #14]
 800aec6:	6183      	str	r3, [r0, #24]
 800aec8:	4619      	mov	r1, r3
 800aeca:	2208      	movs	r2, #8
 800aecc:	305c      	adds	r0, #92	@ 0x5c
 800aece:	f000 f928 	bl	800b122 <memset>
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <std+0x58>)
 800aed4:	6263      	str	r3, [r4, #36]	@ 0x24
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <std+0x5c>)
 800aed8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeda:	4b0d      	ldr	r3, [pc, #52]	@ (800af10 <std+0x60>)
 800aedc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aede:	4b0d      	ldr	r3, [pc, #52]	@ (800af14 <std+0x64>)
 800aee0:	6323      	str	r3, [r4, #48]	@ 0x30
 800aee2:	4b0d      	ldr	r3, [pc, #52]	@ (800af18 <std+0x68>)
 800aee4:	6224      	str	r4, [r4, #32]
 800aee6:	429c      	cmp	r4, r3
 800aee8:	d006      	beq.n	800aef8 <std+0x48>
 800aeea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeee:	4294      	cmp	r4, r2
 800aef0:	d002      	beq.n	800aef8 <std+0x48>
 800aef2:	33d0      	adds	r3, #208	@ 0xd0
 800aef4:	429c      	cmp	r4, r3
 800aef6:	d105      	bne.n	800af04 <std+0x54>
 800aef8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af00:	f000 b9f4 	b.w	800b2ec <__retarget_lock_init_recursive>
 800af04:	bd10      	pop	{r4, pc}
 800af06:	bf00      	nop
 800af08:	0800b09d 	.word	0x0800b09d
 800af0c:	0800b0bf 	.word	0x0800b0bf
 800af10:	0800b0f7 	.word	0x0800b0f7
 800af14:	0800b11b 	.word	0x0800b11b
 800af18:	24000700 	.word	0x24000700

0800af1c <stdio_exit_handler>:
 800af1c:	4a02      	ldr	r2, [pc, #8]	@ (800af28 <stdio_exit_handler+0xc>)
 800af1e:	4903      	ldr	r1, [pc, #12]	@ (800af2c <stdio_exit_handler+0x10>)
 800af20:	4803      	ldr	r0, [pc, #12]	@ (800af30 <stdio_exit_handler+0x14>)
 800af22:	f000 b869 	b.w	800aff8 <_fwalk_sglue>
 800af26:	bf00      	nop
 800af28:	240000a8 	.word	0x240000a8
 800af2c:	0800bab5 	.word	0x0800bab5
 800af30:	240000b8 	.word	0x240000b8

0800af34 <cleanup_stdio>:
 800af34:	6841      	ldr	r1, [r0, #4]
 800af36:	4b0c      	ldr	r3, [pc, #48]	@ (800af68 <cleanup_stdio+0x34>)
 800af38:	4299      	cmp	r1, r3
 800af3a:	b510      	push	{r4, lr}
 800af3c:	4604      	mov	r4, r0
 800af3e:	d001      	beq.n	800af44 <cleanup_stdio+0x10>
 800af40:	f000 fdb8 	bl	800bab4 <_fflush_r>
 800af44:	68a1      	ldr	r1, [r4, #8]
 800af46:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <cleanup_stdio+0x38>)
 800af48:	4299      	cmp	r1, r3
 800af4a:	d002      	beq.n	800af52 <cleanup_stdio+0x1e>
 800af4c:	4620      	mov	r0, r4
 800af4e:	f000 fdb1 	bl	800bab4 <_fflush_r>
 800af52:	68e1      	ldr	r1, [r4, #12]
 800af54:	4b06      	ldr	r3, [pc, #24]	@ (800af70 <cleanup_stdio+0x3c>)
 800af56:	4299      	cmp	r1, r3
 800af58:	d004      	beq.n	800af64 <cleanup_stdio+0x30>
 800af5a:	4620      	mov	r0, r4
 800af5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af60:	f000 bda8 	b.w	800bab4 <_fflush_r>
 800af64:	bd10      	pop	{r4, pc}
 800af66:	bf00      	nop
 800af68:	24000700 	.word	0x24000700
 800af6c:	24000768 	.word	0x24000768
 800af70:	240007d0 	.word	0x240007d0

0800af74 <global_stdio_init.part.0>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4b0b      	ldr	r3, [pc, #44]	@ (800afa4 <global_stdio_init.part.0+0x30>)
 800af78:	4c0b      	ldr	r4, [pc, #44]	@ (800afa8 <global_stdio_init.part.0+0x34>)
 800af7a:	4a0c      	ldr	r2, [pc, #48]	@ (800afac <global_stdio_init.part.0+0x38>)
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	4620      	mov	r0, r4
 800af80:	2200      	movs	r2, #0
 800af82:	2104      	movs	r1, #4
 800af84:	f7ff ff94 	bl	800aeb0 <std>
 800af88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af8c:	2201      	movs	r2, #1
 800af8e:	2109      	movs	r1, #9
 800af90:	f7ff ff8e 	bl	800aeb0 <std>
 800af94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af98:	2202      	movs	r2, #2
 800af9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9e:	2112      	movs	r1, #18
 800afa0:	f7ff bf86 	b.w	800aeb0 <std>
 800afa4:	24000838 	.word	0x24000838
 800afa8:	24000700 	.word	0x24000700
 800afac:	0800af1d 	.word	0x0800af1d

0800afb0 <__sfp_lock_acquire>:
 800afb0:	4801      	ldr	r0, [pc, #4]	@ (800afb8 <__sfp_lock_acquire+0x8>)
 800afb2:	f000 b99c 	b.w	800b2ee <__retarget_lock_acquire_recursive>
 800afb6:	bf00      	nop
 800afb8:	24000841 	.word	0x24000841

0800afbc <__sfp_lock_release>:
 800afbc:	4801      	ldr	r0, [pc, #4]	@ (800afc4 <__sfp_lock_release+0x8>)
 800afbe:	f000 b997 	b.w	800b2f0 <__retarget_lock_release_recursive>
 800afc2:	bf00      	nop
 800afc4:	24000841 	.word	0x24000841

0800afc8 <__sinit>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	4604      	mov	r4, r0
 800afcc:	f7ff fff0 	bl	800afb0 <__sfp_lock_acquire>
 800afd0:	6a23      	ldr	r3, [r4, #32]
 800afd2:	b11b      	cbz	r3, 800afdc <__sinit+0x14>
 800afd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd8:	f7ff bff0 	b.w	800afbc <__sfp_lock_release>
 800afdc:	4b04      	ldr	r3, [pc, #16]	@ (800aff0 <__sinit+0x28>)
 800afde:	6223      	str	r3, [r4, #32]
 800afe0:	4b04      	ldr	r3, [pc, #16]	@ (800aff4 <__sinit+0x2c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1f5      	bne.n	800afd4 <__sinit+0xc>
 800afe8:	f7ff ffc4 	bl	800af74 <global_stdio_init.part.0>
 800afec:	e7f2      	b.n	800afd4 <__sinit+0xc>
 800afee:	bf00      	nop
 800aff0:	0800af35 	.word	0x0800af35
 800aff4:	24000838 	.word	0x24000838

0800aff8 <_fwalk_sglue>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	4607      	mov	r7, r0
 800affe:	4688      	mov	r8, r1
 800b000:	4614      	mov	r4, r2
 800b002:	2600      	movs	r6, #0
 800b004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b008:	f1b9 0901 	subs.w	r9, r9, #1
 800b00c:	d505      	bpl.n	800b01a <_fwalk_sglue+0x22>
 800b00e:	6824      	ldr	r4, [r4, #0]
 800b010:	2c00      	cmp	r4, #0
 800b012:	d1f7      	bne.n	800b004 <_fwalk_sglue+0xc>
 800b014:	4630      	mov	r0, r6
 800b016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d907      	bls.n	800b030 <_fwalk_sglue+0x38>
 800b020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b024:	3301      	adds	r3, #1
 800b026:	d003      	beq.n	800b030 <_fwalk_sglue+0x38>
 800b028:	4629      	mov	r1, r5
 800b02a:	4638      	mov	r0, r7
 800b02c:	47c0      	blx	r8
 800b02e:	4306      	orrs	r6, r0
 800b030:	3568      	adds	r5, #104	@ 0x68
 800b032:	e7e9      	b.n	800b008 <_fwalk_sglue+0x10>

0800b034 <sniprintf>:
 800b034:	b40c      	push	{r2, r3}
 800b036:	b530      	push	{r4, r5, lr}
 800b038:	4b17      	ldr	r3, [pc, #92]	@ (800b098 <sniprintf+0x64>)
 800b03a:	1e0c      	subs	r4, r1, #0
 800b03c:	681d      	ldr	r5, [r3, #0]
 800b03e:	b09d      	sub	sp, #116	@ 0x74
 800b040:	da08      	bge.n	800b054 <sniprintf+0x20>
 800b042:	238b      	movs	r3, #139	@ 0x8b
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	f04f 30ff 	mov.w	r0, #4294967295
 800b04a:	b01d      	add	sp, #116	@ 0x74
 800b04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b050:	b002      	add	sp, #8
 800b052:	4770      	bx	lr
 800b054:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b058:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b05c:	bf14      	ite	ne
 800b05e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b062:	4623      	moveq	r3, r4
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b06c:	9002      	str	r0, [sp, #8]
 800b06e:	9006      	str	r0, [sp, #24]
 800b070:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b074:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b076:	ab21      	add	r3, sp, #132	@ 0x84
 800b078:	a902      	add	r1, sp, #8
 800b07a:	4628      	mov	r0, r5
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	f000 fa0b 	bl	800b498 <_svfiprintf_r>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	bfbc      	itt	lt
 800b086:	238b      	movlt	r3, #139	@ 0x8b
 800b088:	602b      	strlt	r3, [r5, #0]
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	d0dd      	beq.n	800b04a <sniprintf+0x16>
 800b08e:	9b02      	ldr	r3, [sp, #8]
 800b090:	2200      	movs	r2, #0
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	e7d9      	b.n	800b04a <sniprintf+0x16>
 800b096:	bf00      	nop
 800b098:	240000b4 	.word	0x240000b4

0800b09c <__sread>:
 800b09c:	b510      	push	{r4, lr}
 800b09e:	460c      	mov	r4, r1
 800b0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a4:	f000 f8c4 	bl	800b230 <_read_r>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	bfab      	itete	ge
 800b0ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b0b0:	181b      	addge	r3, r3, r0
 800b0b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0b6:	bfac      	ite	ge
 800b0b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0ba:	81a3      	strhlt	r3, [r4, #12]
 800b0bc:	bd10      	pop	{r4, pc}

0800b0be <__swrite>:
 800b0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c2:	461f      	mov	r7, r3
 800b0c4:	898b      	ldrh	r3, [r1, #12]
 800b0c6:	05db      	lsls	r3, r3, #23
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4616      	mov	r6, r2
 800b0ce:	d505      	bpl.n	800b0dc <__swrite+0x1e>
 800b0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f000 f898 	bl	800b20c <_lseek_r>
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f2:	f000 b8bf 	b.w	800b274 <_write_r>

0800b0f6 <__sseek>:
 800b0f6:	b510      	push	{r4, lr}
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fe:	f000 f885 	bl	800b20c <_lseek_r>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	bf15      	itete	ne
 800b108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b10a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b10e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b112:	81a3      	strheq	r3, [r4, #12]
 800b114:	bf18      	it	ne
 800b116:	81a3      	strhne	r3, [r4, #12]
 800b118:	bd10      	pop	{r4, pc}

0800b11a <__sclose>:
 800b11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11e:	f000 b865 	b.w	800b1ec <_close_r>

0800b122 <memset>:
 800b122:	4402      	add	r2, r0
 800b124:	4603      	mov	r3, r0
 800b126:	4293      	cmp	r3, r2
 800b128:	d100      	bne.n	800b12c <memset+0xa>
 800b12a:	4770      	bx	lr
 800b12c:	f803 1b01 	strb.w	r1, [r3], #1
 800b130:	e7f9      	b.n	800b126 <memset+0x4>
	...

0800b134 <strtok>:
 800b134:	4b16      	ldr	r3, [pc, #88]	@ (800b190 <strtok+0x5c>)
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	681f      	ldr	r7, [r3, #0]
 800b13c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b13e:	4605      	mov	r5, r0
 800b140:	460e      	mov	r6, r1
 800b142:	b9ec      	cbnz	r4, 800b180 <strtok+0x4c>
 800b144:	2050      	movs	r0, #80	@ 0x50
 800b146:	f7ff fd79 	bl	800ac3c <malloc>
 800b14a:	4602      	mov	r2, r0
 800b14c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b14e:	b920      	cbnz	r0, 800b15a <strtok+0x26>
 800b150:	4b10      	ldr	r3, [pc, #64]	@ (800b194 <strtok+0x60>)
 800b152:	4811      	ldr	r0, [pc, #68]	@ (800b198 <strtok+0x64>)
 800b154:	215b      	movs	r1, #91	@ 0x5b
 800b156:	f000 f8db 	bl	800b310 <__assert_func>
 800b15a:	e9c0 4400 	strd	r4, r4, [r0]
 800b15e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b162:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b166:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b16a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b16e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b172:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b176:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b17a:	6184      	str	r4, [r0, #24]
 800b17c:	7704      	strb	r4, [r0, #28]
 800b17e:	6244      	str	r4, [r0, #36]	@ 0x24
 800b180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b182:	4631      	mov	r1, r6
 800b184:	4628      	mov	r0, r5
 800b186:	2301      	movs	r3, #1
 800b188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b18c:	f000 b806 	b.w	800b19c <__strtok_r>
 800b190:	240000b4 	.word	0x240000b4
 800b194:	0800c3f1 	.word	0x0800c3f1
 800b198:	0800c408 	.word	0x0800c408

0800b19c <__strtok_r>:
 800b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b908      	cbnz	r0, 800b1a6 <__strtok_r+0xa>
 800b1a2:	6814      	ldr	r4, [r2, #0]
 800b1a4:	b144      	cbz	r4, 800b1b8 <__strtok_r+0x1c>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b1b2:	b91e      	cbnz	r6, 800b1bc <__strtok_r+0x20>
 800b1b4:	b965      	cbnz	r5, 800b1d0 <__strtok_r+0x34>
 800b1b6:	6015      	str	r5, [r2, #0]
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	e005      	b.n	800b1c8 <__strtok_r+0x2c>
 800b1bc:	42b5      	cmp	r5, r6
 800b1be:	d1f6      	bne.n	800b1ae <__strtok_r+0x12>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1f0      	bne.n	800b1a6 <__strtok_r+0xa>
 800b1c4:	6014      	str	r4, [r2, #0]
 800b1c6:	7003      	strb	r3, [r0, #0]
 800b1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	e00c      	b.n	800b1e8 <__strtok_r+0x4c>
 800b1ce:	b915      	cbnz	r5, 800b1d6 <__strtok_r+0x3a>
 800b1d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b1da:	42ab      	cmp	r3, r5
 800b1dc:	d1f7      	bne.n	800b1ce <__strtok_r+0x32>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0f3      	beq.n	800b1ca <__strtok_r+0x2e>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b1e8:	6014      	str	r4, [r2, #0]
 800b1ea:	e7ed      	b.n	800b1c8 <__strtok_r+0x2c>

0800b1ec <_close_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	@ (800b208 <_close_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f5 fff0 	bl	80011dc <_close>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_close_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_close_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	2400083c 	.word	0x2400083c

0800b20c <_lseek_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	@ (800b22c <_lseek_r+0x20>)
 800b210:	4604      	mov	r4, r0
 800b212:	4608      	mov	r0, r1
 800b214:	4611      	mov	r1, r2
 800b216:	2200      	movs	r2, #0
 800b218:	602a      	str	r2, [r5, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	f7f6 f805 	bl	800122a <_lseek>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_lseek_r+0x1e>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_lseek_r+0x1e>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	2400083c 	.word	0x2400083c

0800b230 <_read_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d07      	ldr	r5, [pc, #28]	@ (800b250 <_read_r+0x20>)
 800b234:	4604      	mov	r4, r0
 800b236:	4608      	mov	r0, r1
 800b238:	4611      	mov	r1, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f7f5 ff93 	bl	800116a <_read>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_read_r+0x1e>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_read_r+0x1e>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	2400083c 	.word	0x2400083c

0800b254 <_sbrk_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d06      	ldr	r5, [pc, #24]	@ (800b270 <_sbrk_r+0x1c>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	602b      	str	r3, [r5, #0]
 800b260:	f7f5 fff0 	bl	8001244 <_sbrk>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_sbrk_r+0x1a>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_sbrk_r+0x1a>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	2400083c 	.word	0x2400083c

0800b274 <_write_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	@ (800b294 <_write_r+0x20>)
 800b278:	4604      	mov	r4, r0
 800b27a:	4608      	mov	r0, r1
 800b27c:	4611      	mov	r1, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	602a      	str	r2, [r5, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f7f5 ff8e 	bl	80011a4 <_write>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_write_r+0x1e>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_write_r+0x1e>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	2400083c 	.word	0x2400083c

0800b298 <__errno>:
 800b298:	4b01      	ldr	r3, [pc, #4]	@ (800b2a0 <__errno+0x8>)
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	240000b4 	.word	0x240000b4

0800b2a4 <__libc_init_array>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	4d0d      	ldr	r5, [pc, #52]	@ (800b2dc <__libc_init_array+0x38>)
 800b2a8:	4c0d      	ldr	r4, [pc, #52]	@ (800b2e0 <__libc_init_array+0x3c>)
 800b2aa:	1b64      	subs	r4, r4, r5
 800b2ac:	10a4      	asrs	r4, r4, #2
 800b2ae:	2600      	movs	r6, #0
 800b2b0:	42a6      	cmp	r6, r4
 800b2b2:	d109      	bne.n	800b2c8 <__libc_init_array+0x24>
 800b2b4:	4d0b      	ldr	r5, [pc, #44]	@ (800b2e4 <__libc_init_array+0x40>)
 800b2b6:	4c0c      	ldr	r4, [pc, #48]	@ (800b2e8 <__libc_init_array+0x44>)
 800b2b8:	f000 ff2a 	bl	800c110 <_init>
 800b2bc:	1b64      	subs	r4, r4, r5
 800b2be:	10a4      	asrs	r4, r4, #2
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	42a6      	cmp	r6, r4
 800b2c4:	d105      	bne.n	800b2d2 <__libc_init_array+0x2e>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2cc:	4798      	blx	r3
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	e7ee      	b.n	800b2b0 <__libc_init_array+0xc>
 800b2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d6:	4798      	blx	r3
 800b2d8:	3601      	adds	r6, #1
 800b2da:	e7f2      	b.n	800b2c2 <__libc_init_array+0x1e>
 800b2dc:	0800c4dc 	.word	0x0800c4dc
 800b2e0:	0800c4dc 	.word	0x0800c4dc
 800b2e4:	0800c4dc 	.word	0x0800c4dc
 800b2e8:	0800c4e0 	.word	0x0800c4e0

0800b2ec <__retarget_lock_init_recursive>:
 800b2ec:	4770      	bx	lr

0800b2ee <__retarget_lock_acquire_recursive>:
 800b2ee:	4770      	bx	lr

0800b2f0 <__retarget_lock_release_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <memcpy>:
 800b2f2:	440a      	add	r2, r1
 800b2f4:	4291      	cmp	r1, r2
 800b2f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2fa:	d100      	bne.n	800b2fe <memcpy+0xc>
 800b2fc:	4770      	bx	lr
 800b2fe:	b510      	push	{r4, lr}
 800b300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b308:	4291      	cmp	r1, r2
 800b30a:	d1f9      	bne.n	800b300 <memcpy+0xe>
 800b30c:	bd10      	pop	{r4, pc}
	...

0800b310 <__assert_func>:
 800b310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b312:	4614      	mov	r4, r2
 800b314:	461a      	mov	r2, r3
 800b316:	4b09      	ldr	r3, [pc, #36]	@ (800b33c <__assert_func+0x2c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4605      	mov	r5, r0
 800b31c:	68d8      	ldr	r0, [r3, #12]
 800b31e:	b954      	cbnz	r4, 800b336 <__assert_func+0x26>
 800b320:	4b07      	ldr	r3, [pc, #28]	@ (800b340 <__assert_func+0x30>)
 800b322:	461c      	mov	r4, r3
 800b324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b328:	9100      	str	r1, [sp, #0]
 800b32a:	462b      	mov	r3, r5
 800b32c:	4905      	ldr	r1, [pc, #20]	@ (800b344 <__assert_func+0x34>)
 800b32e:	f000 fbe9 	bl	800bb04 <fiprintf>
 800b332:	f000 fc13 	bl	800bb5c <abort>
 800b336:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <__assert_func+0x38>)
 800b338:	e7f4      	b.n	800b324 <__assert_func+0x14>
 800b33a:	bf00      	nop
 800b33c:	240000b4 	.word	0x240000b4
 800b340:	0800c49d 	.word	0x0800c49d
 800b344:	0800c46f 	.word	0x0800c46f
 800b348:	0800c462 	.word	0x0800c462

0800b34c <_free_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4605      	mov	r5, r0
 800b350:	2900      	cmp	r1, #0
 800b352:	d041      	beq.n	800b3d8 <_free_r+0x8c>
 800b354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b358:	1f0c      	subs	r4, r1, #4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfb8      	it	lt
 800b35e:	18e4      	addlt	r4, r4, r3
 800b360:	f7ff fd16 	bl	800ad90 <__malloc_lock>
 800b364:	4a1d      	ldr	r2, [pc, #116]	@ (800b3dc <_free_r+0x90>)
 800b366:	6813      	ldr	r3, [r2, #0]
 800b368:	b933      	cbnz	r3, 800b378 <_free_r+0x2c>
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	6014      	str	r4, [r2, #0]
 800b36e:	4628      	mov	r0, r5
 800b370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b374:	f7ff bd12 	b.w	800ad9c <__malloc_unlock>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d908      	bls.n	800b38e <_free_r+0x42>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	1821      	adds	r1, r4, r0
 800b380:	428b      	cmp	r3, r1
 800b382:	bf01      	itttt	eq
 800b384:	6819      	ldreq	r1, [r3, #0]
 800b386:	685b      	ldreq	r3, [r3, #4]
 800b388:	1809      	addeq	r1, r1, r0
 800b38a:	6021      	streq	r1, [r4, #0]
 800b38c:	e7ed      	b.n	800b36a <_free_r+0x1e>
 800b38e:	461a      	mov	r2, r3
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	b10b      	cbz	r3, 800b398 <_free_r+0x4c>
 800b394:	42a3      	cmp	r3, r4
 800b396:	d9fa      	bls.n	800b38e <_free_r+0x42>
 800b398:	6811      	ldr	r1, [r2, #0]
 800b39a:	1850      	adds	r0, r2, r1
 800b39c:	42a0      	cmp	r0, r4
 800b39e:	d10b      	bne.n	800b3b8 <_free_r+0x6c>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	4401      	add	r1, r0
 800b3a4:	1850      	adds	r0, r2, r1
 800b3a6:	4283      	cmp	r3, r0
 800b3a8:	6011      	str	r1, [r2, #0]
 800b3aa:	d1e0      	bne.n	800b36e <_free_r+0x22>
 800b3ac:	6818      	ldr	r0, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	6053      	str	r3, [r2, #4]
 800b3b2:	4408      	add	r0, r1
 800b3b4:	6010      	str	r0, [r2, #0]
 800b3b6:	e7da      	b.n	800b36e <_free_r+0x22>
 800b3b8:	d902      	bls.n	800b3c0 <_free_r+0x74>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	e7d6      	b.n	800b36e <_free_r+0x22>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf04      	itt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	6063      	str	r3, [r4, #4]
 800b3ce:	bf04      	itt	eq
 800b3d0:	1809      	addeq	r1, r1, r0
 800b3d2:	6021      	streq	r1, [r4, #0]
 800b3d4:	6054      	str	r4, [r2, #4]
 800b3d6:	e7ca      	b.n	800b36e <_free_r+0x22>
 800b3d8:	bd38      	pop	{r3, r4, r5, pc}
 800b3da:	bf00      	nop
 800b3dc:	240006fc 	.word	0x240006fc

0800b3e0 <__ssputs_r>:
 800b3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e4:	688e      	ldr	r6, [r1, #8]
 800b3e6:	461f      	mov	r7, r3
 800b3e8:	42be      	cmp	r6, r7
 800b3ea:	680b      	ldr	r3, [r1, #0]
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	4690      	mov	r8, r2
 800b3f2:	d82d      	bhi.n	800b450 <__ssputs_r+0x70>
 800b3f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3fc:	d026      	beq.n	800b44c <__ssputs_r+0x6c>
 800b3fe:	6965      	ldr	r5, [r4, #20]
 800b400:	6909      	ldr	r1, [r1, #16]
 800b402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b406:	eba3 0901 	sub.w	r9, r3, r1
 800b40a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b40e:	1c7b      	adds	r3, r7, #1
 800b410:	444b      	add	r3, r9
 800b412:	106d      	asrs	r5, r5, #1
 800b414:	429d      	cmp	r5, r3
 800b416:	bf38      	it	cc
 800b418:	461d      	movcc	r5, r3
 800b41a:	0553      	lsls	r3, r2, #21
 800b41c:	d527      	bpl.n	800b46e <__ssputs_r+0x8e>
 800b41e:	4629      	mov	r1, r5
 800b420:	f7ff fc36 	bl	800ac90 <_malloc_r>
 800b424:	4606      	mov	r6, r0
 800b426:	b360      	cbz	r0, 800b482 <__ssputs_r+0xa2>
 800b428:	6921      	ldr	r1, [r4, #16]
 800b42a:	464a      	mov	r2, r9
 800b42c:	f7ff ff61 	bl	800b2f2 <memcpy>
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	6126      	str	r6, [r4, #16]
 800b43e:	6165      	str	r5, [r4, #20]
 800b440:	444e      	add	r6, r9
 800b442:	eba5 0509 	sub.w	r5, r5, r9
 800b446:	6026      	str	r6, [r4, #0]
 800b448:	60a5      	str	r5, [r4, #8]
 800b44a:	463e      	mov	r6, r7
 800b44c:	42be      	cmp	r6, r7
 800b44e:	d900      	bls.n	800b452 <__ssputs_r+0x72>
 800b450:	463e      	mov	r6, r7
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	4632      	mov	r2, r6
 800b456:	4641      	mov	r1, r8
 800b458:	f000 fb66 	bl	800bb28 <memmove>
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	1b9b      	subs	r3, r3, r6
 800b460:	60a3      	str	r3, [r4, #8]
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	4433      	add	r3, r6
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46e:	462a      	mov	r2, r5
 800b470:	f000 fb7b 	bl	800bb6a <_realloc_r>
 800b474:	4606      	mov	r6, r0
 800b476:	2800      	cmp	r0, #0
 800b478:	d1e0      	bne.n	800b43c <__ssputs_r+0x5c>
 800b47a:	6921      	ldr	r1, [r4, #16]
 800b47c:	4650      	mov	r0, sl
 800b47e:	f7ff ff65 	bl	800b34c <_free_r>
 800b482:	230c      	movs	r3, #12
 800b484:	f8ca 3000 	str.w	r3, [sl]
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	e7e9      	b.n	800b46a <__ssputs_r+0x8a>
	...

0800b498 <_svfiprintf_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4698      	mov	r8, r3
 800b49e:	898b      	ldrh	r3, [r1, #12]
 800b4a0:	061b      	lsls	r3, r3, #24
 800b4a2:	b09d      	sub	sp, #116	@ 0x74
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	d510      	bpl.n	800b4ce <_svfiprintf_r+0x36>
 800b4ac:	690b      	ldr	r3, [r1, #16]
 800b4ae:	b973      	cbnz	r3, 800b4ce <_svfiprintf_r+0x36>
 800b4b0:	2140      	movs	r1, #64	@ 0x40
 800b4b2:	f7ff fbed 	bl	800ac90 <_malloc_r>
 800b4b6:	6028      	str	r0, [r5, #0]
 800b4b8:	6128      	str	r0, [r5, #16]
 800b4ba:	b930      	cbnz	r0, 800b4ca <_svfiprintf_r+0x32>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	b01d      	add	sp, #116	@ 0x74
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	2340      	movs	r3, #64	@ 0x40
 800b4cc:	616b      	str	r3, [r5, #20]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d2:	2320      	movs	r3, #32
 800b4d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4dc:	2330      	movs	r3, #48	@ 0x30
 800b4de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b67c <_svfiprintf_r+0x1e4>
 800b4e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4e6:	f04f 0901 	mov.w	r9, #1
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	469a      	mov	sl, r3
 800b4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f2:	b10a      	cbz	r2, 800b4f8 <_svfiprintf_r+0x60>
 800b4f4:	2a25      	cmp	r2, #37	@ 0x25
 800b4f6:	d1f9      	bne.n	800b4ec <_svfiprintf_r+0x54>
 800b4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4fc:	d00b      	beq.n	800b516 <_svfiprintf_r+0x7e>
 800b4fe:	465b      	mov	r3, fp
 800b500:	4622      	mov	r2, r4
 800b502:	4629      	mov	r1, r5
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff ff6b 	bl	800b3e0 <__ssputs_r>
 800b50a:	3001      	adds	r0, #1
 800b50c:	f000 80a7 	beq.w	800b65e <_svfiprintf_r+0x1c6>
 800b510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b512:	445a      	add	r2, fp
 800b514:	9209      	str	r2, [sp, #36]	@ 0x24
 800b516:	f89a 3000 	ldrb.w	r3, [sl]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 809f 	beq.w	800b65e <_svfiprintf_r+0x1c6>
 800b520:	2300      	movs	r3, #0
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b52a:	f10a 0a01 	add.w	sl, sl, #1
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	9307      	str	r3, [sp, #28]
 800b532:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b536:	931a      	str	r3, [sp, #104]	@ 0x68
 800b538:	4654      	mov	r4, sl
 800b53a:	2205      	movs	r2, #5
 800b53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b540:	484e      	ldr	r0, [pc, #312]	@ (800b67c <_svfiprintf_r+0x1e4>)
 800b542:	f7f4 fef5 	bl	8000330 <memchr>
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	b9d8      	cbnz	r0, 800b582 <_svfiprintf_r+0xea>
 800b54a:	06d0      	lsls	r0, r2, #27
 800b54c:	bf44      	itt	mi
 800b54e:	2320      	movmi	r3, #32
 800b550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b554:	0711      	lsls	r1, r2, #28
 800b556:	bf44      	itt	mi
 800b558:	232b      	movmi	r3, #43	@ 0x2b
 800b55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b55e:	f89a 3000 	ldrb.w	r3, [sl]
 800b562:	2b2a      	cmp	r3, #42	@ 0x2a
 800b564:	d015      	beq.n	800b592 <_svfiprintf_r+0xfa>
 800b566:	9a07      	ldr	r2, [sp, #28]
 800b568:	4654      	mov	r4, sl
 800b56a:	2000      	movs	r0, #0
 800b56c:	f04f 0c0a 	mov.w	ip, #10
 800b570:	4621      	mov	r1, r4
 800b572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b576:	3b30      	subs	r3, #48	@ 0x30
 800b578:	2b09      	cmp	r3, #9
 800b57a:	d94b      	bls.n	800b614 <_svfiprintf_r+0x17c>
 800b57c:	b1b0      	cbz	r0, 800b5ac <_svfiprintf_r+0x114>
 800b57e:	9207      	str	r2, [sp, #28]
 800b580:	e014      	b.n	800b5ac <_svfiprintf_r+0x114>
 800b582:	eba0 0308 	sub.w	r3, r0, r8
 800b586:	fa09 f303 	lsl.w	r3, r9, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	46a2      	mov	sl, r4
 800b590:	e7d2      	b.n	800b538 <_svfiprintf_r+0xa0>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	1d19      	adds	r1, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	9103      	str	r1, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfbb      	ittet	lt
 800b59e:	425b      	neglt	r3, r3
 800b5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a4:	9307      	strge	r3, [sp, #28]
 800b5a6:	9307      	strlt	r3, [sp, #28]
 800b5a8:	bfb8      	it	lt
 800b5aa:	9204      	strlt	r2, [sp, #16]
 800b5ac:	7823      	ldrb	r3, [r4, #0]
 800b5ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5b0:	d10a      	bne.n	800b5c8 <_svfiprintf_r+0x130>
 800b5b2:	7863      	ldrb	r3, [r4, #1]
 800b5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b6:	d132      	bne.n	800b61e <_svfiprintf_r+0x186>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	9203      	str	r2, [sp, #12]
 800b5c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5c4:	3402      	adds	r4, #2
 800b5c6:	9305      	str	r3, [sp, #20]
 800b5c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b68c <_svfiprintf_r+0x1f4>
 800b5cc:	7821      	ldrb	r1, [r4, #0]
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	f7f4 fead 	bl	8000330 <memchr>
 800b5d6:	b138      	cbz	r0, 800b5e8 <_svfiprintf_r+0x150>
 800b5d8:	9b04      	ldr	r3, [sp, #16]
 800b5da:	eba0 000a 	sub.w	r0, r0, sl
 800b5de:	2240      	movs	r2, #64	@ 0x40
 800b5e0:	4082      	lsls	r2, r0
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	3401      	adds	r4, #1
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ec:	4824      	ldr	r0, [pc, #144]	@ (800b680 <_svfiprintf_r+0x1e8>)
 800b5ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5f2:	2206      	movs	r2, #6
 800b5f4:	f7f4 fe9c 	bl	8000330 <memchr>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d036      	beq.n	800b66a <_svfiprintf_r+0x1d2>
 800b5fc:	4b21      	ldr	r3, [pc, #132]	@ (800b684 <_svfiprintf_r+0x1ec>)
 800b5fe:	bb1b      	cbnz	r3, 800b648 <_svfiprintf_r+0x1b0>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	3307      	adds	r3, #7
 800b604:	f023 0307 	bic.w	r3, r3, #7
 800b608:	3308      	adds	r3, #8
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b60e:	4433      	add	r3, r6
 800b610:	9309      	str	r3, [sp, #36]	@ 0x24
 800b612:	e76a      	b.n	800b4ea <_svfiprintf_r+0x52>
 800b614:	fb0c 3202 	mla	r2, ip, r2, r3
 800b618:	460c      	mov	r4, r1
 800b61a:	2001      	movs	r0, #1
 800b61c:	e7a8      	b.n	800b570 <_svfiprintf_r+0xd8>
 800b61e:	2300      	movs	r3, #0
 800b620:	3401      	adds	r4, #1
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	4619      	mov	r1, r3
 800b626:	f04f 0c0a 	mov.w	ip, #10
 800b62a:	4620      	mov	r0, r4
 800b62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b630:	3a30      	subs	r2, #48	@ 0x30
 800b632:	2a09      	cmp	r2, #9
 800b634:	d903      	bls.n	800b63e <_svfiprintf_r+0x1a6>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0c6      	beq.n	800b5c8 <_svfiprintf_r+0x130>
 800b63a:	9105      	str	r1, [sp, #20]
 800b63c:	e7c4      	b.n	800b5c8 <_svfiprintf_r+0x130>
 800b63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b642:	4604      	mov	r4, r0
 800b644:	2301      	movs	r3, #1
 800b646:	e7f0      	b.n	800b62a <_svfiprintf_r+0x192>
 800b648:	ab03      	add	r3, sp, #12
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	462a      	mov	r2, r5
 800b64e:	4b0e      	ldr	r3, [pc, #56]	@ (800b688 <_svfiprintf_r+0x1f0>)
 800b650:	a904      	add	r1, sp, #16
 800b652:	4638      	mov	r0, r7
 800b654:	f3af 8000 	nop.w
 800b658:	1c42      	adds	r2, r0, #1
 800b65a:	4606      	mov	r6, r0
 800b65c:	d1d6      	bne.n	800b60c <_svfiprintf_r+0x174>
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	065b      	lsls	r3, r3, #25
 800b662:	f53f af2d 	bmi.w	800b4c0 <_svfiprintf_r+0x28>
 800b666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b668:	e72c      	b.n	800b4c4 <_svfiprintf_r+0x2c>
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	462a      	mov	r2, r5
 800b670:	4b05      	ldr	r3, [pc, #20]	@ (800b688 <_svfiprintf_r+0x1f0>)
 800b672:	a904      	add	r1, sp, #16
 800b674:	4638      	mov	r0, r7
 800b676:	f000 f879 	bl	800b76c <_printf_i>
 800b67a:	e7ed      	b.n	800b658 <_svfiprintf_r+0x1c0>
 800b67c:	0800c49e 	.word	0x0800c49e
 800b680:	0800c4a8 	.word	0x0800c4a8
 800b684:	00000000 	.word	0x00000000
 800b688:	0800b3e1 	.word	0x0800b3e1
 800b68c:	0800c4a4 	.word	0x0800c4a4

0800b690 <_printf_common>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	4616      	mov	r6, r2
 800b696:	4698      	mov	r8, r3
 800b698:	688a      	ldr	r2, [r1, #8]
 800b69a:	690b      	ldr	r3, [r1, #16]
 800b69c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	bfb8      	it	lt
 800b6a4:	4613      	movlt	r3, r2
 800b6a6:	6033      	str	r3, [r6, #0]
 800b6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	b10a      	cbz	r2, 800b6b6 <_printf_common+0x26>
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	0699      	lsls	r1, r3, #26
 800b6ba:	bf42      	ittt	mi
 800b6bc:	6833      	ldrmi	r3, [r6, #0]
 800b6be:	3302      	addmi	r3, #2
 800b6c0:	6033      	strmi	r3, [r6, #0]
 800b6c2:	6825      	ldr	r5, [r4, #0]
 800b6c4:	f015 0506 	ands.w	r5, r5, #6
 800b6c8:	d106      	bne.n	800b6d8 <_printf_common+0x48>
 800b6ca:	f104 0a19 	add.w	sl, r4, #25
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	6832      	ldr	r2, [r6, #0]
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dc26      	bgt.n	800b726 <_printf_common+0x96>
 800b6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6dc:	6822      	ldr	r2, [r4, #0]
 800b6de:	3b00      	subs	r3, #0
 800b6e0:	bf18      	it	ne
 800b6e2:	2301      	movne	r3, #1
 800b6e4:	0692      	lsls	r2, r2, #26
 800b6e6:	d42b      	bmi.n	800b740 <_printf_common+0xb0>
 800b6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6ec:	4641      	mov	r1, r8
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	47c8      	blx	r9
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d01e      	beq.n	800b734 <_printf_common+0xa4>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	6922      	ldr	r2, [r4, #16]
 800b6fa:	f003 0306 	and.w	r3, r3, #6
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	bf02      	ittt	eq
 800b702:	68e5      	ldreq	r5, [r4, #12]
 800b704:	6833      	ldreq	r3, [r6, #0]
 800b706:	1aed      	subeq	r5, r5, r3
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	bf0c      	ite	eq
 800b70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b710:	2500      	movne	r5, #0
 800b712:	4293      	cmp	r3, r2
 800b714:	bfc4      	itt	gt
 800b716:	1a9b      	subgt	r3, r3, r2
 800b718:	18ed      	addgt	r5, r5, r3
 800b71a:	2600      	movs	r6, #0
 800b71c:	341a      	adds	r4, #26
 800b71e:	42b5      	cmp	r5, r6
 800b720:	d11a      	bne.n	800b758 <_printf_common+0xc8>
 800b722:	2000      	movs	r0, #0
 800b724:	e008      	b.n	800b738 <_printf_common+0xa8>
 800b726:	2301      	movs	r3, #1
 800b728:	4652      	mov	r2, sl
 800b72a:	4641      	mov	r1, r8
 800b72c:	4638      	mov	r0, r7
 800b72e:	47c8      	blx	r9
 800b730:	3001      	adds	r0, #1
 800b732:	d103      	bne.n	800b73c <_printf_common+0xac>
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	3501      	adds	r5, #1
 800b73e:	e7c6      	b.n	800b6ce <_printf_common+0x3e>
 800b740:	18e1      	adds	r1, r4, r3
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	2030      	movs	r0, #48	@ 0x30
 800b746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b74a:	4422      	add	r2, r4
 800b74c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b754:	3302      	adds	r3, #2
 800b756:	e7c7      	b.n	800b6e8 <_printf_common+0x58>
 800b758:	2301      	movs	r3, #1
 800b75a:	4622      	mov	r2, r4
 800b75c:	4641      	mov	r1, r8
 800b75e:	4638      	mov	r0, r7
 800b760:	47c8      	blx	r9
 800b762:	3001      	adds	r0, #1
 800b764:	d0e6      	beq.n	800b734 <_printf_common+0xa4>
 800b766:	3601      	adds	r6, #1
 800b768:	e7d9      	b.n	800b71e <_printf_common+0x8e>
	...

0800b76c <_printf_i>:
 800b76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	7e0f      	ldrb	r7, [r1, #24]
 800b772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b774:	2f78      	cmp	r7, #120	@ 0x78
 800b776:	4691      	mov	r9, r2
 800b778:	4680      	mov	r8, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	469a      	mov	sl, r3
 800b77e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b782:	d807      	bhi.n	800b794 <_printf_i+0x28>
 800b784:	2f62      	cmp	r7, #98	@ 0x62
 800b786:	d80a      	bhi.n	800b79e <_printf_i+0x32>
 800b788:	2f00      	cmp	r7, #0
 800b78a:	f000 80d2 	beq.w	800b932 <_printf_i+0x1c6>
 800b78e:	2f58      	cmp	r7, #88	@ 0x58
 800b790:	f000 80b9 	beq.w	800b906 <_printf_i+0x19a>
 800b794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b79c:	e03a      	b.n	800b814 <_printf_i+0xa8>
 800b79e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7a2:	2b15      	cmp	r3, #21
 800b7a4:	d8f6      	bhi.n	800b794 <_printf_i+0x28>
 800b7a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b7ac <_printf_i+0x40>)
 800b7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7ac:	0800b805 	.word	0x0800b805
 800b7b0:	0800b819 	.word	0x0800b819
 800b7b4:	0800b795 	.word	0x0800b795
 800b7b8:	0800b795 	.word	0x0800b795
 800b7bc:	0800b795 	.word	0x0800b795
 800b7c0:	0800b795 	.word	0x0800b795
 800b7c4:	0800b819 	.word	0x0800b819
 800b7c8:	0800b795 	.word	0x0800b795
 800b7cc:	0800b795 	.word	0x0800b795
 800b7d0:	0800b795 	.word	0x0800b795
 800b7d4:	0800b795 	.word	0x0800b795
 800b7d8:	0800b919 	.word	0x0800b919
 800b7dc:	0800b843 	.word	0x0800b843
 800b7e0:	0800b8d3 	.word	0x0800b8d3
 800b7e4:	0800b795 	.word	0x0800b795
 800b7e8:	0800b795 	.word	0x0800b795
 800b7ec:	0800b93b 	.word	0x0800b93b
 800b7f0:	0800b795 	.word	0x0800b795
 800b7f4:	0800b843 	.word	0x0800b843
 800b7f8:	0800b795 	.word	0x0800b795
 800b7fc:	0800b795 	.word	0x0800b795
 800b800:	0800b8db 	.word	0x0800b8db
 800b804:	6833      	ldr	r3, [r6, #0]
 800b806:	1d1a      	adds	r2, r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6032      	str	r2, [r6, #0]
 800b80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b814:	2301      	movs	r3, #1
 800b816:	e09d      	b.n	800b954 <_printf_i+0x1e8>
 800b818:	6833      	ldr	r3, [r6, #0]
 800b81a:	6820      	ldr	r0, [r4, #0]
 800b81c:	1d19      	adds	r1, r3, #4
 800b81e:	6031      	str	r1, [r6, #0]
 800b820:	0606      	lsls	r6, r0, #24
 800b822:	d501      	bpl.n	800b828 <_printf_i+0xbc>
 800b824:	681d      	ldr	r5, [r3, #0]
 800b826:	e003      	b.n	800b830 <_printf_i+0xc4>
 800b828:	0645      	lsls	r5, r0, #25
 800b82a:	d5fb      	bpl.n	800b824 <_printf_i+0xb8>
 800b82c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b830:	2d00      	cmp	r5, #0
 800b832:	da03      	bge.n	800b83c <_printf_i+0xd0>
 800b834:	232d      	movs	r3, #45	@ 0x2d
 800b836:	426d      	negs	r5, r5
 800b838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b83c:	4859      	ldr	r0, [pc, #356]	@ (800b9a4 <_printf_i+0x238>)
 800b83e:	230a      	movs	r3, #10
 800b840:	e011      	b.n	800b866 <_printf_i+0xfa>
 800b842:	6821      	ldr	r1, [r4, #0]
 800b844:	6833      	ldr	r3, [r6, #0]
 800b846:	0608      	lsls	r0, r1, #24
 800b848:	f853 5b04 	ldr.w	r5, [r3], #4
 800b84c:	d402      	bmi.n	800b854 <_printf_i+0xe8>
 800b84e:	0649      	lsls	r1, r1, #25
 800b850:	bf48      	it	mi
 800b852:	b2ad      	uxthmi	r5, r5
 800b854:	2f6f      	cmp	r7, #111	@ 0x6f
 800b856:	4853      	ldr	r0, [pc, #332]	@ (800b9a4 <_printf_i+0x238>)
 800b858:	6033      	str	r3, [r6, #0]
 800b85a:	bf14      	ite	ne
 800b85c:	230a      	movne	r3, #10
 800b85e:	2308      	moveq	r3, #8
 800b860:	2100      	movs	r1, #0
 800b862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b866:	6866      	ldr	r6, [r4, #4]
 800b868:	60a6      	str	r6, [r4, #8]
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	bfa2      	ittt	ge
 800b86e:	6821      	ldrge	r1, [r4, #0]
 800b870:	f021 0104 	bicge.w	r1, r1, #4
 800b874:	6021      	strge	r1, [r4, #0]
 800b876:	b90d      	cbnz	r5, 800b87c <_printf_i+0x110>
 800b878:	2e00      	cmp	r6, #0
 800b87a:	d04b      	beq.n	800b914 <_printf_i+0x1a8>
 800b87c:	4616      	mov	r6, r2
 800b87e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b882:	fb03 5711 	mls	r7, r3, r1, r5
 800b886:	5dc7      	ldrb	r7, [r0, r7]
 800b888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b88c:	462f      	mov	r7, r5
 800b88e:	42bb      	cmp	r3, r7
 800b890:	460d      	mov	r5, r1
 800b892:	d9f4      	bls.n	800b87e <_printf_i+0x112>
 800b894:	2b08      	cmp	r3, #8
 800b896:	d10b      	bne.n	800b8b0 <_printf_i+0x144>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	07df      	lsls	r7, r3, #31
 800b89c:	d508      	bpl.n	800b8b0 <_printf_i+0x144>
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	6861      	ldr	r1, [r4, #4]
 800b8a2:	4299      	cmp	r1, r3
 800b8a4:	bfde      	ittt	le
 800b8a6:	2330      	movle	r3, #48	@ 0x30
 800b8a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8b0:	1b92      	subs	r2, r2, r6
 800b8b2:	6122      	str	r2, [r4, #16]
 800b8b4:	f8cd a000 	str.w	sl, [sp]
 800b8b8:	464b      	mov	r3, r9
 800b8ba:	aa03      	add	r2, sp, #12
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4640      	mov	r0, r8
 800b8c0:	f7ff fee6 	bl	800b690 <_printf_common>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d14a      	bne.n	800b95e <_printf_i+0x1f2>
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	b004      	add	sp, #16
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	f043 0320 	orr.w	r3, r3, #32
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	4833      	ldr	r0, [pc, #204]	@ (800b9a8 <_printf_i+0x23c>)
 800b8dc:	2778      	movs	r7, #120	@ 0x78
 800b8de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	6831      	ldr	r1, [r6, #0]
 800b8e6:	061f      	lsls	r7, r3, #24
 800b8e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8ec:	d402      	bmi.n	800b8f4 <_printf_i+0x188>
 800b8ee:	065f      	lsls	r7, r3, #25
 800b8f0:	bf48      	it	mi
 800b8f2:	b2ad      	uxthmi	r5, r5
 800b8f4:	6031      	str	r1, [r6, #0]
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	bf44      	itt	mi
 800b8fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b8fe:	6023      	strmi	r3, [r4, #0]
 800b900:	b11d      	cbz	r5, 800b90a <_printf_i+0x19e>
 800b902:	2310      	movs	r3, #16
 800b904:	e7ac      	b.n	800b860 <_printf_i+0xf4>
 800b906:	4827      	ldr	r0, [pc, #156]	@ (800b9a4 <_printf_i+0x238>)
 800b908:	e7e9      	b.n	800b8de <_printf_i+0x172>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	f023 0320 	bic.w	r3, r3, #32
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	e7f6      	b.n	800b902 <_printf_i+0x196>
 800b914:	4616      	mov	r6, r2
 800b916:	e7bd      	b.n	800b894 <_printf_i+0x128>
 800b918:	6833      	ldr	r3, [r6, #0]
 800b91a:	6825      	ldr	r5, [r4, #0]
 800b91c:	6961      	ldr	r1, [r4, #20]
 800b91e:	1d18      	adds	r0, r3, #4
 800b920:	6030      	str	r0, [r6, #0]
 800b922:	062e      	lsls	r6, r5, #24
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	d501      	bpl.n	800b92c <_printf_i+0x1c0>
 800b928:	6019      	str	r1, [r3, #0]
 800b92a:	e002      	b.n	800b932 <_printf_i+0x1c6>
 800b92c:	0668      	lsls	r0, r5, #25
 800b92e:	d5fb      	bpl.n	800b928 <_printf_i+0x1bc>
 800b930:	8019      	strh	r1, [r3, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	6123      	str	r3, [r4, #16]
 800b936:	4616      	mov	r6, r2
 800b938:	e7bc      	b.n	800b8b4 <_printf_i+0x148>
 800b93a:	6833      	ldr	r3, [r6, #0]
 800b93c:	1d1a      	adds	r2, r3, #4
 800b93e:	6032      	str	r2, [r6, #0]
 800b940:	681e      	ldr	r6, [r3, #0]
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	2100      	movs	r1, #0
 800b946:	4630      	mov	r0, r6
 800b948:	f7f4 fcf2 	bl	8000330 <memchr>
 800b94c:	b108      	cbz	r0, 800b952 <_printf_i+0x1e6>
 800b94e:	1b80      	subs	r0, r0, r6
 800b950:	6060      	str	r0, [r4, #4]
 800b952:	6863      	ldr	r3, [r4, #4]
 800b954:	6123      	str	r3, [r4, #16]
 800b956:	2300      	movs	r3, #0
 800b958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b95c:	e7aa      	b.n	800b8b4 <_printf_i+0x148>
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	4632      	mov	r2, r6
 800b962:	4649      	mov	r1, r9
 800b964:	4640      	mov	r0, r8
 800b966:	47d0      	blx	sl
 800b968:	3001      	adds	r0, #1
 800b96a:	d0ad      	beq.n	800b8c8 <_printf_i+0x15c>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	079b      	lsls	r3, r3, #30
 800b970:	d413      	bmi.n	800b99a <_printf_i+0x22e>
 800b972:	68e0      	ldr	r0, [r4, #12]
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	4298      	cmp	r0, r3
 800b978:	bfb8      	it	lt
 800b97a:	4618      	movlt	r0, r3
 800b97c:	e7a6      	b.n	800b8cc <_printf_i+0x160>
 800b97e:	2301      	movs	r3, #1
 800b980:	4632      	mov	r2, r6
 800b982:	4649      	mov	r1, r9
 800b984:	4640      	mov	r0, r8
 800b986:	47d0      	blx	sl
 800b988:	3001      	adds	r0, #1
 800b98a:	d09d      	beq.n	800b8c8 <_printf_i+0x15c>
 800b98c:	3501      	adds	r5, #1
 800b98e:	68e3      	ldr	r3, [r4, #12]
 800b990:	9903      	ldr	r1, [sp, #12]
 800b992:	1a5b      	subs	r3, r3, r1
 800b994:	42ab      	cmp	r3, r5
 800b996:	dcf2      	bgt.n	800b97e <_printf_i+0x212>
 800b998:	e7eb      	b.n	800b972 <_printf_i+0x206>
 800b99a:	2500      	movs	r5, #0
 800b99c:	f104 0619 	add.w	r6, r4, #25
 800b9a0:	e7f5      	b.n	800b98e <_printf_i+0x222>
 800b9a2:	bf00      	nop
 800b9a4:	0800c4af 	.word	0x0800c4af
 800b9a8:	0800c4c0 	.word	0x0800c4c0

0800b9ac <__sflush_r>:
 800b9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b4:	0716      	lsls	r6, r2, #28
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d454      	bmi.n	800ba66 <__sflush_r+0xba>
 800b9bc:	684b      	ldr	r3, [r1, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dc02      	bgt.n	800b9c8 <__sflush_r+0x1c>
 800b9c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dd48      	ble.n	800ba5a <__sflush_r+0xae>
 800b9c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9ca:	2e00      	cmp	r6, #0
 800b9cc:	d045      	beq.n	800ba5a <__sflush_r+0xae>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9d4:	682f      	ldr	r7, [r5, #0]
 800b9d6:	6a21      	ldr	r1, [r4, #32]
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	d030      	beq.n	800ba3e <__sflush_r+0x92>
 800b9dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	0759      	lsls	r1, r3, #29
 800b9e2:	d505      	bpl.n	800b9f0 <__sflush_r+0x44>
 800b9e4:	6863      	ldr	r3, [r4, #4]
 800b9e6:	1ad2      	subs	r2, r2, r3
 800b9e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9ea:	b10b      	cbz	r3, 800b9f0 <__sflush_r+0x44>
 800b9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9f4:	6a21      	ldr	r1, [r4, #32]
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b0      	blx	r6
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	d106      	bne.n	800ba0e <__sflush_r+0x62>
 800ba00:	6829      	ldr	r1, [r5, #0]
 800ba02:	291d      	cmp	r1, #29
 800ba04:	d82b      	bhi.n	800ba5e <__sflush_r+0xb2>
 800ba06:	4a2a      	ldr	r2, [pc, #168]	@ (800bab0 <__sflush_r+0x104>)
 800ba08:	410a      	asrs	r2, r1
 800ba0a:	07d6      	lsls	r6, r2, #31
 800ba0c:	d427      	bmi.n	800ba5e <__sflush_r+0xb2>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	6062      	str	r2, [r4, #4]
 800ba12:	04d9      	lsls	r1, r3, #19
 800ba14:	6922      	ldr	r2, [r4, #16]
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	d504      	bpl.n	800ba24 <__sflush_r+0x78>
 800ba1a:	1c42      	adds	r2, r0, #1
 800ba1c:	d101      	bne.n	800ba22 <__sflush_r+0x76>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b903      	cbnz	r3, 800ba24 <__sflush_r+0x78>
 800ba22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba26:	602f      	str	r7, [r5, #0]
 800ba28:	b1b9      	cbz	r1, 800ba5a <__sflush_r+0xae>
 800ba2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba2e:	4299      	cmp	r1, r3
 800ba30:	d002      	beq.n	800ba38 <__sflush_r+0x8c>
 800ba32:	4628      	mov	r0, r5
 800ba34:	f7ff fc8a 	bl	800b34c <_free_r>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba3c:	e00d      	b.n	800ba5a <__sflush_r+0xae>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b0      	blx	r6
 800ba44:	4602      	mov	r2, r0
 800ba46:	1c50      	adds	r0, r2, #1
 800ba48:	d1c9      	bne.n	800b9de <__sflush_r+0x32>
 800ba4a:	682b      	ldr	r3, [r5, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0c6      	beq.n	800b9de <__sflush_r+0x32>
 800ba50:	2b1d      	cmp	r3, #29
 800ba52:	d001      	beq.n	800ba58 <__sflush_r+0xac>
 800ba54:	2b16      	cmp	r3, #22
 800ba56:	d11e      	bne.n	800ba96 <__sflush_r+0xea>
 800ba58:	602f      	str	r7, [r5, #0]
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e022      	b.n	800baa4 <__sflush_r+0xf8>
 800ba5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba62:	b21b      	sxth	r3, r3
 800ba64:	e01b      	b.n	800ba9e <__sflush_r+0xf2>
 800ba66:	690f      	ldr	r7, [r1, #16]
 800ba68:	2f00      	cmp	r7, #0
 800ba6a:	d0f6      	beq.n	800ba5a <__sflush_r+0xae>
 800ba6c:	0793      	lsls	r3, r2, #30
 800ba6e:	680e      	ldr	r6, [r1, #0]
 800ba70:	bf08      	it	eq
 800ba72:	694b      	ldreq	r3, [r1, #20]
 800ba74:	600f      	str	r7, [r1, #0]
 800ba76:	bf18      	it	ne
 800ba78:	2300      	movne	r3, #0
 800ba7a:	eba6 0807 	sub.w	r8, r6, r7
 800ba7e:	608b      	str	r3, [r1, #8]
 800ba80:	f1b8 0f00 	cmp.w	r8, #0
 800ba84:	dde9      	ble.n	800ba5a <__sflush_r+0xae>
 800ba86:	6a21      	ldr	r1, [r4, #32]
 800ba88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba8a:	4643      	mov	r3, r8
 800ba8c:	463a      	mov	r2, r7
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b0      	blx	r6
 800ba92:	2800      	cmp	r0, #0
 800ba94:	dc08      	bgt.n	800baa8 <__sflush_r+0xfc>
 800ba96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba9e:	81a3      	strh	r3, [r4, #12]
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	4407      	add	r7, r0
 800baaa:	eba8 0800 	sub.w	r8, r8, r0
 800baae:	e7e7      	b.n	800ba80 <__sflush_r+0xd4>
 800bab0:	dfbffffe 	.word	0xdfbffffe

0800bab4 <_fflush_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	690b      	ldr	r3, [r1, #16]
 800bab8:	4605      	mov	r5, r0
 800baba:	460c      	mov	r4, r1
 800babc:	b913      	cbnz	r3, 800bac4 <_fflush_r+0x10>
 800babe:	2500      	movs	r5, #0
 800bac0:	4628      	mov	r0, r5
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	b118      	cbz	r0, 800bace <_fflush_r+0x1a>
 800bac6:	6a03      	ldr	r3, [r0, #32]
 800bac8:	b90b      	cbnz	r3, 800bace <_fflush_r+0x1a>
 800baca:	f7ff fa7d 	bl	800afc8 <__sinit>
 800bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0f3      	beq.n	800babe <_fflush_r+0xa>
 800bad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bad8:	07d0      	lsls	r0, r2, #31
 800bada:	d404      	bmi.n	800bae6 <_fflush_r+0x32>
 800badc:	0599      	lsls	r1, r3, #22
 800bade:	d402      	bmi.n	800bae6 <_fflush_r+0x32>
 800bae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bae2:	f7ff fc04 	bl	800b2ee <__retarget_lock_acquire_recursive>
 800bae6:	4628      	mov	r0, r5
 800bae8:	4621      	mov	r1, r4
 800baea:	f7ff ff5f 	bl	800b9ac <__sflush_r>
 800baee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800baf0:	07da      	lsls	r2, r3, #31
 800baf2:	4605      	mov	r5, r0
 800baf4:	d4e4      	bmi.n	800bac0 <_fflush_r+0xc>
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	059b      	lsls	r3, r3, #22
 800bafa:	d4e1      	bmi.n	800bac0 <_fflush_r+0xc>
 800bafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bafe:	f7ff fbf7 	bl	800b2f0 <__retarget_lock_release_recursive>
 800bb02:	e7dd      	b.n	800bac0 <_fflush_r+0xc>

0800bb04 <fiprintf>:
 800bb04:	b40e      	push	{r1, r2, r3}
 800bb06:	b503      	push	{r0, r1, lr}
 800bb08:	4601      	mov	r1, r0
 800bb0a:	ab03      	add	r3, sp, #12
 800bb0c:	4805      	ldr	r0, [pc, #20]	@ (800bb24 <fiprintf+0x20>)
 800bb0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb12:	6800      	ldr	r0, [r0, #0]
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	f000 f87f 	bl	800bc18 <_vfiprintf_r>
 800bb1a:	b002      	add	sp, #8
 800bb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb20:	b003      	add	sp, #12
 800bb22:	4770      	bx	lr
 800bb24:	240000b4 	.word	0x240000b4

0800bb28 <memmove>:
 800bb28:	4288      	cmp	r0, r1
 800bb2a:	b510      	push	{r4, lr}
 800bb2c:	eb01 0402 	add.w	r4, r1, r2
 800bb30:	d902      	bls.n	800bb38 <memmove+0x10>
 800bb32:	4284      	cmp	r4, r0
 800bb34:	4623      	mov	r3, r4
 800bb36:	d807      	bhi.n	800bb48 <memmove+0x20>
 800bb38:	1e43      	subs	r3, r0, #1
 800bb3a:	42a1      	cmp	r1, r4
 800bb3c:	d008      	beq.n	800bb50 <memmove+0x28>
 800bb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb46:	e7f8      	b.n	800bb3a <memmove+0x12>
 800bb48:	4402      	add	r2, r0
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	428a      	cmp	r2, r1
 800bb4e:	d100      	bne.n	800bb52 <memmove+0x2a>
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb5a:	e7f7      	b.n	800bb4c <memmove+0x24>

0800bb5c <abort>:
 800bb5c:	b508      	push	{r3, lr}
 800bb5e:	2006      	movs	r0, #6
 800bb60:	f000 fa2e 	bl	800bfc0 <raise>
 800bb64:	2001      	movs	r0, #1
 800bb66:	f7f5 faf5 	bl	8001154 <_exit>

0800bb6a <_realloc_r>:
 800bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6e:	4680      	mov	r8, r0
 800bb70:	4615      	mov	r5, r2
 800bb72:	460c      	mov	r4, r1
 800bb74:	b921      	cbnz	r1, 800bb80 <_realloc_r+0x16>
 800bb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	f7ff b888 	b.w	800ac90 <_malloc_r>
 800bb80:	b92a      	cbnz	r2, 800bb8e <_realloc_r+0x24>
 800bb82:	f7ff fbe3 	bl	800b34c <_free_r>
 800bb86:	2400      	movs	r4, #0
 800bb88:	4620      	mov	r0, r4
 800bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8e:	f000 fa33 	bl	800bff8 <_malloc_usable_size_r>
 800bb92:	4285      	cmp	r5, r0
 800bb94:	4606      	mov	r6, r0
 800bb96:	d802      	bhi.n	800bb9e <_realloc_r+0x34>
 800bb98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb9c:	d8f4      	bhi.n	800bb88 <_realloc_r+0x1e>
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4640      	mov	r0, r8
 800bba2:	f7ff f875 	bl	800ac90 <_malloc_r>
 800bba6:	4607      	mov	r7, r0
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0ec      	beq.n	800bb86 <_realloc_r+0x1c>
 800bbac:	42b5      	cmp	r5, r6
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	bf28      	it	cs
 800bbb4:	4632      	movcs	r2, r6
 800bbb6:	f7ff fb9c 	bl	800b2f2 <memcpy>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4640      	mov	r0, r8
 800bbbe:	f7ff fbc5 	bl	800b34c <_free_r>
 800bbc2:	463c      	mov	r4, r7
 800bbc4:	e7e0      	b.n	800bb88 <_realloc_r+0x1e>

0800bbc6 <__sfputc_r>:
 800bbc6:	6893      	ldr	r3, [r2, #8]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	b410      	push	{r4}
 800bbce:	6093      	str	r3, [r2, #8]
 800bbd0:	da08      	bge.n	800bbe4 <__sfputc_r+0x1e>
 800bbd2:	6994      	ldr	r4, [r2, #24]
 800bbd4:	42a3      	cmp	r3, r4
 800bbd6:	db01      	blt.n	800bbdc <__sfputc_r+0x16>
 800bbd8:	290a      	cmp	r1, #10
 800bbda:	d103      	bne.n	800bbe4 <__sfputc_r+0x1e>
 800bbdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe0:	f000 b932 	b.w	800be48 <__swbuf_r>
 800bbe4:	6813      	ldr	r3, [r2, #0]
 800bbe6:	1c58      	adds	r0, r3, #1
 800bbe8:	6010      	str	r0, [r2, #0]
 800bbea:	7019      	strb	r1, [r3, #0]
 800bbec:	4608      	mov	r0, r1
 800bbee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <__sfputs_r>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	4614      	mov	r4, r2
 800bbfc:	18d5      	adds	r5, r2, r3
 800bbfe:	42ac      	cmp	r4, r5
 800bc00:	d101      	bne.n	800bc06 <__sfputs_r+0x12>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e007      	b.n	800bc16 <__sfputs_r+0x22>
 800bc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0a:	463a      	mov	r2, r7
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff ffda 	bl	800bbc6 <__sfputc_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d1f3      	bne.n	800bbfe <__sfputs_r+0xa>
 800bc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc18 <_vfiprintf_r>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	460d      	mov	r5, r1
 800bc1e:	b09d      	sub	sp, #116	@ 0x74
 800bc20:	4614      	mov	r4, r2
 800bc22:	4698      	mov	r8, r3
 800bc24:	4606      	mov	r6, r0
 800bc26:	b118      	cbz	r0, 800bc30 <_vfiprintf_r+0x18>
 800bc28:	6a03      	ldr	r3, [r0, #32]
 800bc2a:	b90b      	cbnz	r3, 800bc30 <_vfiprintf_r+0x18>
 800bc2c:	f7ff f9cc 	bl	800afc8 <__sinit>
 800bc30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc32:	07d9      	lsls	r1, r3, #31
 800bc34:	d405      	bmi.n	800bc42 <_vfiprintf_r+0x2a>
 800bc36:	89ab      	ldrh	r3, [r5, #12]
 800bc38:	059a      	lsls	r2, r3, #22
 800bc3a:	d402      	bmi.n	800bc42 <_vfiprintf_r+0x2a>
 800bc3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc3e:	f7ff fb56 	bl	800b2ee <__retarget_lock_acquire_recursive>
 800bc42:	89ab      	ldrh	r3, [r5, #12]
 800bc44:	071b      	lsls	r3, r3, #28
 800bc46:	d501      	bpl.n	800bc4c <_vfiprintf_r+0x34>
 800bc48:	692b      	ldr	r3, [r5, #16]
 800bc4a:	b99b      	cbnz	r3, 800bc74 <_vfiprintf_r+0x5c>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f000 f938 	bl	800bec4 <__swsetup_r>
 800bc54:	b170      	cbz	r0, 800bc74 <_vfiprintf_r+0x5c>
 800bc56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc58:	07dc      	lsls	r4, r3, #31
 800bc5a:	d504      	bpl.n	800bc66 <_vfiprintf_r+0x4e>
 800bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc60:	b01d      	add	sp, #116	@ 0x74
 800bc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	0598      	lsls	r0, r3, #22
 800bc6a:	d4f7      	bmi.n	800bc5c <_vfiprintf_r+0x44>
 800bc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc6e:	f7ff fb3f 	bl	800b2f0 <__retarget_lock_release_recursive>
 800bc72:	e7f3      	b.n	800bc5c <_vfiprintf_r+0x44>
 800bc74:	2300      	movs	r3, #0
 800bc76:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc78:	2320      	movs	r3, #32
 800bc7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc82:	2330      	movs	r3, #48	@ 0x30
 800bc84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be34 <_vfiprintf_r+0x21c>
 800bc88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc8c:	f04f 0901 	mov.w	r9, #1
 800bc90:	4623      	mov	r3, r4
 800bc92:	469a      	mov	sl, r3
 800bc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc98:	b10a      	cbz	r2, 800bc9e <_vfiprintf_r+0x86>
 800bc9a:	2a25      	cmp	r2, #37	@ 0x25
 800bc9c:	d1f9      	bne.n	800bc92 <_vfiprintf_r+0x7a>
 800bc9e:	ebba 0b04 	subs.w	fp, sl, r4
 800bca2:	d00b      	beq.n	800bcbc <_vfiprintf_r+0xa4>
 800bca4:	465b      	mov	r3, fp
 800bca6:	4622      	mov	r2, r4
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f7ff ffa2 	bl	800bbf4 <__sfputs_r>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f000 80a7 	beq.w	800be04 <_vfiprintf_r+0x1ec>
 800bcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb8:	445a      	add	r2, fp
 800bcba:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 809f 	beq.w	800be04 <_vfiprintf_r+0x1ec>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcd0:	f10a 0a01 	add.w	sl, sl, #1
 800bcd4:	9304      	str	r3, [sp, #16]
 800bcd6:	9307      	str	r3, [sp, #28]
 800bcd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcde:	4654      	mov	r4, sl
 800bce0:	2205      	movs	r2, #5
 800bce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce6:	4853      	ldr	r0, [pc, #332]	@ (800be34 <_vfiprintf_r+0x21c>)
 800bce8:	f7f4 fb22 	bl	8000330 <memchr>
 800bcec:	9a04      	ldr	r2, [sp, #16]
 800bcee:	b9d8      	cbnz	r0, 800bd28 <_vfiprintf_r+0x110>
 800bcf0:	06d1      	lsls	r1, r2, #27
 800bcf2:	bf44      	itt	mi
 800bcf4:	2320      	movmi	r3, #32
 800bcf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcfa:	0713      	lsls	r3, r2, #28
 800bcfc:	bf44      	itt	mi
 800bcfe:	232b      	movmi	r3, #43	@ 0x2b
 800bd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd04:	f89a 3000 	ldrb.w	r3, [sl]
 800bd08:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd0a:	d015      	beq.n	800bd38 <_vfiprintf_r+0x120>
 800bd0c:	9a07      	ldr	r2, [sp, #28]
 800bd0e:	4654      	mov	r4, sl
 800bd10:	2000      	movs	r0, #0
 800bd12:	f04f 0c0a 	mov.w	ip, #10
 800bd16:	4621      	mov	r1, r4
 800bd18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd1c:	3b30      	subs	r3, #48	@ 0x30
 800bd1e:	2b09      	cmp	r3, #9
 800bd20:	d94b      	bls.n	800bdba <_vfiprintf_r+0x1a2>
 800bd22:	b1b0      	cbz	r0, 800bd52 <_vfiprintf_r+0x13a>
 800bd24:	9207      	str	r2, [sp, #28]
 800bd26:	e014      	b.n	800bd52 <_vfiprintf_r+0x13a>
 800bd28:	eba0 0308 	sub.w	r3, r0, r8
 800bd2c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd30:	4313      	orrs	r3, r2
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	46a2      	mov	sl, r4
 800bd36:	e7d2      	b.n	800bcde <_vfiprintf_r+0xc6>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	1d19      	adds	r1, r3, #4
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	9103      	str	r1, [sp, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	bfbb      	ittet	lt
 800bd44:	425b      	neglt	r3, r3
 800bd46:	f042 0202 	orrlt.w	r2, r2, #2
 800bd4a:	9307      	strge	r3, [sp, #28]
 800bd4c:	9307      	strlt	r3, [sp, #28]
 800bd4e:	bfb8      	it	lt
 800bd50:	9204      	strlt	r2, [sp, #16]
 800bd52:	7823      	ldrb	r3, [r4, #0]
 800bd54:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd56:	d10a      	bne.n	800bd6e <_vfiprintf_r+0x156>
 800bd58:	7863      	ldrb	r3, [r4, #1]
 800bd5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd5c:	d132      	bne.n	800bdc4 <_vfiprintf_r+0x1ac>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	9203      	str	r2, [sp, #12]
 800bd66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd6a:	3402      	adds	r4, #2
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be44 <_vfiprintf_r+0x22c>
 800bd72:	7821      	ldrb	r1, [r4, #0]
 800bd74:	2203      	movs	r2, #3
 800bd76:	4650      	mov	r0, sl
 800bd78:	f7f4 fada 	bl	8000330 <memchr>
 800bd7c:	b138      	cbz	r0, 800bd8e <_vfiprintf_r+0x176>
 800bd7e:	9b04      	ldr	r3, [sp, #16]
 800bd80:	eba0 000a 	sub.w	r0, r0, sl
 800bd84:	2240      	movs	r2, #64	@ 0x40
 800bd86:	4082      	lsls	r2, r0
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	3401      	adds	r4, #1
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd92:	4829      	ldr	r0, [pc, #164]	@ (800be38 <_vfiprintf_r+0x220>)
 800bd94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd98:	2206      	movs	r2, #6
 800bd9a:	f7f4 fac9 	bl	8000330 <memchr>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d03f      	beq.n	800be22 <_vfiprintf_r+0x20a>
 800bda2:	4b26      	ldr	r3, [pc, #152]	@ (800be3c <_vfiprintf_r+0x224>)
 800bda4:	bb1b      	cbnz	r3, 800bdee <_vfiprintf_r+0x1d6>
 800bda6:	9b03      	ldr	r3, [sp, #12]
 800bda8:	3307      	adds	r3, #7
 800bdaa:	f023 0307 	bic.w	r3, r3, #7
 800bdae:	3308      	adds	r3, #8
 800bdb0:	9303      	str	r3, [sp, #12]
 800bdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb4:	443b      	add	r3, r7
 800bdb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb8:	e76a      	b.n	800bc90 <_vfiprintf_r+0x78>
 800bdba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	e7a8      	b.n	800bd16 <_vfiprintf_r+0xfe>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	3401      	adds	r4, #1
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	f04f 0c0a 	mov.w	ip, #10
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd6:	3a30      	subs	r2, #48	@ 0x30
 800bdd8:	2a09      	cmp	r2, #9
 800bdda:	d903      	bls.n	800bde4 <_vfiprintf_r+0x1cc>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d0c6      	beq.n	800bd6e <_vfiprintf_r+0x156>
 800bde0:	9105      	str	r1, [sp, #20]
 800bde2:	e7c4      	b.n	800bd6e <_vfiprintf_r+0x156>
 800bde4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde8:	4604      	mov	r4, r0
 800bdea:	2301      	movs	r3, #1
 800bdec:	e7f0      	b.n	800bdd0 <_vfiprintf_r+0x1b8>
 800bdee:	ab03      	add	r3, sp, #12
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	4b12      	ldr	r3, [pc, #72]	@ (800be40 <_vfiprintf_r+0x228>)
 800bdf6:	a904      	add	r1, sp, #16
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f3af 8000 	nop.w
 800bdfe:	4607      	mov	r7, r0
 800be00:	1c78      	adds	r0, r7, #1
 800be02:	d1d6      	bne.n	800bdb2 <_vfiprintf_r+0x19a>
 800be04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x1fe>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x1fe>
 800be10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be12:	f7ff fa6d 	bl	800b2f0 <__retarget_lock_release_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	065b      	lsls	r3, r3, #25
 800be1a:	f53f af1f 	bmi.w	800bc5c <_vfiprintf_r+0x44>
 800be1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be20:	e71e      	b.n	800bc60 <_vfiprintf_r+0x48>
 800be22:	ab03      	add	r3, sp, #12
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	462a      	mov	r2, r5
 800be28:	4b05      	ldr	r3, [pc, #20]	@ (800be40 <_vfiprintf_r+0x228>)
 800be2a:	a904      	add	r1, sp, #16
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff fc9d 	bl	800b76c <_printf_i>
 800be32:	e7e4      	b.n	800bdfe <_vfiprintf_r+0x1e6>
 800be34:	0800c49e 	.word	0x0800c49e
 800be38:	0800c4a8 	.word	0x0800c4a8
 800be3c:	00000000 	.word	0x00000000
 800be40:	0800bbf5 	.word	0x0800bbf5
 800be44:	0800c4a4 	.word	0x0800c4a4

0800be48 <__swbuf_r>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	460e      	mov	r6, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	4605      	mov	r5, r0
 800be50:	b118      	cbz	r0, 800be5a <__swbuf_r+0x12>
 800be52:	6a03      	ldr	r3, [r0, #32]
 800be54:	b90b      	cbnz	r3, 800be5a <__swbuf_r+0x12>
 800be56:	f7ff f8b7 	bl	800afc8 <__sinit>
 800be5a:	69a3      	ldr	r3, [r4, #24]
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	071a      	lsls	r2, r3, #28
 800be62:	d501      	bpl.n	800be68 <__swbuf_r+0x20>
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	b943      	cbnz	r3, 800be7a <__swbuf_r+0x32>
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 f82a 	bl	800bec4 <__swsetup_r>
 800be70:	b118      	cbz	r0, 800be7a <__swbuf_r+0x32>
 800be72:	f04f 37ff 	mov.w	r7, #4294967295
 800be76:	4638      	mov	r0, r7
 800be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	6922      	ldr	r2, [r4, #16]
 800be7e:	1a98      	subs	r0, r3, r2
 800be80:	6963      	ldr	r3, [r4, #20]
 800be82:	b2f6      	uxtb	r6, r6
 800be84:	4283      	cmp	r3, r0
 800be86:	4637      	mov	r7, r6
 800be88:	dc05      	bgt.n	800be96 <__swbuf_r+0x4e>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4628      	mov	r0, r5
 800be8e:	f7ff fe11 	bl	800bab4 <_fflush_r>
 800be92:	2800      	cmp	r0, #0
 800be94:	d1ed      	bne.n	800be72 <__swbuf_r+0x2a>
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	3b01      	subs	r3, #1
 800be9a:	60a3      	str	r3, [r4, #8]
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	6022      	str	r2, [r4, #0]
 800bea2:	701e      	strb	r6, [r3, #0]
 800bea4:	6962      	ldr	r2, [r4, #20]
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d004      	beq.n	800beb6 <__swbuf_r+0x6e>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	07db      	lsls	r3, r3, #31
 800beb0:	d5e1      	bpl.n	800be76 <__swbuf_r+0x2e>
 800beb2:	2e0a      	cmp	r6, #10
 800beb4:	d1df      	bne.n	800be76 <__swbuf_r+0x2e>
 800beb6:	4621      	mov	r1, r4
 800beb8:	4628      	mov	r0, r5
 800beba:	f7ff fdfb 	bl	800bab4 <_fflush_r>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d0d9      	beq.n	800be76 <__swbuf_r+0x2e>
 800bec2:	e7d6      	b.n	800be72 <__swbuf_r+0x2a>

0800bec4 <__swsetup_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <__swsetup_r+0xa8>)
 800bec8:	4605      	mov	r5, r0
 800beca:	6818      	ldr	r0, [r3, #0]
 800becc:	460c      	mov	r4, r1
 800bece:	b118      	cbz	r0, 800bed8 <__swsetup_r+0x14>
 800bed0:	6a03      	ldr	r3, [r0, #32]
 800bed2:	b90b      	cbnz	r3, 800bed8 <__swsetup_r+0x14>
 800bed4:	f7ff f878 	bl	800afc8 <__sinit>
 800bed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bedc:	0719      	lsls	r1, r3, #28
 800bede:	d422      	bmi.n	800bf26 <__swsetup_r+0x62>
 800bee0:	06da      	lsls	r2, r3, #27
 800bee2:	d407      	bmi.n	800bef4 <__swsetup_r+0x30>
 800bee4:	2209      	movs	r2, #9
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	f04f 30ff 	mov.w	r0, #4294967295
 800bef2:	e033      	b.n	800bf5c <__swsetup_r+0x98>
 800bef4:	0758      	lsls	r0, r3, #29
 800bef6:	d512      	bpl.n	800bf1e <__swsetup_r+0x5a>
 800bef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800befa:	b141      	cbz	r1, 800bf0e <__swsetup_r+0x4a>
 800befc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d002      	beq.n	800bf0a <__swsetup_r+0x46>
 800bf04:	4628      	mov	r0, r5
 800bf06:	f7ff fa21 	bl	800b34c <_free_r>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	2300      	movs	r3, #0
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	f043 0308 	orr.w	r3, r3, #8
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	b94b      	cbnz	r3, 800bf3e <__swsetup_r+0x7a>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf34:	d003      	beq.n	800bf3e <__swsetup_r+0x7a>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f000 f88b 	bl	800c054 <__smakebuf_r>
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	f013 0201 	ands.w	r2, r3, #1
 800bf46:	d00a      	beq.n	800bf5e <__swsetup_r+0x9a>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	60a2      	str	r2, [r4, #8]
 800bf4c:	6962      	ldr	r2, [r4, #20]
 800bf4e:	4252      	negs	r2, r2
 800bf50:	61a2      	str	r2, [r4, #24]
 800bf52:	6922      	ldr	r2, [r4, #16]
 800bf54:	b942      	cbnz	r2, 800bf68 <__swsetup_r+0xa4>
 800bf56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf5a:	d1c5      	bne.n	800bee8 <__swsetup_r+0x24>
 800bf5c:	bd38      	pop	{r3, r4, r5, pc}
 800bf5e:	0799      	lsls	r1, r3, #30
 800bf60:	bf58      	it	pl
 800bf62:	6962      	ldrpl	r2, [r4, #20]
 800bf64:	60a2      	str	r2, [r4, #8]
 800bf66:	e7f4      	b.n	800bf52 <__swsetup_r+0x8e>
 800bf68:	2000      	movs	r0, #0
 800bf6a:	e7f7      	b.n	800bf5c <__swsetup_r+0x98>
 800bf6c:	240000b4 	.word	0x240000b4

0800bf70 <_raise_r>:
 800bf70:	291f      	cmp	r1, #31
 800bf72:	b538      	push	{r3, r4, r5, lr}
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	d904      	bls.n	800bf84 <_raise_r+0x14>
 800bf7a:	2316      	movs	r3, #22
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf86:	b112      	cbz	r2, 800bf8e <_raise_r+0x1e>
 800bf88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf8c:	b94b      	cbnz	r3, 800bfa2 <_raise_r+0x32>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f830 	bl	800bff4 <_getpid_r>
 800bf94:	4622      	mov	r2, r4
 800bf96:	4601      	mov	r1, r0
 800bf98:	4628      	mov	r0, r5
 800bf9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf9e:	f000 b817 	b.w	800bfd0 <_kill_r>
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d00a      	beq.n	800bfbc <_raise_r+0x4c>
 800bfa6:	1c59      	adds	r1, r3, #1
 800bfa8:	d103      	bne.n	800bfb2 <_raise_r+0x42>
 800bfaa:	2316      	movs	r3, #22
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7e7      	b.n	800bf82 <_raise_r+0x12>
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bfb8:	4620      	mov	r0, r4
 800bfba:	4798      	blx	r3
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e7e0      	b.n	800bf82 <_raise_r+0x12>

0800bfc0 <raise>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	@ (800bfcc <raise+0xc>)
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	f7ff bfd3 	b.w	800bf70 <_raise_r>
 800bfca:	bf00      	nop
 800bfcc:	240000b4 	.word	0x240000b4

0800bfd0 <_kill_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d07      	ldr	r5, [pc, #28]	@ (800bff0 <_kill_r+0x20>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	4611      	mov	r1, r2
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	f7f5 f8a9 	bl	8001134 <_kill>
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	d102      	bne.n	800bfec <_kill_r+0x1c>
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	b103      	cbz	r3, 800bfec <_kill_r+0x1c>
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	bf00      	nop
 800bff0:	2400083c 	.word	0x2400083c

0800bff4 <_getpid_r>:
 800bff4:	f7f5 b896 	b.w	8001124 <_getpid>

0800bff8 <_malloc_usable_size_r>:
 800bff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffc:	1f18      	subs	r0, r3, #4
 800bffe:	2b00      	cmp	r3, #0
 800c000:	bfbc      	itt	lt
 800c002:	580b      	ldrlt	r3, [r1, r0]
 800c004:	18c0      	addlt	r0, r0, r3
 800c006:	4770      	bx	lr

0800c008 <__swhatbuf_r>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	460c      	mov	r4, r1
 800c00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c010:	2900      	cmp	r1, #0
 800c012:	b096      	sub	sp, #88	@ 0x58
 800c014:	4615      	mov	r5, r2
 800c016:	461e      	mov	r6, r3
 800c018:	da0d      	bge.n	800c036 <__swhatbuf_r+0x2e>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c020:	f04f 0100 	mov.w	r1, #0
 800c024:	bf14      	ite	ne
 800c026:	2340      	movne	r3, #64	@ 0x40
 800c028:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c02c:	2000      	movs	r0, #0
 800c02e:	6031      	str	r1, [r6, #0]
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	b016      	add	sp, #88	@ 0x58
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	466a      	mov	r2, sp
 800c038:	f000 f848 	bl	800c0cc <_fstat_r>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	dbec      	blt.n	800c01a <__swhatbuf_r+0x12>
 800c040:	9901      	ldr	r1, [sp, #4]
 800c042:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c046:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c04a:	4259      	negs	r1, r3
 800c04c:	4159      	adcs	r1, r3
 800c04e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c052:	e7eb      	b.n	800c02c <__swhatbuf_r+0x24>

0800c054 <__smakebuf_r>:
 800c054:	898b      	ldrh	r3, [r1, #12]
 800c056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c058:	079d      	lsls	r5, r3, #30
 800c05a:	4606      	mov	r6, r0
 800c05c:	460c      	mov	r4, r1
 800c05e:	d507      	bpl.n	800c070 <__smakebuf_r+0x1c>
 800c060:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	6123      	str	r3, [r4, #16]
 800c068:	2301      	movs	r3, #1
 800c06a:	6163      	str	r3, [r4, #20]
 800c06c:	b003      	add	sp, #12
 800c06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c070:	ab01      	add	r3, sp, #4
 800c072:	466a      	mov	r2, sp
 800c074:	f7ff ffc8 	bl	800c008 <__swhatbuf_r>
 800c078:	9f00      	ldr	r7, [sp, #0]
 800c07a:	4605      	mov	r5, r0
 800c07c:	4639      	mov	r1, r7
 800c07e:	4630      	mov	r0, r6
 800c080:	f7fe fe06 	bl	800ac90 <_malloc_r>
 800c084:	b948      	cbnz	r0, 800c09a <__smakebuf_r+0x46>
 800c086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c08a:	059a      	lsls	r2, r3, #22
 800c08c:	d4ee      	bmi.n	800c06c <__smakebuf_r+0x18>
 800c08e:	f023 0303 	bic.w	r3, r3, #3
 800c092:	f043 0302 	orr.w	r3, r3, #2
 800c096:	81a3      	strh	r3, [r4, #12]
 800c098:	e7e2      	b.n	800c060 <__smakebuf_r+0xc>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	6020      	str	r0, [r4, #0]
 800c09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	9b01      	ldr	r3, [sp, #4]
 800c0a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c0aa:	b15b      	cbz	r3, 800c0c4 <__smakebuf_r+0x70>
 800c0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f000 f81d 	bl	800c0f0 <_isatty_r>
 800c0b6:	b128      	cbz	r0, 800c0c4 <__smakebuf_r+0x70>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	f043 0301 	orr.w	r3, r3, #1
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	431d      	orrs	r5, r3
 800c0c8:	81a5      	strh	r5, [r4, #12]
 800c0ca:	e7cf      	b.n	800c06c <__smakebuf_r+0x18>

0800c0cc <_fstat_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	@ (800c0ec <_fstat_r+0x20>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f7f5 f88b 	bl	80011f4 <_fstat>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <_fstat_r+0x1c>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b103      	cbz	r3, 800c0e8 <_fstat_r+0x1c>
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	2400083c 	.word	0x2400083c

0800c0f0 <_isatty_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d06      	ldr	r5, [pc, #24]	@ (800c10c <_isatty_r+0x1c>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	f7f5 f88a 	bl	8001214 <_isatty>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_isatty_r+0x1a>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_isatty_r+0x1a>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	2400083c 	.word	0x2400083c

0800c110 <_init>:
 800c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c112:	bf00      	nop
 800c114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c116:	bc08      	pop	{r3}
 800c118:	469e      	mov	lr, r3
 800c11a:	4770      	bx	lr

0800c11c <_fini>:
 800c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11e:	bf00      	nop
 800c120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c122:	bc08      	pop	{r3}
 800c124:	469e      	mov	lr, r3
 800c126:	4770      	bx	lr
